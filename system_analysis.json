{
  "analysis": {
    "file_groups": {
      "test_files": [
        "quick_debug_test.py",
        "test_all_pages.py",
        "test_complete_system.py",
        "test_corrected_routes.py",
        "test_debug_system.py",
        "test_final_complete.py",
        "test_login_csrf_correct.py",
        "test_login_detailed.py",
        "test_login_form_debug.py",
        "test_login_intelligent.py",
        "test_login_no_csrf.py",
        "test_login_simple.py",
        "test_postgresql.py",
        "test_requirements.py",
        "test_system_complete.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_comments.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_computed.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_diffs.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_fks.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_identity.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_environment.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_op.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_builder.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_builder_registry.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_css.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_dammit.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_element.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_filter.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_formatter.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_fuzz.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_html5lib.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_htmlparser.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_lxml.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_navigablestring.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_pageelement.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_soup.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_tag.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_tree.py",
        ".venv\\Lib\\site-packages\\click\\testing.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\ansitowin32_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\ansi_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\isatty_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
        ".venv\\Lib\\site-packages\\flask\\testing.py",
        ".venv\\Lib\\site-packages\\flask_login\\test_client.py",
        ".venv\\Lib\\site-packages\\fontTools\\misc\\testTools.py",
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatableTestContourOrder.py",
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatableTestStartingPoint.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_contextvars.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_cpp.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_extension_interface.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_gc.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_generator.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_generator_nested.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet_trash.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_leaks.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_stack_saved.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_throw.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_tracing.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_version.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_weakref.py",
        ".venv\\Lib\\site-packages\\jinja2\\tests.py",
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\conftest.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_afm.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_agg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_agg_filter.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_animation.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_api.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_arrow_patches.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_artist.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_axes.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backends_interactive.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_bases.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_cairo.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_gtk3.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_macosx.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_nbagg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pdf.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pgf.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_ps.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_qt.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_svg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_template.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tk.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tools.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_webagg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_basic.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_bbox_tight.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_category.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cbook.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_collections.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colorbar.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colors.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_compare_images.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_constrainedlayout.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_container.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_contour.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cycles.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dates.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_determinism.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_doc.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dviread.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_figure.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_fontconfig_pattern.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_font_manager.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ft2font.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_getattr.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_gridspec.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_image.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_legend.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_lines.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_marker.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mathtext.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_matplotlib.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mlab.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_offsetbox.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_patches.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_path.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_patheffects.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_pickle.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_png.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_polar.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_preprocess_data.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_pyplot.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_quiver.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_rcparams.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_sankey.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_scale.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_simplification.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_skew.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_sphinxext.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_spines.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_streamplot.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_style.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_subplots.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_table.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_testing.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_texmanager.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_text.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_textpath.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ticker.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_tightlayout.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_transforms.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_triangulation.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ttconv.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_type1font.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_units.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_usetex.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_widgets.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\tests\\test_axes_grid1.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_angle_helper.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_axislines.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_axis_artist.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_floating_axes.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_grid_finder.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_grid_helper_curvelinear.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_art3d.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_axes3d.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_legend3d.py",
        ".venv\\Lib\\site-packages\\numpy\\conftest.py",
        ".venv\\Lib\\site-packages\\numpy\\_pytesttester.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_build_ext.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt_conf.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_exec_command.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_gnu.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_intel.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_nagfor.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_from_template.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_log.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_mingw32ccompiler.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_misc_util.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_npy_pkg_config.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_shell_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_system_info.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_abstract_interface.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_array_from_pyobj.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_assumed_shape.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_block_docstring.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_callback.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_character.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_common.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_crackfortran.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_data.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_docs.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2cmap.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2py2e.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_isoc.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_kind.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_mixed.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_modules.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_parameter.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_pyf_src.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_quoted_character.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_character.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_complex.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_integer.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_logical.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_real.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_routines.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_semicolon_split.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_size.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_string.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_symbolic.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_value_attrspec.py",
        ".venv\\Lib\\site-packages\\numpy\\fft\\tests\\test_helper.py",
        ".venv\\Lib\\site-packages\\numpy\\fft\\tests\\test_pocketfft.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraypad.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraysetops.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arrayterator.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_array_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_format.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_function_base.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_histograms.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_index_tricks.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_io.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_loadtxt.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_mixins.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_nanfunctions.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_packbits.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_polynomial.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_recfunctions.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_shape_base.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_stride_tricks.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_twodim_base.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_type_check.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_ufunclike.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__datasource.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__iotools.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__version.py",
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_linalg.py",
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\testutils.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_arrayobject.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_core.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_extras.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_mrecords.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_old_ma.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_subclassing.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_defmatrix.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_interaction.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_masked_matrix.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_matrix_linalg.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_multiarray.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_numeric.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_chebyshev.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_classes.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_hermite.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_hermite_e.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_laguerre.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_legendre.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polynomial.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polyutils.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_printing.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_symbol.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_direct.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_extending.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937_regressions.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_random.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_seed_sequence.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_smoke.py",
        ".venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_configtool.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_ctypeslib.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_lazyloading.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_matlib.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_config.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_version.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_public_api.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_reloading.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_scripts.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_warnings.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test__all__.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_isfile.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_runtime.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_typing.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_abc.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_api.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_argparse.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arraymethod.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arrayobject.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arrayprint.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_api_info.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_coercion.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_interface.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_floatingpoint_errors.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_unittests.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_conversion_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cpu_dispatcher.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cpu_features.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_custom_dtypes.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cython.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_datetime.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_defchararray.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dlpack.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_einsum.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_errstate.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_extint128.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_function_base.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_getlimits.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_half.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_hashtable.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexerrors.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexing.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_item_selection.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_limited_api.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_longdouble.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_machar.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_memmap.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_overlap.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_policy.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multithreading.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nditer.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nep50_promotions.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numeric.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numerictypes.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_overrides.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_print.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_protocols.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_records.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarbuffer.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarinherit.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarmath.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarprint.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalar_ctors.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalar_methods.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_shape_base.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd_module.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_stringdtype.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_strings.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_ufunc.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_accuracy.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_complex.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_unicode.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test__exceptions.py",
        ".venv\\Lib\\site-packages\\numpy\\_pyinstaller\\tests\\test_pyinstaller.py",
        ".venv\\Lib\\site-packages\\pandas\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\testing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_aggregation.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_algos.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_downstream.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_errors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_expressions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_flags.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_multilevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_nanops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_optional_dependency.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_register_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_sorting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_types.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply_relabeling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_transform.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_invalid_arg.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply_relabeling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_transform.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_str.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_array_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_datetime64.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_numeric.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_object.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_timedelta64.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_ndarray_backed.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_timedeltas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_comparison.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_construction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_logical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_reduction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_algos.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_analytics.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_operators.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_sorting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_warnings.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_comparison.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_construction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_contains.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_to_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_comparison.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_construction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_reduction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arrow_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_arrow_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_arithmetics.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_combine_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_libsparse.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_unary.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string_arrow.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_conversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_misc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_transpose.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_eval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_config.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_localization.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\construction\\test_extract_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_clip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_core_functionalities.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_functions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_internals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_interp_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_methods.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_util.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_datetimeindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_periodindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_timedeltaindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_generic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_inference.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_can_hold_element.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_from_scalar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_ndarray.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_object_arr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_dict_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_downcast.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_find_common_type.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_infer_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_infer_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_maybe_box_native.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_promote.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_arrow.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_extension.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_masked.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_sparse.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\array_with_attr\\test_array_with_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\decimal\\test_decimal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\json\\test_json.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\list\\test_list.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_alter_axes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_block_internals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_iteration.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_logical_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_nonunique_indexes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_npfuncs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_query_eval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_repr_info.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_stack_unstack.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_ufunc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_unary.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_validate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_dict.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_records.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_coercion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_delitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_get.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_getitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_get_value.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_mask.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_set_value.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_where.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_xs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_add_prefix_suffix.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_align.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_assign.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_at_time.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_between_time.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_clip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine_first.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_compare.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_convert_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_copy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_count.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_cov_corr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_describe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_diff.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dot.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_droplevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dropna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_duplicated.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_explode.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_filter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_first_and_last.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_first_valid_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_get_numeric_data.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_head_tail.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_infer_objects.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_interpolate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isetitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isin.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_is_homogeneous_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_iterrows.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_matmul.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_nlargest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pct_change.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pipe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rank.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex_like.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename_axis.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reorder_levels.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reset_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_round.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sample.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_select_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_set_axis.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_set_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_size.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_swapaxes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_swaplevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_csv.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_dict.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_dict_of_blocks.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_records.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_timestamp.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_transpose.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_truncate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_tz_convert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_tz_localize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_update.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_duplicate_labels.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_finalize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_generic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_label_or_level_utils.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_to_xarray.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_any_all.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply_mutate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_bin_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_counting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_filters.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_dropna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_shift_diff.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_grouping.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_index_as_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_libgroupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_min_max.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_nth.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_nunique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_pipe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_raises.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_rank.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_sample.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_size.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_skew.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_timegrouper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_aggregate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_cython.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_other.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_transform.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_any_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_engines.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_frozen.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_index_new.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_numpy_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_old_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_reshape.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_where.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_category.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_drop_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_is_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_nat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_sort_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_date_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_delete.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_freq_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_misc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_npfuncs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_partial_slicing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_scalar_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_factorize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_isocalendar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_snap.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval_tree.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_analytics.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_conversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_copy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_drop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_equivalence.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_level_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_set.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_integrity.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_isin.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_lexsort.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_names.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_partial_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reshape.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_sorting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_numeric.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_freq_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_partial_slicing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_period_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_resolution.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_scalar_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_searchsorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_tools.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_factorize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_is_full.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_to_timestamp.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_delete.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_freq_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_scalar_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_searchsorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_factorize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_at.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_chaining_and_caching.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_check_indexer.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_coercion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_floats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iloc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_loc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_na_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_partial.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_scalar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\interval\\test_interval_new.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_chaining_and_caching.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_getitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_iloc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_indexing_slow.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_loc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_multiindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_partial.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_slice.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_sorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_impl.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_spec_conformance.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_utils.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_managers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_clipboard.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_compression.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_feather.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_fsspec.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_gcs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_html.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_orc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_parquet.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_s3.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_spss.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_stata.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_user_agent.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odf.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odswriter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_openpyxl.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_readers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_style.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_writers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_xlrd.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_xlsxwriter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_console.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_css.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_eng_formatting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_format.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_info.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_printing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_series_info.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_csv.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_excel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_html.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_latex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_markdown.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_bar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_exceptions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_format.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_highlight.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_matplotlib.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_non_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_style.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_tooltip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_to_latex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_to_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_compression.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_deprecated_kwargs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_json_table_schema.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_json_table_schema_ext_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_normalize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_pandas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_readlines.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_ujson.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_comment.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_compression.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_concatenate_chunks.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_converters.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_c_parser_only.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_dialect.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_encoding.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_header.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_index_col.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_mangle_dupes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_multi_thread.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_na_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_network.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_parse_dates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_python_parser_only.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_quoting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_read_fwf.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_skiprows.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_textreader.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_unsupported.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_upcast.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_chunksize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_common_basic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_data_list.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_decimal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_file_buffer_url.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_float.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_inf.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_ints.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_iterator.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_read_errors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_verbose.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_dtypes_basic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_empty.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_parse_dates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_strings.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_usecols_basic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_complex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_errors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_file_handling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_keys.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_put.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_pytables_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_read.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_retain_attributes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_round_trip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_select.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_store.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_time_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_byteswap.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas7bdat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_xport.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_to_xml.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_hashtable.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_lib.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_backend.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_boxplot_method.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_converter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_hist_method.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_misc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_style.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_color.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_legend.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_subplots.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_hist_box_by.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_stat_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_datetime_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_period_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resampler_grouper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resample_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_time_grouper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_crosstab.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_cut.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_from_dummies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_get_dummies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_melt.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot_multilevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_qcut.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_union_categoricals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_util.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_dataframe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_datetimes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_empty.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_invalid.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_sort.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_cross.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_index_as_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_ordered.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_multi.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_nat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_na_scalar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_comparisons.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_rendering.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timestamp.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_unary_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_iteration.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_logical_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_npfuncs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_ufunc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_unary.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_validate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_cat_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_dt_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_sparse_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_str_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_delitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_get.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_getitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_mask.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_set_value.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_where.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_xs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_add_prefix_suffix.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_align.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_argsort.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_autocorr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_between.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_clip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_combine.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_combine_first.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_compare.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_convert_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_copy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_count.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_cov_corr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_describe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_diff.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_drop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_dropna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_drop_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_duplicated.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_explode.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_get_numeric_data.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_head_tail.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_infer_objects.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_interpolate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isin.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_is_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_is_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_item.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_matmul.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nlargest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nunique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_pct_change.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_pop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rank.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex_like.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rename.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rename_axis.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reset_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_round.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_searchsorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_set_name.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_size.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_sort_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_sort_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_tolist.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_csv.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_dict.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_truncate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_tz_localize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_unstack.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_update.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_view.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_case_justify.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_cat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_extract.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_find_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_get_dummies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_split_partition.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_strings.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_string_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_numeric.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_time.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_frequencies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_freq_code.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_inference.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_calendar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_federal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_holiday.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_observance.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_day.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_hour.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_month.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_quarter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_year.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_day.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_hour.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_month.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_dst.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_easter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_fiscal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_month.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets_properties.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_quarter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_ticks.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_week.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_year.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_array_to_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_ccalendar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_conversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_fields.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_libfrequencies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_liboffsets.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_np_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parse_iso8601.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parsing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_period_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_resolution.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_timedeltas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_to_offset.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_tzconversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_almost_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_attr_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_categorical_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_extension_array_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_frame_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_index_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_interval_array_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_numpy_array_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_produces_warning.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_series_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate_kwarg.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate_nonkeyword_arguments.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_doc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_hashing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_make_objects.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_rewrite_warning.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_safe_import.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_shares_memory.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_show_versions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_util.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_args.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_args_and_kwargs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_inclusive.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_kwargs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_base_indexer.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_cython_aggregations.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_ewm.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_expanding.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_online.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_pairwise.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_functions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_skew_kurt.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_timeseries_window.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_win_type.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_ewm.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_expanding.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_rolling.py",
        ".venv\\Lib\\site-packages\\pandas\\util\\_tester.py",
        ".venv\\Lib\\site-packages\\pandas\\util\\_test_decorators.py",
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\testing.py",
        ".venv\\Lib\\site-packages\\pygments\\lexers\\testing.py",
        ".venv\\Lib\\site-packages\\pyparsing\\testing.py",
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\testdrawings.py",
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\testshapes.py",
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\test.py",
        ".venv\\Lib\\site-packages\\reportlab\\lib\\testutils.py",
        ".venv\\Lib\\site-packages\\seaborn\\_testing.py",
        ".venv\\Lib\\site-packages\\setuptools\\command\\test.py",
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\testing.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\pytestplugin.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_ddl.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_insert.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_reflection.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_results.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_select.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_sequence.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_types.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_unicode_ddl.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py",
        ".venv\\Lib\\site-packages\\werkzeug\\test.py",
        ".venv\\Lib\\site-packages\\werkzeug\\testapp.py",
        "app\\attestation_upload_service.py",
        "app\\local_attestation_service.py",
        "backup_security_20250728_134443\\app_code\\attestation_upload_service.py",
        "backup_security_20250728_134443\\app_code\\local_attestation_service.py",
        "backup_security_20250728_134443\\test_logs\\test_production_deployment.py"
      ],
      "debug_files": [
        "debug_500_error.py",
        "debug_csrf_detailed.py",
        "quick_debug_test.py",
        "test_debug_system.py",
        "test_login_form_debug.py",
        "wsgi_debug.py",
        ".venv\\Lib\\site-packages\\coverage\\debug.py",
        ".venv\\Lib\\site-packages\\flask\\debughelpers.py",
        ".venv\\Lib\\site-packages\\fontTools\\feaLib\\lookupDebugInfo.py",
        ".venv\\Lib\\site-packages\\gunicorn\\debug.py",
        ".venv\\Lib\\site-packages\\jinja2\\debug.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\debug.py",
        ".venv\\Lib\\site-packages\\psycopg\\pq\\_debug.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\debug.py",
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py",
        "app\\debug_system.py"
      ],
      "check_files": [
        "check_admin_user.py",
        ".venv\\Lib\\site-packages\\contourpy\\typecheck.py",
        ".venv\\Lib\\site-packages\\dropbox\\check.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\leakcheck.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\_type_check_impl.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_type_check.py",
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\check.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_check_indexer.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\self_outdated_check.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\check.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\check.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\check.py"
      ],
      "fix_files": [
        "fix_csrf_config.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\fixtures.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\_autogen_fixtures.py",
        ".venv\\Lib\\site-packages\\fontTools\\misc\\fixedTools.py",
        ".venv\\Lib\\site-packages\\mako\\testing\\fixtures.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_add_prefix_suffix.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_add_prefix_suffix.py",
        ".venv\\Lib\\site-packages\\werkzeug\\middleware\\proxy_fix.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "backup_files": [
        "create_security_backup.py",
        "app\\local_backup.py",
        "app\\admin\\backup_dashboard_local.py",
        "backup_security_20250728_134443\\app_code\\local_backup.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup_dashboard_local.py",
        "scripts\\backup_scheduler.py"
      ],
      "overtime_files": [
        "app\\overtime_controller.py",
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\overtime_controller.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "user_files": [
        "check_admin_user.py",
        ".venv\\Lib\\site-packages\\dropbox\\users.py",
        ".venv\\Lib\\site-packages\\dropbox\\users_common.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\user_array.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\_user_array_impl.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\lib_user_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_user_agent.py",
        ".venv\\Lib\\site-packages\\werkzeug\\user_agent.py"
      ],
      "auth_files": [
        ".venv\\Lib\\site-packages\\dropbox\\auth.py",
        ".venv\\Lib\\site-packages\\dropbox\\oauth.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\auth.py",
        ".venv\\Lib\\site-packages\\requests\\auth.py",
        ".venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py"
      ],
      "config_files": [
        "config.py",
        "fix_csrf_config.py",
        ".venv\\Lib\\site-packages\\alembic\\config.py",
        ".venv\\Lib\\site-packages\\contourpy\\util\\_build_config.py",
        ".venv\\Lib\\site-packages\\coverage\\config.py",
        ".venv\\Lib\\site-packages\\coverage\\tomlconfig.py",
        ".venv\\Lib\\site-packages\\flask\\config.py",
        ".venv\\Lib\\site-packages\\flask_login\\config.py",
        ".venv\\Lib\\site-packages\\fontTools\\misc\\configTools.py",
        ".venv\\Lib\\site-packages\\gunicorn\\config.py",
        ".venv\\Lib\\site-packages\\mako\\testing\\config.py",
        ".venv\\Lib\\site-packages\\mako\\testing\\_config.py",
        ".venv\\Lib\\site-packages\\matplotlib\\fontconfig_pattern.py",
        ".venv\\Lib\\site-packages\\matplotlib\\_fontconfig_pattern.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_fontconfig_pattern.py",
        ".venv\\Lib\\site-packages\\numpy\\_configtool.py",
        ".venv\\Lib\\site-packages\\numpy\\__config__.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\npy_pkg_config.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\command\\config.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\command\\config_compiler.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_npy_pkg_config.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_configtool.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_config.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\ufunc_config.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\_ufunc_config.py",
        ".venv\\Lib\\site-packages\\pandas\\core\\config_init.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_config.py",
        ".venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\configuration.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\configuration.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\locations\\_sysconfig.py",
        ".venv\\Lib\\site-packages\\pygments\\lexers\\configs.py",
        ".venv\\Lib\\site-packages\\reportlab\\rl_config.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\config.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\sysconfig.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\config.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\config.py",
        "app\\logging_config.py",
        "backup_security_20250728_134443\\app_code\\logging_config.py",
        "backup_security_20250728_134443\\config\\config.py"
      ],
      "app_files": [
        "app.py",
        ".venv\\Lib\\site-packages\\flask\\app.py",
        ".venv\\Lib\\site-packages\\flask\\wrappers.py",
        ".venv\\Lib\\site-packages\\flask_limiter\\wrappers.py",
        ".venv\\Lib\\site-packages\\gunicorn\\app\\pasterapp.py",
        ".venv\\Lib\\site-packages\\gunicorn\\app\\wsgiapp.py",
        ".venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        ".venv\\Lib\\site-packages\\pandas\\io\\parsers\\arrow_parser_wrapper.py",
        ".venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply_relabeling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply_relabeling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply_mutate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_apply.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\appdirs.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\filewrapper.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\wrapper.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\dependency_groups\\_pip_wrapper.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\_mapping.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\_mapping.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\styles\\_mapping.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\appengine.py",
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_appengine_environ.py",
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\appdirs.py",
        ".venv\\Lib\\site-packages\\psycopg\\_wrappers.py",
        ".venv\\Lib\\site-packages\\pygments\\formatters\\_mapping.py",
        ".venv\\Lib\\site-packages\\pygments\\lexers\\_mapping.py",
        ".venv\\Lib\\site-packages\\pygments\\styles\\_mapping.py",
        ".venv\\Lib\\site-packages\\seaborn\\external\\appdirs.py",
        ".venv\\Lib\\site-packages\\setuptools\\config\\_apply_pyprojecttoml.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\apply.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapped_collection.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapper.py",
        ".venv\\Lib\\site-packages\\stone\\backends\\python_type_mapping.py",
        ".venv\\Lib\\site-packages\\werkzeug\\testapp.py",
        ".venv\\Lib\\site-packages\\wrapt\\wrappers.py",
        ".venv\\Lib\\site-packages\\xlsxwriter\\app.py",
        "backup_security_20250728_134443\\config\\app.py"
      ]
    },
    "routes": {
      ".venv\\Lib\\site-packages\\flask\\ctx.py": [
        "/",
        "/",
        "/",
        "/"
      ],
      ".venv\\Lib\\site-packages\\flask\\helpers.py": [
        "/stream",
        "/stream",
        "/uploads/<path:name>",
        "/stream",
        "/stream",
        "/uploads/<path:name>"
      ],
      ".venv\\Lib\\site-packages\\flask\\scaffold.py": [
        "/",
        "/",
        "/",
        "/"
      ],
      ".venv\\Lib\\site-packages\\flask_limiter\\extension.py": [
        "/",
        "...",
        "...",
        "/",
        "...",
        "..."
      ],
      ".venv\\Lib\\site-packages\\flask_login\\utils.py": [
        "/post",
        "/post"
      ],
      ".venv\\Lib\\site-packages\\flask_wtf\\csrf.py": [
        "/some-view",
        "/some-view"
      ],
      "app\\debug_blueprint.py": [
        "/",
        "/api/errors",
        "/api/errors/clear",
        "/api/stats",
        "/api/test-error",
        "/logs",
        "/api/logs",
        "/realtime",
        "/api/realtime"
      ],
      "app\\debug_blueprint_fixed.py": [
        "/",
        "/api/errors",
        "/api/errors/clear",
        "/api/stats",
        "/api/test-error",
        "/logs",
        "/api/logs",
        "/realtime",
        "/api/realtime"
      ],
      "app\\error_dashboard.py": [
        "/",
        "/api/stats",
        "/api/recent/<int:hours>",
        "/api/clear-logs"
      ],
      "app\\admin\\hour_bank_routes.py": [
        "/hour-bank",
        "/hour-bank/users",
        "/hour-bank/user/<int:user_id>",
        "/hour-bank/adjust/<int:user_id>",
        "/hour-bank/transfer",
        "/overtime-requests",
        "/overtime-request/<int:request_id>/approve",
        "/hour-compensations",
        "/hour-compensation/<int:compensation_id>/approve",
        "/hour-bank/settings",
        "/hour-bank/reports",
        "/api/hour-bank/stats"
      ],
      "app\\admin\\overtime_admin.py": [
        "/overtime-control",
        "/adjust-user-hours",
        "/api/users-with-balances",
        "/api/refresh-users-list",
        "/overtime-batch-process",
        "/overtime-analytics",
        "/overtime-settings",
        "/overtime-reports",
        "/user-overtime-summary/<int:user_id>",
        "/user-hours-history/<int:user_id>",
        "/edit-user-hours/<int:user_id>",
        "/update-user-hours/<int:user_id>",
        "/get_all_users_data"
      ],
      "app\\admin\\routes.py": [
        "/dashboard",
        "/usuarios",
        "/usuario/<int:id>",
        "/editar_usuario/<int:id>",
        "/criar_usuario",
        "/desativar_usuario/<int:id>",
        "/ativar_usuario/<int:id>",
        "/deletar_usuario/<int:id>",
        "/atestados",
        "/atestado/<int:id>",
        "/aprovar_atestado/<int:id>",
        "/rejeitar_atestado/<int:id>",
        "/notificacoes",
        "/relatorios",
        "/backup",
        "/backup-completo",
        "/backup-config",
        "/logs",
        "/classes-trabalho",
        "/classes-trabalho/nova",
        "/classes-trabalho/<int:id>/editar",
        "/classes-trabalho/<int:id>/toggle-status",
        "/classes-trabalho/<int:id>/atribuir",
        "/classes-trabalho/<int:id>/usuarios",
        "/migrar_classes_padrao",
        "/registros-ponto",
        "/user-approvals",
        "/approve-user/<int:request_id>",
        "/user-approval-details/<int:request_id>",
        "/bulk-approve-users",
        "/attestation-management",
        "/sync-local-attestations",
        "/cleanup-orphaned-files",
        "/user-attestation-files/<int:user_id>",
        "/get-local-download-link",
        "/delete-local-file",
        "/test-local-connection",
        "/update-local-config",
        "/generate-local-auth-url",
        "/exchange-local-auth-code",
        "/update-shared-link",
        "/system-config",
        "/security-logs"
      ],
      "app\\admin\\backup\\error_log.py": [
        "/error-log",
        "/api/diagnosis"
      ],
      "app\\admin\\backup\\routes.py": [
        "/debug",
        "/test-no-auth",
        "/test-simple",
        "/dashboard",
        "/api/storage-info",
        "/api/list-backups",
        "/create",
        "/delete/<backup_name>",
        "/download/<backup_name>",
        "/delete-multiple",
        "/cleanup",
        "/auto-backup-config",
        "/trigger-auto-backup",
        "/settings"
      ],
      "app\\api\\routes.py": [
        "/status",
        "/registro_ponto",
        "/meus_registros",
        "/notificacoes",
        "/marcar_notificacao_lida/<int:id>",
        "/estatisticas",
        "/usuarios",
        "/users",
        "/time-records"
      ],
      "app\\auth\\routes.py": [
        "/login",
        "/logout",
        "/register",
        "/forgot_password",
        "/reset_password/<int:user_id>"
      ],
      "app\\files\\routes.py": [
        "/manager",
        "/upload",
        "/download/<path:filename>",
        "/create-folder",
        "/delete/<path:filename>",
        "/move",
        "/rename",
        "/create-zip",
        "/info/<path:filename>"
      ],
      "app\\main\\hour_bank_routes.py": [
        "/my-hour-bank",
        "/my-hour-bank/history",
        "/overtime-request",
        "/my-overtime-requests",
        "/overtime-request/<int:request_id>/cancel",
        "/request-compensation",
        "/my-compensations",
        "/compensation/<int:compensation_id>/cancel",
        "/my-hour-bank/settings",
        "/api/my-hour-bank/chart-data",
        "/api/overtime-quick-request",
        "/api/compensation-quick-request"
      ],
      "app\\main\\routes.py": [
        "/health",
        "/api/notifications/recent",
        "/",
        "/index",
        "/dashboard",
        "/ponto",
        "/meus_registros",
        "/meus-registros",
        "/editar_registro/<int:id>",
        "/perfil",
        "/atestados",
        "/upload_atestado",
        "/download_atestado/<int:id>",
        "/cancelar_atestado/<int:id>",
        "/notificacoes",
        "/marcar_notificacao_lida/<int:id>",
        "/deletar_notificacao/<int:id>",
        "/marcar_todas_lidas",
        "/api/registrar_ponto",
        "/api/notificacoes_nao_lidas",
        "/privacy-policy",
        "/terms-of-service",
        "/uploads/<path:filename>"
      ],
      "backup_security_20250728_134443\\app_code\\error_dashboard.py": [
        "/",
        "/api/stats",
        "/api/recent/<int:hours>",
        "/api/clear-logs"
      ],
      "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py": [
        "/hour-bank",
        "/hour-bank/users",
        "/hour-bank/user/<int:user_id>",
        "/hour-bank/adjust/<int:user_id>",
        "/hour-bank/transfer",
        "/overtime-requests",
        "/overtime-request/<int:request_id>/approve",
        "/hour-compensations",
        "/hour-compensation/<int:compensation_id>/approve",
        "/hour-bank/settings",
        "/hour-bank/reports",
        "/api/hour-bank/stats"
      ],
      "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py": [
        "/overtime-control",
        "/adjust-user-hours",
        "/api/users-with-balances",
        "/api/refresh-users-list",
        "/overtime-batch-process",
        "/overtime-analytics",
        "/overtime-settings",
        "/overtime-reports",
        "/user-overtime-summary/<int:user_id>",
        "/user-hours-history/<int:user_id>",
        "/edit-user-hours/<int:user_id>",
        "/update-user-hours/<int:user_id>",
        "/get_all_users_data"
      ],
      "backup_security_20250728_134443\\app_code\\admin\\routes.py": [
        "/dashboard",
        "/usuarios",
        "/usuario/<int:id>",
        "/editar_usuario/<int:id>",
        "/criar_usuario",
        "/desativar_usuario/<int:id>",
        "/ativar_usuario/<int:id>",
        "/deletar_usuario/<int:id>",
        "/atestados",
        "/atestado/<int:id>",
        "/aprovar_atestado/<int:id>",
        "/rejeitar_atestado/<int:id>",
        "/notificacoes",
        "/relatorios",
        "/backup",
        "/backup-completo",
        "/backup-config",
        "/logs",
        "/classes-trabalho",
        "/classes-trabalho/nova",
        "/classes-trabalho/<int:id>/editar",
        "/classes-trabalho/<int:id>/toggle-status",
        "/classes-trabalho/<int:id>/atribuir",
        "/classes-trabalho/<int:id>/usuarios",
        "/migrar_classes_padrao",
        "/registros-ponto",
        "/user-approvals",
        "/approve-user/<int:request_id>",
        "/user-approval-details/<int:request_id>",
        "/bulk-approve-users",
        "/attestation-management",
        "/sync-local-attestations",
        "/cleanup-orphaned-files",
        "/user-attestation-files/<int:user_id>",
        "/get-local-download-link",
        "/delete-local-file",
        "/test-local-connection",
        "/update-local-config",
        "/generate-local-auth-url",
        "/exchange-local-auth-code",
        "/update-shared-link",
        "/system-config",
        "/security-logs"
      ],
      "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py": [
        "/error-log",
        "/api/diagnosis"
      ],
      "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py": [
        "/debug",
        "/test-no-auth",
        "/test-simple",
        "/dashboard",
        "/api/storage-info",
        "/api/list-backups",
        "/create",
        "/delete/<backup_name>",
        "/download/<backup_name>",
        "/delete-multiple",
        "/cleanup",
        "/auto-backup-config",
        "/trigger-auto-backup",
        "/settings"
      ],
      "backup_security_20250728_134443\\app_code\\api\\routes.py": [
        "/status",
        "/registro_ponto",
        "/meus_registros",
        "/notificacoes",
        "/marcar_notificacao_lida/<int:id>",
        "/estatisticas",
        "/usuarios"
      ],
      "backup_security_20250728_134443\\app_code\\auth\\routes.py": [
        "/login",
        "/logout",
        "/register",
        "/forgot_password",
        "/reset_password/<int:user_id>"
      ],
      "backup_security_20250728_134443\\app_code\\files\\routes.py": [
        "/manager",
        "/upload",
        "/download/<path:filename>",
        "/create-folder",
        "/delete/<path:filename>",
        "/move",
        "/rename",
        "/create-zip",
        "/info/<path:filename>"
      ],
      "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py": [
        "/my-hour-bank",
        "/my-hour-bank/history",
        "/overtime-request",
        "/my-overtime-requests",
        "/overtime-request/<int:request_id>/cancel",
        "/request-compensation",
        "/my-compensations",
        "/compensation/<int:compensation_id>/cancel",
        "/my-hour-bank/settings",
        "/api/my-hour-bank/chart-data",
        "/api/overtime-quick-request",
        "/api/compensation-quick-request"
      ],
      "backup_security_20250728_134443\\app_code\\main\\routes.py": [
        "/health",
        "/api/notifications/recent",
        "/",
        "/index",
        "/dashboard",
        "/ponto",
        "/meus_registros",
        "/editar_registro/<int:id>",
        "/perfil",
        "/atestados",
        "/upload_atestado",
        "/download_atestado/<int:id>",
        "/cancelar_atestado/<int:id>",
        "/notificacoes",
        "/marcar_notificacao_lida/<int:id>",
        "/deletar_notificacao/<int:id>",
        "/marcar_todas_lidas",
        "/api/registrar_ponto",
        "/api/notificacoes_nao_lidas",
        "/privacy-policy",
        "/terms-of-service",
        "/uploads/<path:filename>"
      ]
    },
    "duplicate_routes": {
      "/": [
        ".venv\\Lib\\site-packages\\flask\\ctx.py",
        ".venv\\Lib\\site-packages\\flask\\ctx.py",
        ".venv\\Lib\\site-packages\\flask\\ctx.py",
        ".venv\\Lib\\site-packages\\flask\\ctx.py",
        ".venv\\Lib\\site-packages\\flask\\scaffold.py",
        ".venv\\Lib\\site-packages\\flask\\scaffold.py",
        ".venv\\Lib\\site-packages\\flask\\scaffold.py",
        ".venv\\Lib\\site-packages\\flask\\scaffold.py",
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py",
        "app\\error_dashboard.py",
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\error_dashboard.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/stream": [
        ".venv\\Lib\\site-packages\\flask\\helpers.py",
        ".venv\\Lib\\site-packages\\flask\\helpers.py",
        ".venv\\Lib\\site-packages\\flask\\helpers.py",
        ".venv\\Lib\\site-packages\\flask\\helpers.py"
      ],
      "/uploads/<path:name>": [
        ".venv\\Lib\\site-packages\\flask\\helpers.py",
        ".venv\\Lib\\site-packages\\flask\\helpers.py"
      ],
      "...": [
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py"
      ],
      "/post": [
        ".venv\\Lib\\site-packages\\flask_login\\utils.py",
        ".venv\\Lib\\site-packages\\flask_login\\utils.py"
      ],
      "/some-view": [
        ".venv\\Lib\\site-packages\\flask_wtf\\csrf.py",
        ".venv\\Lib\\site-packages\\flask_wtf\\csrf.py"
      ],
      "/api/errors": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "/api/errors/clear": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "/api/stats": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py",
        "app\\error_dashboard.py",
        "backup_security_20250728_134443\\app_code\\error_dashboard.py"
      ],
      "/api/test-error": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "/logs": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py",
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/api/logs": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "/realtime": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "/api/realtime": [
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py"
      ],
      "/api/recent/<int:hours>": [
        "app\\error_dashboard.py",
        "backup_security_20250728_134443\\app_code\\error_dashboard.py"
      ],
      "/api/clear-logs": [
        "app\\error_dashboard.py",
        "backup_security_20250728_134443\\app_code\\error_dashboard.py"
      ],
      "/hour-bank": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-bank/users": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-bank/user/<int:user_id>": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-bank/adjust/<int:user_id>": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-bank/transfer": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/overtime-requests": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/overtime-request/<int:request_id>/approve": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-compensations": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-compensation/<int:compensation_id>/approve": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-bank/settings": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/hour-bank/reports": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/api/hour-bank/stats": [
        "app\\admin\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
      ],
      "/overtime-control": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/adjust-user-hours": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/api/users-with-balances": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/api/refresh-users-list": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/overtime-batch-process": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/overtime-analytics": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/overtime-settings": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/overtime-reports": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/user-overtime-summary/<int:user_id>": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/user-hours-history/<int:user_id>": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/edit-user-hours/<int:user_id>": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/update-user-hours/<int:user_id>": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/get_all_users_data": [
        "app\\admin\\overtime_admin.py",
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
      ],
      "/dashboard": [
        "app\\admin\\routes.py",
        "app\\admin\\backup\\routes.py",
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/usuarios": [
        "app\\admin\\routes.py",
        "app\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py"
      ],
      "/usuario/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/editar_usuario/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/criar_usuario": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/desativar_usuario/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/ativar_usuario/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/deletar_usuario/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/atestados": [
        "app\\admin\\routes.py",
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/atestado/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/aprovar_atestado/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/rejeitar_atestado/<int:id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/notificacoes": [
        "app\\admin\\routes.py",
        "app\\api\\routes.py",
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/relatorios": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/backup": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/backup-completo": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/backup-config": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/classes-trabalho": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/classes-trabalho/nova": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/classes-trabalho/<int:id>/editar": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/classes-trabalho/<int:id>/toggle-status": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/classes-trabalho/<int:id>/atribuir": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/classes-trabalho/<int:id>/usuarios": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/migrar_classes_padrao": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/registros-ponto": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/user-approvals": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/approve-user/<int:request_id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/user-approval-details/<int:request_id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/bulk-approve-users": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/attestation-management": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/sync-local-attestations": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/cleanup-orphaned-files": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/user-attestation-files/<int:user_id>": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/get-local-download-link": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/delete-local-file": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/test-local-connection": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/update-local-config": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/generate-local-auth-url": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/exchange-local-auth-code": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/update-shared-link": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/system-config": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/security-logs": [
        "app\\admin\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\routes.py"
      ],
      "/error-log": [
        "app\\admin\\backup\\error_log.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py"
      ],
      "/api/diagnosis": [
        "app\\admin\\backup\\error_log.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py"
      ],
      "/debug": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/test-no-auth": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/test-simple": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/api/storage-info": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/api/list-backups": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/create": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/delete/<backup_name>": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/download/<backup_name>": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/delete-multiple": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/cleanup": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/auto-backup-config": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/trigger-auto-backup": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/settings": [
        "app\\admin\\backup\\routes.py",
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
      ],
      "/status": [
        "app\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py"
      ],
      "/registro_ponto": [
        "app\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py"
      ],
      "/meus_registros": [
        "app\\api\\routes.py",
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/marcar_notificacao_lida/<int:id>": [
        "app\\api\\routes.py",
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/estatisticas": [
        "app\\api\\routes.py",
        "backup_security_20250728_134443\\app_code\\api\\routes.py"
      ],
      "/login": [
        "app\\auth\\routes.py",
        "backup_security_20250728_134443\\app_code\\auth\\routes.py"
      ],
      "/logout": [
        "app\\auth\\routes.py",
        "backup_security_20250728_134443\\app_code\\auth\\routes.py"
      ],
      "/register": [
        "app\\auth\\routes.py",
        "backup_security_20250728_134443\\app_code\\auth\\routes.py"
      ],
      "/forgot_password": [
        "app\\auth\\routes.py",
        "backup_security_20250728_134443\\app_code\\auth\\routes.py"
      ],
      "/reset_password/<int:user_id>": [
        "app\\auth\\routes.py",
        "backup_security_20250728_134443\\app_code\\auth\\routes.py"
      ],
      "/manager": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/upload": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/download/<path:filename>": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/create-folder": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/delete/<path:filename>": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/move": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/rename": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/create-zip": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/info/<path:filename>": [
        "app\\files\\routes.py",
        "backup_security_20250728_134443\\app_code\\files\\routes.py"
      ],
      "/my-hour-bank": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/my-hour-bank/history": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/overtime-request": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/my-overtime-requests": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/overtime-request/<int:request_id>/cancel": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/request-compensation": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/my-compensations": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/compensation/<int:compensation_id>/cancel": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/my-hour-bank/settings": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/api/my-hour-bank/chart-data": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/api/overtime-quick-request": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/api/compensation-quick-request": [
        "app\\main\\hour_bank_routes.py",
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
      ],
      "/health": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/api/notifications/recent": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/index": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/ponto": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/editar_registro/<int:id>": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/perfil": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/upload_atestado": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/download_atestado/<int:id>": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/cancelar_atestado/<int:id>": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/deletar_notificacao/<int:id>": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/marcar_todas_lidas": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/api/registrar_ponto": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/api/notificacoes_nao_lidas": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/privacy-policy": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/terms-of-service": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ],
      "/uploads/<path:filename>": [
        "app\\main\\routes.py",
        "backup_security_20250728_134443\\app_code\\main\\routes.py"
      ]
    },
    "function_groups": {
      "login_functions": {
        "analyze_page_errors.py": [
          "def login("
        ],
        "analyze_system_duplicates.py": [
          "def.*login.*\\("
        ],
        "test_all_pages.py": [
          "def login("
        ],
        "test_complete_system.py": [
          "def login("
        ],
        "test_corrected_routes.py": [
          "def login("
        ],
        "test_final_complete.py": [
          "def login("
        ],
        "test_login_csrf_correct.py": [
          "def test_login_with_csrf("
        ],
        "test_login_detailed.py": [
          "def test_login("
        ],
        "test_login_form_debug.py": [
          "def test_login_form_debug("
        ],
        "test_login_intelligent.py": [
          "def test_login_intelligent("
        ],
        "test_login_no_csrf.py": [
          "def test_login_without_csrf("
        ],
        "test_login_simple.py": [
          "def test_login("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\sharing.py": [
          "def is_login_required("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def is_logins(",
          "def login_fail_details(",
          "def login_success_details(",
          "def sso_add_login_url_details(",
          "def sso_change_login_url_details(",
          "def sso_remove_login_url_details(",
          "def is_login_fail_details(",
          "def is_login_success_details(",
          "def is_sso_add_login_url_details(",
          "def is_sso_change_login_url_details(",
          "def is_sso_remove_login_url_details(",
          "def get_login_fail_details(",
          "def get_login_success_details(",
          "def get_sso_add_login_url_details(",
          "def get_sso_change_login_url_details(",
          "def get_sso_remove_login_url_details(",
          "def login_fail(",
          "def login_success(",
          "def sso_add_login_url(",
          "def sso_change_login_url(",
          "def sso_remove_login_url(",
          "def is_login_fail(",
          "def is_login_success(",
          "def is_sso_add_login_url(",
          "def is_sso_change_login_url(",
          "def is_sso_remove_login_url(",
          "def get_login_fail(",
          "def get_login_success(",
          "def get_sso_add_login_url(",
          "def get_sso_change_login_url(",
          "def get_sso_remove_login_url(",
          "def is_login_fail(",
          "def is_login_success(",
          "def is_sso_add_login_url(",
          "def is_sso_change_login_url(",
          "def is_sso_remove_login_url("
        ],
        ".venv\\Lib\\site-packages\\flask_login\\login_manager.py": [
          "def _login_disabled(",
          "def _login_disabled("
        ],
        ".venv\\Lib\\site-packages\\flask_login\\utils.py": [
          "def expand_login_view(",
          "def login_url(",
          "def login_fresh(",
          "def login_remembered(",
          "def login_user(",
          "def confirm_login(",
          "def login_required(",
          "def fresh_login_required(",
          "def set_login_view("
        ],
        "app\\logging_config.py": [
          "def log_login_attempt("
        ],
        "app\\__init__.py": [
          "def configure_login_manager("
        ],
        "app\\auth\\routes.py": [
          "def login("
        ],
        "backup_security_20250728_134443\\app_code\\logging_config.py": [
          "def log_login_attempt("
        ],
        "backup_security_20250728_134443\\app_code\\__init__.py": [
          "def configure_login_manager("
        ],
        "backup_security_20250728_134443\\app_code\\auth\\routes.py": [
          "def login("
        ]
      },
      "test_functions": {
        "analyze_system_duplicates.py": [
          "def.*test.*\\(",
          "def identify_test_file_duplicates("
        ],
        "quick_debug_test.py": [
          "def quick_test("
        ],
        "test_all_pages.py": [
          "def test_route(",
          "def test_public_routes(",
          "def test_authenticated_routes(",
          "def test_admin_routes(",
          "def run_full_test("
        ],
        "test_complete_system.py": [
          "def test_page(",
          "def run_comprehensive_test("
        ],
        "test_corrected_routes.py": [
          "def test_page(",
          "def run_corrected_test("
        ],
        "test_debug_system.py": [
          "def test_debug_system("
        ],
        "test_final_complete.py": [
          "def test_page(",
          "def run_final_test("
        ],
        "test_login_csrf_correct.py": [
          "def test_login_with_csrf("
        ],
        "test_login_detailed.py": [
          "def test_login(",
          "def test_admin_access("
        ],
        "test_login_form_debug.py": [
          "def test_login_form_debug("
        ],
        "test_login_intelligent.py": [
          "def test_login_intelligent("
        ],
        "test_login_no_csrf.py": [
          "def test_login_without_csrf("
        ],
        "test_login_simple.py": [
          "def test_login("
        ],
        "test_postgresql.py": [
          "def test_postgresql_connection("
        ],
        "test_requirements.py": [
          "def test_imports("
        ],
        "test_system_complete.py": [
          "def test_imports(",
          "def test_app_creation(",
          "def test_database_models(",
          "def test_forms(",
          "def test_routes(",
          "def test_templates(",
          "def test_static_files(",
          "def test_configuration(",
          "def test_requirements("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\env.py": [
          "def _sqlite_testing_config(",
          "def _multi_dir_testing_config(",
          "def _no_sql_testing_config(",
          "def _testing_config(",
          "def _multidb_testing_config("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\util.py": [
          "def testing_engine("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_comments.py": [
          "def test_existing_table_comment_no_change(",
          "def test_add_table_comment(",
          "def test_remove_table_comment(",
          "def test_alter_table_comment(",
          "def test_existing_column_comment_no_change(",
          "def test_add_column_comment(",
          "def test_remove_column_comment(",
          "def test_alter_column_comment("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_computed.py": [
          "def test_add_computed_column(",
          "def test_remove_computed_column(",
          "def test_cant_change_computed_warning(",
          "def test_computed_unchanged("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_diffs.py": [
          "def test_all_existings_filled(",
          "def test_all_existings_filled_in_notnull(",
          "def test_all_existings_filled_in_comment(",
          "def test_all_existings_filled_in_server_default(",
          "def test_alter_column_autoincrement_none(",
          "def test_alter_column_autoincrement_pk_false(",
          "def test_alter_column_autoincrement_pk_implicit_true(",
          "def test_alter_column_autoincrement_pk_explicit_true(",
          "def test_alter_column_autoincrement_nonpk_false(",
          "def test_alter_column_autoincrement_nonpk_implicit_false(",
          "def test_alter_column_autoincrement_nonpk_explicit_true(",
          "def test_alter_column_autoincrement_compositepk_false(",
          "def test_alter_column_autoincrement_compositepk_implicit_false(",
          "def test_alter_column_autoincrement_compositepk_explicit_true("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_fks.py": [
          "def test_remove_fk(",
          "def test_add_fk(",
          "def test_no_change(",
          "def test_no_change_composite_fk(",
          "def test_casing_convention_changed_so_put_drops_first(",
          "def test_add_composite_fk_with_name(",
          "def test_remove_composite_fk(",
          "def test_add_fk_colkeys(",
          "def test_no_change_colkeys(",
          "def test_remove_connection_fk(",
          "def test_add_metadata_fk(",
          "def test_change_fk(",
          "def test_add_ondelete(",
          "def test_remove_ondelete(",
          "def test_nochange_ondelete(",
          "def test_add_onupdate(",
          "def test_remove_onupdate(",
          "def test_nochange_onupdate(",
          "def test_nochange_ondelete_restrict(",
          "def test_nochange_onupdate_restrict(",
          "def test_nochange_ondelete_noaction(",
          "def test_nochange_onupdate_noaction(",
          "def test_change_ondelete_from_restrict(",
          "def test_change_onupdate_from_restrict(",
          "def test_ondelete_onupdate_combo(",
          "def test_add_initially_deferred(",
          "def test_remove_initially_deferred(",
          "def test_add_initially_immediate_plus_deferrable(",
          "def test_remove_initially_immediate_plus_deferrable(",
          "def test_add_initially_deferrable_nochange_one(",
          "def test_add_initially_deferrable_nochange_two(",
          "def test_add_initially_deferrable_nochange_three(",
          "def test_add_deferrable(",
          "def test_remove_deferrable("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_identity.py": [
          "def test_add_identity_column(",
          "def test_remove_identity_column(",
          "def test_no_change_identity_column(",
          "def test_dialect_kwargs_changes(",
          "def test_change_identity(",
          "def test_add_identity_to_column(",
          "def test_remove_identity_from_column("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_environment.py": [
          "def test_proxy_transaction_rollback(",
          "def test_proxy_transaction_commit(",
          "def test_proxy_transaction_contextmanager_commit(",
          "def test_proxy_transaction_contextmanager_rollback(",
          "def test_proxy_transaction_contextmanager_explicit_rollback(",
          "def test_proxy_transaction_contextmanager_explicit_commit(",
          "def test_transaction_per_migration_transactional_ddl(",
          "def test_transaction_per_migration_non_transactional_ddl(",
          "def test_transaction_per_all_transactional_ddl(",
          "def test_transaction_per_all_non_transactional_ddl(",
          "def test_transaction_per_all_sqlmode(",
          "def test_transaction_per_migration_sqlmode(",
          "def test_autocommit_block(",
          "def test_autocommit_block_no_transaction(",
          "def test_autocommit_block_transactional_ddl_sqlmode(",
          "def test_autocommit_block_nontransactional_ddl_sqlmode("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_op.py": [
          "def test_rename_column(",
          "def test_modify_type_int_str(",
          "def test_add_server_default_int(",
          "def test_modify_server_default_int(",
          "def test_modify_nullable_to_non(",
          "def test_modify_non_nullable_to_nullable("
        ],
        ".venv\\Lib\\site-packages\\bs4\\builder\\_html5lib.py": [
          "def test_fragment_to_document(",
          "def testSerializer("
        ],
        ".venv\\Lib\\site-packages\\bs4\\builder\\_lxml.py": [
          "def test_fragment_to_document(",
          "def test_fragment_to_document("
        ],
        ".venv\\Lib\\site-packages\\bs4\\builder\\__init__.py": [
          "def test_fragment_to_document("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_builder.py": [
          "def test_warn_if_markup_looks_like_xml("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_builder_registry.py": [
          "def test_combination(",
          "def test_lookup_by_markup_type(",
          "def test_named_library(",
          "def test_beautifulsoup_constructor_does_lookup(",
          "def test_register_with_no_features(",
          "def test_register_with_features_makes_lookup_succeed(",
          "def test_lookup_fails_when_no_builder_implements_feature(",
          "def test_lookup_gets_most_recent_registration_when_no_feature_specified(",
          "def test_lookup_fails_when_no_tree_builders_registered(",
          "def test_lookup_gets_most_recent_builder_supporting_all_features(",
          "def test_lookup_fails_when_cannot_reconcile_requested_features("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_css.py": [
          "def test_precompiled(",
          "def test_one_tag_one(",
          "def test_one_tag_many(",
          "def test_select_one_returns_none_if_no_match(",
          "def test_tag_in_tag_one(",
          "def test_tag_in_tag_many(",
          "def test_limit(",
          "def test_tag_no_match(",
          "def test_invalid_tag(",
          "def test_select_dashed_tag_ids(",
          "def test_select_dashed_by_id(",
          "def test_dashed_tag_text(",
          "def test_select_dashed_matches_find_all(",
          "def test_header_tags(",
          "def test_class_one(",
          "def test_class_mismatched_tag(",
          "def test_one_id(",
          "def test_bad_id(",
          "def test_items_in_id(",
          "def test_a_bunch_of_emptys(",
          "def test_multi_class_support(",
          "def test_multi_class_selection(",
          "def test_child_selector(",
          "def test_child_selector_id(",
          "def test_attribute_equals(",
          "def test_attribute_tilde(",
          "def test_attribute_startswith(",
          "def test_attribute_endswith(",
          "def test_attribute_contains(",
          "def test_attribute_exact_or_hypen(",
          "def test_attribute_exists(",
          "def test_quoted_space_in_selector_name(",
          "def test_unsupported_pseudoclass(",
          "def test_nth_of_type(",
          "def test_nth_of_type_direct_descendant(",
          "def test_id_child_selector_nth_of_type(",
          "def test_select_on_element(",
          "def test_overspecified_child_id(",
          "def test_adjacent_sibling_selector(",
          "def test_general_sibling_selector(",
          "def test_dangling_combinator(",
          "def test_sibling_combinator_wont_select_same_tag_twice(",
          "def test_multiple_select(",
          "def test_multiple_select_with_no_space(",
          "def test_multiple_select_with_more_space(",
          "def test_multiple_select_duplicated(",
          "def test_multiple_select_sibling(",
          "def test_multiple_select_tag_and_direct_descendant(",
          "def test_multiple_select_direct_descendant_and_tags(",
          "def test_multiple_select_indirect_descendant(",
          "def test_invalid_multiple_select(",
          "def test_multiple_select_attrs(",
          "def test_multiple_select_ids(",
          "def test_multiple_select_nested(",
          "def test_select_duplicate_elements(",
          "def test_closest(",
          "def test_match(",
          "def test_iselect(",
          "def test_filter(",
          "def test_escape("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_dammit.py": [
          "def test_unicode_input(",
          "def test_smart_quotes_to(",
          "def test_detect_utf8(",
          "def test_convert_hebrew(",
          "def test_dont_see_smart_quotes_where_there_are_none(",
          "def test_ignore_inappropriate_codecs(",
          "def test_ignore_invalid_codecs(",
          "def test_exclude_encodings(",
          "def test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character(",
          "def test_detect_html5_style_meta_tag(",
          "def test_last_ditch_entity_replacement(",
          "def test_byte_order_mark_removed(",
          "def test_known_definite_versus_user_encodings(",
          "def test_deprecated_override_encodings(",
          "def test_detwingle(",
          "def test_detwingle_ignores_multibyte_characters(",
          "def test_find_declared_encoding(",
          "def test_substitute_html(",
          "def test_html5_entity(",
          "def test_html5_entity_with_variation_selector(",
          "def test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false(",
          "def test_xml_attribute_quoting_normally_uses_double_quotes(",
          "def test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes(",
          "def test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes(",
          "def test_xml_quotes_arent_escaped_when_value_is_not_being_quoted(",
          "def test_xml_quoting_handles_angle_brackets(",
          "def test_xml_quoting_handles_ampersands(",
          "def test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity(",
          "def test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity(",
          "def test_quotes_not_html_substituted(",
          "def test_unambiguous_ampersands_not_escaped(",
          "def test_when_entity_ampersands_are_escaped(",
          "def test_ambiguous_ampersands_escaped("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_element.py": [
          "def test_name_may_be_none_or_missing(",
          "def test_namespace_may_be_none_or_missing(",
          "def test_attribute_is_equivalent_to_colon_separated_string(",
          "def test_attributes_are_equivalent_if_prefix_and_name_identical(",
          "def test_charset_meta_attribute_value(",
          "def test_content_meta_attribute_value(",
          "def test_xml_attribute_value_handling(",
          "def test_html_attribute_value_handling(",
          "def test_getattr_exception("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_filter.py": [
          "def test_default_behavior(",
          "def test_setup_with_match_function(",
          "def test_match(",
          "def test_allow_tag_creation(",
          "def test_allow_string_creation(",
          "def test_constructor(",
          "def test_empty_match_not_allowed(",
          "def test_full_match_not_allowed(",
          "def test_matches_string(",
          "def test_matches_tag(",
          "def test_matches_tag_only_passes_tag_to_function(",
          "def test_constructor_string_deprecated_text_argument(",
          "def test_search_tag_deprecated(",
          "def test_search_deprecated(",
          "def test_constructor_default(",
          "def test_constructor(",
          "def test_scalar_attrs_becomes_class_restriction(",
          "def test_constructor_class_attribute(",
          "def test_constructor_with_overlapping_attributes(",
          "def test__make_match_rules(",
          "def test__make_match_rules_different_classes(",
          "def test__make_match_rules_nested_list(",
          "def test_matches_tag_with_only_string(",
          "def test_matches_tag_with_prefix(",
          "def test_one_name_rule_must_match(",
          "def test_one_attribute_rule_must_match_for_each_attribute(",
          "def test_match_against_multi_valued_attribute(",
          "def test_match_against_multi_valued_attribute_as_string(",
          "def test_one_string_rule_must_match(",
          "def test_allowing_tag_implies_allowing_its_contents(",
          "def test_parse_only_combining_tag_and_string(",
          "def test_documentation_examples("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_formatter.py": [
          "def test_default_attributes(",
          "def test_sort_attributes(",
          "def test_empty_attributes_are_booleans(",
          "def test_indent(",
          "def test_default_indent_value(",
          "def test_indent_subclasses(",
          "def test_entity_substitution(",
          "def test_entity_round_trip("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_fuzz.py": [
          "def fuzz_test_with_css(",
          "def test_rejected_markup(",
          "def test_deeply_nested_document_without_css(",
          "def test_deeply_nested_document(",
          "def test_soupsieve_errors(",
          "def test_html5lib_parse_errors_without_css(",
          "def test_html5lib_parse_errors("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_html5lib.py": [
          "def test_soupstrainer(",
          "def test_correctly_nested_tables(",
          "def test_xml_declaration_followed_by_doctype(",
          "def test_reparented_markup(",
          "def test_reparented_markup_ends_with_whitespace(",
          "def test_reparented_markup_containing_identical_whitespace_nodes(",
          "def test_reparented_markup_containing_children(",
          "def test_processing_instruction(",
          "def test_cloned_multivalue_node(",
          "def test_foster_parenting(",
          "def test_extraction(",
          "def test_empty_comment(",
          "def test_tracking_line_numbers(",
          "def test_special_string_containers(",
          "def test_html5_attributes(",
          "def test_prepare_markup_warnings(",
          "def test_doctype_filtered("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_htmlparser.py": [
          "def test_rejected_input(",
          "def test_namespaced_system_doctype(",
          "def test_namespaced_public_doctype(",
          "def test_builder_is_pickled(",
          "def test_redundant_empty_element_closing_tags(",
          "def test_empty_element(",
          "def test_tracking_line_numbers(",
          "def test_on_duplicate_attribute(",
          "def test_html5_attributes(",
          "def test_invalid_html_entity("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_lxml.py": [
          "def test_out_of_range_entity(",
          "def test_entities_in_foreign_document_encoding(",
          "def test_empty_doctype(",
          "def test_beautifulstonesoup_is_xml_parser(",
          "def test_tracking_line_numbers(",
          "def test_namespace_indexing(",
          "def test_namespace_interaction_with_select_and_find(",
          "def test_pickle_restores_builder("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_navigablestring.py": [
          "def test_text_acquisition_methods(",
          "def test_string_has_immutable_name_property(",
          "def test_string_detects_attribute_access_attempt(",
          "def test_cdata(",
          "def test_cdata_is_never_formatted(",
          "def test_doctype_ends_in_newline(",
          "def test_declaration(",
          "def test_default_string_containers(",
          "def test_ruby_strings("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_pageelement.py": [
          "def test_unicode_string_can_be_encoded(",
          "def test_tag_containing_unicode_string_can_be_encoded(",
          "def test_encoding_substitutes_unrecognized_characters_by_default(",
          "def test_encoding_can_be_made_strict(",
          "def test_decode_contents(",
          "def test_encode_contents(",
          "def test_encode_deeply_nested_document(",
          "def test_deprecated_renderContents(",
          "def test_repr(",
          "def test_default_formatter_is_minimal(",
          "def test_formatter_html(",
          "def test_formatter_html5(",
          "def test_formatter_minimal(",
          "def test_formatter_null(",
          "def test_formatter_custom(",
          "def test_formatter_is_run_on_attribute_values(",
          "def test_formatter_skips_script_tag_for_html_documents(",
          "def test_formatter_skips_style_tag_for_html_documents(",
          "def test_prettify_leaves_preformatted_text_alone(",
          "def test_prettify_handles_nested_string_literal_tags(",
          "def test_prettify_accepts_formatter_function(",
          "def test_prettify_outputs_unicode_by_default(",
          "def test_prettify_can_encode_data(",
          "def test_html_entity_substitution_off_by_default(",
          "def test_encoding_substitution(",
          "def test_encoding_substitution_doesnt_happen_if_tag_is_strained(",
          "def test_pickle_and_unpickle_identity(",
          "def test_deepcopy_identity(",
          "def test_copy_deeply_nested_document(",
          "def test_copy_preserves_encoding(",
          "def test_copy_preserves_builder_information(",
          "def test_unicode_pickle(",
          "def test_copy_navigablestring_is_not_attached_to_tree(",
          "def test_copy_navigablestring_subclass_has_same_type(",
          "def test_copy_entire_soup(",
          "def test_copy_tag_copies_contents(",
          "def test_comparison(",
          "def test_hash("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_soup.py": [
          "def test_short_unicode_input(",
          "def test_embedded_null(",
          "def test_exclude_encodings(",
          "def test_custom_builder_class(",
          "def test_parser_markup_rejection(",
          "def test_cdata_list_attributes(",
          "def test_replacement_classes(",
          "def test_alternate_string_containers(",
          "def test_invalid_markup_type(",
          "def test_decode_xml_declaration(",
          "def test_decode_xml_declaration_with_missing_or_python_internal_eventual_encoding(",
          "def test(",
          "def test_warning_if_no_parser_specified(",
          "def test_warning_if_parser_specified_too_vague(",
          "def test_no_warning_if_explicit_parser_specified(",
          "def test_warning_if_strainer_filters_everything(",
          "def test_parseOnlyThese_renamed_to_parse_only(",
          "def test_fromEncoding_renamed_to_from_encoding(",
          "def test_unrecognized_keyword_argument(",
          "def test_resembles_filename_warning(",
          "def test_resembles_filename_no_warning(",
          "def test_url_warning_with_bytes_url(",
          "def test_url_warning_with_unicode_url(",
          "def test_url_warning_with_bytes_and_space(",
          "def test_url_warning_with_unicode_and_space(",
          "def test_parse_with_soupstrainer(",
          "def test_new_tag(",
          "def test_xml_tag_inherits_self_closing_rules_from_builder(",
          "def test_tag_inherits_self_closing_rules_from_builder(",
          "def test_new_string_creates_navigablestring(",
          "def test_new_string_can_create_navigablestring_subclass(",
          "def test_normal_pickle(",
          "def test_pickle_with_no_builder(",
          "def test_ascii_in_unicode_out(",
          "def test_unicode_in_unicode_out(",
          "def test_utf8_in_unicode_out(",
          "def test_utf8_out("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_tag.py": [
          "def test__should_pretty_print(",
          "def test_len(",
          "def test_member_access_invokes_find(",
          "def test_deprecated_member_access(",
          "def test_has_attr(",
          "def test_attributes_come_out_in_alphabetical_order(",
          "def test_string(",
          "def test_empty_tag_has_no_string(",
          "def test_tag_with_multiple_children_has_no_string(",
          "def test_tag_with_recursive_string_has_string(",
          "def test_lack_of_string(",
          "def test_all_text(",
          "def test_get_text_ignores_special_string_containers(",
          "def test_all_strings_ignores_special_string_containers(",
          "def test_string_methods_inside_special_string_container_tags(",
          "def test_single_value_becomes_list(",
          "def test_multiple_values_becomes_list(",
          "def test_multiple_values_separated_by_weird_whitespace(",
          "def test_attributes_joined_into_string_on_output(",
          "def test_get_attribute_list(",
          "def test_accept_charset(",
          "def test_cdata_attribute_applying_only_to_one_tag(",
          "def test_customization(",
          "def test_hidden_tag_is_invisible("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_tree.py": [
          "def test_find_tag(",
          "def test_unicode_text_find(",
          "def test_unicode_attribute_find(",
          "def test_find_everything(",
          "def test_find_everything_with_name(",
          "def test_find_with_no_arguments(",
          "def test_find_with_no_arguments_only_finds_tags(",
          "def test_find_with_function_can_only_find_tags(",
          "def test_find_all_with_no_arguments_only_finds_tags(",
          "def test_find_all_text_nodes(",
          "def test_find_all_limit(",
          "def test_calling_a_tag_is_calling_findall(",
          "def test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion(",
          "def test_find_all_resultset(",
          "def test_find_by_namespaced_name(",
          "def test_find_all_by_tag_name(",
          "def test_find_all_by_name_and_text(",
          "def test_find_all_on_non_root_element(",
          "def test_calling_element_invokes_find_all(",
          "def test_find_all_by_tag_strainer(",
          "def test_find_all_by_tag_names(",
          "def test_find_all_by_tag_dict(",
          "def test_find_all_by_tag_re(",
          "def test_find_all_with_tags_matching_method(",
          "def test_find_with_multi_valued_attribute(",
          "def test_find_all_by_attribute_name(",
          "def test_find_all_by_utf8_attribute_value(",
          "def test_find_all_by_attribute_dict(",
          "def test_find_all_by_class(",
          "def test_find_by_class_when_multiple_classes_present(",
          "def test_find_all_with_non_dictionary_for_attrs_finds_by_class(",
          "def test_find_all_with_string_for_attrs_finds_multiple_classes(",
          "def test_find_all_by_attribute_soupstrainer(",
          "def test_find_all_with_missing_attribute(",
          "def test_find_all_with_defined_attribute(",
          "def test_find_all_with_numeric_attribute(",
          "def test_find_all_with_list_attribute_values(",
          "def test_find_all_with_regular_expression_attribute_value(",
          "def test_find_by_name_and_containing_string(",
          "def test_find_by_name_and_containing_string_when_string_is_buried(",
          "def test_find_by_attribute_and_containing_string(",
          "def test_smooth(",
          "def test_index(",
          "def test_parent(",
          "def test_parent_of_top_tag_is_soup_object(",
          "def test_soup_object_has_no_parent(",
          "def test_find_parents(",
          "def test_find_parent(",
          "def test_parent_of_text_element(",
          "def test_text_element_find_parent(",
          "def test_parent_generator(",
          "def test_self_and_parent_generator(",
          "def test_next(",
          "def test_next_of_last_item_is_none(",
          "def test_next_of_root_is_none(",
          "def test_find_all_next(",
          "def test_find_next(",
          "def test_find_next_for_text_element(",
          "def test_next_generators(",
          "def test_previous(",
          "def test_previous_of_first_item_is_none(",
          "def test_previous_of_root_is_none(",
          "def test_find_all_previous(",
          "def test_find_previous(",
          "def test_find_previous_for_text_element(",
          "def test_previous_generators(",
          "def test_next_sibling_of_root_is_none(",
          "def test_next_sibling(",
          "def test_next_sibling_may_not_exist(",
          "def test_find_next_sibling(",
          "def test_next_siblings(",
          "def test_next_siblings_generators(",
          "def test_next_sibling_for_text_element(",
          "def test_previous_sibling_of_root_is_none(",
          "def test_previous_sibling(",
          "def test_previous_sibling_may_not_exist(",
          "def test_find_previous_sibling(",
          "def test_previous_siblings(",
          "def test_previous_siblings_generators(",
          "def test_previous_sibling_for_text_element(",
          "def test_attribute_modification(",
          "def test_new_tag_creation(",
          "def test_append_to_contents_moves_tag(",
          "def test_insertion_returns_inserted_things(",
          "def test_replace_with_returns_thing_that_was_replaced(",
          "def test_unwrap_returns_thing_that_was_replaced(",
          "def test_replace_with_and_unwrap_give_useful_exception_when_tag_has_no_parent(",
          "def test_replace_tag_with_itself(",
          "def test_replace_tag_with_its_parent_raises_exception(",
          "def test_insert_tag_into_itself_raises_exception(",
          "def test_insert_multiple_elements(",
          "def test_insert_beautifulsoup_object_inserts_children(",
          "def test_replace_with_maintains_next_element_throughout(",
          "def test_replace_final_node(",
          "def test_consecutive_text_nodes(",
          "def test_insert_string(",
          "def test_append(",
          "def test_insert_tag(",
          "def test_insert_into_the_current_location(",
          "def test_append_child_thats_already_at_the_end(",
          "def test_extend_with_a_list_of_elements(",
          "def test_extend_with_a_list_of_strings(",
          "def test_extend_with_another_tags_contents(",
          "def test_extend_with_a_single_non_tag_element(",
          "def test_move_tag_to_beginning_of_parent(",
          "def test_insert_works_on_empty_element_tag(",
          "def test_insert_before(",
          "def test_insert_multiple_before(",
          "def test_insert_after(",
          "def test_insert_multiple_after(",
          "def test_insert_after_raises_exception_if_after_has_no_meaning(",
          "def test_insert_before_raises_notimplementederror_if_before_has_no_meaning(",
          "def test_replace_with(",
          "def test_replace_with_errors(",
          "def test_replace_with_multiple(",
          "def test_replace_first_child(",
          "def test_replace_last_child(",
          "def test_nested_tag_replace_with(",
          "def test_unwrap(",
          "def test_wrap(",
          "def test_wrap_extracts_tag_from_elsewhere(",
          "def test_wrap_puts_new_contents_at_the_end(",
          "def test_extract(",
          "def test_extract_distinguishes_between_identical_strings(",
          "def test_extract_multiples_of_same_tag(",
          "def test_extract_works_when_element_is_surrounded_by_identical_strings(",
          "def test_clear(",
          "def test_extract_during_iteration(",
          "def test_decompose(",
          "def test_decompose_string(",
          "def test_string_set(",
          "def test_string_set_does_not_affect_original_string(",
          "def test_set_string_preserves_class_of_string(",
          "def test_find_type_method_string(",
          "def test_suspicious_syntax_warning("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\__init__.py": [
          "default_builder(**kwargs).test_fragment_to_document(",
          "def test_attribute_not_multi_valued(",
          "def test_attribute_multi_valued(",
          "def test_invalid_doctype(",
          "def test_doctype_filtered(",
          "def test_custom_attribute_dict_class(",
          "def test_custom_attribute_value_list_class(",
          "def test_empty_element_tags(",
          "def test_special_string_containers(",
          "def test_pickle_and_unpickle_identity(",
          "def test_pickle_and_unpickle_bad_markup(",
          "def test_normal_doctypes(",
          "def test_empty_doctype(",
          "def test_mixed_case_doctype(",
          "def test_public_doctype_with_url(",
          "def test_system_doctype(",
          "def test_namespaced_system_doctype(",
          "def test_namespaced_public_doctype(",
          "def test_real_xhtml_document(",
          "def test_namespaced_html(",
          "def test_detect_xml_parsed_as_html(",
          "def test_processing_instruction(",
          "def test_deepcopy(",
          "def test_p_tag_is_never_empty_element(",
          "def test_unclosed_tags_get_closed(",
          "def test_br_is_always_empty_element_tag(",
          "def test_nested_formatting_elements(",
          "def test_double_head(",
          "def test_comment(",
          "def test_preserved_whitespace_in_pre_and_textarea(",
          "def test_nested_inline_elements(",
          "def test_nested_block_level_elements(",
          "def test_correctly_nested_tables(",
          "def test_multivalued_attribute_with_whitespace(",
          "def test_deeply_nested_multivalued_attribute(",
          "def test_multivalued_attribute_on_html(",
          "def test_angle_brackets_in_attribute_values_are_escaped(",
          "def test_strings_resembling_character_entity_references(",
          "def test_apos_entity(",
          "def test_entities_in_foreign_document_encoding(",
          "def test_entities_in_attributes_converted_to_unicode(",
          "def test_entities_in_text_converted_to_unicode(",
          "def test_quot_entity_converted_to_quotation_mark(",
          "def test_out_of_range_entity(",
          "def test_multipart_strings(",
          "def test_invalid_html_entity(",
          "def test_head_tag_between_head_and_body(",
          "def test_multiple_copies_of_a_tag(",
          "def test_basic_namespaces(",
          "def test_multivalued_attribute_value_becomes_list(",
          "def test_can_parse_unicode_document(",
          "def test_soupstrainer(",
          "def test_single_quote_attribute_values_become_double_quotes(",
          "def test_attribute_values_with_nested_quotes_are_left_alone(",
          "def test_attribute_values_with_double_nested_quotes_get_quoted(",
          "def test_ampersand_in_attribute_value_gets_escaped(",
          "def test_escaped_ampersand_in_attribute_value_is_left_alone(",
          "def test_entities_in_strings_converted_during_parsing(",
          "def test_smart_quotes_converted_on_the_way_in(",
          "def test_non_breaking_spaces_converted_on_the_way_in(",
          "def test_entities_converted_on_the_way_out(",
          "def test_real_iso_8859_document(",
          "def test_real_shift_jis_document(",
          "def test_real_hebrew_document(",
          "def test_meta_tag_reflects_current_encoding(",
          "def test_html5_style_meta_tag_reflects_current_encoding(",
          "def test_python_specific_encodings_not_used_in_charset(",
          "def test_tag_with_no_attributes_can_have_attributes_added(",
          "def test_closing_tag_with_no_opening_tag(",
          "def test_worst_case(",
          "def test_pickle_and_unpickle_identity(",
          "def test_docstring_generated(",
          "def test_xml_declaration(",
          "def test_python_specific_encodings_not_used_in_xml_declaration(",
          "def test_processing_instruction(",
          "def test_real_xhtml_document(",
          "def test_nested_namespaces(",
          "def test_formatter_processes_script_tag_for_xml_documents(",
          "def test_can_parse_unicode_document(",
          "def test_can_parse_unicode_document_begining_with_bom(",
          "def test_popping_namespaced_tag(",
          "def test_docstring_includes_correct_encoding(",
          "def test_large_xml_document(",
          "def test_tags_are_empty_element_if_and_only_if_they_are_empty(",
          "def test_namespaces_are_preserved(",
          "def test_closing_namespaced_tag(",
          "def test_namespaced_attributes(",
          "def test_namespaced_attributes_xml_namespace(",
          "def test_find_by_prefixed_name(",
          "def test_copy_tag_preserves_namespace(",
          "def test_worst_case(",
          "def test_real_xhtml_document(",
          "def test_html_tags_have_namespace(",
          "def test_svg_tags_have_namespace(",
          "def test_mathml_tags_have_namespace(",
          "def test_xml_declaration_becomes_comment("
        ],
        ".venv\\Lib\\site-packages\\colorama\\initialise.py": [
          "def _wipe_internal_state_for_tests("
        ],
        ".venv\\Lib\\site-packages\\colorama\\win32.py": [
          "def _winapi_test(",
          "def winapi_test("
        ],
        ".venv\\Lib\\site-packages\\colorama\\tests\\ansitowin32_test.py": [
          "def testIsAProxy(",
          "def testDelegatesWrite(",
          "def testDelegatesContext(",
          "def testProxyNoContextManager(",
          "def test_closed_shouldnt_raise_on_closed_stream(",
          "def test_closed_shouldnt_raise_on_detached_stream(",
          "def testInit(",
          "def testStripIsTrueOnWindows(",
          "def testStripIsFalseOffWindows(",
          "def testWriteStripsAnsi(",
          "def testWriteDoesNotStripAnsi(",
          "def testWriteAutoresets(",
          "def testWriteAndConvertWritesPlainText(",
          "def testWriteAndConvertStripsAllValidAnsi(",
          "def testWriteAndConvertSkipsEmptySnippets(",
          "def testWriteAndConvertCallsWin32WithParamsAndCommand(",
          "def test_reset_all_shouldnt_raise_on_closed_orig_stdout(",
          "def test_wrap_shouldnt_raise_on_closed_orig_stdout(",
          "def test_wrap_shouldnt_raise_on_missing_closed_attr(",
          "def testExtractParams(",
          "def testCallWin32UsesLookup(",
          "def test_osc_codes(",
          "def test_native_windows_ansi("
        ],
        ".venv\\Lib\\site-packages\\colorama\\tests\\ansi_test.py": [
          "def testForeAttributes(",
          "def testBackAttributes(",
          "def testStyleAttributes("
        ],
        ".venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py": [
          "def testInitWrapsOnWindows(",
          "def testInitDoesntWrapOnEmulatedWindows(",
          "def testInitDoesntWrapOnNonWindows(",
          "def testInitDoesntWrapIfNone(",
          "def testInitAutoresetOnWrapsOnAllPlatforms(",
          "def testInitWrapOffDoesntWrapOnWindows(",
          "def testInitWrapOffIncompatibleWithAutoresetOn(",
          "def testAutoResetPassedOn(",
          "def testAutoResetChangeable(",
          "def testAtexitRegisteredOnlyOnce(",
          "def testJustFixWindowsConsole("
        ],
        ".venv\\Lib\\site-packages\\colorama\\tests\\isatty_test.py": [
          "def test_TTY(",
          "def test_nonTTY(",
          "def test_withPycharm(",
          "def test_withPycharmTTYOverride(",
          "def test_withPycharmNonTTYOverride(",
          "def test_withPycharmNoneOverride(",
          "def test_withPycharmStreamWrapped("
        ],
        ".venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py": [
          "def testInit(",
          "def testGetAttrs(",
          "def testResetAll(",
          "def testFore(",
          "def testBack(",
          "def testStyle(",
          "def testSetConsole(",
          "def testSetConsoleOnStderr("
        ],
        ".venv\\Lib\\site-packages\\coverage\\context.py": [
          "def should_start_context_test_function("
        ],
        ".venv\\Lib\\site-packages\\coverage\\parser.py": [
          "def is_constant_test_expr("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base.py": [
          "def files_list_folder_get_latest_cursor("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def is_test_only("
        ],
        ".venv\\Lib\\site-packages\\flask\\app.py": [
          "def test_client(",
          "def test_cli_runner(",
          "def template_test(",
          "def add_template_test(",
          "def test_request_context("
        ],
        ".venv\\Lib\\site-packages\\flask\\blueprints.py": [
          "def app_template_test(",
          "def add_app_template_test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\fontBuilder.py": [
          "def drawTestGlyph(",
          "def drawTestGlyph("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\arrayTools.py": [
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\loggingTools.py": [
          "def test1(",
          "def test2("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\roundTools.py": [
          "def nearestMultipleShortestRepr("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\sstruct.py": [
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\pens\\pointInsidePen.py": [
          "def setTestPoint("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\pens\\statisticsPen.py": [
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\tables\\otBase.py": [
          "def writeStruct("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\tables\\ttProgram.py": [
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\tables\\_m_a_x_p.py": [
          "def testrepr("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ufoLib\\converters.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ufoLib\\__init__.py": [
          "def writeBytesToPath("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatable.py": [
          "def test_gen(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatableTestContourOrder.py": [
          "def test_contour_order("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatableTestStartingPoint.py": [
          "def test_starting_point("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\instancer\\__init__.py": [
          "def instantiateSTAT("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\leakcheck.py": [
          "def _run_test("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_contextvars.py": [
          "def _test_context(",
          "def test_context_propagated_by_context_run(",
          "def test_context_propagated_by_setting_attribute(",
          "def test_context_not_propagated(",
          "def test_context_shared(",
          "def test_break_ctxvars(",
          "def test_not_broken_if_using_attribute_instead_of_context_run(",
          "def test_context_assignment_while_running(",
          "def test_context_assignment_different_thread(",
          "def test_context_assignment_wrong_type(",
          "def test_contextvars_errors("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_cpp.py": [
          "def test_exception_switch(",
          "def _do_test_unhandled_exception(",
          "def test_unhandled_nonstd_exception_aborts(",
          "def test_unhandled_std_exception_aborts(",
          "def test_unhandled_std_exception_as_greenlet_function_aborts(",
          "def test_unhandled_exception_in_greenlet_aborts("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_extension_interface.py": [
          "def test_switch(",
          "def test_switch_kwargs(",
          "def test_setparent(",
          "def test_getcurrent(",
          "def test_new_greenlet(",
          "def test_raise_greenlet_dead(",
          "def test_raise_greenlet_error(",
          "def test_throw(",
          "def test_non_traceback_param(",
          "def test_instance_of_wrong_type(",
          "def test_not_throwable("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_gc.py": [
          "def test_dead_circular_ref(",
          "def test_circular_greenlet(",
          "def test_inactive_ref(",
          "def test_finalizer_crash("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_generator.py": [
          "def test_generator("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_generator_nested.py": [
          "def test_layered_genlets(",
          "def test_permutations(",
          "def test_genlet_simple(",
          "def test_genlet_bad(",
          "def test_nested_genlets("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py": [
          "def _do_simple_test(",
          "def test_simple(",
          "def test_switch_no_run_raises_AttributeError(",
          "def test_throw_no_run_raises_AttributeError(",
          "def test_parent_equals_None(",
          "def test_run_equals_None(",
          "def test_two_children(",
          "def test_two_recursive_children(",
          "def test_threads(",
          "def test_exception(",
          "def test_send_exception(",
          "def test_dealloc(",
          "def test_dealloc_catches_GreenletExit_throws_other(",
          "def test_dealloc_other_thread(",
          "def test_frame(",
          "def test_thread_bug(",
          "def test_switch_kwargs(",
          "def test_switch_kwargs_to_parent(",
          "def test_switch_to_another_thread(",
          "def test_exc_state(",
          "def test_instance_dict(",
          "def test_running_greenlet_has_no_run(",
          "def test_deepcopy(",
          "def test_parent_restored_on_kill(",
          "def test_parent_return_failure(",
          "def test_throw_exception_not_lost(",
          "def _do_test_throw_to_dead_thread_doesnt_crash(",
          "def test_throw_to_dead_thread_doesnt_crash(",
          "def test_throw_to_dead_thread_doesnt_crash_wait(",
          "def test_recursive_startup(",
          "def test_threaded_updatecurrent(",
          "def test_dealloc_switch_args_not_lost(",
          "def test_tuple_subclass(",
          "def test_abstract_subclasses(",
          "def test_implicit_parent_with_threads(",
          "def test_issue_245_reference_counting_subclass_no_threads(",
          "def test_issue_245_reference_counting_subclass_threads(",
          "def test_falling_off_end_switches_to_unstarted_parent_raises_error(",
          "def test_falling_off_end_switches_to_unstarted_parent_works(",
          "def test_switch_to_dead_greenlet_with_unstarted_perverse_parent(",
          "def test_switch_to_dead_greenlet_reparent(",
          "def test_can_access_f_back_of_suspended_greenlet(",
          "def test_get_stack_with_nested_c_calls(",
          "def test_frames_always_exposed(",
          "def test_threaded_reparent(",
          "def test_unexpected_reparenting(",
          "def test_unexpected_reparenting_thread_running(",
          "def test_cannot_delete_parent(",
          "def test_cannot_delete_parent_of_main(",
          "def test_main_greenlet_parent_is_none(",
          "def test_set_parent_wrong_types(",
          "def test_trivial_cycle(",
          "def test_trivial_cycle_main(",
          "def test_deeper_cycle(",
          "def test_main_while_running(",
          "def test_main_in_background(",
          "def test_initial(",
          "def test_main_from_other_thread(",
          "def test_dead(",
          "def test_formatting_produces_native_str(",
          "def test_main_greenlet_type_can_be_subclassed(",
          "def test_main_greenlet_is_greenlet(",
          "def test_failed_to_initialstub(",
          "def test_failed_to_switch_into_running(",
          "def test_failed_to_slp_switch_into_running(",
          "def test_reentrant_switch_two_greenlets(",
          "def test_reentrant_switch_three_greenlets(",
          "def test_reentrant_switch_three_greenlets2(",
          "def test_reentrant_switch_GreenletAlreadyStartedInPython(",
          "def test_reentrant_switch_run_callable_has_del("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet_trash.py": [
          "def test_it("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_leaks.py": [
          "def test_arg_refs(",
          "def test_kwarg_refs(",
          "def test_threaded_leak(",
          "def test_threaded_adv_leak(",
          "def test_issue251_killing_cross_thread_leaks_list(",
          "def test_issue251_with_cleanup_disabled(",
          "def test_issue251_issue252_need_to_collect_in_background(",
          "def test_issue251_issue252_need_to_collect_in_background_cleanup_disabled(",
          "def test_issue251_issue252_explicit_reference_not_collectable(",
          "def _only_test_some_versions(",
          "def test_untracked_memory_doesnt_increase(",
          "def test_untracked_memory_doesnt_increase_unfinished_thread_dealloc_in_thread(",
          "def test_untracked_memory_doesnt_increase_unfinished_thread_dealloc_in_main("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_stack_saved.py": [
          "def test_stack_saved("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_throw.py": [
          "def test_class(",
          "def test_val(",
          "def test_kill(",
          "def test_throw_goes_to_original_parent(",
          "def test_non_traceback_param(",
          "def test_instance_of_wrong_type(",
          "def test_not_throwable("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_tracing.py": [
          "def test_a_greenlet_tracing(",
          "def test_b_exception_disables_tracing(",
          "def test_set_same_tracer_twice(",
          "def test_trace_events_trivial(",
          "def test_trace_events_into_greenlet_func_already_set(",
          "def test_trace_events_into_greenlet_subclass_already_set(",
          "def test_trace_events_from_greenlet_func_sets_profiler(",
          "def test_trace_events_from_greenlet_subclass_sets_profiler(",
          "def test_trace_events_multiple_greenlets_switching(",
          "def test_trace_events_multiple_greenlets_switching_siblings("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_version.py": [
          "def test_version("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_weakref.py": [
          "def test_dead_weakref(",
          "def test_inactive_weakref(",
          "def test_dealloc_weakref("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\util.py": [
          "def to_bytestring("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\compiler.py": [
          "def visit_Test(",
          "def _filter_test_common(",
          "def visit_Test("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\environment.py": [
          "DEFAULT_TESTS.copy(",
          "def _filter_test_common(",
          "def call_test("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\lexer.py": [
          "def test(",
          "def test_any("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\parser.py": [
          "def parse_test("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\tests.py": [
          "def test_odd(",
          "def test_even(",
          "def test_divisibleby(",
          "def test_defined(",
          "def test_undefined(",
          "def test_filter(",
          "def test_test(",
          "def test_none(",
          "def test_boolean(",
          "def test_false(",
          "def test_true(",
          "def test_integer(",
          "def test_float(",
          "def test_lower(",
          "def test_upper(",
          "def test_string(",
          "def test_mapping(",
          "def test_number(",
          "def test_sequence(",
          "def test_sameas(",
          "def test_iterable(",
          "def test_escaped(",
          "def test_in("
        ],
        ".venv\\Lib\\site-packages\\limits\\strategies.py": [
          "def test(",
          "def test(",
          "def test(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\strategies.py": [
          "def test(",
          "def test(",
          "def test(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\mako\\testing\\fixtures.py": [
          "def _do_file_test(",
          "def _do_memory_test(",
          "def _do_test("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\dates.py": [
          "def _reset_epoch_test_example(",
          "def datestr2num("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\__init__.py": [
          "def _init_tests("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\qt_editor\\_formlayout.py": [
          "def apply_test("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\sphinxext\\plot_directive.py": [
          "def contains_doctest("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\compare.py": [
          "def make_test_filename("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\conftest.py": [
          "def pytest_configure(",
          "def pytest_unconfigure(",
          "def mpl_test_settings("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\decorators.py": [
          "def _pytest_image_comparison(",
          "def test_plot("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\__init__.py": [
          "def set_font_settings_for_testing(",
          "def set_reproducibility_for_testing("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_afm.py": [
          "def test_nonascii_str(",
          "def test_parse_header(",
          "def test_parse_char_metrics(",
          "def test_get_familyname_guessed(",
          "def test_font_manager_weight_normalization(",
          "def test_bad_afm(",
          "def test_malformed_header("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_agg.py": [
          "def test_repeated_save_with_alpha(",
          "def test_large_single_path_collection(",
          "def test_marker_with_nan(",
          "def test_long_path(",
          "def test_agg_filter(",
          "def test_too_large_image(",
          "def test_chunksize(",
          "def test_jpeg_dpi(",
          "def test_pil_kwargs_png(",
          "def test_pil_kwargs_tiff(",
          "def test_pil_kwargs_webp(",
          "def test_webp_alpha(",
          "def test_draw_path_collection_error_handling(",
          "def test_chunksize_fails(",
          "def test_non_tuple_rgbaface("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_agg_filter.py": [
          "def test_agg_filter_alpha("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_animation.py": [
          "def test_null_movie_writer(",
          "def test_animation_delete(",
          "def test_movie_writer_dpi_default(",
          "def test_save_animation_smoketest(",
          "def test_animation_repr_html(",
          "def test_no_length_frames(",
          "def test_movie_writer_registry(",
          "def test_embed_limit(",
          "def test_cleanup_temporaries(",
          "def test_failing_ffmpeg(",
          "def test_funcanimation_cache_frame_data(",
          "def test_draw_frame(",
          "def test_exhausted_animation(",
          "def test_no_frame_warning(",
          "def test_animation_frame(",
          "def test_save_count_override_warnings_has_length(",
          "def test_save_count_override_warnings_scaler(",
          "def test_disable_cache_warning(",
          "def test_movie_writer_invalid_path("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_api.py": [
          "def test_check_shape(",
          "def test_classproperty_deprecation(",
          "def test_deprecate_privatize_attribute(",
          "def test_delete_parameter(",
          "def test_make_keyword_only(",
          "def test_deprecation_alternative(",
          "def test_empty_check_in_list("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_arrow_patches.py": [
          "def test_fancyarrow(",
          "def test_boxarrow(",
          "def __prepare_fancyarrow_dpi_cor_test(",
          "def test_fancyarrow_dpi_cor_100dpi(",
          "def test_fancyarrow_dpi_cor_200dpi(",
          "def test_fancyarrow_dash(",
          "def test_arrow_styles(",
          "def test_connection_styles(",
          "def test_invalid_intersection("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_artist.py": [
          "def test_patch_transform_of_none(",
          "def test_collection_transform_of_none(",
          "def test_clipping(",
          "def test_clipping_zoom(",
          "def test_cull_markers(",
          "def test_hatching(",
          "def test_remove(",
          "def test_default_edges(",
          "def test_properties(",
          "def test_setp(",
          "def test_None_zorder(",
          "def test_artist_inspector_get_valid_values(",
          "def test_artist_inspector_get_aliases(",
          "def test_set_alpha(",
          "def test_set_alpha_for_array(",
          "def test_callbacks(",
          "def test_set_signature(",
          "def test_set_is_overwritten(",
          "def test_format_cursor_data_BoundaryNorm(",
          "def test_auto_no_rasterize(",
          "def test_draw_wraper_forward_input("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_axes.py": [
          "def test_invisible_axes(",
          "def test_get_labels(",
          "def test_repr(",
          "def test_label_loc_vertical(",
          "def test_label_loc_horizontal(",
          "def test_label_loc_rc(",
          "def test_label_shift(",
          "def test_acorr(",
          "def test_acorr_integers(",
          "def test_spy(",
          "def test_spy_invalid_kwargs(",
          "def test_matshow(",
          "def test_formatter_ticker(",
          "def test_funcformatter_auto_formatter(",
          "def test_strmethodformatter_auto_formatter(",
          "def test_twin_axis_locators_formatters(",
          "def test_twinx_cla(",
          "def test_twin_logscale(",
          "def test_twinx_axis_scales(",
          "def test_twin_inherit_autoscale_setting(",
          "def test_inverted_cla(",
          "def test_subclass_clear_cla(",
          "def test_cla_not_redefined_internally(",
          "def test_minorticks_on_rcParams_both(",
          "def test_autoscale_tiny_range(",
          "def test_autoscale_tight(",
          "def test_autoscale_log_shared(",
          "def test_use_sticky_edges(",
          "def test_sticky_shared_axes(",
          "def test_basic_annotate(",
          "def test_arrow_simple(",
          "def test_arrow_empty(",
          "def test_arrow_in_view(",
          "def test_annotate_default_arrow(",
          "def test_annotate_signature(",
          "def test_fill_units(",
          "def test_plot_format_kwarg_redundant(",
          "def test_errorbar_dashes(",
          "def test_single_point(",
          "def test_single_date(",
          "def test_shaped_data(",
          "def test_structured_data(",
          "def test_aitoff_proj(",
          "def test_axvspan_epoch(",
          "def test_axhspan_epoch(",
          "def test_hexbin_extent(",
          "def test_hexbin_empty(",
          "def test_hexbin_pickable(",
          "def test_hexbin_log(",
          "def test_hexbin_linear(",
          "def test_hexbin_log_clim(",
          "def test_inverted_limits(",
          "def test_nonfinite_limits(",
          "def test_limits_empty_data(",
          "def test_imshow(",
          "def test_imshow_clip(",
          "def test_imshow_norm_vminvmax(",
          "def test_polycollection_joinstyle(",
          "def test_fill_between_input(",
          "def test_fill_betweenx_input(",
          "def test_fill_between_interpolate(",
          "def test_fill_between_interpolate_decreasing(",
          "def test_fill_between_interpolate_nan(",
          "def test_symlog(",
          "def test_symlog2(",
          "def test_pcolorargs_5205(",
          "def test_pcolormesh(",
          "def test_pcolormesh_small(",
          "def test_pcolormesh_alpha(",
          "def test_pcolormesh_rgba(",
          "def test_pcolormesh_datetime_axis(",
          "def test_pcolor_datetime_axis(",
          "def test_pcolorargs(",
          "def test_pcolorargs_with_read_only(",
          "def test_pcolornearest(",
          "def test_pcolornearestunits(",
          "def test_pcolorflaterror(",
          "def test_samesizepcolorflaterror(",
          "def test_pcolorauto(",
          "def test_canonical(",
          "def test_arc_angles(",
          "def test_arc_ellipse(",
          "def test_marker_as_markerstyle(",
          "def test_markevery(",
          "def test_markevery_line(",
          "def test_markevery_linear_scales(",
          "def test_markevery_linear_scales_zoomed(",
          "def test_markevery_log_scales(",
          "def test_markevery_polar(",
          "def test_markevery_linear_scales_nans(",
          "def test_marker_edges(",
          "def test_bar_tick_label_single(",
          "def test_nan_bar_values(",
          "def test_bar_ticklabel_fail(",
          "def test_bar_tick_label_multiple(",
          "def test_bar_tick_label_multiple_old_alignment(",
          "def test_bar_decimal_center(",
          "def test_barh_decimal_center(",
          "def test_bar_decimal_width(",
          "def test_barh_decimal_height(",
          "def test_bar_color_none_alpha(",
          "def test_bar_edgecolor_none_alpha(",
          "def test_barh_tick_label(",
          "def test_bar_timedelta(",
          "def test_boxplot_dates_pandas(",
          "def test_boxplot_capwidths(",
          "def test_pcolor_regression(",
          "def test_bar_pandas(",
          "def test_bar_pandas_indexed(",
          "def test_bar_hatches(",
          "def test_bar_labels(",
          "def test_bar_labels_length(",
          "def test_pandas_minimal_plot(",
          "def test_hist_log(",
          "def test_hist_log_2(",
          "def test_hist_log_barstacked(",
          "def test_hist_bar_empty(",
          "def test_hist_float16(",
          "def test_hist_step_empty(",
          "def test_hist_step_filled(",
          "def test_hist_density(",
          "def test_hist_unequal_bins_density(",
          "def test_hist_datetime_datasets(",
          "def test_hist_datetime_datasets_bins(",
          "def test_hist_with_empty_input(",
          "def test_hist_zorder(",
          "def test_stairs(",
          "def test_stairs_fill(",
          "def test_stairs_update(",
          "def test_stairs_baseline_0(",
          "def test_stairs_empty(",
          "def test_stairs_invalid_nan(",
          "def test_stairs_invalid_mismatch(",
          "def test_stairs_invalid_update(",
          "def test_stairs_invalid_update2(",
          "def test_stairs_options(",
          "def test_stairs_datetime(",
          "def test_stairs_edge_handling(",
          "def test_contour_hatching(",
          "def test_contour_colorbar(",
          "def test_hist2d(",
          "def test_hist2d_transpose(",
          "def test_hist2d_density(",
          "def test_scatter_plot(",
          "def test_scatter_marker(",
          "def test_scatter_2D(",
          "def test_scatter_decimal(",
          "def test_scatter_color(",
          "def test_scatter_color_warning(",
          "def test_scatter_unfilled(",
          "def test_scatter_unfillable(",
          "def test_scatter_size_arg_size(",
          "def test_scatter_edgecolor_RGB(",
          "def test_scatter_invalid_color(",
          "def test_scatter_no_invalid_color(",
          "def test_scatter_norm_vminvmax(",
          "def test_scatter_single_point(",
          "def test_scatter_different_shapes(",
          "def test_scatter_c(",
          "def test_scatter_single_color_c(",
          "def test_scatter_linewidths(",
          "def test_parse_scatter_color_args(",
          "def test_parse_scatter_color_args_edgecolors(",
          "def test_parse_scatter_color_args_error(",
          "def test_as_mpl_axes_api(",
          "def test_pyplot_axes(",
          "def test_log_scales(",
          "def test_log_scales_no_data(",
          "def test_log_scales_invalid(",
          "def test_stackplot(",
          "def test_stackplot_baseline(",
          "def _bxp_test_helper(",
          "def test_bxp_baseline(",
          "def test_bxp_rangewhis(",
          "def test_bxp_percentilewhis(",
          "def test_bxp_with_xlabels(",
          "def test_bxp_horizontal(",
          "def test_bxp_with_ylabels(",
          "def test_bxp_patchartist(",
          "def test_bxp_custompatchartist(",
          "def test_bxp_customoutlier(",
          "def test_bxp_showcustommean(",
          "def test_bxp_custombox(",
          "def test_bxp_custommedian(",
          "def test_bxp_customcap(",
          "def test_bxp_customwhisker(",
          "def test_bxp_shownotches(",
          "def test_bxp_nocaps(",
          "def test_bxp_nobox(",
          "def test_bxp_no_flier_stats(",
          "def test_bxp_showmean(",
          "def test_bxp_showmeanasline(",
          "def test_bxp_scalarwidth(",
          "def test_bxp_customwidths(",
          "def test_bxp_custompositions(",
          "def test_bxp_bad_widths(",
          "def test_bxp_bad_positions(",
          "def test_bxp_custom_capwidths(",
          "def test_bxp_custom_capwidth(",
          "def test_bxp_bad_capwidths(",
          "def test_boxplot(",
          "def test_boxplot_custom_capwidths(",
          "def test_boxplot_sym2(",
          "def test_boxplot_sym(",
          "def test_boxplot_autorange_whiskers(",
          "def _rc_test_bxp_helper(",
          "def test_boxplot_rc_parameters(",
          "def test_boxplot_with_CIarray(",
          "def test_boxplot_no_weird_whisker(",
          "def test_boxplot_bad_medians(",
          "def test_boxplot_bad_ci(",
          "def test_boxplot_zorder(",
          "def test_boxplot_marker_behavior(",
          "def test_boxplot_mod_artist_after_plotting(",
          "def test_vert_violinplot_baseline(",
          "def test_vert_violinplot_showmeans(",
          "def test_vert_violinplot_showextrema(",
          "def test_vert_violinplot_showmedians(",
          "def test_vert_violinplot_showall(",
          "def test_vert_violinplot_custompoints_10(",
          "def test_vert_violinplot_custompoints_200(",
          "def test_horiz_violinplot_baseline(",
          "def test_horiz_violinplot_showmedians(",
          "def test_horiz_violinplot_showmeans(",
          "def test_horiz_violinplot_showextrema(",
          "def test_horiz_violinplot_showall(",
          "def test_horiz_violinplot_custompoints_10(",
          "def test_horiz_violinplot_custompoints_200(",
          "def test_violinplot_bad_positions(",
          "def test_violinplot_bad_widths(",
          "def test_violinplot_bad_quantiles(",
          "def test_violinplot_outofrange_quantiles(",
          "def test_violinplot_single_list_quantiles(",
          "def test_violinplot_pandas_series(",
          "def test_manage_xticks(",
          "def test_boxplot_not_single(",
          "def test_tick_space_size_0(",
          "def test_errorbar(",
          "def test_mixed_errorbar_polar_caps(",
          "def test_errorbar_colorcycle(",
          "def test_errorbar_cycle_ecolor(",
          "def test_errorbar_shape(",
          "def test_errorbar_limits(",
          "def test_errorbar_nonefmt(",
          "def test_errorbar_line_specific_kwargs(",
          "def test_errorbar_with_prop_cycle(",
          "def test_errorbar_every_invalid(",
          "def test_xerr_yerr_not_negative(",
          "def test_errorbar_every(",
          "def test_errorbar_linewidth_type(",
          "def test_errorbar_nan(",
          "def test_hist_stacked_stepfilled(",
          "def test_hist_offset(",
          "def test_hist_step(",
          "def test_hist_step_horiz(",
          "def test_hist_stacked_weighted(",
          "def test_stem(",
          "def test_stem_args(",
          "def test_stem_markerfmt(",
          "def test_stem_dates(",
          "def test_stem_orientation(",
          "def test_hist_stacked_stepfilled_alpha(",
          "def test_hist_stacked_step(",
          "def test_hist_stacked_density(",
          "def test_hist_step_bottom(",
          "def test_hist_stepfilled_geometry(",
          "def test_hist_step_geometry(",
          "def test_hist_stepfilled_bottom_geometry(",
          "def test_hist_step_bottom_geometry(",
          "def test_hist_stacked_stepfilled_geometry(",
          "def test_hist_stacked_step_geometry(",
          "def test_hist_stacked_stepfilled_bottom_geometry(",
          "def test_hist_stacked_step_bottom_geometry(",
          "def test_hist_stacked_bar(",
          "def test_hist_barstacked_bottom_unchanged(",
          "def test_hist_emptydata(",
          "def test_hist_labels(",
          "def test_transparent_markers(",
          "def test_rgba_markers(",
          "def test_mollweide_grid(",
          "def test_mollweide_forward_inverse_closure(",
          "def test_mollweide_inverse_forward_closure(",
          "def test_alpha(",
          "def test_eventplot(",
          "def test_eventplot_defaults(",
          "def test_eventplot_colors(",
          "def test_eventplot_alpha(",
          "def test_eventplot_problem_kwargs(",
          "def test_empty_eventplot(",
          "def test_eventplot_orientation(",
          "def test_eventplot_units_list(",
          "def test_marker_styles(",
          "def test_markers_fillstyle_rcparams(",
          "def test_vertex_markers(",
          "def test_eb_line_zorder(",
          "def test_axline_loglog(",
          "def test_axline(",
          "def test_axline_transaxes(",
          "def test_axline_transaxes_panzoom(",
          "def test_axline_args(",
          "def test_vlines(",
          "def test_vlines_default(",
          "def test_hlines(",
          "def test_hlines_default(",
          "def test_lines_with_colors(",
          "def test_step_linestyle(",
          "def test_mixed_collection(",
          "def test_subplot_key_hash(",
          "def test_specgram(",
          "def test_specgram_magnitude(",
          "def test_specgram_angle(",
          "def test_specgram_fs_none(",
          "def test_specgram_origin_rcparam(",
          "def test_specgram_origin_kwarg(",
          "def test_psd_csd(",
          "def test_spectrum(",
          "def test_psd_csd_edge_cases(",
          "def test_twin_remove(",
          "def test_twin_spines(",
          "def test_twin_spines_on_top(",
          "def test_rcparam_grid_minor(",
          "def test_grid(",
          "def test_reset_grid(",
          "def test_reset_ticks(",
          "def test_vline_limit(",
          "def test_axline_minmax(",
          "def test_empty_shared_subplots(",
          "def test_shared_with_aspect_1(",
          "def test_shared_with_aspect_2(",
          "def test_shared_with_aspect_3(",
          "def test_shared_aspect_error(",
          "def test_axis_errors(",
          "def test_axis_method_errors(",
          "def test_twin_with_aspect(",
          "def test_relim_visible_only(",
          "def test_text_labelsize(",
          "def test_pie_default(",
          "def test_pie_linewidth_0(",
          "def test_pie_center_radius(",
          "def test_pie_linewidth_2(",
          "def test_pie_ccw_true(",
          "def test_pie_frame_grid(",
          "def test_pie_rotatelabels_true(",
          "def test_pie_nolabel_but_legend(",
          "def test_pie_textprops(",
          "def test_pie_get_negative_values(",
          "def test_normalize_kwarg_pie(",
          "def test_pie_hatch_single(",
          "def test_pie_hatch_multi(",
          "def test_set_get_ticklabels(",
          "def test_set_ticks_kwargs_raise_error_without_labels(",
          "def test_set_ticks_with_labels(",
          "def test_xticks_bad_args(",
          "def test_subsampled_ticklabels(",
          "def test_mismatched_ticklabels(",
          "def test_empty_ticks_fixed_loc(",
          "def test_retain_tick_visibility(",
          "def test_tick_label_update(",
          "def test_o_marker_path_snap(",
          "def test_margins(",
          "def test_set_margin_updates_limits(",
          "def test_margins_errors(",
          "def test_length_one_hist(",
          "def test_set_xy_bound(",
          "def test_pathological_hexbin(",
          "def test_color_None(",
          "def test_color_alias(",
          "def test_numerical_hist_label(",
          "def test_unicode_hist_label(",
          "def test_move_offsetlabel(",
          "def test_rc_spines(",
          "def test_rc_grid(",
          "def test_rc_tick(",
          "def test_rc_major_minor_tick(",
          "def test_square_plot(",
          "def test_bad_plot_args(",
          "def test_pcolorfast(",
          "def test_shared_scale(",
          "def test_shared_bool(",
          "def test_violin_point_mass(",
          "def test_errorbar_inputs_shotgun(",
          "def test_dash_offset(",
          "def test_title_pad(",
          "def test_title_location_roundtrip(",
          "def test_title_location_shared(",
          "def test_loglog(",
          "def test_loglog_nonpos(",
          "def test_axes_margins(",
          "def test_remove_shared_axes(",
          "def test_remove_shared_axes_relim(",
          "def test_shared_axes_autoscale(",
          "def test_adjust_numtick_aspect(",
          "def test_auto_numticks(",
          "def test_auto_numticks_log(",
          "def test_broken_barh_empty(",
          "def test_broken_barh_timedelta(",
          "def test_pandas_pcolormesh(",
          "def test_pandas_indexing_dates(",
          "def test_pandas_errorbar_indexing(",
          "def test_pandas_index_shape(",
          "def test_pandas_indexing_hist(",
          "def test_pandas_bar_align_center(",
          "def test_axis_get_tick_params(",
          "def test_axis_set_tick_params_labelsize_labelcolor(",
          "def test_axes_tick_params_gridlines(",
          "def test_axes_tick_params_ylabelside(",
          "def test_axes_tick_params_xlabelside(",
          "def test_none_kwargs(",
          "def test_bar_uint8(",
          "def test_date_timezone_x(",
          "def test_date_timezone_y(",
          "def test_date_timezone_x_and_y(",
          "def test_axisbelow(",
          "def test_titletwiny(",
          "def test_titlesetpos(",
          "def test_title_xticks_top(",
          "def test_title_xticks_top_both(",
          "def test_title_above_offset(",
          "def test_title_no_move_off_page(",
          "def test_offset_label_color(",
          "def test_offset_text_visible(",
          "def test_large_offset(",
          "def test_barb_units(",
          "def test_quiver_units(",
          "def test_bar_color_cycle(",
          "def test_tick_param_label_rotation(",
          "def test_fillbetween_cycle(",
          "def test_log_margins(",
          "def test_color_length_mismatch(",
          "def test_eventplot_legend(",
          "def test_bar_broadcast_args(",
          "def test_invalid_axis_limits(",
          "def test_minorticks_on(",
          "def test_twinx_knows_limits(",
          "def test_zero_linewidth(",
          "def test_empty_errorbar_legend(",
          "def test_plot_decimal(",
          "def test_markerfacecolor_none_alpha(",
          "def test_tick_padding_tightbbox(",
          "def test_inset(",
          "def test_zoom_inset(",
          "def test_inset_polar(",
          "def test_inset_projection(",
          "def test_inset_subclass(",
          "def test_indicate_inset_inverted(",
          "def test_set_position(",
          "def test_spines_properbbox_after_zoom(",
          "def test_limits_after_scroll_zoom(",
          "def test_gettightbbox_ignore_nan(",
          "def test_scatter_series_non_zero_index(",
          "def test_scatter_empty_data(",
          "def test_annotate_across_transforms(",
          "def test_secondary_xy(",
          "def test_secondary_fail(",
          "def test_secondary_resize(",
          "def test_secondary_minorloc(",
          "def test_secondary_formatter(",
          "def test_secondary_repr(",
          "def test_axis_options(",
          "def test_normal_axes(",
          "def test_nodecorator(",
          "def test_displaced_spine(",
          "def test_tickdirs(",
          "def test_minor_accountedfor(",
          "def test_axis_bool_arguments(",
          "def test_axis_extent_arg(",
          "def test_axis_extent_arg2(",
          "def test_hist_auto_bins(",
          "def test_hist_nan_data(",
          "def test_hist_range_and_density(",
          "def test_bar_errbar_zorder(",
          "def test_set_ticks_inverted(",
          "def test_aspect_nonlinear_adjustable_box(",
          "def test_aspect_nonlinear_adjustable_datalim(",
          "def test_box_aspect(",
          "def test_box_aspect_custom_position(",
          "def test_bbox_aspect_axes_init(",
          "def test_set_aspect_negative(",
          "def test_redraw_in_frame(",
          "def test_invisible_axes_events(",
          "def test_xtickcolor_is_not_markercolor(",
          "def test_ytickcolor_is_not_markercolor(",
          "def test_unautoscale(",
          "def test_polar_interpolation_steps_variable_r(",
          "def test_autoscale_tiny_sticky(",
          "def test_xtickcolor_is_not_xticklabelcolor(",
          "def test_ytickcolor_is_not_yticklabelcolor(",
          "def test_relative_ticklabel_sizes(",
          "def test_multiplot_autoscale(",
          "def test_sharing_does_not_link_positions(",
          "def test_2dcolor_plot(",
          "def test_shared_axes_clear(",
          "def test_shared_axes_retick(",
          "def test_ylabel_ha_with_position(",
          "def test_bar_label_location_vertical(",
          "def test_bar_label_location_vertical_yinverted(",
          "def test_bar_label_location_horizontal(",
          "def test_bar_label_location_horizontal_yinverted(",
          "def test_bar_label_location_horizontal_xinverted(",
          "def test_bar_label_location_horizontal_xyinverted(",
          "def test_bar_label_location_center(",
          "def test_centered_bar_label_nonlinear(",
          "def test_centered_bar_label_label_beyond_limits(",
          "def test_bar_label_location_errorbars(",
          "def test_bar_label_fmt(",
          "def test_bar_label_fmt_error(",
          "def test_bar_label_labels(",
          "def test_bar_label_nan_ydata(",
          "def test_bar_label_nan_ydata_inverted(",
          "def test_nan_barlabels(",
          "def test_patch_bounds(",
          "def test_warn_ignored_scatter_kwargs(",
          "def test_artist_sublists(",
          "def test_empty_line_plots(",
          "def test_plot_format_errors(",
          "def test_plot_format(",
          "def test_automatic_legend(",
          "def test_plot_errors(",
          "def test_clim(",
          "def test_bezier_autoscale(",
          "def test_small_autoscale(",
          "def test_get_xticklabel(",
          "def test_bar_leading_nan(",
          "def test_bar_all_nan(",
          "def test_extent_units(",
          "def test_cla_clears_children_axes_and_fig(",
          "def test_scatter_color_repr_error(",
          "def test_zorder_and_explicit_rasterization(",
          "def test_rc_axes_label_formatting("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backends_interactive.py": [
          "def _get_testable_interactive_backends(",
          "def _test_toolbar_button_la_mode_icon(",
          "def _test_interactive_impl(",
          "def test_interactive_backend(",
          "def _test_thread_impl(",
          "def test_interactive_thread_safety(",
          "def _impl_test_lazy_auto_backend_selection(",
          "def test_lazy_auto_backend_selection(",
          "def test_qt5backends_uses_qt5(",
          "def _impl_test_cross_Qt_imports(",
          "def test_cross_Qt_imports(",
          "def test_webagg(",
          "def test_lazy_linux_headless(",
          "def test_qApp_warn(",
          "def _test_number_of_draws_script(",
          "def test_blitting_events(",
          "def _test_figure_leak(",
          "def test_figure_leak_20490("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_bases.py": [
          "def test_uses_per_path(",
          "def test_canvas_ctor(",
          "def test_get_default_filename(",
          "def test_canvas_change(",
          "def test_non_gui_warning(",
          "def test_grab_clear(",
          "def test_location_event_position(",
          "def test_pick(",
          "def test_interactive_zoom(",
          "def test_widgetlock_zoompan(",
          "def test_interactive_colorbar(",
          "def test_toolbar_zoompan(",
          "def test_draw(",
          "def test_interactive_pan(",
          "def test_toolmanager_remove(",
          "def test_toolmanager_get_tool(",
          "def test_toolmanager_update_keymap("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_cairo.py": [
          "def test_patch_alpha_coloring("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_gtk3.py": [
          "def test_correct_key("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_macosx.py": [
          "def test_cached_renderer(",
          "def test_savefig_rcparam("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_nbagg.py": [
          "def test_ipynb("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pdf.py": [
          "def test_use14corefonts(",
          "def test_embed_fonts(",
          "def test_multipage_pagecount(",
          "def test_multipage_properfinalize(",
          "def test_multipage_keep_empty(",
          "def test_composite_image(",
          "def test_indexed_image(",
          "def test_savefig_metadata(",
          "def test_invalid_metadata(",
          "def test_multipage_metadata(",
          "def test_text_urls(",
          "def test_text_rotated_urls(",
          "def test_text_urls_tex(",
          "def test_pdfpages_fspath(",
          "def test_hatching_legend(",
          "def test_grayscale_alpha(",
          "def test_pdf_eps_savefig_when_color_is_none(",
          "def test_failing_latex(",
          "def test_empty_rasterized(",
          "def test_kerning(",
          "def test_glyphs_subset(",
          "def test_multi_font_type3(",
          "def test_multi_font_type42("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pgf.py": [
          "def test_tex_escape(",
          "def test_tex_special_chars(",
          "def test_xelatex(",
          "def test_pdflatex(",
          "def test_rcupdate(",
          "def test_pathclip(",
          "def test_mixedmode(",
          "def test_bbox_inches(",
          "def test_pdf_pages(",
          "def test_pdf_pages_metadata_check(",
          "def test_tex_restart_after_error(",
          "def test_bbox_inches_tight(",
          "def test_png_transparency(",
          "def test_unknown_font(",
          "def test_minus_signs_with_tex(",
          "def test_sketch_params("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_ps.py": [
          "def test_savefig_to_stringio(",
          "def test_patheffects(",
          "def test_tilde_in_tempfilename(",
          "def test_transparency(",
          "def test_transparency_tex(",
          "def test_bbox(",
          "def test_failing_latex(",
          "def test_partial_usetex(",
          "def test_usetex_preamble(",
          "def test_useafm(",
          "def test_type3_font(",
          "def test_colored_hatch_zero_linewidth(",
          "def test_text_clip(",
          "def test_d_glyph(",
          "def test_type42_font_without_prep(",
          "def test_fonttype(",
          "def test_linedash(",
          "def test_empty_line(",
          "def test_no_duplicate_definition(",
          "def test_multi_font_type3(",
          "def test_multi_font_type42(",
          "def test_path_collection(",
          "def test_colorbar_shift("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_qt.py": [
          "def test_fig_close(",
          "def _test_sigint_impl(",
          "def test_sigint(",
          "def _test_other_signal_before_sigint_impl(",
          "def test_other_signal_before_sigint(",
          "def test_fig_sigint_override(",
          "def test_correct_key(",
          "def test_device_pixel_ratio_change(",
          "def test_subplottool(",
          "def test_figureoptions(",
          "def test_figureoptions_with_datetime_axes(",
          "def test_double_resize(",
          "def test_canvas_reinit(",
          "def test_form_widget_get_with_datetime_and_date_fields(",
          "def _test_enums_impl(",
          "def _get_testable_qt_backends(",
          "def test_enums_available("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_svg.py": [
          "def test_visibility(",
          "def test_fill_black_with_alpha(",
          "def test_noscale(",
          "def test_text_urls(",
          "def test_bold_font_output(",
          "def test_bold_font_output_with_none_fonttype(",
          "def test_rasterized(",
          "def test_rasterized_ordering(",
          "def test_prevent_rasterization(",
          "def test_count_bitmaps(",
          "def test_unicode_won(",
          "def test_svgnone_with_data_coordinates(",
          "def test_gid(",
          "def test_savefig_tight(",
          "def test_url(",
          "def test_url_tick(",
          "def test_svg_default_metadata(",
          "def test_svg_clear_default_metadata(",
          "def test_svg_clear_all_metadata(",
          "def test_svg_metadata(",
          "def test_multi_font_type3(",
          "def test_multi_font_type42(",
          "def test_svg_incorrect_metadata(",
          "def test_svg_escape(",
          "def test_svg_font_string(",
          "def test_annotationbbox_gid("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_template.py": [
          "def test_load_template(",
          "def test_load_old_api(",
          "def test_show(",
          "def test_show_old_global_api("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tk.py": [
          "def _isolated_tk_test(",
          "def test_func(",
          "def test_blit(",
          "def test_figuremanager_preserves_host_mainloop(",
          "def test_figuremanager_cleans_own_mainloop(",
          "def test_never_update(",
          "def test_missing_back_button(",
          "def test_canvas_focus(",
          "def test_embedding(",
          "def test_figure("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tools.py": [
          "def test_format_shortcut("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_webagg.py": [
          "def test_webagg_fallback(",
          "def test_webagg_core_no_toolbar("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_basic.py": [
          "def test_simple(",
          "def test_override_builtins(",
          "def test_lazy_imports("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_bbox_tight.py": [
          "def test_bbox_inches_tight(",
          "def test_bbox_inches_tight_suptile_legend(",
          "def test_bbox_inches_tight_suptitle_non_default(",
          "def test_bbox_inches_tight_clipping(",
          "def test_bbox_inches_tight_raster(",
          "def test_only_on_non_finite_bbox(",
          "def test_tight_pcolorfast(",
          "def test_noop_tight_bbox(",
          "def test_bbox_inches_fixed_aspect("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_category.py": [
          "def test_unit(",
          "def test_update(",
          "def test_non_string_fails(",
          "def test_non_string_update_fails(",
          "def test_convert(",
          "def test_convert_one_string(",
          "def test_convert_fail(",
          "def test_axisinfo(",
          "def test_default_units(",
          "def test_StrCategoryLocator(",
          "def test_StrCategoryLocatorPlot(",
          "def test_StrCategoryFormatter(",
          "def test_StrCategoryFormatterPlot(",
          "def axis_test(",
          "def test_plot_bytes(",
          "def test_plot_numlike(",
          "def test_plot_unicode(",
          "def test_data(",
          "def test_plot_xaxis(",
          "def test_plot_yaxis(",
          "def test_plot_xyaxis(",
          "def test_update_plot(",
          "def test_mixed_type_exception(",
          "def test_mixed_type_update_exception(",
          "def test_overriding_units_in_plot(",
          "def test_no_deprecation_on_empty_data(",
          "def test_hist("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cbook.py": [
          "def test_bad_first_arg(",
          "def test_string_seq(",
          "def test_datetime(",
          "def test_rgba(",
          "def test_form_main_list(",
          "def test_form_each_dict(",
          "def test_form_dict_keys(",
          "def test_results_baseline(",
          "def test_results_bootstrapped(",
          "def test_results_whiskers_float(",
          "def test_results_whiskers_range(",
          "def test_results_whiskers_percentiles(",
          "def test_results_withlabels(",
          "def test_label_error(",
          "def test_bad_dims(",
          "def test_boxplot_stats_autorange_false(",
          "def test_cid_restore(",
          "def test_callback_complete(",
          "def test_callback_disconnect(",
          "def test_callback_wrong_disconnect(",
          "def test_registration_on_non_empty_registry(",
          "def test_pickling(",
          "def test_callbackregistry_default_exception_handler(",
          "def test_callbackregistry_custom_exception_handler(",
          "def test_callbackregistry_signals(",
          "def test_callbackregistry_blocking(",
          "def test_func1(",
          "def test_func2(",
          "def test_strip_comment(",
          "def test_strip_comment_invalid(",
          "def test_sanitize_sequence(",
          "def test_normalize_kwargs_fail(",
          "def test_normalize_kwargs_pass(",
          "def test_warn_external_frame_embedded_python(",
          "def test_to_prestep(",
          "def test_to_prestep_empty(",
          "def test_to_poststep(",
          "def test_to_poststep_empty(",
          "def test_to_midstep(",
          "def test_to_midstep_empty(",
          "def test_step_fails(",
          "def test_grouper(",
          "def test_grouper_private(",
          "def test_flatiter(",
          "def test__safe_first_finite_all_nan(",
          "def test__safe_first_finite_all_inf(",
          "def test_reshape2d(",
          "def test_reshape2d_pandas(",
          "def test_reshape2d_xarray(",
          "def test_index_of_pandas(",
          "def test_index_of_xarray(",
          "def test_contiguous_regions(",
          "def test_safe_first_element_pandas_series(",
          "def test_warn_external(",
          "def test_array_patch_perimeters(",
          "def test_setattr_cm(",
          "def test_format_approx(",
          "def test_safe_first_element_with_none(",
          "def test_auto_format_str("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_collections.py": [
          "def test__EventCollection__get_props(",
          "def test__EventCollection__set_positions(",
          "def test__EventCollection__add_positions(",
          "def test__EventCollection__append_positions(",
          "def test__EventCollection__extend_positions(",
          "def test__EventCollection__switch_orientation(",
          "def test__EventCollection__switch_orientation_2x(",
          "def test__EventCollection__set_orientation(",
          "def test__EventCollection__set_linelength(",
          "def test__EventCollection__set_lineoffset(",
          "def test__EventCollection__set_prop(",
          "def test__EventCollection__set_color(",
          "def test_null_collection_datalim(",
          "def test_no_offsets_datalim(",
          "def test_add_collection(",
          "def test_collection_log_datalim(",
          "def test_quiver_limits(",
          "def test_barb_limits(",
          "def test_EllipseCollection(",
          "def test_polycollection_close(",
          "def test_regularpolycollection_rotate(",
          "def test_regularpolycollection_scale(",
          "def test_picking(",
          "def test_quadmesh_contains(",
          "def test_quadmesh_contains_concave(",
          "def test_quadmesh_cursor_data(",
          "def test_quadmesh_cursor_data_multiple_points(",
          "def test_linestyle_single_dashes(",
          "def test_size_in_xy(",
          "def test_pandas_indexing(",
          "def test_lslw_bcast(",
          "def test_set_wrong_linestyle(",
          "def test_capstyle(",
          "def test_joinstyle(",
          "def test_cap_and_joinstyle_image(",
          "def test_scatter_post_alpha(",
          "def test_scatter_alpha_array(",
          "def test_pathcollection_legend_elements(",
          "def test_EventCollection_nosort(",
          "def test_collection_set_verts_array(",
          "def test_collection_set_array(",
          "def test_blended_collection_autolim(",
          "def test_singleton_autolim(",
          "def test_autolim_with_zeros(",
          "def test_quadmesh_set_array_validation(",
          "def test_quadmesh_get_coordinates(",
          "def test_quadmesh_set_array(",
          "def test_quadmesh_vmin_vmax(",
          "def test_quadmesh_alpha_array(",
          "def test_alpha_validation(",
          "def test_legend_inverse_size_label_relationship(",
          "def test_color_logic(",
          "def test_LineCollection_args(",
          "def test_array_wrong_dimensions(",
          "def test_get_segments(",
          "def test_set_offsets_late(",
          "def test_set_offset_transform(",
          "def test_set_offset_units(",
          "def test_check_masked_offsets(",
          "def test_masked_set_offsets(",
          "def test_check_offsets_dtype("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colorbar.py": [
          "def test_colorbar_extension_shape(",
          "def test_colorbar_extension_length(",
          "def test_colorbar_extension_inverted_axis(",
          "def test_colorbar_positioning(",
          "def test_colorbar_single_ax_panchor_false(",
          "def test_colorbar_single_ax_panchor_east(",
          "def test_contour_colorbar(",
          "def test_gridspec_make_colorbar(",
          "def test_colorbar_single_scatter(",
          "def test_remove_from_figure(",
          "def test_remove_from_figure_cl(",
          "def test_colorbarbase(",
          "def test_parentless_mappable(",
          "def test_colorbar_closed_patch(",
          "def test_colorbar_ticks(",
          "def test_colorbar_minorticks_on_off(",
          "def test_cbar_minorticks_for_rc_xyminortickvisible(",
          "def test_colorbar_autoticks(",
          "def test_colorbar_autotickslog(",
          "def test_colorbar_get_ticks(",
          "def test_colorbar_lognorm_extension(",
          "def test_colorbar_powernorm_extension(",
          "def test_colorbar_axes_kw(",
          "def test_colorbar_log_minortick_labels(",
          "def test_colorbar_renorm(",
          "def test_colorbar_format(",
          "def test_colorbar_scale_reset(",
          "def test_colorbar_get_ticks_2(",
          "def test_colorbar_inverted_ticks(",
          "def test_mappable_no_alpha(",
          "def test_mappable_2d_alpha(",
          "def test_colorbar_label(",
          "def test_keeping_xlabel(",
          "def test_colorbar_int(",
          "def test_anchored_cbar_position_using_specgrid(",
          "def test_colorbar_change_lim_scale(",
          "def test_axes_handles_same_functions(",
          "def test_inset_colorbar_layout(",
          "def test_twoslope_colorbar(",
          "def test_remove_cb_whose_mappable_has_no_figure(",
          "def test_aspects(",
          "def test_proportional_colorbars(",
          "def test_colorbar_extend_drawedges(",
          "def test_colorbar_contourf_extend_patches(",
          "def test_negative_boundarynorm(",
          "def test_centerednorm(",
          "def test_nonorm(",
          "def test_boundaries(",
          "def test_colorbar_no_warning_rcparams_grid_true(",
          "def test_colorbar_set_formatter_locator(",
          "def test_colorbar_extend_alpha(",
          "def test_offset_text_loc(",
          "def test_title_text_loc(",
          "def test_passing_location(",
          "def test_colorbar_errors(",
          "def test_colorbar_axes_parmeters("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colors.py": [
          "def test_create_lookup_table(",
          "def test_index_dtype(",
          "def test_resampled(",
          "def test_register_cmap(",
          "def test_colormaps_get_cmap(",
          "def test_double_register_builtin_cmap(",
          "def test_unregister_builtin_cmap(",
          "def test_colormap_copy(",
          "def test_colormap_equals(",
          "def test_colormap_endian(",
          "def test_colormap_invalid(",
          "def test_colormap_return_types(",
          "def test_BoundaryNorm(",
          "def test_CenteredNorm(",
          "def test_lognorm_invalid(",
          "def test_LogNorm(",
          "def test_LogNorm_inverse(",
          "def test_PowerNorm(",
          "def test_PowerNorm_translation_invariance(",
          "def test_Normalize(",
          "def test_FuncNorm(",
          "def test_TwoSlopeNorm_autoscale(",
          "def test_TwoSlopeNorm_autoscale_None_vmin(",
          "def test_TwoSlopeNorm_autoscale_None_vmax(",
          "def test_TwoSlopeNorm_scale(",
          "def test_TwoSlopeNorm_scaleout_center(",
          "def test_TwoSlopeNorm_scaleout_center_max(",
          "def test_TwoSlopeNorm_Even(",
          "def test_TwoSlopeNorm_Odd(",
          "def test_TwoSlopeNorm_VminEqualsVcenter(",
          "def test_TwoSlopeNorm_VmaxEqualsVcenter(",
          "def test_TwoSlopeNorm_VminGTVcenter(",
          "def test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax(",
          "def test_TwoSlopeNorm_VcenterGTVmax(",
          "def test_TwoSlopeNorm_premature_scaling(",
          "def test_SymLogNorm(",
          "def test_SymLogNorm_colorbar(",
          "def test_SymLogNorm_single_zero(",
          "def test_init(",
          "def test_norm(",
          "def _inverse_tester(",
          "def _scalar_tester(",
          "def _mask_tester(",
          "def test_cmap_and_norm_from_levels_and_colors(",
          "def test_boundarynorm_and_colorbarbase(",
          "def test_cmap_and_norm_from_levels_and_colors2(",
          "def test_rgb_hsv_round_trip(",
          "def test_autoscale_masked(",
          "def test_light_source_topo_surface(",
          "def test_light_source_shading_default(",
          "def test_light_source_shading_empty_mask(",
          "def test_light_source_masked_shading(",
          "def test_light_source_hillshading(",
          "def test_light_source_planar_hillshading(",
          "def test_color_names(",
          "def test_pandas_iterable(",
          "def test_colormap_reversing(",
          "def test_has_alpha_channel(",
          "def test_cn(",
          "def test_conversions(",
          "def test_conversions_masked(",
          "def test_to_rgba_array_single_str(",
          "def test_to_rgba_array_alpha_array(",
          "def test_failed_conversions(",
          "def test_grey_gray(",
          "def test_tableau_order(",
          "def test_ndarray_subclass_norm(",
          "def test_same_color(",
          "def test_hex_shorthand_notation(",
          "def test_repr_png(",
          "def test_repr_html(",
          "def test_get_under_over_bad(",
          "def test_non_mutable_get_values(",
          "def test_colormap_alpha_array(",
          "def test_colormap_bad_data_with_alpha(",
          "def test_2d_to_rgba(",
          "def test_set_dict_to_rgba(",
          "def test_norm_deepcopy(",
          "def test_norm_callback(",
          "def test_scalarmappable_norm_update(",
          "def test_norm_update_figs(",
          "def test_make_norm_from_scale_name(",
          "def test_color_sequences(",
          "def test_cm_set_cmap_error("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_compare_images.py": [
          "def test_image_comparison_expect_rms("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_constrainedlayout.py": [
          "def test_constrained_layout1(",
          "def test_constrained_layout2(",
          "def test_constrained_layout3(",
          "def test_constrained_layout4(",
          "def test_constrained_layout5(",
          "def test_constrained_layout6(",
          "def test_identical_subgridspec(",
          "def test_constrained_layout7(",
          "def test_constrained_layout8(",
          "def test_constrained_layout9(",
          "def test_constrained_layout10(",
          "def test_constrained_layout11(",
          "def test_constrained_layout11rat(",
          "def test_constrained_layout12(",
          "def test_constrained_layout13(",
          "def test_constrained_layout14(",
          "def test_constrained_layout15(",
          "def test_constrained_layout16(",
          "def test_constrained_layout17(",
          "def test_constrained_layout18(",
          "def test_constrained_layout19(",
          "def test_constrained_layout20(",
          "def test_constrained_layout21(",
          "def test_constrained_layout22(",
          "def test_constrained_layout23(",
          "def test_colorbar_location(",
          "def test_hidden_axes(",
          "def test_colorbar_align(",
          "def test_colorbars_no_overlapV(",
          "def test_colorbars_no_overlapH(",
          "def test_manually_set_position(",
          "def test_bboxtight(",
          "def test_bbox(",
          "def test_align_labels(",
          "def test_suplabels(",
          "def test_gridspec_addressing(",
          "def test_discouraged_api(",
          "def test_kwargs(",
          "def test_rect(",
          "def test_compressed1(",
          "def test_set_constrained_layout(",
          "def test_constrained_toggle(",
          "def test_layout_leak("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_container.py": [
          "def test_stem_remove(",
          "def test_errorbar_remove("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_contour.py": [
          "def test_contour_shape_1d_valid(",
          "def test_contour_shape_2d_valid(",
          "def test_contour_shape_error(",
          "def test_contour_no_valid_levels(",
          "def test_contour_Nlevels(",
          "def test_contour_manual_labels(",
          "def test_given_colors_levels_and_extends(",
          "def test_log_locator_levels(",
          "def test_contour_datetime_axis(",
          "def test_labels(",
          "def test_corner_mask(",
          "def test_contourf_decreasing_levels(",
          "def test_contourf_symmetric_locator(",
          "def test_circular_contour_warning(",
          "def test_clabel_zorder(",
          "def test_contourf_log_extension(",
          "def test_contour_addlines(",
          "def test_contour_uneven(",
          "def test_contour_linewidth(",
          "def test_label_nonagg(",
          "def test_contour_closed_line_loop(",
          "def test_quadcontourset_reuse(",
          "def test_contour_manual(",
          "def test_contour_line_start_on_corner_edge(",
          "def test_find_nearest_contour(",
          "def test_find_nearest_contour_no_filled(",
          "def test_contour_autolabel_beyond_powerlimits(",
          "def test_contourf_legend_elements(",
          "def test_contour_legend_elements(",
          "def test_algorithm_name(",
          "def test_algorithm_supports_corner_mask(",
          "def test_all_algorithms(",
          "def test_subfigure_clabel(",
          "def test_linestyles(",
          "def test_negative_linestyles(",
          "def test_contour_remove(",
          "def test_bool_autolevel("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cycles.py": [
          "def test_colorcycle_basic(",
          "def test_marker_cycle(",
          "def test_marker_cycle_kwargs_arrays_iterators(",
          "def test_linestylecycle_basic(",
          "def test_fillcycle_basic(",
          "def test_fillcycle_ignore(",
          "def test_property_collision_plot(",
          "def test_property_collision_fill(",
          "def test_valid_input_forms(",
          "def test_cycle_reset(",
          "def test_invalid_input_forms("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dates.py": [
          "def test_date_numpyx(",
          "def test_date_date2num_numpy(",
          "def test_date2num_NaT(",
          "def test_date2num_NaT_scalar(",
          "def test_date2num_masked(",
          "def test_date_empty(",
          "def test_date_not_empty(",
          "def test_axhline(",
          "def test_date_axhspan(",
          "def test_date_axvspan(",
          "def test_date_axhline(",
          "def test_date_axvline(",
          "def test_too_many_date_ticks(",
          "def test_RRuleLocator(",
          "def test_RRuleLocator_dayrange(",
          "def test_RRuleLocator_close_minmax(",
          "def test_DateFormatter(",
          "def test_locator_set_formatter(",
          "def test_date_formatter_callable(",
          "def test_date_formatter_usetex(",
          "def test_drange(",
          "def test_auto_date_locator(",
          "def test_auto_date_locator_intmult(",
          "def test_concise_formatter_subsecond(",
          "def test_concise_formatter(",
          "def test_concise_formatter_show_offset(",
          "def test_concise_converter_stays(",
          "def test_offset_changes(",
          "def test_concise_formatter_usetex(",
          "def test_concise_formatter_formats(",
          "def test_concise_formatter_zformats(",
          "def test_concise_formatter_tz(",
          "def test_auto_date_locator_intmult_tz(",
          "def test_date_inverted_limit(",
          "def _test_date2num_dst(",
          "def test_date2num_dst(",
          "def test_date2num_dst_pandas(",
          "def _test_rrulewrapper(",
          "def test_rrulewrapper(",
          "def test_rrulewrapper_pytz(",
          "def test_yearlocator_pytz(",
          "def test_YearLocator(",
          "def test_DayLocator(",
          "def test_tz_utc(",
          "def test_num2timedelta(",
          "def test_datetime64_in_list(",
          "def test_change_epoch(",
          "def test_warn_notintervals(",
          "def test_change_converter(",
          "def test_change_interval_multiples(",
          "def test_julian2num(",
          "def test_DateLocator(",
          "def test_datestr2num(",
          "def test_concise_formatter_exceptions(",
          "def test_concise_formatter_call(",
          "def test_date_ticker_factory(",
          "def test_datetime_masked(",
          "def test_num2date_error(",
          "def test_num2date_roundoff(",
          "def test_DateFormatter_settz("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_determinism.py": [
          "def test_determinism_check(",
          "def test_determinism_source_date_epoch("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_doc.py": [
          "def test_sphinx_gallery_example_header("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dviread.py": [
          "def test_PsfontsMap(",
          "def test_dviread("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_figure.py": [
          "def test_align_labels(",
          "def test_align_labels_stray_axes(",
          "def test_figure_label(",
          "def test_fignum_exists(",
          "def test_clf_keyword(",
          "def test_figure(",
          "def test_figure_legend(",
          "def test_gca(",
          "def test_add_subplot_subclass(",
          "def test_add_subplot_invalid(",
          "def test_suptitle(",
          "def test_suptitle_fontproperties(",
          "def test_alpha(",
          "def test_too_many_figures(",
          "def test_iterability_axes_argument(",
          "def test_set_fig_size(",
          "def test_axes_remove(",
          "def test_figaspect(",
          "def test_autofmt_xdate(",
          "def test_change_dpi(",
          "def test_invalid_figure_size(",
          "def test_invalid_figure_add_axes(",
          "def test_subplots_shareax_loglabels(",
          "def test_savefig(",
          "def test_savefig_warns(",
          "def test_savefig_backend(",
          "def test_savefig_pixel_ratio(",
          "def test_savefig_preserve_layout_engine(",
          "def test_savefig_locate_colorbar(",
          "def test_figure_repr(",
          "def test_valid_layouts(",
          "def test_invalid_layouts(",
          "def test_tightlayout_autolayout_deconflict(",
          "def test_layout_change_warning(",
          "def test_add_artist(",
          "def test_fspath(",
          "def test_tightbbox(",
          "def test_axes_removal(",
          "def test_removed_axis(",
          "def test_figure_clear(",
          "def test_clf_not_redefined(",
          "def test_picking_does_not_stale(",
          "def test_add_subplot_twotuple(",
          "def test_tightbbox_box_aspect(",
          "def test_animated_with_canvas_change(",
          "def test_basic(",
          "def test_all_nested(",
          "def test_nested(",
          "def test_nested_tuple(",
          "def test_nested_width_ratios(",
          "def test_nested_height_ratios(",
          "def test_empty(",
          "def test_fail_list_of_str(",
          "def test_subplot_kw(",
          "def test_per_subplot_kw(",
          "def test_string_parser(",
          "def test_per_subplot_kw_expander(",
          "def test_extra_per_subplot_kw(",
          "def test_single_str_input(",
          "def test_fail(",
          "def test_hashable_keys(",
          "def test_user_order(",
          "def test_nested_user_order(",
          "def test_share_all(",
          "def test_reused_gridspec(",
          "def test_subfigure(",
          "def test_subfigure_tightbbox(",
          "def test_subfigure_dpi(",
          "def test_subfigure_ss(",
          "def test_subfigure_double(",
          "def test_subfigure_spanning(",
          "def test_subfigure_ticks(",
          "def test_subfigure_scatter_size(",
          "def test_subfigure_pdf(",
          "def test_subfigures_wspace_hspace(",
          "def test_add_subplot_kwargs(",
          "def test_add_axes_kwargs(",
          "def test_ginput(",
          "def test_waitforbuttonpress(",
          "def test_kwargs_pass(",
          "def test_rcparams(",
          "def test_deepcopy(",
          "def test_unpickle_with_device_pixel_ratio(",
          "def test_gridspec_no_mutate_input(",
          "def test_get_constrained_layout_pads("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_fontconfig_pattern.py": [
          "def test_fontconfig_pattern(",
          "def test_fontconfig_str(",
          "def test_fontconfig_unknown_constant("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_font_manager.py": [
          "def test_font_priority(",
          "def test_score_weight(",
          "def test_json_serialization(",
          "def test_otf(",
          "def test_get_fontconfig_fonts(",
          "def test_hinting_factor(",
          "def test_utf16m_sfnt(",
          "def test_find_ttc(",
          "def test_find_noto(",
          "def test_find_invalid(",
          "def test_user_fonts_linux(",
          "def test_addfont_as_path(",
          "def test_user_fonts_win32(",
          "def test_fork(",
          "def test_missing_family(",
          "def _test_threading(",
          "def test_fontcache_thread_safe(",
          "def test_fontentry_dataclass(",
          "def test_fontentry_dataclass_invalid_path(",
          "def test_get_font_names(",
          "def test_donot_cache_tracebacks("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ft2font.py": [
          "def test_fallback_errors(",
          "def test_ft2font_positive_hinting_factor(",
          "def test_fallback_smoke(",
          "def test_font_fallback_chinese(",
          "def test__get_fontmap("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_getattr.py": [
          "def test_getattr("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_gridspec.py": [
          "def test_equal(",
          "def test_width_ratios(",
          "def test_height_ratios(",
          "def test_repr("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_image.py": [
          "def test_image_interps(",
          "def test_alpha_interp(",
          "def test_interp_nearest_vs_none(",
          "def test_figimage(",
          "def test_image_python_io(",
          "def test_imshow_antialiased(",
          "def test_imshow_zoom(",
          "def test_imshow_pil(",
          "def test_imread_pil_uint16(",
          "def test_imread_fspath(",
          "def test_imsave(",
          "def test_imsave_fspath(",
          "def test_imsave_color_alpha(",
          "def test_imsave_pil_kwargs_png(",
          "def test_imsave_pil_kwargs_tiff(",
          "def test_image_alpha(",
          "def test_cursor_data(",
          "def test_format_cursor_data(",
          "def test_image_clip(",
          "def test_image_cliprect(",
          "def test_imshow(",
          "def test_imshow_10_10_1(",
          "def test_imshow_10_10_2(",
          "def test_imshow_10_10_5(",
          "def test_no_interpolation_origin(",
          "def test_image_shift(",
          "def test_image_edges(",
          "def test_image_composite_background(",
          "def test_image_composite_alpha(",
          "def test_clip_path_disables_compositing(",
          "def test_rasterize_dpi(",
          "def test_bbox_image_inverted(",
          "def test_get_window_extent_for_AxisImage(",
          "def test_zoom_and_clip_upper_origin(",
          "def test_nonuniformimage_setcmap(",
          "def test_nonuniformimage_setnorm(",
          "def test_jpeg_2d(",
          "def test_jpeg_alpha(",
          "def test_axesimage_setdata(",
          "def test_figureimage_setdata(",
          "def test_setdata_xya(",
          "def test_minimized_rasterized(",
          "def test_load_from_url(",
          "def test_log_scale_image(",
          "def test_rotate_image(",
          "def test_image_preserve_size(",
          "def test_image_preserve_size2(",
          "def test_mask_image_over_under(",
          "def test_mask_image(",
          "def test_mask_image_all(",
          "def test_imshow_endianess(",
          "def test_imshow_masked_interpolation(",
          "def test_imshow_no_warn_invalid(",
          "def test_imshow_clips_rgb_to_valid_range(",
          "def test_imshow_flatfield(",
          "def test_imshow_bignumbers(",
          "def test_imshow_bignumbers_real(",
          "def test_empty_imshow(",
          "def test_imshow_float16(",
          "def test_imshow_float128(",
          "def test_imshow_bool(",
          "def test_full_invalid(",
          "def test_composite(",
          "def test_relim(",
          "def test_unclipped(",
          "def test_respects_bbox(",
          "def test_image_cursor_formatting(",
          "def test_image_array_alpha(",
          "def test_image_array_alpha_validation(",
          "def test_exact_vmin(",
          "def test_image_placement(",
          "def test_quantitynd(",
          "def test_imshow_quantitynd(",
          "def test_norm_change(",
          "def test_huge_range_log(",
          "def test_spy_box(",
          "def test_nonuniform_and_pcolor(",
          "def test_rgba_antialias(",
          "def test_large_image(",
          "def test_str_norms("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_legend.py": [
          "def test_legend_ordereddict(",
          "def test_legend_auto1(",
          "def test_legend_auto2(",
          "def test_legend_auto3(",
          "def test_legend_auto4(",
          "def test_legend_auto5(",
          "def test_various_labels(",
          "def test_legend_label_with_leading_underscore(",
          "def test_labels_first(",
          "def test_multiple_keys(",
          "def test_alpha_rgba(",
          "def test_alpha_rcparam(",
          "def test_fancy(",
          "def test_framealpha(",
          "def test_rc(",
          "def test_legend_expand(",
          "def test_hatching(",
          "def test_legend_remove(",
          "def test_reverse_legend_handles_and_labels(",
          "def test_reverse_legend_display(",
          "def test_legend_no_args(",
          "def test_legend_positional_handles_labels(",
          "def test_legend_positional_handles_only(",
          "def test_legend_positional_labels_only(",
          "def test_legend_three_args(",
          "def test_legend_handler_map(",
          "def test_legend_kwargs_handles_only(",
          "def test_legend_kwargs_labels_only(",
          "def test_legend_kwargs_handles_labels(",
          "def test_warn_mixed_args_and_kwargs(",
          "def test_parasite(",
          "def test_legend_handle_label(",
          "def test_legend_no_args(",
          "def test_legend_label_arg(",
          "def test_legend_label_three_args(",
          "def test_legend_label_three_args_pluskw(",
          "def test_legend_kw_args(",
          "def test_warn_args_kwargs(",
          "def test_figure_legend_outside(",
          "def test_legend_stackplot(",
          "def test_cross_figure_patch_legend(",
          "def test_nanscatter(",
          "def test_legend_repeatcheckok(",
          "def test_not_covering_scatter(",
          "def test_not_covering_scatter_transform(",
          "def test_linecollection_scaled_dashes(",
          "def test_handler_numpoints(",
          "def test_text_nohandler_warning(",
          "def test_empty_bar_chart_with_legend(",
          "def test_shadow_framealpha(",
          "def test_legend_title_empty(",
          "def test_legend_proper_window_extent(",
          "def test_window_extent_cached_renderer(",
          "def test_legend_title_fontprop_fontsize(",
          "def test_legend_alignment(",
          "def test_legend_set_alignment(",
          "def test_legend_labelcolor_single(",
          "def test_legend_labelcolor_list(",
          "def test_legend_labelcolor_linecolor(",
          "def test_legend_pathcollection_labelcolor_linecolor(",
          "def test_legend_pathcollection_labelcolor_linecolor_iterable(",
          "def test_legend_pathcollection_labelcolor_linecolor_cmap(",
          "def test_legend_labelcolor_markeredgecolor(",
          "def test_legend_pathcollection_labelcolor_markeredgecolor(",
          "def test_legend_pathcollection_labelcolor_markeredgecolor_iterable(",
          "def test_legend_pathcollection_labelcolor_markeredgecolor_cmap(",
          "def test_legend_labelcolor_markerfacecolor(",
          "def test_legend_pathcollection_labelcolor_markerfacecolor(",
          "def test_legend_pathcollection_labelcolor_markerfacecolor_iterable(",
          "def test_legend_pathcollection_labelcolor_markfacecolor_cmap(",
          "def test_legend_labelcolor_rcparam_single(",
          "def test_legend_labelcolor_rcparam_linecolor(",
          "def test_legend_labelcolor_rcparam_markeredgecolor(",
          "def test_legend_labelcolor_rcparam_markeredgecolor_short(",
          "def test_legend_labelcolor_rcparam_markerfacecolor(",
          "def test_legend_labelcolor_rcparam_markerfacecolor_short(",
          "def test_get_set_draggable(",
          "def test_legend_draggable(",
          "def test_alpha_handles(",
          "def test_usetex_no_warn(",
          "def test_warn_big_data_best_loc(",
          "def test_no_warn_big_data_when_loc_specified(",
          "def test_plot_multiple_input_multiple_label(",
          "def test_plot_multiple_input_single_label(",
          "def test_plot_single_input_multiple_label(",
          "def test_plot_multiple_label_incorrect_length_exception(",
          "def test_legend_face_edgecolor(",
          "def test_legend_text_axes(",
          "def test_handlerline2d(",
          "def test_subfigure_legend(",
          "def test_setting_alpha_keeps_polycollection_color(",
          "def test_legend_markers_from_line2d(",
          "def test_ncol_ncols("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_lines.py": [
          "def test_segment_hits(",
          "def test_invisible_Line_rendering(",
          "def test_set_line_coll_dash(",
          "def test_invalid_line_data(",
          "def test_line_dashes(",
          "def test_line_colors(",
          "def test_valid_colors(",
          "def test_linestyle_variants(",
          "def test_valid_linestyles(",
          "def test_drawstyle_variants(",
          "def test_no_subslice_with_transform(",
          "def test_valid_drawstyles(",
          "def test_set_drawstyle(",
          "def test_set_line_coll_dash_image(",
          "def test_marker_fill_styles(",
          "def test_markerfacecolor_fillstyle(",
          "def test_lw_scaling(",
          "def test_is_sorted_and_has_non_nan(",
          "def test_step_markers(",
          "def test_markevery(",
          "def add_test(",
          "def add_test(",
          "def test_markevery_figure_line_unsupported_relsize(",
          "def test_marker_as_markerstyle(",
          "def test_striped_lines(",
          "def test_odd_dashes(",
          "def test_picking(",
          "def test_input_copy(",
          "def test_markevery_prop_cycle("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_marker.py": [
          "def test_marker_fillstyle(",
          "def test_markers_valid(",
          "def test_deprecated_marker(",
          "def test_markers_invalid(",
          "def test_poly_marker(",
          "def test_star_marker(",
          "def test_asterisk_marker(",
          "def test_marker_clipping(",
          "def test_marker_init_transforms(",
          "def test_marker_init_joinstyle(",
          "def test_marker_init_captyle(",
          "def test_marker_transformed(",
          "def test_marker_rotated_invalid(",
          "def test_marker_rotated(",
          "def test_marker_scaled(",
          "def test_alt_transform("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mathtext.py": [
          "def test_mathtext_rendering(",
          "def test_mathtext_rendering_svgastext(",
          "def test_mathtext_rendering_lightweight(",
          "def test_mathfont_rendering(",
          "def test_short_long_accents(",
          "def test_fontinfo(",
          "def test_mathtext_exceptions(",
          "def test_get_unicode_index_exception(",
          "def test_single_minus_sign(",
          "def test_spaces(",
          "def test_operator_space(",
          "def test_inverted_delimiters(",
          "def test_genfrac_displaystyle(",
          "def test_mathtext_fallback_valid(",
          "def test_mathtext_fallback_invalid(",
          "def test_mathtext_fallback(",
          "def test_math_to_image(",
          "def test_math_fontfamily(",
          "def test_default_math_fontfamily(",
          "def test_argument_order(",
          "def test_mathtext_cmr10_minus_sign("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_matplotlib.py": [
          "def test_parse_to_version_info(",
          "def test_tmpconfigdir_warning(",
          "def test_importable_with_no_home(",
          "def test_use_doc_standard_backends(",
          "def test_importable_with__OO("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mlab.py": [
          "def test_stride_windows_invalid_input_shape(",
          "def test_stride_windows_invalid_params(",
          "def test_stride_windows(",
          "def test_stride_windows_n32_noverlap0_unflatten(",
          "def test_window(",
          "def test_detrend_none(",
          "def test_detrend_mean(",
          "def test_detrend_mean_1d_base_slope_off_list_andor_axis0(",
          "def test_detrend_mean_2d(",
          "def test_detrend_ValueError(",
          "def test_detrend_mean_ValueError(",
          "def test_detrend_linear(",
          "def test_detrend_str_linear_1d(",
          "def test_detrend_linear_2d(",
          "def test_spectral_helper_raises(",
          "def test_single_spectrum_helper_unsupported_modes(",
          "def test_spectral_helper_psd(",
          "def test_csd(",
          "def test_csd_padding(",
          "def test_psd(",
          "def test_psd_detrend(",
          "def test_psd_window_hanning(",
          "def test_psd_window_hanning_detrend_linear(",
          "def test_psd_window_flattop(",
          "def test_psd_windowarray(",
          "def test_psd_windowarray_scale_by_freq(",
          "def test_spectrum(",
          "def test_specgram(",
          "def test_specgram_warn_only1seg(",
          "def test_psd_csd_equal(",
          "def test_specgram_auto_default_psd_equal(",
          "def test_specgram_complex_equivalent(",
          "def test_psd_windowarray_equal(",
          "def test_cohere(",
          "def test_kde_integer_input(",
          "def test_gaussian_kde_covariance_caching(",
          "def test_kde_bandwidth_method(",
          "def test_no_data(",
          "def test_single_dataset_element(",
          "def test_silverman_multidim_dataset(",
          "def test_silverman_singledim_dataset(",
          "def test_scott_multidim_dataset(",
          "def test_scott_singledim_dataset(",
          "def test_scalar_empty_dataset(",
          "def test_scalar_covariance_dataset(",
          "def test_callable_covariance_dataset(",
          "def test_callable_singledim_dataset(",
          "def test_wrong_bw_method(",
          "def test_evaluate_diff_dim(",
          "def test_evaluate_inv_dim(",
          "def test_evaluate_dim_and_num(",
          "def test_evaluate_point_dim_not_one(",
          "def test_evaluate_equal_dim_and_num_lt(",
          "def test_psd_onesided_norm(",
          "def test_psd_oversampling("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_offsetbox.py": [
          "def test_offsetbox_clipping(",
          "def test_offsetbox_clip_children(",
          "def test_offsetbox_loc_codes(",
          "def test_expand_with_tight_layout(",
          "def test_get_packed_offsets(",
          "def test_get_packed_offsets_fixed(",
          "def test_get_packed_offsets_expand(",
          "def test_get_packed_offsets_equal(",
          "def test_get_packed_offsets_equal_total_none_sep_none(",
          "def test_picking(",
          "def test_anchoredtext_horizontal_alignment(",
          "def test_annotationbbox_extents(",
          "def test_zorder(",
          "def test_arrowprops_copied(",
          "def test_packers(",
          "def test_paddedbox(",
          "def test_remove_draggable("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_patches.py": [
          "def test_Polygon_close(",
          "def test_corner_center(",
          "def test_rotate_rect(",
          "def test_rotate_rect_draw(",
          "def test_dash_offset_patch_draw(",
          "def test_negative_rect(",
          "def test_clip_to_bbox(",
          "def test_patch_alpha_coloring(",
          "def test_patch_alpha_override(",
          "def test_patch_color_none(",
          "def test_patch_custom_linestyle(",
          "def test_patch_linestyle_accents(",
          "def test_patch_linestyle_none(",
          "def test_wedge_movement(",
          "def test_wedge_range(",
          "def test_patch_str(",
          "def test_multi_color_hatch(",
          "def test_units_rectangle(",
          "def test_connection_patch(",
          "def test_connection_patch_fig(",
          "def test_datetime_rectangle(",
          "def test_datetime_datetime_fails(",
          "def test_contains_point(",
          "def test_contains_points(",
          "def test_shadow(",
          "def test_fancyarrow_units(",
          "def test_fancyarrow_setdata(",
          "def test_large_arc(",
          "def test_rotated_arcs(",
          "def test_fancyarrow_shape_error(",
          "def test_boxstyle_errors(",
          "def test_annulus(",
          "def test_annulus_setters(",
          "def test_annulus_setters2(",
          "def test_degenerate_polygon(",
          "def test_color_override_warning(",
          "def test_empty_verts(",
          "def test_default_antialiased(",
          "def test_default_linestyle(",
          "def test_default_capstyle(",
          "def test_default_joinstyle(",
          "def test_autoscale_arc(",
          "def test_arc_in_collection(",
          "def test_modifying_arc("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_path.py": [
          "def test_empty_closed_path(",
          "def test_readonly_path(",
          "def test_path_exceptions(",
          "def test_point_in_path(",
          "def test_contains_points_negative_radius(",
          "def test_exact_extents(",
          "def test_extents_with_ignored_codes(",
          "def test_point_in_path_nan(",
          "def test_nonlinear_containment(",
          "def test_arrow_contains_point(",
          "def test_path_clipping(",
          "def test_log_transform_with_zero(",
          "def test_make_compound_path_empty(",
          "def test_make_compound_path_stops(",
          "def test_xkcd(",
          "def test_xkcd_marker(",
          "def test_marker_paths_pdf(",
          "def test_nan_isolated_points(",
          "def test_path_no_doubled_point_in_to_polygon(",
          "def test_path_to_polygons(",
          "def test_path_deepcopy(",
          "def test_path_shallowcopy(",
          "def test_path_intersect_path(",
          "def test_full_arc(",
          "def test_disjoint_zero_length_segment(",
          "def test_intersect_zero_length_segment(",
          "def test_cleanup_closepoly("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_patheffects.py": [
          "def test_patheffect1(",
          "def test_patheffect2(",
          "def test_patheffect3(",
          "def test_patheffects_stroked_text(",
          "def test_PathEffect_points_to_pixels(",
          "def test_SimplePatchShadow_offset(",
          "def test_collection(",
          "def test_tickedstroke(",
          "def test_patheffects_spaces_and_newlines("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_pickle.py": [
          "def test_simple(",
          "def _generate_complete_test_figure(",
          "def test_complete(",
          "def test_pickle_load_from_subprocess(",
          "def test_gcf(",
          "def test_no_pyplot(",
          "def test_renderer(",
          "def test_image(",
          "def test_polar(",
          "def test_transform(",
          "def test_rrulewrapper(",
          "def test_shared(",
          "def test_inset_and_secondary(",
          "def test_cmap(",
          "def test_unpickle_canvas(",
          "def test_mpl_toolkits(",
          "def test_standard_norm(",
          "def test_dynamic_norm(",
          "def test_vertexselector("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_png.py": [
          "def test_pngsuite(",
          "def test_truncated_file(",
          "def test_truncated_buffer("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_polar.py": [
          "def test_polar_annotations(",
          "def test_polar_coord_annotations(",
          "def test_polar_alignment(",
          "def test_polar_twice(",
          "def test_polar_wrap(",
          "def test_polar_units_1(",
          "def test_polar_units_2(",
          "def test_polar_rmin(",
          "def test_polar_negative_rmin(",
          "def test_polar_rorigin(",
          "def test_polar_invertedylim(",
          "def test_polar_invertedylim_rorigin(",
          "def test_polar_theta_position(",
          "def test_polar_rlabel_position(",
          "def test_polar_theta_limits(",
          "def test_polar_rlim(",
          "def test_polar_rlim_bottom(",
          "def test_polar_rlim_zero(",
          "def test_polar_no_data(",
          "def test_polar_default_log_lims(",
          "def test_polar_not_datalim_adjustable(",
          "def test_polar_gridlines(",
          "def test_get_tightbbox_polar(",
          "def test_polar_interpolation_steps_constant_r(",
          "def test_polar_interpolation_steps_variable_r(",
          "def test_thetalim_valid_invalid(",
          "def test_thetalim_args(",
          "def test_default_thetalocator(",
          "def test_axvspan(",
          "def test_remove_shared_polar(",
          "def test_shared_polar_keeps_ticklabels(",
          "def test_axvline_axvspan_do_not_modify_rlims(",
          "def test_cursor_precision(",
          "def test_polar_log("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_preprocess_data.py": [
          "def test_compiletime_checks(",
          "def test_function_call_without_data(",
          "def test_function_call_with_dict_input(",
          "def test_function_call_with_dict_data(",
          "def test_function_call_with_dict_data_not_in_data(",
          "def test_function_call_with_pandas_data(",
          "def test_function_call_replace_all(",
          "def test_no_label_replacements(",
          "def test_more_args_than_pos_parameter(",
          "def test_docstring_addition(",
          "def test_data_parameter_replacement(",
          "def test_dict_unpack(",
          "def test_data_kwarg("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_pyplot.py": [
          "def test_pyplot_up_to_date(",
          "def test_copy_docstring_and_deprecators(",
          "def test_pyplot_box(",
          "def test_stackplot_smoke(",
          "def test_nrows_error(",
          "def test_ioff(",
          "def test_ion(",
          "def test_nested_ion_ioff(",
          "def test_close(",
          "def test_subplot_reuse(",
          "def test_axes_kwargs(",
          "def test_subplot_replace_projection(",
          "def test_subplot_kwarg_collision(",
          "def test_gca(",
          "def test_subplot_projection_reuse(",
          "def test_subplot_polar_normalization(",
          "def test_subplot_change_projection(",
          "def test_polar_second_call(",
          "def test_fallback_position(",
          "def test_set_current_figure_via_subfigure(",
          "def test_set_current_axes_on_subfigure(",
          "def test_pylab_integration(",
          "def test_doc_pyplot_summary(",
          "def test_minor_ticks(",
          "def test_switch_backend_no_close(",
          "def test_figure_hook("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_quiver.py": [
          "def test_quiver_memory_leak(",
          "def test_quiver_key_memory_leak(",
          "def test_quiver_number_of_args(",
          "def test_quiver_arg_sizes(",
          "def test_no_warnings(",
          "def test_zero_headlength(",
          "def test_quiver_animate(",
          "def test_quiver_with_key(",
          "def test_quiver_single(",
          "def test_quiver_copy(",
          "def test_quiver_key_pivot(",
          "def test_quiver_key_xy(",
          "def test_barbs(",
          "def test_barbs_pivot(",
          "def test_barbs_flip(",
          "def test_barb_copy(",
          "def test_bad_masked_sizes(",
          "def test_angles_and_scale(",
          "def test_quiver_xy(",
          "def test_quiverkey_angles(",
          "def test_quiver_setuvc_numbers("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_rcparams.py": [
          "def test_rcparams(",
          "def test_RcParams_class(",
          "def test_rcparams_update(",
          "def test_rcparams_init(",
          "def test_Bug_2543(",
          "def test_legend_colors(",
          "def test_mfc_rcparams(",
          "def test_mec_rcparams(",
          "def test_axes_titlecolor_rcparams(",
          "def test_Issue_1713(",
          "def test_animation_frame_formats(",
          "def generate_validator_testcases(",
          "def test_validator_valid(",
          "def test_validator_invalid(",
          "def test_validate_fontweight(",
          "def test_validate_fontstretch(",
          "def test_keymaps(",
          "def test_no_backend_reset_rccontext(",
          "def test_rcparams_reset_after_fail(",
          "def test_backend_fallback_headless(",
          "def test_backend_fallback_headful(",
          "def test_deprecation(",
          "def test_rcparams_legend_loc("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_sankey.py": [
          "def test_sankey(",
          "def test_label(",
          "def test_format_using_callable(",
          "def test_sankey_errors(",
          "def test_sankey_add_errors(",
          "def test_sankey2(",
          "def test_sankey3("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_scale.py": [
          "def test_log_scales(",
          "def test_symlog_mask_nan(",
          "def test_logit_scales(",
          "def test_log_scatter(",
          "def test_logscale_subs(",
          "def test_logscale_mask(",
          "def test_extra_kwargs_raise(",
          "def test_logscale_invert_transform(",
          "def test_logscale_transform_repr(",
          "def test_logscale_nonpos_values(",
          "def test_invalid_log_lims(",
          "def test_function_scale(",
          "def test_pass_scale(",
          "def test_scale_deepcopy(",
          "def test_transforms(",
          "def test_init(",
          "def test_base_init(",
          "def test_fmtloc(",
          "def test_bad_scale("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_simplification.py": [
          "def test_clipping(",
          "def test_overflow(",
          "def test_diamond(",
          "def test_clipping_out_of_bounds(",
          "def test_noise(",
          "def test_antiparallel_simplification(",
          "def test_angled_antiparallel(",
          "def test_sine_plus_noise(",
          "def test_simplify_curve(",
          "def test_closed_path_nan_removal(",
          "def test_closed_path_clipping(",
          "def test_hatch(",
          "def test_fft_peaks(",
          "def test_start_with_moveto(",
          "def test_throw_rendering_complexity_exceeded(",
          "def test_clipper(",
          "def test_para_equal_perp(",
          "def test_clipping_with_nans(",
          "def test_clipping_full("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_skew.py": [
          "def test_set_line_coll_dash_image(",
          "def test_skew_rectangle("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_sphinxext.py": [
          "def test_tinypages(",
          "def test_plot_html_show_source_link(",
          "def test_show_source_link_true(",
          "def test_show_source_link_false("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_spines.py": [
          "def test_spine_class(",
          "def test_spines_axes_positions(",
          "def test_spines_data_positions(",
          "def test_spine_nonlinear_data_positions(",
          "def test_spines_capstyle(",
          "def test_label_without_ticks(",
          "def test_spines_black_axes("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_streamplot.py": [
          "def test_startpoints(",
          "def test_colormap(",
          "def test_linewidth(",
          "def test_masks_and_nans(",
          "def test_maxlength(",
          "def test_maxlength_no_broken(",
          "def test_direction(",
          "def test_streamplot_limits(",
          "def test_streamplot_grid(",
          "def test_streamplot_inputs("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_style.py": [
          "def test_invalid_rc_warning_includes_filename(",
          "def test_available(",
          "def test_use(",
          "def test_use_url(",
          "def test_single_path(",
          "def test_context(",
          "def test_context_with_dict(",
          "def test_context_with_dict_after_namedstyle(",
          "def test_context_with_dict_before_namedstyle(",
          "def test_context_with_union_of_dict_and_namedstyle(",
          "def test_context_with_badparam(",
          "def test_alias(",
          "def test_xkcd_no_cm(",
          "def test_xkcd_cm(",
          "def test_deprecated_seaborn_styles(",
          "def test_up_to_date_blacklist(",
          "def test_style_from_module("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_subplots.py": [
          "def test_shared(",
          "def test_label_outer_span(",
          "def test_label_outer_non_gridspec(",
          "def test_shared_and_moved(",
          "def test_exceptions(",
          "def test_subplots_offsettext(",
          "def test_subplots_hide_ticklabels(",
          "def test_subplots_hide_axislabels(",
          "def test_get_gridspec(",
          "def test_dont_mutate_kwargs(",
          "def test_width_and_height_ratios(",
          "def test_width_and_height_ratios_mosaic(",
          "def test_ratio_overlapping_kws(",
          "def test_old_subplot_compat("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_table.py": [
          "def test_non_square(",
          "def test_zorder(",
          "def test_label_colours(",
          "def test_diff_cell_table(",
          "def test_customcell(",
          "def test_auto_column(",
          "def test_table_cells(",
          "def test_table_bbox("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_testing.py": [
          "def test_warn_to_fail(",
          "def test_parametrize_with_check_figure_equal(",
          "def test_wrap_failure(",
          "def test_check_figures_equal_extra_fig(",
          "def test_check_figures_equal_closed_fig("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_texmanager.py": [
          "def test_fontconfig_preamble(",
          "def test_font_selection(",
          "def test_unicode_characters(",
          "def test_openin_any_paranoid("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_text.py": [
          "def test_font_styles(",
          "def test_multiline(",
          "def test_multiline2(",
          "def test_antialiasing(",
          "def test_afm_kerning(",
          "def test_contains(",
          "def test_annotation_contains(",
          "def test_annotate_errors(",
          "def test_titles(",
          "def test_alignment(",
          "def test_axes_titles(",
          "def test_set_position(",
          "def test_char_index_at(",
          "def test_non_default_dpi(",
          "def test_get_rotation_string(",
          "def test_get_rotation_float(",
          "def test_get_rotation_int(",
          "def test_get_rotation_raises(",
          "def test_get_rotation_none(",
          "def test_get_rotation_mod360(",
          "def test_null_rotation_with_rotation_mode(",
          "def test_bbox_clipping(",
          "def test_annotation_negative_ax_coords(",
          "def test_annotation_negative_fig_coords(",
          "def test_text_stale(",
          "def test_agg_text_clip(",
          "def test_text_size_binding(",
          "def test_font_scaling(",
          "def test_two_2line_texts(",
          "def test_validate_linespacing(",
          "def test_nonfinite_pos(",
          "def test_hinting_factor_backends(",
          "def test_usetex_is_copied(",
          "def test_single_artist_usetex(",
          "def test_single_artist_usenotex(",
          "def test_text_as_path_opacity(",
          "def test_text_as_text_opacity(",
          "def test_text_repr(",
          "def test_annotation_update(",
          "def test_annotation_units(",
          "def test_large_subscript_title(",
          "def test_wrap(",
          "def test_get_window_extent_wrapped(",
          "def test_long_word_wrap(",
          "def test_wrap_no_wrap(",
          "def test_buffer_size(",
          "def test_fontproperties_kwarg_precedence(",
          "def test_transform_rotates_text(",
          "def test_update_mutate_input(",
          "def test_invalid_rotation_values(",
          "def test_invalid_color(",
          "def test_pdf_kerning(",
          "def test_unsupported_script(",
          "def test_parse_math(",
          "def test_parse_math_rcparams(",
          "def test_pdf_font42_kerning(",
          "def test_pdf_chars_beyond_bmp(",
          "def test_metrics_cache("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_textpath.py": [
          "def test_copy("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ticker.py": [
          "def test_basic(",
          "def test_integer(",
          "def test_basic(",
          "def test_set_params(",
          "def test_basic(",
          "def test_view_limits(",
          "def test_view_limits_round_numbers(",
          "def test_set_params(",
          "def test_basic(",
          "def test_low_number_of_majorticks(",
          "def test_using_all_default_major_steps(",
          "def test_number_of_minor_ticks(",
          "def test_additional(",
          "def test_basic(",
          "def test_polar_axes(",
          "def test_switch_to_autolocator(",
          "def test_set_params(",
          "def test_set_params(",
          "def test_basic_major(",
          "def test_maxn_major(",
          "def test_nbins_major(",
          "def test_minor(",
          "def test_minor_attr(",
          "def test_nonsingular_ok(",
          "def test_nonsingular_nok(",
          "def test_set_params(",
          "def test_set_params(",
          "def test_set_params(",
          "def test_init(",
          "def test_set_params(",
          "def test_linear_values(",
          "def test_wide_values(",
          "def test_near_zero(",
          "def test_fallback(",
          "def test_symmetrizing(",
          "def test_base_rounding(",
          "def test_unicode_minus(",
          "def test_offset_value(",
          "def test_use_offset(",
          "def test_useMathText(",
          "def test_set_use_offset_float(",
          "def test_use_locale(",
          "def test_scilimits(",
          "def test_format_data(",
          "def test_cursor_precision(",
          "def test_cursor_dummy_axis(",
          "def test_mathtext_ticks(",
          "def test_cmr10_substitutions(",
          "def test_empty_locs(",
          "def test_basic(",
          "def test_blank(",
          "def test_min_exponent(",
          "def test_basic(",
          "def test_pprint(",
          "def test_sublabel(",
          "def test_LogFormatter_call(",
          "def test_LogFormatter_call_tiny(",
          "def test_logit_deformater(",
          "def test_basic(",
          "def test_invalid(",
          "def test_variablelength(",
          "def test_minor_vs_major(",
          "def test_minor_number(",
          "def test_use_overline(",
          "def test_one_half(",
          "def test_format_data_short(",
          "def test_basic(",
          "def test_basic(",
          "def test_params(",
          "def test_engformatter_usetex_useMathText(",
          "def test_basic(",
          "def test_latex(",
          "def test_majformatter_type(",
          "def test_minformatter_type(",
          "def test_majlocator_type(",
          "def test_minlocator_type(",
          "def test_minorticks_rc(",
          "def test_remove_overlap(",
          "def test_bad_locator_subs(",
          "def test_small_range_loglocator(",
          "def test_NullFormatter(",
          "def test_set_offset_string("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_tightlayout.py": [
          "def test_tight_layout1(",
          "def test_tight_layout2(",
          "def test_tight_layout3(",
          "def test_tight_layout4(",
          "def test_tight_layout5(",
          "def test_tight_layout6(",
          "def test_tight_layout7(",
          "def test_tight_layout8(",
          "def test_tight_layout9(",
          "def test_outward_ticks(",
          "def test_tight_layout_offsetboxes(",
          "def test_empty_layout(",
          "def test_verybig_decorators(",
          "def test_big_decorators_horizontal(",
          "def test_big_decorators_vertical(",
          "def test_badsubplotgrid(",
          "def test_collapsed(",
          "def test_suptitle(",
          "def test_non_agg_renderer(",
          "def test_manual_colorbar(",
          "def test_clipped_to_axes(",
          "def test_tight_pads(",
          "def test_tight_kwargs(",
          "def test_tight_toggle("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_transforms.py": [
          "def test_non_affine_caching(",
          "def test_external_transform_api(",
          "def test_pre_transform_plotting(",
          "def test_contour_pre_transform_limits(",
          "def test_pcolor_pre_transform_limits(",
          "def test_pcolormesh_pre_transform_limits(",
          "def test_Affine2D_from_values(",
          "def test_affine_inverted_invalidated(",
          "def test_clipping_of_log(",
          "def test_transform_depth(",
          "def test_left_to_right_iteration(",
          "def test_transform_shortcuts(",
          "def test_contains_branch(",
          "def test_affine_simplification(",
          "def test_line_extent_axes_coords(",
          "def test_line_extent_data_coords(",
          "def test_line_extent_compound_coords1(",
          "def test_line_extent_predata_transform_coords(",
          "def test_line_extent_compound_coords2(",
          "def test_line_extents_affine(",
          "def test_line_extents_non_affine(",
          "def test_pathc_extents_non_affine(",
          "def test_pathc_extents_affine(",
          "def test_line_extents_for_non_affine_transData(",
          "def test_bbox_frozen_copies_minpos(",
          "def test_bbox_intersection(",
          "def test_bbox_as_strings(",
          "def test_str_transform(",
          "def test_transform_single_point(",
          "def test_log_transform(",
          "def test_nan_overlap(",
          "def test_transform_angles(",
          "def test_nonsingular(",
          "def test_invalid_arguments(",
          "def test_transformed_path(",
          "def test_transformed_patch_path(",
          "def test_lockable_bbox(",
          "def test_copy(",
          "def test_deepcopy(",
          "def test_transformwrapper(",
          "def test_scale_swapping(",
          "def test_offset_copy_errors(",
          "def test_transformedbbox_contains("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_triangulation.py": [
          "def test_extract_triangulation_params(",
          "def test_extract_triangulation_positional_mask(",
          "def test_triangulation_init(",
          "def test_triangulation_set_mask(",
          "def test_delaunay(",
          "def test_delaunay_duplicate_points(",
          "def test_delaunay_points_in_line(",
          "def test_delaunay_insufficient_points(",
          "def test_delaunay_robust(",
          "def test_tripcolor(",
          "def test_tripcolor_color(",
          "def test_tripcolor_clim(",
          "def test_tripcolor_warnings(",
          "def test_no_modify(",
          "def test_trifinder(",
          "def test_triinterp(",
          "def test_triinterpcubic_C1_continuity(",
          "def test_triinterpcubic_cg_solver(",
          "def test_triinterpcubic_geom_weights(",
          "def test_triinterp_colinear(",
          "def test_triinterp_transformations(",
          "def test_tri_smooth_contouring(",
          "def test_tri_smooth_gradient(",
          "def test_tritools(",
          "def test_trirefine(",
          "def test_trirefine_masked(",
          "def test_triplot_return(",
          "def test_trirefiner_fortran_contiguous_triangles(",
          "def test_qhull_triangle_orientation(",
          "def test_trianalyzer_mismatched_indices(",
          "def test_tricontourf_decreasing_levels(",
          "def test_internal_cpp_api(",
          "def test_qhull_large_offset(",
          "def test_tricontour_non_finite_z(",
          "def test_tricontourset_reuse(",
          "def test_triplot_with_ls(",
          "def test_triplot_label("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ttconv.py": [
          "def test_truetype_conversion("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_type1font.py": [
          "def test_Type1Font(",
          "def test_Type1Font_2(",
          "def test_tokenize(",
          "def test_tokenize_errors(",
          "def test_overprecision(",
          "def test_encrypt_decrypt_roundtrip("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_units.py": [
          "def test_numpy_facade(",
          "def test_plot_masked_units(",
          "def test_empty_set_limits_with_units(",
          "def test_jpl_bar_units(",
          "def test_jpl_barh_units(",
          "def test_empty_arrays(",
          "def test_scatter_element0_masked(",
          "def test_errorbar_mixed_units(",
          "def test_subclass(",
          "def test_shared_axis_quantity(",
          "def test_shared_axis_datetime(",
          "def test_shared_axis_categorical(",
          "def test_empty_default_limits(",
          "def test_plot_kernel("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_usetex.py": [
          "def test_usetex(",
          "def test_empty(",
          "def test_unicode_minus(",
          "def test_mathdefault(",
          "def test_multiline_eqnarray(",
          "def test_minus_no_descent(",
          "def test_usetex_packages(",
          "def test_latex_pkg_already_loaded(",
          "def test_usetex_with_underscore(",
          "def test_missing_psfont("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_widgets.py": [
          "def test_save_blitted_widget_as_pdf(",
          "def test_rectangle_selector(",
          "def test_rectangle_minspan(",
          "def test_deprecation_selector_visible_attribute(",
          "def test_rectangle_drag(",
          "def test_rectangle_selector_set_props_handle_props(",
          "def test_rectangle_resize(",
          "def test_rectangle_add_state(",
          "def test_rectangle_resize_center(",
          "def test_rectangle_resize_square(",
          "def test_rectangle_resize_square_center(",
          "def test_rectangle_rotate(",
          "def test_rectangle_add_remove_set(",
          "def test_rectangle_resize_square_center_aspect(",
          "def test_ellipse(",
          "def test_rectangle_handles(",
          "def test_rectangle_selector_onselect(",
          "def test_rectangle_selector_ignore_outside(",
          "def test_span_selector(",
          "def test_span_selector_onselect(",
          "def test_span_selector_ignore_outside(",
          "def test_span_selector_drag(",
          "def test_span_selector_direction(",
          "def test_span_selector_set_props_handle_props(",
          "def test_selector_clear(",
          "def test_selector_clear_method(",
          "def test_span_selector_add_state(",
          "def test_tool_line_handle(",
          "def test_span_selector_bound(",
          "def test_span_selector_animated_artists_callback(",
          "def test_snapping_values_span_selector(",
          "def test_span_selector_snap(",
          "def test_lasso_selector(",
          "def test_CheckButtons(",
          "def test_TextBox(",
          "def test_check_radio_buttons_image(",
          "def test_radio_buttons(",
          "def test_radio_buttons_props(",
          "def test_radio_button_active_conflict(",
          "def test_radio_buttons_activecolor_change(",
          "def test_check_buttons(",
          "def test_check_button_props(",
          "def test_check_buttons_rectangles(",
          "def test_check_buttons_lines(",
          "def test_slider_slidermin_slidermax_invalid(",
          "def test_slider_slidermin_slidermax(",
          "def test_slider_valmin_valmax(",
          "def test_slider_valstep_snapping(",
          "def test_slider_horizontal_vertical(",
          "def test_slider_reset(",
          "def test_range_slider(",
          "def test_range_slider_same_init_values(",
          "def test_polygon_selector(",
          "def test_polygon_selector_set_props_handle_props(",
          "def test_rect_visibility(",
          "def test_polygon_selector_remove(",
          "def test_polygon_selector_remove_first_point(",
          "def test_polygon_selector_redraw(",
          "def test_polygon_selector_verts_setter(",
          "def test_polygon_selector_box(",
          "def test_MultiCursor("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\tests\\test_axes_grid1.py": [
          "def test_divider_append_axes(",
          "def test_twin_axes_empty_and_removed(",
          "def test_axesgrid_colorbar_log_smoketest(",
          "def test_inset_colorbar_tight_layout_smoketest(",
          "def test_inset_locator(",
          "def test_inset_axes(",
          "def test_inset_axes_complete(",
          "def test_fill_facecolor(",
          "def test_zooming_with_inverted_axes(",
          "def test_anchored_direction_arrows(",
          "def test_anchored_direction_arrows_many_args(",
          "def test_axes_locatable_position(",
          "def test_image_grid_each_left_label_mode_all(",
          "def test_image_grid_single_bottom(",
          "def test_image_grid_label_mode_deprecation_warning(",
          "def test_image_grid(",
          "def test_gettightbbox(",
          "def test_picking_callbacks_overlap(",
          "def test_anchored_artists(",
          "def test_hbox_divider(",
          "def test_vbox_divider(",
          "def test_axes_class_tuple(",
          "def test_grid_axes_lists(",
          "def test_grid_axes_position(",
          "def test_grid_errors(",
          "def test_divider_errors(",
          "def test_mark_inset_unstales_viewlim(",
          "def test_auto_adjustable(",
          "def test_rgb_axes(",
          "def test_insetposition(",
          "def test_imagegrid_cbar_mode_edge(",
          "def test_imagegrid(",
          "def test_removal(",
          "def test_anchored_locator_base_call("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_angle_helper.py": [
          "def test_select_step(",
          "def test_select_step24(",
          "def test_select_step360(",
          "def test_formatters("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_axislines.py": [
          "def test_SubplotZero(",
          "def test_Subplot(",
          "def test_Axes(",
          "def test_ParasiteAxesAuxTrans(",
          "def test_axisline_style(",
          "def test_axisline_style_size_color(",
          "def test_axisline_style_tight(",
          "def test_subplotzero_ylabel("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_axis_artist.py": [
          "def test_ticks(",
          "def test_labelbase(",
          "def test_ticklabels(",
          "def test_axis_artist("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_floating_axes.py": [
          "def test_subplot(",
          "def test_curvelinear3(",
          "def test_curvelinear4(",
          "def test_axis_direction("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_grid_finder.py": [
          "def test_find_line_box_crossings(",
          "def test_pretty_print_format("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_grid_helper_curvelinear.py": [
          "def test_custom_transform(",
          "def test_polar_box(",
          "def test_axis_direction("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\axes3d.py": [
          "def get_test_data("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_art3d.py": [
          "def test_scatter_3d_projection_conservation("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_axes3d.py": [
          "def test_invisible_axes(",
          "def test_aspects(",
          "def test_aspects_adjust_box(",
          "def test_axes3d_repr(",
          "def test_axes3d_primary_views(",
          "def test_bar3d(",
          "def test_bar3d_colors(",
          "def test_bar3d_shaded(",
          "def test_bar3d_notshaded(",
          "def test_bar3d_lightsource(",
          "def test_contour3d(",
          "def test_contour3d_extend3d(",
          "def test_contourf3d(",
          "def test_contourf3d_fill(",
          "def test_contourf3d_extend(",
          "def test_tricontour(",
          "def test_contour3d_1d_input(",
          "def test_lines3d(",
          "def test_plot_scalar(",
          "def test_invalid_line_data(",
          "def test_mixedsubplots(",
          "def test_tight_layout_text(",
          "def test_scatter3d(",
          "def test_scatter3d_color(",
          "def test_scatter3d_linewidth(",
          "def test_scatter3d_linewidth_modification(",
          "def test_scatter3d_modification(",
          "def test_scatter3d_sorting(",
          "def test_marker_draw_order_data_reversed(",
          "def test_marker_draw_order_view_rotated(",
          "def test_plot_3d_from_2d(",
          "def test_surface3d(",
          "def test_surface3d_shaded(",
          "def test_surface3d_masked(",
          "def test_plot_surface_None_arg(",
          "def test_surface3d_masked_strides(",
          "def test_text3d(",
          "def test_text3d_modification(",
          "def test_trisurf3d(",
          "def test_trisurf3d_shaded(",
          "def test_wireframe3d(",
          "def test_wireframe3dzerocstride(",
          "def test_wireframe3dzerorstride(",
          "def test_wireframe3dzerostrideraises(",
          "def test_mixedsamplesraises(",
          "def test_quiver3d(",
          "def test_quiver3d_empty(",
          "def test_quiver3d_masked(",
          "def test_patch_modification(",
          "def test_patch_collection_modification(",
          "def test_poly3dcollection_verts_validation(",
          "def test_poly3dcollection_closed(",
          "def test_poly_collection_2d_to_3d_empty(",
          "def test_poly3dcollection_alpha(",
          "def test_add_collection3d_zs_array(",
          "def test_add_collection3d_zs_scalar(",
          "def test_axes3d_labelpad(",
          "def test_axes3d_cla(",
          "def test_axes3d_rotated(",
          "def test_plotsurface_1d_raises(",
          "def _test_proj_make_M(",
          "def test_proj_transform(",
          "def _test_proj_draw_axes(",
          "def test_proj_axes_cube(",
          "def test_proj_axes_cube_ortho(",
          "def test_rot(",
          "def test_world(",
          "def test_lines_dists(",
          "def test_lines_dists_nowarning(",
          "def test_autoscale(",
          "def test_unautoscale(",
          "def test_axes3d_focal_length_checks(",
          "def test_axes3d_focal_length(",
          "def test_axes3d_ortho(",
          "def test_axes3d_isometric(",
          "def test_invalid_axes_limits(",
          "def test_simple(",
          "def test_edge_style(",
          "def test_named_colors(",
          "def test_rgb_data(",
          "def test_alpha(",
          "def test_xyz(",
          "def test_calling_conventions(",
          "def test_line3d_set_get_data_3d(",
          "def test_inverted(",
          "def test_inverted_cla(",
          "def test_ax3d_tickcolour(",
          "def test_ticklabel_format(",
          "def test_quiver3D_smoke(",
          "def test_minor_ticks(",
          "def test_errorbar3d_errorevery(",
          "def test_errorbar3d(",
          "def test_stem3d(",
          "def test_equal_box_aspect(",
          "def test_colorbar_pos(",
          "def test_inverted_zaxis(",
          "def test_set_zlim(",
          "def test_shared_axes_retick(",
          "def test_pan(",
          "def test_toolbar_zoom_pan(",
          "def test_scalarmap_update(",
          "def test_subfigure_simple(",
          "def test_computed_zorder(",
          "def test_format_coord(",
          "def test_get_axis_position(",
          "def test_margins(",
          "def test_margins_errors(",
          "def test_text_3d(",
          "def test_draw_single_lines_from_Nx1(",
          "def test_pathpatch_3d(",
          "def test_scatter_spiral(",
          "def test_Poly3DCollection_get_facecolor(",
          "def test_Poly3DCollection_get_edgecolor(",
          "def test_view_init_vertical_axis(",
          "def test_arc_pathpatch(",
          "def test_panecolor_rcparams(",
          "def test_mutating_input_arrays_y_and_z("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_legend3d.py": [
          "def test_legend_plot(",
          "def test_legend_bar(",
          "def test_fancy(",
          "def test_linecollection_scaled_dashes(",
          "def test_handlerline3d(",
          "def test_contour_legend_elements(",
          "def test_contourf_legend_elements("
        ],
        ".venv\\Lib\\site-packages\\numpy\\conftest.py": [
          "def pytest_configure(",
          "def pytest_addoption(",
          "def pytest_sessionstart(",
          "def pytest_terminal_summary(",
          "def pytest_itemcollected("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\ccompiler_opt.py": [
          "def dist_test(",
          "def _dist_test_spawn_paths(",
          "def _dist_test_spawn(",
          "def cc_test_flags(",
          "def cc_test_cexpr(",
          "def feature_test("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\mingw32ccompiler.py": [
          "def configtest_name("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\command\\__init__.py": [
          "def test_na_writable_attributes_deletion("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_build_ext.py": [
          "def test_multi_fortran_libs_link("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt.py": [
          "def test_interface(",
          "def test_args_empty(",
          "def test_args_validation(",
          "def test_skip(",
          "def test_implies(",
          "def test_args_options(",
          "def test_flags(",
          "def test_targets_exceptions(",
          "def test_targets_syntax(",
          "def test_targets(",
          "def test_targets_policies(",
          "def test_targets_groups(",
          "def test_targets_multi(",
          "def new_test("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt_conf.py": [
          "def test_feature(",
          "def test_option_types(",
          "def test_duplicates(",
          "def test_implies(",
          "def test_group(",
          "def test_extra_checks(",
          "def test_features("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_exec_command.py": [
          "def test_exec_command_stdout(",
          "def test_exec_command_stderr(",
          "def test_basic("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler.py": [
          "def test_fcompiler_flags("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_gnu.py": [
          "def test_g77_version(",
          "def test_not_g77(",
          "def test_gfortran_version(",
          "def test_not_gfortran("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_intel.py": [
          "def test_32bit_version(",
          "def test_64bit_version("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_nagfor.py": [
          "def test_version_match("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_from_template.py": [
          "def test_from_template("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_log.py": [
          "def test_log_prefix("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_mingw32ccompiler.py": [
          "def test_build_import("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_misc_util.py": [
          "def test_1(",
          "def test_2(",
          "def test_3(",
          "def test_1(",
          "def test_gpaths(",
          "def test_get_shared_lib_extension(",
          "def test_installed_npymath_ini("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_npy_pkg_config.py": [
          "def test_simple(",
          "def test_simple_variable(",
          "def test_simple_cflags(",
          "def test_simple_lflags("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_shell_utils.py": [
          "def test_join_matches_subprocess(",
          "def test_roundtrip("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_system_info.py": [
          "def test_all(",
          "def test_temp1(",
          "def test_temp2(",
          "def test_duplicate_options(",
          "def test_compile1(",
          "def test_compile2(",
          "def test_overrides(",
          "def test_distutils_parse_env_order("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_abstract_interface.py": [
          "def test_abstract_interface(",
          "def test_parse_abstract_interface("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_array_from_pyobj.py": [
          "def get_testdir(",
          "def test_in_out(",
          "def test_in_from_2seq(",
          "def test_in_from_2casttype(",
          "def test_in_nocopy(",
          "def test_inout_2seq(",
          "def test_f_inout_23seq(",
          "def test_c_inout_23seq(",
          "def test_in_copy_from_2casttype(",
          "def test_c_in_from_23seq(",
          "def test_in_from_23casttype(",
          "def test_f_in_from_23casttype(",
          "def test_c_in_from_23casttype(",
          "def test_f_copy_in_from_23casttype(",
          "def test_c_copy_in_from_23casttype(",
          "def test_in_cache_from_2casttype(",
          "def test_in_cache_from_2casttype_failure(",
          "def test_cache_hidden(",
          "def test_hidden(",
          "def test_optional_none(",
          "def test_optional_from_2seq(",
          "def test_optional_from_23seq(",
          "def test_inplace(",
          "def test_inplace_from_casttype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_assumed_shape.py": [
          "def test_all("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_block_docstring.py": [
          "def test_block_docstring("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_callback.py": [
          "def test_all(",
          "def test_docstring(",
          "def test_string_callback(",
          "def test_string_callback_array(",
          "def test_threadsafety(",
          "def test_hidden_callback(",
          "def test_gh17797(",
          "def test_gh18335(",
          "def test_gh25211(",
          "def test_callstatement_fortran("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_character.py": [
          "def test_input(",
          "def test_output(",
          "def test_array_input(",
          "def test_array_output(",
          "def test_2d_array_input(",
          "def test_input(",
          "def test_input_varia(",
          "def test_array_input(",
          "def test_array_input_varia(",
          "def test_2d_array_input(",
          "def test_output(",
          "def test_array_output(",
          "def test_input_output(",
          "def test_inout(",
          "def test_inout_varia(",
          "def test_array_inout(",
          "def test_2d_array_inout(",
          "def test_return(",
          "def test_array_return(",
          "def test_optional(",
          "def test_gh18684(",
          "def test_gh6308(",
          "def test_gh4519(",
          "def test_gh3425(",
          "def test_character_bc(",
          "def test_char(",
          "def test_char_arr(",
          "def test_gh24008(",
          "def test_gh24662(",
          "def test_gh25286(",
          "def test_gh25286("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_common.py": [
          "def test_common_block(",
          "def test_common_gh19161("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_crackfortran.py": [
          "def test_module(",
          "def test_defaultPrivate(",
          "def test_defaultPublic(",
          "def test_access_type(",
          "def test_nowrap_private_proceedures(",
          "def test_moduleOperators(",
          "def test_notPublicPrivate(",
          "def test_external_as_statement(",
          "def test_external_as_attribute(",
          "def test_gh2848(",
          "def test_common_with_division(",
          "def test_do_not_touch_normal_spaces(",
          "def test_one_relevant_space(",
          "def test_ignore_inner_quotes(",
          "def test_multiple_relevant_spaces(",
          "def test_array_size(",
          "def test_inv_array_size(",
          "def test_dependencies(",
          "def test_eval_scalar(",
          "def test_input_encoding(",
          "def test_encoding_comment(",
          "def test_nameargspattern_backtracking(",
          "def test_function_rettype(",
          "def test_end_if_comment(",
          "def test_gh22648(",
          "def test_param_eval_nested(",
          "def test_param_eval_nonstandard_range(",
          "def test_param_eval_empty_range(",
          "def test_param_eval_non_array_param(",
          "def test_param_eval_too_many_dims(",
          "def test_no_lower_fail("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_data.py": [
          "def test_data_stmts(",
          "def test_crackedlines(",
          "def test_data_stmts(",
          "def test_crackedlines(",
          "def test_data_stmts(",
          "def test_data_stmts("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_docs.py": [
          "def test_asterisk1(",
          "def test_asterisk2(",
          "def test_ftype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2cmap.py": [
          "def test_gh15095("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2py2e.py": [
          "def test_gh22819_cli(",
          "def test_gh22819_many_pyf(",
          "def test_gh23598_warn(",
          "def test_gen_pyf(",
          "def test_gen_pyf_stdout(",
          "def test_gen_pyf_no_overwrite(",
          "def test_untitled_cli(",
          "def test_no_py312_distutils_fcompiler(",
          "def test_f2py_skip(",
          "def test_f2py_only(",
          "def test_file_processing_switch(",
          "def test_mod_gen_f77(",
          "def test_mod_gen_gh25263(",
          "def test_lower_cmod(",
          "def test_lower_sig(",
          "def test_build_dir(",
          "def test_overwrite(",
          "def test_latexdoc(",
          "def test_nolatexdoc(",
          "def test_shortlatex(",
          "def test_restdoc(",
          "def test_norestexdoc(",
          "def test_debugcapi(",
          "def test_debugcapi_bld(",
          "def test_wrapfunc_def(",
          "def test_nowrapfunc(",
          "def test_inclheader(",
          "def test_inclpath(",
          "def test_hlink(",
          "def test_f2cmap(",
          "def test_quiet(",
          "def test_verbose(",
          "def test_version(",
          "def test_npdistop(",
          "def test_no_freethreading_compatible(",
          "def test_freethreading_compatible(",
          "def test_npd_fcompiler(",
          "def test_npd_compiler(",
          "def test_npd_help_fcompiler(",
          "def test_npd_f77exec(",
          "def test_npd_f90exec(",
          "def test_npd_f77flags(",
          "def test_npd_f90flags(",
          "def test_npd_opt(",
          "def test_npd_arch(",
          "def test_npd_noopt(",
          "def test_npd_noarch(",
          "def test_npd_debug(",
          "def test_npd_link_auto(",
          "def test_npd_lib(",
          "def test_npd_define(",
          "def test_npd_undefine(",
          "def test_npd_incl(",
          "def test_npd_linker("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_isoc.py": [
          "def test_c_double(",
          "def test_bindc_function(",
          "def test_bindc_kinds(",
          "def test_bindc_add_arr(",
          "def test_process_f2cmap_dict("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_kind.py": [
          "def test_int(",
          "def test_real(",
          "def test_quad_precision("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_mixed.py": [
          "def test_all(",
          "def test_docstring("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_modules.py": [
          "def test_gh26920(",
          "def test_gh26920(",
          "def test_module_docstring(",
          "def test_gh25337(",
          "def test_gh25867("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_parameter.py": [
          "def test_constant_real_single(",
          "def test_constant_real_double(",
          "def test_constant_compound_int(",
          "def test_constant_non_compound_int(",
          "def test_constant_integer_int(",
          "def test_constant_integer_long(",
          "def test_constant_both(",
          "def test_constant_no(",
          "def test_constant_sum(",
          "def test_constant_array(",
          "def test_constant_array_any_index(",
          "def test_constant_array_delims("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_pyf_src.py": [
          "def test_from_template("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_quoted_character.py": [
          "def test_quoted_character("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_regression.py": [
          "def test_inout(",
          "def test_mdat(",
          "def test_mtypes(",
          "def test_negbound(",
          "def test_numpy_version_attribute(",
          "def test_include_path(",
          "def test_gh25344(",
          "def test_gh26148(",
          "def test_gh26466(",
          "def test_gh26148b(",
          "def test_gh28014(",
          "def test_gh26623(",
          "def test_gh25784(",
          "def test_gh27167("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_character.py": [
          "def test_all_f77(",
          "def test_all_f90("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_complex.py": [
          "def test_all_f77(",
          "def test_all_f90("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_integer.py": [
          "def test_all_f77(",
          "def test_all_f90("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_logical.py": [
          "def test_all_f77(",
          "def test_all_f90("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_real.py": [
          "def test_all(",
          "def test_all_f77(",
          "def test_all_f90("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_routines.py": [
          "def test_gh25799(",
          "def test_renamed_subroutine("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_semicolon_split.py": [
          "def test_multiline(",
          "def test_callstatement("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_size.py": [
          "def test_all(",
          "def test_transpose(",
          "def test_flatten("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_string.py": [
          "def test_char(",
          "def test_example(",
          "def test_intent_in(",
          "def test_intent_inout("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_symbolic.py": [
          "def test_eliminate_quotes(",
          "def test_sanity(",
          "def test_tostring_fortran(",
          "def test_tostring_c(",
          "def test_operations(",
          "def test_substitute(",
          "def test_fromstring(",
          "def test_traverse(",
          "def test_linear_solve(",
          "def test_as_numer_denom(",
          "def test_polynomial_atoms("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_value_attrspec.py": [
          "def test_gh21665("
        ],
        ".venv\\Lib\\site-packages\\numpy\\fft\\tests\\test_helper.py": [
          "def test_definition(",
          "def test_inverse(",
          "def test_axes_keyword(",
          "def test_uneven_dims(",
          "def test_equal_to_original(",
          "def test_definition(",
          "def test_definition(",
          "def test_not_last_axis_success("
        ],
        ".venv\\Lib\\site-packages\\numpy\\fft\\tests\\test_pocketfft.py": [
          "def test_fft_n(",
          "def test_identity(",
          "def test_identity_long_short(",
          "def test_identity_long_short_reversed(",
          "def test_fft(",
          "def test_fft_out_argument(",
          "def test_fft_inplace_out(",
          "def test_fft_bad_out(",
          "def test_ifft(",
          "def test_fft2(",
          "def test_ifft2(",
          "def test_fftn(",
          "def test_ifftn(",
          "def test_rfft(",
          "def test_rfft_even(",
          "def test_rfft_odd(",
          "def test_irfft(",
          "def test_rfft2(",
          "def test_irfft2(",
          "def test_rfftn(",
          "def test_irfftn(",
          "def test_hfft(",
          "def test_ihfft(",
          "def test_axes(",
          "def test_s_negative_1(",
          "def test_s_axes_none(",
          "def test_s_axes_none_2D(",
          "def test_s_contains_none(",
          "def test_all_1d_norm_preserving(",
          "def test_fftn_out_argument(",
          "def test_fftn_out_and_s_interaction(",
          "def test_irfftn_out_and_s_interaction(",
          "def test_fft_with_order(",
          "def test_fft_output_order(",
          "def _test_mtsame(",
          "def test_fft(",
          "def test_ifft(",
          "def test_rfft(",
          "def test_irfft(",
          "def test_irfft_with_n_1_regression(",
          "def test_irfft_with_n_large_regression(",
          "def test_fft_with_integer_or_bool_input("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraypad.py": [
          "def test_single_value(",
          "def test_two_values(",
          "def test_with_none(",
          "def test_pass_through(",
          "def test_as_index(",
          "def test_exceptions(",
          "def test_zero_padding_shortcuts(",
          "def test_shallow_statistic_range(",
          "def test_clip_statistic_range(",
          "def test_check_mean_stat_length(",
          "def test_check_maximum_1(",
          "def test_check_maximum_2(",
          "def test_check_maximum_stat_length(",
          "def test_check_minimum_1(",
          "def test_check_minimum_2(",
          "def test_check_minimum_stat_length(",
          "def test_check_median(",
          "def test_check_median_01(",
          "def test_check_median_02(",
          "def test_check_median_stat_length(",
          "def test_check_mean_shape_one(",
          "def test_check_mean_2(",
          "def test_same_prepend_append(",
          "def test_check_negative_stat_length(",
          "def test_simple_stat_length(",
          "def test_zero_stat_length_valid(",
          "def test_zero_stat_length_invalid(",
          "def test_check_constant(",
          "def test_check_constant_zeros(",
          "def test_check_constant_float(",
          "def test_check_constant_float2(",
          "def test_check_constant_float3(",
          "def test_check_constant_odd_pad_amount(",
          "def test_check_constant_pad_2d(",
          "def test_check_large_integers(",
          "def test_check_object_array(",
          "def test_pad_empty_dimension(",
          "def test_check_simple(",
          "def test_check_2d(",
          "def test_object_array(",
          "def test_end_values(",
          "def test_negative_difference(",
          "def test_check_simple(",
          "def test_check_odd_method(",
          "def test_check_large_pad(",
          "def test_check_shape(",
          "def test_check_01(",
          "def test_check_02(",
          "def test_check_03(",
          "def test_check_04(",
          "def test_check_05(",
          "def test_check_06(",
          "def test_check_07(",
          "def test_pad_empty_dimension(",
          "def test_pad_non_empty_dimension(",
          "def test_check_simple(",
          "def test_check_odd_method(",
          "def test_check_large_pad(",
          "def test_check_large_pad_odd(",
          "def test_check_shape(",
          "def test_check_01(",
          "def test_check_02(",
          "def test_check_03(",
          "def test_check_simple(",
          "def test_check_large_pad(",
          "def test_check_01(",
          "def test_check_02(",
          "def test_pad_with_zero(",
          "def test_repeated_wrapping(",
          "def test_repeated_wrapping_multiple_origin(",
          "def test_check_simple(",
          "def test_check_width_shape_1_2(",
          "def test_simple(",
          "def test_pad_empty_dimension(",
          "def test_legacy_vector_functionality(",
          "def test_unicode_mode(",
          "def test_object_input(",
          "def test_misshaped_pad_width(",
          "def test_misshaped_pad_width_2(",
          "def test_negative_pad_width(",
          "def test_bad_type(",
          "def test_pad_width_as_ndarray(",
          "def test_zero_pad_width(",
          "def test_kwargs(",
          "def test_constant_zero_default(",
          "def test_unsupported_mode(",
          "def test_non_contiguous_array(",
          "def test_memory_layout_persistence(",
          "def test_dtype_persistence("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraysetops.py": [
          "def test_intersect1d(",
          "def test_intersect1d_array_like(",
          "def test_intersect1d_indices(",
          "def test_setxor1d(",
          "def test_setxor1d_unique(",
          "def test_ediff1d(",
          "def test_ediff1d_forbidden_type_casts(",
          "def test_ediff1d_scalar_handling(",
          "def test_isin(",
          "def test_isin_additional(",
          "def test_isin_char_array(",
          "def test_isin_invert(",
          "def test_isin_hit_alternate_algorithm(",
          "def test_isin_boolean(",
          "def test_isin_timedelta(",
          "def test_isin_table_timedelta_fails(",
          "def test_isin_mixed_dtype(",
          "def test_isin_mixed_huge_vals(",
          "def test_isin_mixed_boolean(",
          "def test_isin_first_array_is_object(",
          "def test_isin_second_array_is_object(",
          "def test_isin_both_arrays_are_object(",
          "def test_isin_both_arrays_have_structured_dtype(",
          "def test_isin_with_arrays_containing_tuples(",
          "def test_isin_errors(",
          "def test_union1d(",
          "def test_setdiff1d(",
          "def test_setdiff1d_unique(",
          "def test_setdiff1d_char_array(",
          "def test_manyways(",
          "def test_unique_1d(",
          "def test_unique_zero_sized(",
          "def test_unique_subclass(",
          "def test_unsupported_hash_based(",
          "def test_unique_axis_errors(",
          "def test_unique_axis_list(",
          "def test_unique_axis(",
          "def test_unique_1d_with_axis(",
          "def test_unique_inverse_with_axis(",
          "def test_unique_axis_zeros(",
          "def test_unique_masked(",
          "def test_unique_sort_order_with_axis(",
          "def _run_axis_tests(",
          "def test_unique_nanequals(",
          "def test_unique_array_api_functions(",
          "def test_unique_inverse_shape(",
          "def test_unique_with_matrix("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arrayterator.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_array_utils.py": [
          "def test_byte_bounds(",
          "def test_unusual_order_positive_stride(",
          "def test_unusual_order_negative_stride(",
          "def test_strided("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_format.py": [
          "def test_roundtrip(",
          "def test_roundtrip_randsize(",
          "def test_roundtrip_truncated(",
          "def test_file_truncated(",
          "def test_long_str(",
          "def test_memmap_roundtrip(",
          "def test_compressed_roundtrip(",
          "def test_load_padded_dtype(",
          "def test_python2_python3_interoperability(",
          "def test_pickle_python2_python3(",
          "def test_pickle_disallow(",
          "def test_descr_to_dtype(",
          "def test_version_2_0(",
          "def test_version_2_0_memmap(",
          "def test_huge_header(",
          "def test_huge_header_npz(",
          "def test_write_version(",
          "def test_read_magic(",
          "def test_read_magic_bad_magic(",
          "def test_read_version_1_0_bad_magic(",
          "def test_bad_magic_args(",
          "def test_large_header(",
          "def test_read_array_header_1_0(",
          "def test_read_array_header_2_0(",
          "def test_bad_header(",
          "def test_large_file_support(",
          "def test_large_archive(",
          "def test_empty_npz(",
          "def test_unicode_field_names(",
          "def test_header_growth_axis(",
          "def test_metadata_dtype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_function_base.py": [
          "def test_basic(",
          "def test_axes(",
          "def test_rotation_axes(",
          "def test_axes(",
          "def test_basic_lr(",
          "def test_basic_ud(",
          "def test_3d_swap_axis0(",
          "def test_3d_swap_axis1(",
          "def test_3d_swap_axis2(",
          "def test_4d(",
          "def test_default_axis(",
          "def test_multiple_axes(",
          "def test_basic(",
          "def test_nd(",
          "def test_basic(",
          "def test_nd(",
          "def test_any_and_all_result_dtype(",
          "def test_basic(",
          "def test_order(",
          "def test_subok(",
          "def test_basic(",
          "def test_basic_keepdims(",
          "def test_weights(",
          "def test_weight_and_input_dims_different(",
          "def test_returned(",
          "def test_subclasses(",
          "def test_upcasting(",
          "def test_object_dtype(",
          "def test_object_no_weights(",
          "def test_average_class_without_dtype(",
          "def test_basic(",
          "def test_broadcasting(",
          "def test_return_dtype(",
          "def test_deprecated_empty(",
          "def test_non_bool_deprecation(",
          "def test_many_arguments(",
          "def test_basic(",
          "def test_multidim(",
          "def test_0d(",
          "def test_subclass(",
          "def test_index_array_copied(",
          "def test_structured_array(",
          "def test_index_floats(",
          "def test_index_out_of_bounds(",
          "def test_basic(",
          "def test_basic(",
          "def test_basic(",
          "def test_basic(",
          "def test_basic(",
          "def test_basic(",
          "def test_cumulative_include_initial(",
          "def test_basic(",
          "def test_axis(",
          "def test_nd(",
          "def test_n(",
          "def test_times(",
          "def test_subclass(",
          "def test_prepend(",
          "def test_append(",
          "def test_slices(",
          "def test_fancy(",
          "def test_single(",
          "def test_0d(",
          "def test_subclass(",
          "def test_array_order_preserve(",
          "def test_index_floats(",
          "def test_single_item_array(",
          "def test_single_item_array_non_int(",
          "def test_basic(",
          "def test_args(",
          "def test_badargs(",
          "def test_datetime64(",
          "def test_masked(",
          "def test_second_order_accurate(",
          "def test_spacing(",
          "def test_specific_axes(",
          "def test_timedelta64(",
          "def test_inexact_dtypes(",
          "def test_values(",
          "def test_f_decreasing_unsigned_int(",
          "def test_f_signed_int_big_jump(",
          "def test_x_decreasing_unsigned(",
          "def test_x_signed_int_big_jump(",
          "def test_return_type(",
          "def test_basic(",
          "def test_subclass(",
          "def test_basic(",
          "def test_leading_skip(",
          "def test_trailing_skip(",
          "def test_all_zero(",
          "def test_size_zero(",
          "def test_overflow(",
          "def test_no_trim(",
          "def test_list_to_list(",
          "def test_nd_basic(",
          "def test_allzero(",
          "def test_trim_arg(",
          "def test_unexpected_trim_value(",
          "def test_basic(",
          "def test_place(",
          "def test_both(",
          "def test_simple(",
          "def test_scalar(",
          "def test_large(",
          "def test_ufunc(",
          "def test_keywords(",
          "def test_keywords_with_otypes_order1(",
          "def test_keywords_with_otypes_order2(",
          "def test_keywords_with_otypes_order3(",
          "def test_keywords_with_otypes_several_kwd_args1(",
          "def test_keywords_with_otypes_several_kwd_args2(",
          "def test_keywords_no_func_code(",
          "def test_keywords2_ticket_2100(",
          "def test_keywords3_ticket_2100(",
          "def test_keywords4_ticket_2100(",
          "def test_keywords5_ticket_2100(",
          "def test_coverage1_ticket_2100(",
          "def test_assigning_docstring(",
          "def test_UnboundMethod_ticket_1156(",
          "def test_execution_order_ticket_1487(",
          "def test_string_ticket_1892(",
          "def test_dtype_promotion_gh_29189(",
          "def test_cache(",
          "def test_otypes(",
          "def test_otypes_object_28624(",
          "def test_parse_gufunc_signature(",
          "def test_signature_simple(",
          "def test_signature_mean_last(",
          "def test_signature_center(",
          "def test_signature_two_outputs(",
          "def test_signature_outer(",
          "def test_signature_computed_size(",
          "def test_signature_excluded(",
          "def test_signature_otypes(",
          "def test_signature_invalid_inputs(",
          "def test_signature_invalid_outputs(",
          "def test_size_zero_output(",
          "def test_subclasses(",
          "def test_name(",
          "def test_decorator(",
          "def test_docstring(",
          "def test_partial(",
          "def test_signature_otypes_decorator(",
          "def test_bad_input(",
          "def test_no_keywords(",
          "def test_positional_regression_9477(",
          "def test_datetime_conversion(",
          "def test_frompyfunc_leaks(",
          "def test_forward(",
          "def test_reverse(",
          "def test_random(",
          "def test_right_basic(",
          "def test_right_open(",
          "def test_right_open_reverse(",
          "def test_right_open_random(",
          "def test_monotonic(",
          "def test_casting_error(",
          "def test_return_type(",
          "def test_large_integers_increasing(",
          "def test_large_integers_decreasing(",
          "def test_simple(",
          "def test_period(",
          "def test_hanning(",
          "def test_hamming(",
          "def test_bartlett(",
          "def test_blackman(",
          "def test_kaiser(",
          "def test_simple(",
          "def test_ndim(",
          "def test_masked(",
          "def test_simple(",
          "def test_array_like(",
          "def test_bool_dtype(",
          "def test_int_dtypes(",
          "def test_float_dtypes(",
          "def test_float16_underflow(",
          "def test_simple(",
          "def test_simple(",
          "def test_dtype_order(",
          "def test_non_array(",
          "def test_simple(",
          "def test_ddof(",
          "def test_bias(",
          "def test_complex(",
          "def test_xy(",
          "def test_empty(",
          "def test_extreme(",
          "def test_corrcoef_dtype(",
          "def test_basic(",
          "def test_complex(",
          "def test_xy(",
          "def test_empty(",
          "def test_wrong_ddof(",
          "def test_1D_rowvar(",
          "def test_1D_variance(",
          "def test_fweights(",
          "def test_aweights(",
          "def test_unit_fweights_and_aweights(",
          "def test_cov_dtype(",
          "def test_gh_27658(",
          "def test_simple(",
          "def test_non_array(",
          "def test_complex(",
          "def test_simple(",
          "def test_int_beta(",
          "def test_simple(",
          "def test_single_input(",
          "def test_no_input(",
          "def test_indexing(",
          "def test_sparse(",
          "def test_invalid_arguments(",
          "def test_return_type(",
          "def test_writeback(",
          "def test_nd_shape(",
          "def test_nd_values(",
          "def test_nd_indexing(",
          "def test_simple(",
          "def test_two_conditions(",
          "def test_scalar_domains_three_conditions(",
          "def test_default(",
          "def test_0d(",
          "def test_0d_comparison(",
          "def test_0d_0d_condition(",
          "def test_multidimensional_extrafunc(",
          "def test_subclasses(",
          "def test_simple(",
          "def test_simple2(",
          "def test_simple_weight(",
          "def test_simple_weight2(",
          "def test_with_minlength(",
          "def test_with_minlength_smaller_than_maxvalue(",
          "def test_with_minlength_and_weights(",
          "def test_empty(",
          "def test_empty_with_minlength(",
          "def test_empty_list(",
          "def test_with_incorrect_minlength(",
          "def test_dtype_reference_leaks(",
          "def test_error_not_1d(",
          "def test_gh_28354(",
          "def test_contiguous_handling(",
          "def test_gh_28354_array_like(",
          "def test_exceptions(",
          "def test_basic(",
          "def test_right_left_behavior(",
          "def test_scalar_interpolation_point(",
          "def test_non_finite_behavior_exact_x(",
          "def test_non_finite_any_nan(",
          "def test_non_finite_inf(",
          "def test_non_finite_half_inf_xf(",
          "def test_non_finite_half_inf_x(",
          "def test_non_finite_half_inf_f(",
          "def test_complex_interp(",
          "def test_zero_dimensional_interpolation_point(",
          "def test_if_len_x_is_small(",
          "def test_period(",
          "def test_basic(",
          "def test_fraction(",
          "def test_api(",
          "def test_complex(",
          "def test_2D(",
          "def test_linear_nan_1D(",
          "def test_linear_interpolation(",
          "def test_lower_higher(",
          "def test_midpoint(",
          "def test_nearest(",
          "def test_linear_interpolation_extrapolation(",
          "def test_sequence(",
          "def test_axis(",
          "def test_scalar_q(",
          "def test_exception(",
          "def test_percentile_list(",
          "def test_percentile_out(",
          "def test_percentile_empty_dim(",
          "def test_percentile_no_overwrite(",
          "def test_no_p_overwrite(",
          "def test_percentile_overwrite(",
          "def test_extended_axis(",
          "def test_extended_axis_invalid(",
          "def test_keepdims(",
          "def test_keepdims_out(",
          "def test_out(",
          "def test_out_nan(",
          "def test_nan_behavior(",
          "def test_nan_q(",
          "def test_nat_basic(",
          "def test_max_ulp(",
          "def test_basic(",
          "def test_correct_quantile_value(",
          "def test_fraction(",
          "def test_complex(",
          "def test_no_p_overwrite(",
          "def test_quantile_preserve_int_type(",
          "def test_q_zero_one(",
          "def test_quantile_monotonic(",
          "def test_quantile_monotonic_hypo(",
          "def test_quantile_scalar_nan(",
          "def test_quantile_identification_equation(",
          "def test_quantile_add_and_multiply_constant(",
          "def test_quantile_constant_weights(",
          "def test_quantile_with_integer_weights(",
          "def test_quantile_with_weights_and_axis(",
          "def test_quantile_weights_min_max(",
          "def test_quantile_weights_raises_negative_weights(",
          "def test_quantile_weights_raises_unsupported_methods(",
          "def test_weibull_fraction(",
          "def test_closest_observation(",
          "def test_linear_interpolation_formula_monotonic(",
          "def test_linear_interpolation_formula_bounded(",
          "def test_linear_interpolation_formula_symmetric(",
          "def test_linear_interpolation_formula_0d_inputs(",
          "def test_basic(",
          "def test_axis_keyword(",
          "def test_overwrite_keyword(",
          "def test_array_like(",
          "def test_subclass(",
          "def test_subclass2(",
          "def test_out(",
          "def test_out_nan(",
          "def test_nan_behavior(",
          "def test_empty(",
          "def test_object(",
          "def test_extended_axis(",
          "def test_extended_axis_invalid(",
          "def test_keepdims(",
          "def test_keepdims_out(",
          "def test_nat_behavior(",
          "def test_sort_real(",
          "def test_sort_complex("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_histograms.py": [
          "def test_simple(",
          "def test_one_bin(",
          "def test_density(",
          "def test_outliers(",
          "def test_arr_weights_mismatch(",
          "def test_type(",
          "def test_f32_rounding(",
          "def test_bool_conversion(",
          "def test_weights(",
          "def test_exotic_weights(",
          "def test_no_side_effects(",
          "def test_empty(",
          "def test_error_binnum_type(",
          "def test_finite_range(",
          "def test_invalid_range(",
          "def test_bin_edge_cases(",
          "def test_last_bin_inclusive_range(",
          "def test_bin_array_dims(",
          "def test_unsigned_monotonicity_check(",
          "def test_object_array_of_0d(",
          "def test_some_nan_values(",
          "def test_datetime(",
          "def test_signed_overflow_bounds(",
          "def test_precision(",
          "def test_histogram_bin_edges(",
          "def test_small_value_range(",
          "def test_big_arrays(",
          "def test_gh_23110(",
          "def test_gh_28400(",
          "def test_empty(",
          "def test_simple(",
          "def test_small(",
          "def test_incorrect_methods(",
          "def test_novariance(",
          "def test_limited_variance(",
          "def test_outlier(",
          "def test_scott_vs_stone(",
          "def test_simple_range(",
          "def test_signed_integer_data(",
          "def test_integer(",
          "def test_integer_non_auto(",
          "def test_simple_weighted(",
          "def test_simple(",
          "def test_shape_3d(",
          "def test_shape_4d(",
          "def test_weights(",
          "def test_identical_samples(",
          "def test_empty(",
          "def test_bins_errors(",
          "def test_inf_edges(",
          "def test_rightmost_binedge(",
          "def test_finite_range(",
          "def test_equal_edges(",
          "def test_edge_dtype(",
          "def test_large_integers(",
          "def test_density_non_uniform_2d(",
          "def test_density_non_uniform_1d("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_index_tricks.py": [
          "def test_basic(",
          "def test_empty_indices(",
          "def test_big_indices(",
          "def test_dtypes(",
          "def test_clipmodes(",
          "def test_writeability(",
          "def test_0d(",
          "def test_empty_array_ravel(",
          "def test_empty_array_unravel(",
          "def test_basic(",
          "def test_linspace_equivalence(",
          "def test_nd(",
          "def test_sparse(",
          "def test_mgrid_size_none_handling(",
          "def test_accepts_npfloating(",
          "def test_accepts_longdouble(",
          "def test_accepts_npcomplexfloating(",
          "def test_1d(",
          "def test_mixed_type(",
          "def test_more_mixed_type(",
          "def test_complex_step(",
          "def test_2d(",
          "def test_0d(",
          "def test_basic(",
          "def test_regression_1(",
          "def test_simple_1(",
          "def test_regression_1(",
          "def test_shape_and_dtype(",
          "def test_bool(",
          "def test_1d_only(",
          "def test_repeated_input(",
          "def test_c_(",
          "def test_basic(",
          "def test_tall_matrix(",
          "def test_tall_matrix_wrap(",
          "def test_wide_matrix(",
          "def test_operate_4d_array(",
          "def test_low_dim_handling(",
          "def test_hetero_shape_handling(",
          "def test_diag_indices(",
          "def test_diag_indices_from(",
          "def test_error_small_input(",
          "def test_error_shape_mismatch(",
          "def test_ndindex("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_io.py": [
          "def test_array(",
          "def test_array_object(",
          "def test_1D(",
          "def test_mmap(",
          "def test_record(",
          "def test_format_2_0(",
          "def test_big_arrays(",
          "def test_multiple_arrays(",
          "def test_named_arrays(",
          "def test_tuple_getitem_raises(",
          "def test_BagObj(",
          "def test_savez_filename_clashes(",
          "def test_not_closing_opened_fid(",
          "def test_closing_fid(",
          "def test_closing_zipfile_after_load(",
          "def test_repr_lists_keys(",
          "def test_array(",
          "def test_1D(",
          "def test_0D_3D(",
          "def test_structured(",
          "def test_structured_padded(",
          "def test_multifield_view(",
          "def test_delimiter(",
          "def test_format(",
          "def test_header_footer(",
          "def test_file_roundtrip(",
          "def test_complex_arrays(",
          "def test_complex_negative_exponent(",
          "def test_custom_writer(",
          "def test_unicode(",
          "def test_unicode_roundtrip(",
          "def test_unicode_bytestream(",
          "def test_unicode_stringstream(",
          "def test_unicode_and_bytes_fmt(",
          "def test_large_zip(",
          "def test_compressed_gzip(",
          "def test_compressed_bz2(",
          "def test_compressed_lzma(",
          "def test_encoding(",
          "def test_stringload(",
          "def test_binary_decode(",
          "def test_converters_decode(",
          "def test_converters_nodecode(",
          "def test_record(",
          "def test_array(",
          "def test_1D(",
          "def test_missing(",
          "def test_converters_with_usecols(",
          "def test_comments_unicode(",
          "def test_comments_byte(",
          "def test_comments_multiple(",
          "def test_comments_multi_chars(",
          "def test_skiprows(",
          "def test_usecols(",
          "def test_bad_usecols(",
          "def test_fancy_dtype(",
          "def test_shaped_dtype(",
          "def test_3d_shaped_dtype(",
          "def test_str_dtype(",
          "def test_empty_file(",
          "def test_unused_converter(",
          "def test_dtype_with_object(",
          "def test_uint64_type(",
          "def test_int64_type(",
          "def test_from_float_hex(",
          "def test_default_float_converter_no_default_hex_conversion(",
          "def test_default_float_converter_exception(",
          "def test_from_complex(",
          "def test_complex_misformatted(",
          "def test_universal_newline(",
          "def test_empty_field_after_tab(",
          "def test_unpack_structured(",
          "def test_ndmin_keyword(",
          "def test_generator_source(",
          "def test_bad_line(",
          "def test_none_as_string(",
          "def test_binary_load(",
          "def test_max_rows(",
          "def test_max_rows_with_skiprows(",
          "def test_max_rows_with_read_continuation(",
          "def test_max_rows_larger(",
          "def test_max_rows_empty_lines(",
          "def test_record(",
          "def test_record_2(",
          "def test_record_3(",
          "def test_record_unicode(",
          "def test_compiled_bytes(",
          "def test_bad_dtype_not_structured(",
          "def test_record(",
          "def test_array(",
          "def test_1D(",
          "def test_comments(",
          "def test_skiprows(",
          "def test_skip_footer(",
          "def test_skip_footer_with_invalid(",
          "def test_header(",
          "def test_auto_dtype(",
          "def test_auto_dtype_uniform(",
          "def test_fancy_dtype(",
          "def test_names_overwrite(",
          "def test_bad_fname(",
          "def test_commented_header(",
          "def test_names_and_comments_none(",
          "def test_file_is_closed_on_error(",
          "def test_autonames_and_usecols(",
          "def test_converters_with_usecols(",
          "def test_converters_with_usecols_and_names(",
          "def test_converters_cornercases(",
          "def test_converters_cornercases2(",
          "def test_unused_converter(",
          "def test_invalid_converter(",
          "def test_tricky_converter_bug1666(",
          "def test_dtype_with_converters(",
          "def test_dtype_with_converters_and_usecols(",
          "def test_dtype_with_object(",
          "def test_dtype_with_object_no_converter(",
          "def test_userconverters_with_explicit_dtype(",
          "def test_utf8_userconverters_with_explicit_dtype(",
          "def test_spacedelimiter(",
          "def test_integer_delimiter(",
          "def test_missing(",
          "def test_missing_with_tabs(",
          "def test_usecols(",
          "def test_usecols_as_css(",
          "def test_usecols_with_structured_dtype(",
          "def test_usecols_with_integer(",
          "def test_usecols_with_named_columns(",
          "def test_empty_file(",
          "def test_fancy_dtype_alt(",
          "def test_shaped_dtype(",
          "def test_withmissing(",
          "def test_user_missing_values(",
          "def test_user_filling_values(",
          "def test_withmissing_float(",
          "def test_with_masked_column_uniform(",
          "def test_with_masked_column_various(",
          "def test_invalid_raise(",
          "def test_invalid_raise_with_usecols(",
          "def test_inconsistent_dtype(",
          "def test_default_field_format(",
          "def test_single_dtype_wo_names(",
          "def test_single_dtype_w_explicit_names(",
          "def test_single_dtype_w_implicit_names(",
          "def test_easy_structured_dtype(",
          "def test_autostrip(",
          "def test_replace_space(",
          "def test_replace_space_known_dtype(",
          "def test_incomplete_names(",
          "def test_names_auto_completion(",
          "def test_names_with_usecols_bug1636(",
          "def test_fixed_width_names(",
          "def test_filling_values(",
          "def test_comments_is_none(",
          "def test_latin1(",
          "def test_binary_decode_autodtype(",
          "def test_utf8_byte_encoding(",
          "def test_utf8_file(",
          "def test_utf8_file_nodtype_unicode(",
          "def test_recfromtxt(",
          "def test_recfromcsv(",
          "def test_max_rows(",
          "def test_gft_using_filename(",
          "def test_gft_from_gzip(",
          "def test_gft_using_generator(",
          "def test_auto_dtype_largeint(",
          "def test_unpack_float_data(",
          "def test_unpack_structured(",
          "def test_unpack_auto_dtype(",
          "def test_unpack_single_name(",
          "def test_squeeze_scalar(",
          "def test_ndmin_keyword(",
          "def test_loadtxt(",
          "def test_save_load(",
          "def test_save_load_memmap(",
          "def test_save_load_memmap_readwrite(",
          "def test_savez_load(",
          "def test_savez_compressed_load(",
          "def test_genfromtxt(",
          "def test_recfromtxt(",
          "def test_recfromcsv(",
          "def test_gzip_load(",
          "def test_ducktyping(",
          "def test_gzip_loadtxt(",
          "def test_gzip_loadtxt_from_string(",
          "def test_npzfile_dict(",
          "def test_load_refcount(",
          "def test_load_multiple_arrays_until_eof(",
          "def test_savez_nopickle("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_loadtxt.py": [
          "def test_scientific_notation(",
          "def test_comment_multiple_chars(",
          "def test_structured_dtype_and_skiprows_no_empty_lines(",
          "def test_unpack_structured(",
          "def test_structured_dtype_with_shape(",
          "def test_structured_dtype_with_multi_shape(",
          "def test_nested_structured_subarray(",
          "def test_structured_dtype_offsets(",
          "def test_exception_negative_row_limits(",
          "def test_exception_noninteger_row_limits(",
          "def test_ndmin_single_row_or_col(",
          "def test_bad_ndmin(",
          "def test_blank_lines_spaces_delimit(",
          "def test_blank_lines_normal_delimiter(",
          "def test_maxrows_no_blank_lines(",
          "def test_exception_message_bad_values(",
          "def test_converters_negative_indices(",
          "def test_converters_negative_indices_with_usecols(",
          "def test_ragged_error(",
          "def test_ragged_usecols(",
          "def test_empty_usecols(",
          "def test_large_unicode_characters(",
          "def test_unicode_with_converter(",
          "def test_converter_with_structured_dtype(",
          "def test_converter_with_unicode_dtype(",
          "def test_read_huge_row(",
          "def test_huge_float(",
          "def test_string_no_length_given(",
          "def test_float_conversion(",
          "def test_bool(",
          "def test_integer_signs(",
          "def test_implicit_cast_float_to_int_fails(",
          "def test_complex_parsing(",
          "def test_read_from_generator(",
          "def test_read_from_generator_multitype(",
          "def test_read_from_bad_generator(",
          "def test_object_cleanup_on_read_error(",
          "def test_character_not_bytes_compatible(",
          "def test_invalid_converter(",
          "def test_converters_dict_raises_non_integer_key(",
          "def test_converters_dict_raises_non_col_key(",
          "def test_converters_dict_raises_val_not_callable(",
          "def test_quoted_field(",
          "def test_quoted_field_with_whitepace_delimiter(",
          "def test_quote_support_default(",
          "def test_quotechar_multichar_error(",
          "def test_comment_multichar_error_with_quote(",
          "def test_structured_dtype_with_quotes(",
          "def test_quoted_field_is_not_empty(",
          "def test_quoted_field_is_not_empty_nonstrict(",
          "def test_consecutive_quotechar_escaped(",
          "def test_warn_on_no_data(",
          "def test_warn_on_skipped_data(",
          "def test_byteswapping_and_unaligned(",
          "def test_unicode_whitespace_stripping(",
          "def test_unicode_whitespace_stripping_complex(",
          "def test_bad_complex(",
          "def test_nul_character_error(",
          "def test_no_thousands_support(",
          "def test_bad_newline_in_iterator(",
          "def test_good_newline_in_iterator(",
          "def test_universal_newlines_quoted(",
          "def test_null_character(",
          "def test_iterator_fails_getting_next_line(",
          "def test_not_an_filelike(",
          "def test_filelike_read_fails(",
          "def test_filelike_bad_read(",
          "def test_not_an_iter(",
          "def test_bad_type(",
          "def test_bad_encoding(",
          "def test_manual_universal_newlines(",
          "def test_delimiter_comment_collision_raises(",
          "def test_delimiter_quotechar_collision_raises(",
          "def test_comment_quotechar_collision_raises(",
          "def test_delimiter_and_multiple_comments_collision_raises(",
          "def test_collision_with_default_delimiter_raises(",
          "def test_control_character_newline_raises(",
          "def test_parametric_unit_discovery(",
          "def test_str_dtype_unit_discovery_with_converter(",
          "def test_control_character_empty(",
          "def test_control_characters_as_bytes(",
          "def test_field_growing_cases(",
          "def test_maxrows_exceeding_chunksize(",
          "def test_skiprow_exceeding_maxrows_exceeding_chunksize("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_mixins.py": [
          "def test_array_like_add(",
          "def test_inplace(",
          "def test_opt_out(",
          "def test_subclass(",
          "def test_object(",
          "def test_unary_methods(",
          "def test_forward_binary_methods(",
          "def test_reflected_binary_methods(",
          "def test_matmul(",
          "def test_ufunc_at(",
          "def test_ufunc_two_outputs("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_nanfunctions.py": [
          "def test_signature_match(",
          "def test_exhaustiveness(",
          "def test_mutation(",
          "def test_keepdims(",
          "def test_out(",
          "def test_dtype_from_input(",
          "def test_result_values(",
          "def test_allnans(",
          "def test_masked(",
          "def test_scalar(",
          "def test_subclass(",
          "def test_object_array(",
          "def test_initial(",
          "def test_where(",
          "def test_mutation(",
          "def test_result_values(",
          "def test_allnans(",
          "def test_empty(",
          "def test_scalar(",
          "def test_subclass(",
          "def test_keepdims(",
          "def test_out(",
          "def test_nanfunc(",
          "def test_nanfunc_q(",
          "def test_nanfunc_ddof(",
          "def test_nanfunc_correction(",
          "def test_mutation(",
          "def test_keepdims(",
          "def test_out(",
          "def test_dtype_from_dtype(",
          "def test_dtype_from_char(",
          "def test_dtype_from_input(",
          "def test_result_values(",
          "def test_scalar(",
          "def test_subclass(",
          "def test_allnans(",
          "def test_empty(",
          "def test_initial(",
          "def test_where(",
          "def test_allnans(",
          "def test_empty(",
          "def test_keepdims(",
          "def test_result_values(",
          "def test_out(",
          "def test_dtype_error(",
          "def test_out_dtype_error(",
          "def test_ddof(",
          "def test_ddof_too_big(",
          "def test_allnans(",
          "def test_empty(",
          "def test_where(",
          "def test_nanstd_with_mean_keyword(",
          "def test_mutation(",
          "def test_keepdims(",
          "def test_keepdims_out(",
          "def test_out(",
          "def test_small_large(",
          "def test_result_values(",
          "def test_allnans(",
          "def test_empty(",
          "def test_scalar(",
          "def test_extended_axis_invalid(",
          "def test_float_special(",
          "def test_mutation(",
          "def test_keepdims(",
          "def test_keepdims_out(",
          "def test_out(",
          "def test_complex(",
          "def test_result_values(",
          "def test_allnans(",
          "def test_empty(",
          "def test_scalar(",
          "def test_extended_axis_invalid(",
          "def test_multiple_percentiles(",
          "def test_nan_value_with_weight(",
          "def test_nan_value_with_weight_ndim(",
          "def test_regression(",
          "def test_basic(",
          "def test_complex(",
          "def test_no_p_overwrite(",
          "def test_allnans(",
          "def test__nan_mask(",
          "def test__replace_nan(",
          "def test_memmap_takes_fast_route("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_packbits.py": [
          "def test_packbits(",
          "def test_packbits_empty(",
          "def test_packbits_empty_with_axis(",
          "def test_packbits_large(",
          "def test_packbits_very_large(",
          "def test_unpackbits(",
          "def test_pack_unpack_order(",
          "def test_unpackbits_empty(",
          "def test_unpackbits_empty_with_axis(",
          "def test_unpackbits_large(",
          "def test_roundtrip(",
          "def test_count(",
          "def test_roundtrip_axis(",
          "def test_axis_count(",
          "def test_bad_count("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_polynomial.py": [
          "def test_poly1d_str_and_repr(",
          "def test_poly1d_resolution(",
          "def test_poly1d_math(",
          "def test_poly1d_misc(",
          "def test_poly1d_variable_arg(",
          "def test_poly(",
          "def test_roots(",
          "def test_str_leading_zeros(",
          "def test_polyfit(",
          "def test_objects(",
          "def test_complex(",
          "def test_integ_coeffs(",
          "def test_zero_dims(",
          "def test_poly_int_overflow(",
          "def test_zero_poly_dtype(",
          "def test_poly_eq(",
          "def test_polydiv(",
          "def test_poly_coeffs_mutable("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_recfunctions.py": [
          "def test_zip_descr(",
          "def test_drop_fields(",
          "def test_rename_fields(",
          "def test_get_names(",
          "def test_get_names_flat(",
          "def test_get_fieldstructure(",
          "def test_find_duplicates(",
          "def test_find_duplicates_ignoremask(",
          "def test_repack_fields(",
          "def test_structured_to_unstructured(",
          "def test_unstructured_to_structured(",
          "def test_field_assignment_by_name(",
          "def test_simple_flexible(",
          "def test_masked_flexible(",
          "def test_solo(",
          "def test_solo_w_flatten(",
          "def test_standard(",
          "def test_flatten(",
          "def test_flatten_wflexible(",
          "def test_wmasked_arrays(",
          "def test_w_singlefield(",
          "def test_w_shorter_flex(",
          "def test_singlerecord(",
          "def test_append_single(",
          "def test_append_double(",
          "def test_append_on_flex(",
          "def test_append_on_nested(",
          "def test_solo(",
          "def test_unnamed_fields(",
          "def test_unnamed_and_named_fields(",
          "def test_matching_named_fields(",
          "def test_defaults(",
          "def test_autoconversion(",
          "def test_checktitles(",
          "def test_subdtype(",
          "def test_inner_join(",
          "def test_join(",
          "def test_join_subdtype(",
          "def test_outer_join(",
          "def test_leftouter_join(",
          "def test_different_field_order(",
          "def test_duplicate_keys(",
          "def test_same_name_different_dtypes_key(",
          "def test_same_name_different_dtypes(",
          "def test_subarray_key(",
          "def test_padded_dtype(",
          "def test_no_r1postfix(",
          "def test_no_postfix(",
          "def test_no_r2postfix(",
          "def test_two_keys_two_vars(",
          "def test_append_to_objects("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_regression.py": [
          "def test_poly1d(",
          "def test_cov_parameters(",
          "def test_mem_digitize(",
          "def test_unique_zero_sized(",
          "def test_mem_vectorise(",
          "def test_mgrid_single_element(",
          "def test_refcount_vectorize(",
          "def test_poly1d_nan_roots(",
          "def test_mem_polymul(",
          "def test_mem_string_concat(",
          "def test_poly_div(",
          "def test_poly_eq(",
          "def test_polyfit_build(",
          "def test_polydiv_type(",
          "def test_histogramdd_too_many_bins(",
          "def test_polyint_type(",
          "def test_ndenumerate_crash(",
          "def test_large_fancy_indexing(",
          "def test_void_coercion(",
          "def test_include_dirs(",
          "def test_polyder_return_type(",
          "def test_append_fields_dtype_list(",
          "def test_loadtxt_fields_subarrays(",
          "def test_nansum_with_boolean(",
          "def test_py3_compat("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_shape_base.py": [
          "def test_argequivalent(",
          "def test_invalid(",
          "def test_empty(",
          "def test_broadcast(",
          "def test_replace_max(",
          "def test_broadcast(",
          "def test_invalid(",
          "def test_simple(",
          "def test_simple101(",
          "def test_3d(",
          "def test_preserve_subclass(",
          "def test_subclass(",
          "def test_scalar_array(",
          "def test_0d_array(",
          "def test_axis_insertion(",
          "def test_subclass_preservation(",
          "def test_axis_insertion_ma(",
          "def test_tuple_func1d(",
          "def test_empty(",
          "def test_with_iterable_object(",
          "def test_simple(",
          "def test_functionality(",
          "def test_axis_tuple(",
          "def test_axis_out_of_range(",
          "def test_repeated_axis(",
          "def test_subclasses(",
          "def test_integer_0_split(",
          "def test_integer_split(",
          "def test_integer_split_2D_rows(",
          "def test_integer_split_2D_cols(",
          "def test_integer_split_2D_default(",
          "def test_integer_split_2D_rows_greater_max_int32(",
          "def test_index_split_simple(",
          "def test_index_split_low_bound(",
          "def test_index_split_high_bound(",
          "def test_equal_split(",
          "def test_unequal_split(",
          "def test_non_iterable(",
          "def test_1D_arrays(",
          "def test_2D_arrays(",
          "def test_generator(",
          "def test_non_iterable(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_2D_array2(",
          "def test_generator(",
          "def test_non_iterable(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_non_iterable(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_non_iterable(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_3D_array(",
          "def test_basic(",
          "def test_basic(",
          "def test_return_type(",
          "def test_kron_smoke(",
          "def test_kron_ma(",
          "def test_kron_shape(",
          "def test_basic(",
          "def test_tile_one_repetition_on_array_gh4679(",
          "def test_empty(",
          "def test_kroncompare(",
          "def test_basic("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_stride_tricks.py": [
          "def test_same(",
          "def test_broadcast_kwargs(",
          "def test_one_off(",
          "def test_same_input_shapes(",
          "def test_two_compatible_by_ones_input_shapes(",
          "def test_two_compatible_by_prepending_ones_input_shapes(",
          "def test_incompatible_shapes_raise_valueerror(",
          "def test_same_as_ufunc(",
          "def test_broadcast_to_succeeds(",
          "def test_broadcast_to_raises(",
          "def test_broadcast_shape(",
          "def test_broadcast_shapes_succeeds(",
          "def test_broadcast_shapes_raises(",
          "def test_as_strided(",
          "def test_1d(",
          "def test_2d(",
          "def test_2d_with_axis(",
          "def test_2d_repeated_axis(",
          "def test_2d_without_axis(",
          "def test_errors(",
          "def test_writeable(",
          "def test_subok(",
          "def test_subclasses(",
          "def test_writeable(",
          "def test_writeable_memoryview(",
          "def test_reference_types("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_twodim_base.py": [
          "def test_basic(",
          "def test_uint64(",
          "def test_diag(",
          "def test_2d(",
          "def test_diag2d(",
          "def test_eye_bounds(",
          "def test_strings(",
          "def test_bool(",
          "def test_order(",
          "def test_vector(",
          "def test_matrix(",
          "def test_fortran_order(",
          "def test_diag_bounds(",
          "def test_failure(",
          "def test_basic(",
          "def test_basic(",
          "def test_simple(",
          "def test_asym(",
          "def test_density(",
          "def test_all_outliers(",
          "def test_empty(",
          "def test_binparameter_combination(",
          "def test_dispatch(",
          "def test_bad_length(",
          "def test_dtype(",
          "def test_tril_triu_ndim2(",
          "def test_tril_triu_ndim3(",
          "def test_tril_triu_with_inf(",
          "def test_tril_triu_dtype(",
          "def test_mask_indices(",
          "def test_tril_indices(",
          "def test_triu_indices(",
          "def test_exceptions(",
          "def test_exceptions(",
          "def test_basic(",
          "def test_dtypes("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_type_check.py": [
          "def test_basic(",
          "def test_default_1(",
          "def test_default_2(",
          "def test_default_3(",
          "def test_basic(",
          "def test_real(",
          "def test_cmplx(",
          "def test_real(",
          "def test_cmplx(",
          "def test_fail(",
          "def test_pass(",
          "def test_pass(",
          "def test_fail(",
          "def test_basic(",
          "def test_scalar(",
          "def test_list(",
          "def test_duck(",
          "def test_pandas_duck(",
          "def test_custom_dtype_duck(",
          "def test_basic(",
          "def test_goodvalues(",
          "def test_posinf(",
          "def test_neginf(",
          "def test_ind(",
          "def test_integer(",
          "def test_complex(",
          "def test_complex1(",
          "def test_goodvalues(",
          "def test_posinf(",
          "def test_neginf(",
          "def test_ind(",
          "def test_integer(",
          "def test_complex(",
          "def test_complex1(",
          "def test_goodvalues(",
          "def test_posinf(",
          "def test_posinf_scalar(",
          "def test_neginf(",
          "def test_neginf_scalar(",
          "def test_ind(",
          "def test_generic(",
          "def test_generic(",
          "def test_generic(",
          "def test_array(",
          "def test_integer(",
          "def test_float(",
          "def test_complex_good(",
          "def test_complex_bad(",
          "def test_complex_bad2(",
          "def test_do_not_rewrite_previous_keyword(",
          "def test_basic("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_ufunclike.py": [
          "def test_isposinf(",
          "def test_isneginf(",
          "def test_fix(",
          "def test_fix_with_subclass(",
          "def test_scalar("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_utils.py": [
          "def test_assert_raises_regex_context_manager(",
          "def test_info_method_heading(",
          "def test_drop_metadata(",
          "def test_drop_metadata_identity_and_copy("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__datasource.py": [
          "def test_ValidHTTP(",
          "def test_InvalidHTTP(",
          "def test_InvalidHTTPCacheURLError(",
          "def test_ValidFile(",
          "def test_InvalidFile(",
          "def test_ValidGzipFile(",
          "def test_ValidBz2File(",
          "def test_ValidHTTP(",
          "def test_InvalidHTTP(",
          "def test_ValidFile(",
          "def test_InvalidFile(",
          "def test_ValidHTTP(",
          "def test_ValidFile(",
          "def test_InvalidHTTP(",
          "def test_InvalidFile(",
          "def test_sandboxing(",
          "def test_windows_os_sep(",
          "def test_ValidHTTP(",
          "def test_sandboxing(",
          "def test_windows_os_sep(",
          "def test_ValidFile(",
          "def test_InvalidFile(",
          "def test_RemoveHTTPFile(",
          "def test_CachedHTTPFile(",
          "def test_DataSourceOpen(",
          "def test_del_attr_handling("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__iotools.py": [
          "def test_no_delimiter(",
          "def test_space_delimiter(",
          "def test_tab_delimiter(",
          "def test_other_delimiter(",
          "def test_constant_fixed_width(",
          "def test_variable_fixed_width(",
          "def test_case_sensitivity(",
          "def test_excludelist(",
          "def test_missing_names(",
          "def test_validate_nb_names(",
          "def test_validate_wo_names(",
          "def test_creation(",
          "def test_upgrade(",
          "def test_missing(",
          "def test_upgrademapper(",
          "def test_string_to_object(",
          "def test_keep_default(",
          "def test_keep_default_zero(",
          "def test_keep_missing_values(",
          "def test_int64_dtype(",
          "def test_uint64_dtype(",
          "def test_has_nested_dtype(",
          "def test_easy_dtype(",
          "def test_flatten_dtype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__version.py": [
          "def test_main_versions(",
          "def test_version_1_point_10(",
          "def test_alpha_beta_rc(",
          "def test_dev_version(",
          "def test_dev_a_b_rc_mixed(",
          "def test_dev0_version(",
          "def test_dev0_a_b_rc_mixed(",
          "def test_raises("
        ],
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_deprecations.py": [
          "def test_qr_mode_full_future_warning("
        ],
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_linalg.py": [
          "def test_sq_cases(",
          "def test_empty_sq_cases(",
          "def test_nonsq_cases(",
          "def test_empty_nonsq_cases(",
          "def test_herm_cases(",
          "def test_empty_herm_cases(",
          "def test_generalized_sq_cases(",
          "def test_generalized_empty_sq_cases(",
          "def test_generalized_nonsq_cases(",
          "def test_generalized_empty_nonsq_cases(",
          "def test_generalized_herm_cases(",
          "def test_generalized_empty_herm_cases(",
          "def test_types(",
          "def test_1_d(",
          "def test_0_size(",
          "def test_0_size_k(",
          "def test_types(",
          "def test_0_size(",
          "def test_types(",
          "def test_0_size(",
          "def test_types(",
          "def test_0_size(",
          "def test_types(",
          "def test_empty_identity(",
          "def test_svdvals(",
          "def test_basic_nonsvd(",
          "def test_singular(",
          "def test_nan(",
          "def test_stacked_singular(",
          "def test_pinv_rtol_arg(",
          "def test_zero(",
          "def test_types(",
          "def test_0_size(",
          "def test_rcond(",
          "def test_empty_a_b(",
          "def test_incompatible_dims(",
          "def test_large_power(",
          "def test_power_is_zero(",
          "def test_power_is_one(",
          "def test_power_is_two(",
          "def test_power_is_minus_one(",
          "def test_exceptions_bad_power(",
          "def test_exceptions_non_square(",
          "def test_exceptions_not_invertible(",
          "def test_types(",
          "def test_invalid(",
          "def test_UPLO(",
          "def test_0_size(",
          "def test_types(",
          "def test_invalid(",
          "def test_UPLO(",
          "def test_0_size(",
          "def test_empty(",
          "def test_vector_return_type(",
          "def test_vector(",
          "def _test(",
          "def test_axis(",
          "def test_keepdims(",
          "def test_matrix_empty(",
          "def test_matrix_return_type(",
          "def test_matrix_2x2(",
          "def test_matrix_3x3(",
          "def test_bad_args(",
          "def test_longdouble_norm(",
          "def test_intmin(",
          "def test_complex_high_ord(",
          "def test_matrix_rank(",
          "def test_symmetric_rank(",
          "def test_reduced_rank(",
          "def test_qr_empty(",
          "def test_mode_raw(",
          "def test_mode_all_but_economic(",
          "def test_stacked_inputs(",
          "def test_basic_property(",
          "def test_0_size(",
          "def test_upper_lower_arg(",
          "def test_byteorder_check(",
          "def test_generalized_raise_multiloop(",
          "def test_xerbla_override(",
          "def test_sdot_bug_8577(",
          "def test_basic_function_with_three_arguments(",
          "def test_basic_function_with_two_arguments(",
          "def test_basic_function_with_dynamic_programming_optimization(",
          "def test_vector_as_first_argument(",
          "def test_vector_as_last_argument(",
          "def test_vector_as_first_and_last_argument(",
          "def test_three_arguments_and_out(",
          "def test_two_arguments_and_out(",
          "def test_dynamic_programming_optimization_and_out(",
          "def test_dynamic_programming_logic(",
          "def test_too_few_input_arrays(",
          "def test_non_square_handling(",
          "def test_tensorinv_shape(",
          "def test_tensorinv_ind_limit(",
          "def test_tensorinv_result(",
          "def test_non_square_handling(",
          "def test_tensorsolve_result(",
          "def test_unsupported_commontype(",
          "def test_blas64_dot(",
          "def test_blas64_geqrf_lwork_smoketest(",
          "def test_diagonal(",
          "def test_trace(",
          "def test_cross(",
          "def test_tensordot(",
          "def test_matmul(",
          "def test_matrix_transpose(",
          "def test_matrix_norm(",
          "def test_matrix_norm_empty(",
          "def test_vector_norm(",
          "def test_vector_norm_empty("
        ],
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_regression.py": [
          "def test_eig_build(",
          "def test_eigh_build(",
          "def test_svd_build(",
          "def test_norm_vector_badarg(",
          "def test_lapack_endian(",
          "def test_large_svd_32bit(",
          "def test_svd_no_uv(",
          "def test_norm_object_array(",
          "def test_lstsq_complex_larger_rhs(",
          "def test_cholesky_empty_array(",
          "def test_matrix_rank_rtol_argument(",
          "def test_openblas_threading("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_arrayobject.py": [
          "def test_matrix_transpose_raises_error_for_1d(",
          "def test_matrix_transpose_equals_transpose_2d(",
          "def test_matrix_transpose_equals_swapaxes("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_core.py": [
          "def test_basicattributes(",
          "def test_basic0d(",
          "def test_basic1d(",
          "def test_basic2d(",
          "def test_concatenate_basic(",
          "def test_concatenate_alongaxis(",
          "def test_concatenate_flexible(",
          "def test_creation_ndmin(",
          "def test_creation_ndmin_from_maskedarray(",
          "def test_creation_maskcreation(",
          "def test_masked_singleton_array_creation_warns(",
          "def test_creation_with_list_of_maskedarrays(",
          "def test_creation_with_list_of_maskedarrays_no_bool_cast(",
          "def test_creation_from_ndarray_with_padding(",
          "def test_unknown_keyword_parameter(",
          "def test_asarray(",
          "def test_asarray_default_order(",
          "def test_asarray_enforce_order(",
          "def test_fix_invalid(",
          "def test_maskedelement(",
          "def test_set_element_as_object(",
          "def test_indexing(",
          "def test_setitem_no_warning(",
          "def test_copy(",
          "def test_copy_0d(",
          "def test_copy_on_python_builtins(",
          "def test_copy_immutable(",
          "def test_deepcopy(",
          "def test_format(",
          "def test_str_repr(",
          "def test_str_repr_legacy(",
          "def test_0d_unicode(",
          "def test_pickling(",
          "def test_pickling_subbaseclass(",
          "def test_pickling_maskedconstant(",
          "def test_pickling_wstructured(",
          "def test_pickling_keepalignment(",
          "def test_single_element_subscript(",
          "def test_topython(",
          "def test_oddfeatures_1(",
          "def test_oddfeatures_2(",
          "def test_oddfeatures_3(",
          "def test_filled_with_object_dtype(",
          "def test_filled_with_flexible_dtype(",
          "def test_filled_with_mvoid(",
          "def test_filled_with_nested_dtype(",
          "def test_filled_with_f_order(",
          "def test_optinfo_propagation(",
          "def test_optinfo_forward_propagation(",
          "def test_fancy_printoptions(",
          "def test_flatten_structured_array(",
          "def test_void0d(",
          "def test_mvoid_getitem(",
          "def test_mvoid_iter(",
          "def test_mvoid_print(",
          "def test_mvoid_multidim_print(",
          "def test_object_with_array(",
          "def test_maskedarray_tofile_raises_notimplementederror(",
          "def test_basic_arithmetic(",
          "def test_divide_on_different_shapes(",
          "def test_mixed_arithmetic(",
          "def test_limits_arithmetic(",
          "def test_masked_singleton_arithmetic(",
          "def test_masked_singleton_equality(",
          "def test_arithmetic_with_masked_singleton(",
          "def test_arithmetic_with_masked_singleton_on_1d_singleton(",
          "def test_scalar_arithmetic(",
          "def test_basic_ufuncs(",
          "def test_basic_ufuncs_masked(",
          "def test_count_func(",
          "def test_count_on_python_builtins(",
          "def test_minmax_func(",
          "def test_minimummaximum_func(",
          "def test_minmax_reduce(",
          "def test_minmax_funcs_with_output(",
          "def test_minmax_methods(",
          "def test_minmax_dtypes(",
          "def test_minmax_ints(",
          "def test_minmax_time_dtypes(",
          "def test_addsumprod(",
          "def test_binops_d2D(",
          "def test_domained_binops_d2D(",
          "def test_noshrinking(",
          "def test_ufunc_nomask(",
          "def test_noshink_on_creation(",
          "def test_mod(",
          "def test_TakeTransposeInnerOuter(",
          "def test_imag_real(",
          "def test_methods_with_output(",
          "def test_eq_on_structured(",
          "def test_ne_on_structured(",
          "def test_eq_ne_structured_with_non_masked(",
          "def test_eq_ne_structured_extra(",
          "def test_eq_for_strings(",
          "def test_ne_for_strings(",
          "def test_eq_for_numeric(",
          "def test_eq_broadcast_with_unmasked(",
          "def test_comp_no_mask_not_broadcast(",
          "def test_ne_for_numeric(",
          "def test_comparisons_for_numeric(",
          "def test_comparisons_strings(",
          "def test_eq_with_None(",
          "def test_eq_with_scalar(",
          "def test_eq_different_dimensions(",
          "def test_numpyarithmetic(",
          "def test_keepmask(",
          "def test_hardmask(",
          "def test_hardmask_again(",
          "def test_hardmask_oncemore_yay(",
          "def test_smallmask(",
          "def test_shrink_mask(",
          "def test_flat(",
          "def test_assign_dtype(",
          "def test_check_on_scalar(",
          "def test_check_on_fields(",
          "def test_fillvalue_conversion(",
          "def test_default_fill_value(",
          "def test_default_fill_value_structured(",
          "def test_default_fill_value_void(",
          "def test_fillvalue(",
          "def test_subarray_fillvalue(",
          "def test_fillvalue_exotic_dtype(",
          "def test_fillvalue_datetime_timedelta(",
          "def test_extremum_fill_value(",
          "def test_extremum_fill_value_subdtype(",
          "def test_fillvalue_individual_fields(",
          "def test_fillvalue_implicit_structured_array(",
          "def test_fillvalue_as_arguments(",
          "def test_shape_argument(",
          "def test_fillvalue_in_view(",
          "def test_fillvalue_bytes_or_str(",
          "def test_testUfuncRegression(",
          "def test_reduce(",
          "def test_minmax(",
          "def test_ndarray_mask(",
          "def test_treatment_of_NotImplemented(",
          "def test_no_masked_nan_warnings(",
          "def test_masked_array_underflow(",
          "def test_inplace_addition_scalar(",
          "def test_inplace_addition_array(",
          "def test_inplace_subtraction_scalar(",
          "def test_inplace_subtraction_array(",
          "def test_inplace_multiplication_scalar(",
          "def test_inplace_multiplication_array(",
          "def test_inplace_division_scalar_int(",
          "def test_inplace_division_scalar_float(",
          "def test_inplace_division_array_float(",
          "def test_inplace_division_misc(",
          "def test_datafriendly_add(",
          "def test_datafriendly_sub(",
          "def test_datafriendly_mul(",
          "def test_datafriendly_div(",
          "def test_datafriendly_pow(",
          "def test_datafriendly_add_arrays(",
          "def test_datafriendly_sub_arrays(",
          "def test_datafriendly_mul_arrays(",
          "def test_inplace_addition_scalar_type(",
          "def test_inplace_addition_array_type(",
          "def test_inplace_subtraction_scalar_type(",
          "def test_inplace_subtraction_array_type(",
          "def test_inplace_multiplication_scalar_type(",
          "def test_inplace_multiplication_array_type(",
          "def test_inplace_floor_division_scalar_type(",
          "def test_inplace_floor_division_array_type(",
          "def test_inplace_division_scalar_type(",
          "def test_inplace_division_array_type(",
          "def test_inplace_pow_type(",
          "def test_generic_methods(",
          "def test_allclose(",
          "def test_allclose_timedelta(",
          "def test_allany(",
          "def test_allany_oddities(",
          "def test_argmax_argmin(",
          "def test_clip(",
          "def test_clip_out(",
          "def test_compress(",
          "def test_compressed(",
          "def test_empty(",
          "def test_zeros(",
          "def test_ones(",
          "def test_put(",
          "def test_put_nomask(",
          "def test_put_hardmask(",
          "def test_putmask(",
          "def test_ravel(",
          "def test_ravel_order(",
          "def test_reshape(",
          "def test_sort(",
          "def test_stable_sort(",
          "def test_argsort_matches_sort(",
          "def test_sort_2d(",
          "def test_sort_flexible(",
          "def test_argsort(",
          "def test_squeeze(",
          "def test_swapaxes(",
          "def test_take(",
          "def test_take_masked_indices(",
          "def test_tolist(",
          "def test_tolist_specialcase(",
          "def test_toflex(",
          "def test_fromflex(",
          "def test_arraymethod(",
          "def test_arraymethod_0d(",
          "def test_transpose_view(",
          "def test_diagonal_view(",
          "def test_cumsumprod(",
          "def test_cumsumprod_with_output(",
          "def test_ptp(",
          "def test_add_object(",
          "def test_sum_object(",
          "def test_prod_object(",
          "def test_meananom_object(",
          "def test_anom_shape(",
          "def test_anom(",
          "def test_trace(",
          "def test_dot(",
          "def test_dot_shape_mismatch(",
          "def test_varmean_nomask(",
          "def test_varstd(",
          "def test_varstd_specialcases(",
          "def test_varstd_ddof(",
          "def test_diag(",
          "def test_axis_methods_nomask(",
          "def test_mean_overflow(",
          "def test_diff_with_prepend(",
          "def test_diff_with_append(",
          "def test_diff_with_dim_0(",
          "def test_diff_with_n_0(",
          "def test_varstd(",
          "def test_masked_where_bool(",
          "def test_masked_equal_wlist(",
          "def test_masked_equal_fill_value(",
          "def test_masked_where_condition(",
          "def test_masked_where_oddities(",
          "def test_masked_where_shape_constraint(",
          "def test_masked_where_structured(",
          "def test_masked_where_mismatch(",
          "def test_masked_otherfunctions(",
          "def test_round(",
          "def test_round_with_output(",
          "def test_round_with_scalar(",
          "def test_identity(",
          "def test_power(",
          "def test_power_with_broadcasting(",
          "def test_where(",
          "def test_where_object(",
          "def test_where_with_masked_choice(",
          "def test_where_with_masked_condition(",
          "def test_where_type(",
          "def test_where_broadcast(",
          "def test_where_structured(",
          "def test_where_structured_masked(",
          "def test_masked_invalid_error(",
          "def test_masked_invalid_pandas(",
          "def test_masked_invalid_full_mask(",
          "def test_choose(",
          "def test_choose_with_out(",
          "def test_reshape(",
          "def test_make_mask_descr(",
          "def test_make_mask(",
          "def test_mask_or(",
          "def test_allequal(",
          "def test_flatten_mask(",
          "def test_on_ndarray(",
          "def test_compress(",
          "def test_compressed(",
          "def test_convolve(",
          "def test_set_records_masks(",
          "def test_set_record_element(",
          "def test_set_record_slice(",
          "def test_mask_element(",
          "def test_getmaskarray(",
          "def test_view(",
          "def test_getitem(",
          "def _test_index(",
          "def test_setitem(",
          "def test_setitem_scalar(",
          "def test_element_len(",
          "def test_getitem(",
          "def test_nested_ma(",
          "def test_view_to_nothing(",
          "def test_view_to_type(",
          "def test_view_to_simple_dtype(",
          "def test_view_to_flexible_dtype(",
          "def test_view_to_subdtype(",
          "def test_view_to_dtype_and_type(",
          "def test_ndarrayfuncs(",
          "def testaxis(",
          "def testkeepdims(",
          "def test_count(",
          "def _do_add_test(",
          "def test_ufunc(",
          "def test_operator(",
          "def test_ctor(",
          "def test_repr(",
          "def test_pickle(",
          "def test_copy(",
          "def test__copy(",
          "def test_deepcopy(",
          "def test_immutable(",
          "def test_coercion_int(",
          "def test_coercion_float(",
          "def test_coercion_unicode(",
          "def test_coercion_bytes(",
          "def test_subclass(",
          "def test_attributes_readonly(",
          "def test_masked_values(",
          "def test_masked_array(",
          "def test_masked_array_no_copy(",
          "def test_append_masked_array(",
          "def test_append_masked_array_along_axis(",
          "def test_default_fill_value_complex(",
          "def test_ufunc_with_output(",
          "def test_ufunc_with_out_varied(",
          "def test_astype_mask_ordering(",
          "def test_astype_basic(",
          "def test_fieldless_void(",
          "def test_mask_shape_assignment_does_not_break_masked(",
          "def test_doc_note(",
          "def test_gh_22556(",
          "def test_gh_21022(",
          "def test_deepcopy_2d_obj(",
          "def test_deepcopy_0d_obj(",
          "def test_uint_fill_value_and_filled("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_deprecations.py": [
          "def _test_base(",
          "def test_function_ndarray(",
          "def test_function_maskedarray(",
          "def test_method(",
          "def test_axis_default(",
          "def test_fromtextfile_delimitor("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_extras.py": [
          "def test_masked_all(",
          "def test_masked_all_with_object_nested(",
          "def test_masked_all_with_object(",
          "def test_masked_all_like(",
          "def test_clump_masked(",
          "def test_clump_unmasked(",
          "def test_flatnotmasked_contiguous(",
          "def test_testAverage1(",
          "def test_testAverage2(",
          "def test_testAverage3(",
          "def test_testAverage4(",
          "def test_weight_and_input_dims_different(",
          "def test_onintegers_with_mask(",
          "def test_complex(",
          "def test_basic_keepdims(",
          "def test_masked_weights(",
          "def test_1d(",
          "def test_2d(",
          "def test_masked_constant(",
          "def test_edges(",
          "def test_contiguous(",
          "def test_compress_nd(",
          "def test_compress_rowcols(",
          "def test_mask_rowcols(",
          "def test_mask_row_cols_axis_deprecation(",
          "def test_dot(",
          "def test_dot_returns_maskedarray(",
          "def test_dot_out(",
          "def test_3d(",
          "def test_3d_kwargs(",
          "def test_basic(",
          "def test_pytype(",
          "def test_inf(",
          "def test_non_masked(",
          "def test_docstring_examples(",
          "def test_axis_argument_errors(",
          "def test_masked_0d(",
          "def test_masked_1d(",
          "def test_1d_shape_consistency(",
          "def test_2d(",
          "def test_2d_waxis(",
          "def test_3d(",
          "def test_neg_axis(",
          "def test_out_1d(",
          "def test_out(",
          "def test_keepdims_out(",
          "def test_single_non_masked_value_on_axis(",
          "def test_nan(",
          "def test_out_nan(",
          "def test_nan_behavior(",
          "def test_ambigous_fill(",
          "def test_special(",
          "def test_empty(",
          "def test_object(",
          "def test_covhelper(",
          "def test_1d_without_missing(",
          "def test_2d_without_missing(",
          "def test_1d_with_missing(",
          "def test_2d_with_missing(",
          "def test_ddof(",
          "def test_bias(",
          "def test_1d_without_missing(",
          "def test_2d_without_missing(",
          "def test_1d_with_missing(",
          "def test_2d_with_missing(",
          "def test_polyfit(",
          "def test_polyfit_with_masked_NaNs(",
          "def test_unique_onlist(",
          "def test_unique_onmaskedarray(",
          "def test_unique_allmasked(",
          "def test_ediff1d(",
          "def test_ediff1d_tobegin(",
          "def test_ediff1d_toend(",
          "def test_ediff1d_tobegin_toend(",
          "def test_ediff1d_ndarray(",
          "def test_intersect1d(",
          "def test_setxor1d(",
          "def test_setxor1d_unique(",
          "def test_isin(",
          "def test_in1d(",
          "def test_in1d_invert(",
          "def test_union1d(",
          "def test_setdiff1d(",
          "def test_setdiff1d_char_array(",
          "def test_atleast_2d(",
          "def test_shape_scalar(",
          "def test_ndenumerate_nomasked(",
          "def test_ndenumerate_allmasked(",
          "def test_ndenumerate_mixedmasked(",
          "def test_stack_1d(",
          "def test_stack_masks(",
          "def test_stack_nd("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_mrecords.py": [
          "def test_byview(",
          "def test_get(",
          "def test_set_fields(",
          "def test_set_fields_mask(",
          "def test_set_mask(",
          "def test_set_mask_fromarray(",
          "def test_set_mask_fromfields(",
          "def test_set_elements(",
          "def test_setslices_hardmask(",
          "def test_hardmask(",
          "def test_pickling(",
          "def test_filled(",
          "def test_tolist(",
          "def test_withnames(",
          "def test_exotic_formats(",
          "def test_view_by_itself(",
          "def test_view_simple_dtype(",
          "def test_view_flexible_type(",
          "def test_fromarrays(",
          "def test_fromrecords(",
          "def test_fromrecords_wmask(",
          "def test_fromtextfile(",
          "def test_addfield(",
          "def test_record_array_with_object_field("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_old_ma.py": [
          "def test_testBasic1d(",
          "def test_testBasic2d(",
          "def test_testArithmetic(",
          "def test_testMixedArithmetic(",
          "def test_testUfuncs1(",
          "def test_xtestCount(",
          "def test_testMinMax(",
          "def test_testAddSumProd(",
          "def test_testCI(",
          "def test_testCopySize(",
          "def test_testPut(",
          "def test_testPut2(",
          "def test_testMaPut(",
          "def test_testOddFeatures(",
          "def test_testMinMax2(",
          "def test_testTakeTransposeInnerOuter(",
          "def test_testInplace(",
          "def test_testPickle(",
          "def test_testMasked(",
          "def test_testAverage1(",
          "def test_testAverage2(",
          "def test_testToPython(",
          "def test_testScalarArithmetic(",
          "def test_testArrayMethods(",
          "def test_testArrayAttributes(",
          "def test_testAPI(",
          "def test_testSingleElementSubscript(",
          "def test_assignment_by_condition(",
          "def test_assignment_by_condition_2(",
          "def test_testUfuncRegression(",
          "def test_reduce(",
          "def test_minmax(",
          "def test_nonzero(",
          "def test_trace(",
          "def test_clip(",
          "def test_ptp(",
          "def test_swapaxes(",
          "def test_cumprod(",
          "def test_cumsum(",
          "def test_varstd("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_regression.py": [
          "def test_masked_array_create(",
          "def test_masked_array(",
          "def test_mem_masked_where(",
          "def test_masked_array_multiply(",
          "def test_masked_array_repeat(",
          "def test_masked_array_repr_unicode(",
          "def test_atleast_2d(",
          "def test_set_fill_value_unicode_py3(",
          "def test_var_sets_maskedarray_scalar(",
          "def test_ddof_corrcoef(",
          "def test_mask_not_backmangled(",
          "def test_empty_list_on_structured(",
          "def test_masked_array_tobytes_fortran(",
          "def test_structured_array("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_subclassing.py": [
          "def test_data_subclassing(",
          "def test_maskedarray_subclassing(",
          "def test_masked_unary_operations(",
          "def test_masked_binary_operations(",
          "def test_masked_binary_operations2(",
          "def test_attributepropagation(",
          "def test_subclasspreservation(",
          "def test_subclass_items(",
          "def test_subclass_nomask_items(",
          "def test_subclass_repr(",
          "def test_subclass_str(",
          "def test_pure_subclass_info_preservation(",
          "def test_array_no_inheritance(",
          "def test_masked_unary_operations(",
          "def test_masked_binary_operations(",
          "def test_mixins_have_slots("
        ],
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_defmatrix.py": [
          "def test_basic(",
          "def test_exceptions(",
          "def test_bmat_nondefault_str(",
          "def test_sum(",
          "def test_prod(",
          "def test_max(",
          "def test_min(",
          "def test_ptp(",
          "def test_var(",
          "def test_basic(",
          "def test_pinv(",
          "def test_comparisons(",
          "def test_asmatrix(",
          "def test_noaxis(",
          "def test_repr(",
          "def test_make_bool_matrix_from_str(",
          "def test_basic(",
          "def test_basic(",
          "def test_pow(",
          "def test_scalar_type_pow(",
          "def test_notimplemented(",
          "def test_instance_methods(",
          "def test_basic(",
          "def test_dimesions(",
          "def test_array_from_matrix_list(",
          "def test_array_to_list(",
          "def test_fancy_indexing(",
          "def test_matrix_element(",
          "def test_scalar_indexing(",
          "def test_row_column_indexing(",
          "def test_boolean_indexing(",
          "def test_list_indexing(",
          "def test_returntype(",
          "def test_list(",
          "def test_shape(",
          "def test_numpy_ravel(",
          "def test_member_ravel(",
          "def test_member_flatten(",
          "def test_numpy_ravel_order(",
          "def test_matrix_ravel_order(",
          "def test_array_memory_sharing(",
          "def test_matrix_memory_sharing(",
          "def test_expand_dims_matrix("
        ],
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_interaction.py": [
          "def test_fancy_indexing(",
          "def test_polynomial_mapdomain(",
          "def test_sort_matrix_none(",
          "def test_partition_matrix_none(",
          "def test_dot_scalar_and_matrix_of_objects(",
          "def test_inner_scalar_and_matrix(",
          "def test_inner_scalar_and_matrix_of_objects(",
          "def test_iter_allocate_output_subtype(",
          "def test_array_astype(",
          "def test_stack(",
          "def test_object_scalar_multiply(",
          "def test_nanfunctions_matrices(",
          "def test_nanfunctions_matrices_general(",
          "def test_average_matrix(",
          "def test_dot_matrix(",
          "def test_ediff1d_matrix(",
          "def test_apply_along_axis_matrix(",
          "def test_kron_matrix(",
          "def test_matrix(",
          "def test_matrix_scalar(",
          "def test_matrix_builder(",
          "def test_array_equal_error_message_matrix(",
          "def test_array_almost_equal_matrix("
        ],
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_masked_matrix.py": [
          "def test_matrix_indexing(",
          "def test_pickling_subbaseclass(",
          "def test_count_mean_with_matrix(",
          "def test_flat(",
          "def test_allany_onmatrices(",
          "def test_compressed(",
          "def test_ravel(",
          "def test_view(",
          "def test_maskedarray_subclassing(",
          "def test_masked_unary_operations(",
          "def test_masked_binary_operations(",
          "def test_masked_binary_operations2(",
          "def test_matrix_builder(",
          "def test_matrix("
        ],
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_multiarray.py": [
          "def test_type(",
          "def test_keywords("
        ],
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_numeric.py": [
          "def test_matscalar(",
          "def test_diagonal("
        ],
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_regression.py": [
          "def test_kron_matrix(",
          "def test_matrix_properties(",
          "def test_matrix_multiply_by_1d_vector(",
          "def test_matrix_std_argmax("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_chebyshev.py": [
          "def test__cseries_to_zseries(",
          "def test__zseries_to_cseries(",
          "def test_chebdomain(",
          "def test_chebzero(",
          "def test_chebone(",
          "def test_chebx(",
          "def test_chebadd(",
          "def test_chebsub(",
          "def test_chebmulx(",
          "def test_chebmul(",
          "def test_chebdiv(",
          "def test_chebpow(",
          "def test_chebval(",
          "def test_chebval2d(",
          "def test_chebval3d(",
          "def test_chebgrid2d(",
          "def test_chebgrid3d(",
          "def test_chebint(",
          "def test_chebint_axis(",
          "def test_chebder(",
          "def test_chebder_axis(",
          "def test_chebvander(",
          "def test_chebvander2d(",
          "def test_chebvander3d(",
          "def test_chebfit(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_approximation(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_linear_root(",
          "def test_100(",
          "def test_chebfromroots(",
          "def test_chebroots(",
          "def test_chebtrim(",
          "def test_chebline(",
          "def test_cheb2poly(",
          "def test_poly2cheb(",
          "def test_weight(",
          "def test_chebpts1(",
          "def test_chebpts2("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_classes.py": [
          "def test_conversion(",
          "def test_cast(",
          "def test_identity(",
          "def test_basis(",
          "def test_fromroots(",
          "def test_bad_conditioned_fit(",
          "def test_fit(",
          "def test_equal(",
          "def test_not_equal(",
          "def test_add(",
          "def test_sub(",
          "def test_mul(",
          "def test_floordiv(",
          "def test_truediv(",
          "def test_mod(",
          "def test_divmod(",
          "def test_roots(",
          "def test_degree(",
          "def test_copy(",
          "def test_integ(",
          "def test_deriv(",
          "def test_linspace(",
          "def test_pow(",
          "def test_call(",
          "def test_call_with_list(",
          "def test_cutdeg(",
          "def test_truncate(",
          "def test_trim(",
          "def test_mapparms(",
          "def test_ufunc_override(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_approximation("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_hermite.py": [
          "def test_hermdomain(",
          "def test_hermzero(",
          "def test_hermone(",
          "def test_hermx(",
          "def test_hermadd(",
          "def test_hermsub(",
          "def test_hermmulx(",
          "def test_hermmul(",
          "def test_hermdiv(",
          "def test_hermpow(",
          "def test_hermval(",
          "def test_hermval2d(",
          "def test_hermval3d(",
          "def test_hermgrid2d(",
          "def test_hermgrid3d(",
          "def test_hermint(",
          "def test_hermint_axis(",
          "def test_hermder(",
          "def test_hermder_axis(",
          "def test_hermvander(",
          "def test_hermvander2d(",
          "def test_hermvander3d(",
          "def test_hermfit(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_linear_root(",
          "def test_100(",
          "def test_hermfromroots(",
          "def test_hermroots(",
          "def test_hermtrim(",
          "def test_hermline(",
          "def test_herm2poly(",
          "def test_poly2herm(",
          "def test_weight("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_hermite_e.py": [
          "def test_hermedomain(",
          "def test_hermezero(",
          "def test_hermeone(",
          "def test_hermex(",
          "def test_hermeadd(",
          "def test_hermesub(",
          "def test_hermemulx(",
          "def test_hermemul(",
          "def test_hermediv(",
          "def test_hermepow(",
          "def test_hermeval(",
          "def test_hermeval2d(",
          "def test_hermeval3d(",
          "def test_hermegrid2d(",
          "def test_hermegrid3d(",
          "def test_hermeint(",
          "def test_hermeint_axis(",
          "def test_hermeder(",
          "def test_hermeder_axis(",
          "def test_hermevander(",
          "def test_hermevander2d(",
          "def test_hermevander3d(",
          "def test_hermefit(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_linear_root(",
          "def test_100(",
          "def test_hermefromroots(",
          "def test_hermeroots(",
          "def test_hermetrim(",
          "def test_hermeline(",
          "def test_herme2poly(",
          "def test_poly2herme(",
          "def test_weight("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_laguerre.py": [
          "def test_lagdomain(",
          "def test_lagzero(",
          "def test_lagone(",
          "def test_lagx(",
          "def test_lagadd(",
          "def test_lagsub(",
          "def test_lagmulx(",
          "def test_lagmul(",
          "def test_lagdiv(",
          "def test_lagpow(",
          "def test_lagval(",
          "def test_lagval2d(",
          "def test_lagval3d(",
          "def test_laggrid2d(",
          "def test_laggrid3d(",
          "def test_lagint(",
          "def test_lagint_axis(",
          "def test_lagder(",
          "def test_lagder_axis(",
          "def test_lagvander(",
          "def test_lagvander2d(",
          "def test_lagvander3d(",
          "def test_lagfit(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_linear_root(",
          "def test_100(",
          "def test_lagfromroots(",
          "def test_lagroots(",
          "def test_lagtrim(",
          "def test_lagline(",
          "def test_lag2poly(",
          "def test_poly2lag(",
          "def test_weight("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_legendre.py": [
          "def test_legdomain(",
          "def test_legzero(",
          "def test_legone(",
          "def test_legx(",
          "def test_legadd(",
          "def test_legsub(",
          "def test_legmulx(",
          "def test_legmul(",
          "def test_legdiv(",
          "def test_legpow(",
          "def test_legval(",
          "def test_legval2d(",
          "def test_legval3d(",
          "def test_leggrid2d(",
          "def test_leggrid3d(",
          "def test_legint(",
          "def test_legint_axis(",
          "def test_legint_zerointord(",
          "def test_legder(",
          "def test_legder_axis(",
          "def test_legder_orderhigherthancoeff(",
          "def test_legvander(",
          "def test_legvander2d(",
          "def test_legvander3d(",
          "def test_legvander_negdeg(",
          "def test_legfit(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_linear_root(",
          "def test_100(",
          "def test_legfromroots(",
          "def test_legroots(",
          "def test_legtrim(",
          "def test_legline(",
          "def test_legline_zeroscl(",
          "def test_leg2poly(",
          "def test_poly2leg(",
          "def test_weight("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polynomial.py": [
          "def test_polydomain(",
          "def test_polyzero(",
          "def test_polyone(",
          "def test_polyx(",
          "def test_copy(",
          "def test_pickle(",
          "def test_polyadd(",
          "def test_polysub(",
          "def test_polymulx(",
          "def test_polymul(",
          "def test_polydiv(",
          "def test_polypow(",
          "def test_Fraction(",
          "def test_polyval(",
          "def test_polyvalfromroots(",
          "def test_polyval2d(",
          "def test_polyval3d(",
          "def test_polygrid2d(",
          "def test_polygrid3d(",
          "def test_polyint(",
          "def test_polyint_axis(",
          "def test_polyder(",
          "def test_polyder_axis(",
          "def test_polyvander(",
          "def test_polyvander2d(",
          "def test_polyvander3d(",
          "def test_polyvandernegdeg(",
          "def test_raises(",
          "def test_dimensions(",
          "def test_linear_root(",
          "def test_polyfromroots(",
          "def test_polyroots(",
          "def test_polyfit(",
          "def test_polytrim(",
          "def test_polyline(",
          "def test_polyline_zero(",
          "def test_fit_degenerate_domain(",
          "def test_result_type("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polyutils.py": [
          "def test_trimseq(",
          "def test_trimseq_empty_input(",
          "def test_as_series(",
          "def test_trimcoef(",
          "def test_vander_nd_exception(",
          "def test_div_zerodiv(",
          "def test_pow_too_large(",
          "def test_getdomain(",
          "def test_mapdomain(",
          "def test_mapparms("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_printing.py": [
          "def test_polynomial_str(",
          "def test_chebyshev_str(",
          "def test_legendre_str(",
          "def test_hermite_str(",
          "def test_hermiteE_str(",
          "def test_laguerre_str(",
          "def test_polynomial_str_domains(",
          "def test_polynomial_str(",
          "def test_chebyshev_str(",
          "def test_legendre_str(",
          "def test_hermite_str(",
          "def test_hermiteE_str(",
          "def test_laguerre_str(",
          "def test_polynomial_str_domains(",
          "def test_single_line_one_less(",
          "def test_num_chars_is_linewidth(",
          "def test_first_linebreak_multiline_one_less_than_linewidth(",
          "def test_first_linebreak_multiline_on_linewidth(",
          "def test_linewidth_printoption(",
          "def test_set_default_printoptions(",
          "def test_complex_coefficients(",
          "def test_numeric_object_coefficients(",
          "def test_nonnumeric_object_coefficients(",
          "def test_format_unicode(",
          "def test_format_ascii(",
          "def test_empty_formatstr(",
          "def test_bad_formatstr(",
          "def test_symbol(",
          "def test_polynomial_repr(",
          "def test_chebyshev_repr(",
          "def test_legendre_repr(",
          "def test_hermite_repr(",
          "def test_hermiteE_repr(",
          "def test_laguerre_repr(",
          "def test_simple_polynomial(",
          "def test_basis_func(",
          "def test_multichar_basis_func(",
          "def test_symbol_basic(",
          "def test_numeric_object_coefficients(",
          "def test_str(",
          "def test_latex(",
          "def test_fixed(",
          "def test_switch_to_exp(",
          "def test_non_finite("
        ],
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_symbol.py": [
          "def test_default_symbol(",
          "def test_symbol_bad_input(",
          "def test_valid_symbols(",
          "def test_property(",
          "def test_change_symbol(",
          "def test_neg(",
          "def test_scalarmul(",
          "def test_rscalarmul(",
          "def test_pow(",
          "def test_add(",
          "def test_sub(",
          "def test_polymul(",
          "def test_divmod(",
          "def test_radd(",
          "def test_rsub(",
          "def test_rmul(",
          "def test_rdivmod(",
          "def test_binops_fails(",
          "def test_eq(",
          "def test_neq(",
          "def test_copy(",
          "def test_trim(",
          "def test_truncate(",
          "def test_convert(",
          "def test_integ(",
          "def test_deriv(",
          "def test_composition(",
          "def test_fit(",
          "def test_froomroots(",
          "def test_identity(",
          "def test_basis("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_direct.py": [
          "def test_seedsequence(",
          "def test_generator_spawning(",
          "def test_non_spawnable(",
          "def test_raw(",
          "def test_random_raw(",
          "def test_gauss_inv(",
          "def test_uniform_double(",
          "def test_uniform_float(",
          "def test_repr(",
          "def test_str(",
          "def test_pickle(",
          "def test_pickle_preserves_seed_sequence(",
          "def test_invalid_state_type(",
          "def test_invalid_state_value(",
          "def test_invalid_init_type(",
          "def test_invalid_init_values(",
          "def test_benchmark(",
          "def test_cffi(",
          "def test_ctypes(",
          "def test_getstate(",
          "def test_set_key(",
          "def test_advance_symmetry(",
          "def test_advange_large(",
          "def test_advance_symmetry(",
          "def test_advange_large(",
          "def test_seed_float_array(",
          "def test_state_tuple(",
          "def test_legacy_pickle(",
          "def test_seed(",
          "def test_passthrough(",
          "def test_coercion_RandomState_Generator("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_extending.py": [
          "def test_cython(",
          "def test_numba(",
          "def test_cffi("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937.py": [
          "def test_scalar(",
          "def test_array(",
          "def test_seedsequence(",
          "def test_invalid_scalar(",
          "def test_invalid_array(",
          "def test_noninstantized_bitgen(",
          "def test_n_zero(",
          "def test_p_is_nan(",
          "def test_basic(",
          "def test_zero_probability(",
          "def test_int_negative_interval(",
          "def test_size(",
          "def test_invalid_prob(",
          "def test_invalid_n(",
          "def test_p_non_contiguous(",
          "def test_multinomial_pvals_float32(",
          "def test_argument_validation(",
          "def test_edge_cases(",
          "def test_typical_cases(",
          "def test_repeatability1(",
          "def test_repeatability2(",
          "def test_repeatability3(",
          "def test_gaussian_reset(",
          "def test_gaussian_reset_in_media_res(",
          "def test_negative_binomial(",
          "def test_unsupported_type(",
          "def test_bounds_checking(",
          "def test_bounds_checking_array(",
          "def test_rng_zero_and_extremes(",
          "def test_rng_zero_and_extremes_array(",
          "def test_full_range(",
          "def test_full_range_array(",
          "def test_in_bounds_fuzz(",
          "def test_scalar_array_equiv(",
          "def test_repeatability(",
          "def test_repeatability_broadcasting(",
          "def test_repeatability_32bit_boundary(",
          "def test_repeatability_32bit_boundary_broadcasting(",
          "def test_int64_uint64_broadcast_exceptions(",
          "def test_int64_uint64_corner_case(",
          "def test_respect_dtype_singleton(",
          "def test_respect_dtype_array(",
          "def test_zero_size(",
          "def test_error_byteorder(",
          "def test_integers_small_dtype_chisquared(",
          "def test_integers(",
          "def test_integers_masked(",
          "def test_integers_closed(",
          "def test_integers_max_int(",
          "def test_random(",
          "def test_random_float(",
          "def test_random_float_scalar(",
          "def test_random_distribution_of_lsb(",
          "def test_random_unsupported_type(",
          "def test_choice_uniform_replace(",
          "def test_choice_nonuniform_replace(",
          "def test_choice_uniform_noreplace(",
          "def test_choice_nonuniform_noreplace(",
          "def test_choice_noninteger(",
          "def test_choice_multidimensional_default_axis(",
          "def test_choice_multidimensional_custom_axis(",
          "def test_choice_exceptions(",
          "def test_choice_return_shape(",
          "def test_choice_nan_probabilities(",
          "def test_choice_p_non_contiguous(",
          "def test_choice_return_type(",
          "def test_choice_large_sample(",
          "def test_choice_array_size_empty_tuple(",
          "def test_bytes(",
          "def test_shuffle(",
          "def test_shuffle_custom_axis(",
          "def test_shuffle_custom_axis_empty(",
          "def test_shuffle_axis_nonsquare(",
          "def test_shuffle_masked(",
          "def test_shuffle_exceptions(",
          "def test_shuffle_not_writeable(",
          "def test_permutation(",
          "def test_permutation_custom_axis(",
          "def test_permutation_exceptions(",
          "def test_permuted(",
          "def test_permuted_with_strides(",
          "def test_permuted_empty(",
          "def test_permuted_out_with_wrong_shape(",
          "def test_permuted_out_with_wrong_type(",
          "def test_permuted_not_writeable(",
          "def test_beta(",
          "def test_binomial(",
          "def test_chisquare(",
          "def test_dirichlet(",
          "def test_dirichlet_size(",
          "def test_dirichlet_bad_alpha(",
          "def test_dirichlet_alpha_non_contiguous(",
          "def test_dirichlet_small_alpha(",
          "def test_dirichlet_moderately_small_alpha(",
          "def test_dirichlet_multiple_zeros_in_alpha(",
          "def test_exponential(",
          "def test_exponential_0(",
          "def test_f(",
          "def test_gamma(",
          "def test_gamma_0(",
          "def test_geometric(",
          "def test_geometric_exceptions(",
          "def test_gumbel(",
          "def test_gumbel_0(",
          "def test_hypergeometric(",
          "def test_laplace(",
          "def test_laplace_0(",
          "def test_logistic(",
          "def test_lognormal(",
          "def test_lognormal_0(",
          "def test_logseries(",
          "def test_logseries_zero(",
          "def test_logseries_exceptions(",
          "def test_multinomial(",
          "def test_multivariate_normal(",
          "def test_multivariate_normal_disallow_complex(",
          "def test_multivariate_normal_basic_stats(",
          "def test_negative_binomial(",
          "def test_negative_binomial_exceptions(",
          "def test_negative_binomial_p0_exception(",
          "def test_negative_binomial_invalid_p_n_combination(",
          "def test_noncentral_chisquare(",
          "def test_noncentral_f(",
          "def test_noncentral_f_nan(",
          "def test_normal(",
          "def test_normal_0(",
          "def test_pareto(",
          "def test_poisson(",
          "def test_poisson_exceptions(",
          "def test_power(",
          "def test_rayleigh(",
          "def test_rayleigh_0(",
          "def test_standard_cauchy(",
          "def test_standard_exponential(",
          "def test_standard_expoential_type_error(",
          "def test_standard_gamma(",
          "def test_standard_gammma_scalar_float(",
          "def test_standard_gamma_float(",
          "def test_standard_gammma_float_out(",
          "def test_standard_gamma_unknown_type(",
          "def test_out_size_mismatch(",
          "def test_standard_gamma_0(",
          "def test_standard_normal(",
          "def test_standard_normal_unsupported_type(",
          "def test_standard_t(",
          "def test_triangular(",
          "def test_uniform(",
          "def test_uniform_range_bounds(",
          "def test_uniform_zero_range(",
          "def test_uniform_neg_range(",
          "def test_scalar_exception_propagation(",
          "def test_vonmises(",
          "def test_vonmises_small(",
          "def test_vonmises_nan(",
          "def test_vonmises_large_kappa(",
          "def test_vonmises_large_kappa_range(",
          "def test_wald(",
          "def test_weibull(",
          "def test_weibull_0(",
          "def test_zipf(",
          "def test_uniform(",
          "def test_normal(",
          "def test_beta(",
          "def test_exponential(",
          "def test_standard_gamma(",
          "def test_gamma(",
          "def test_f(",
          "def test_noncentral_f(",
          "def test_noncentral_f_small_df(",
          "def test_chisquare(",
          "def test_noncentral_chisquare(",
          "def test_standard_t(",
          "def test_vonmises(",
          "def test_pareto(",
          "def test_weibull(",
          "def test_power(",
          "def test_laplace(",
          "def test_gumbel(",
          "def test_logistic(",
          "def test_lognormal(",
          "def test_rayleigh(",
          "def test_wald(",
          "def test_triangular(",
          "def test_binomial(",
          "def test_negative_binomial(",
          "def test_poisson(",
          "def test_zipf(",
          "def test_geometric(",
          "def test_hypergeometric(",
          "def test_logseries(",
          "def test_multinomial(",
          "def test_multinomial_pval_broadcast(",
          "def test_invalid_pvals_broadcast(",
          "def test_empty_outputs(",
          "def test_normal(",
          "def test_exp(",
          "def test_multinomial(",
          "def test_one_arg_funcs(",
          "def test_two_arg_funcs(",
          "def test_integers(",
          "def test_three_arg_funcs(",
          "def test_jumped(",
          "def test_broadcast_size_error(",
          "def test_broadcast_size_scalar(",
          "def test_ragged_shuffle(",
          "def test_single_arg_integer_exception(",
          "def test_c_contig_req_out(",
          "def test_contig_req_out(",
          "def test_generator_ctor_old_style_pickle(",
          "def test_pickle_preserves_seed_sequence(",
          "def test_legacy_pickle("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937_regressions.py": [
          "def test_vonmises_range(",
          "def test_hypergeometric_range(",
          "def test_logseries_convergence(",
          "def test_shuffle_mixed_dimension(",
          "def test_call_within_randomstate(",
          "def test_multivariate_normal_size_types(",
          "def test_beta_small_parameters(",
          "def test_beta_very_small_parameters(",
          "def test_beta_ridiculously_small_parameters(",
          "def test_beta_expected_zero_frequency(",
          "def test_choice_sum_of_probs_tolerance(",
          "def test_shuffle_of_array_of_different_length_strings(",
          "def test_shuffle_of_array_of_objects(",
          "def test_permutation_subclass(",
          "def test_gamma_0(",
          "def test_geometric_tiny_prob(",
          "def test_zipf_large_parameter(",
          "def test_zipf_a_near_1("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_random.py": [
          "def test_scalar(",
          "def test_array(",
          "def test_invalid_scalar(",
          "def test_invalid_array(",
          "def test_invalid_array_shape(",
          "def test_n_zero(",
          "def test_p_is_nan(",
          "def test_basic(",
          "def test_zero_probability(",
          "def test_int_negative_interval(",
          "def test_size(",
          "def test_multidimensional_pvals(",
          "def test_basic(",
          "def test_gaussian_reset(",
          "def test_gaussian_reset_in_media_res(",
          "def test_backwards_compatibility(",
          "def test_negative_binomial(",
          "def test_set_invalid_state(",
          "def test_unsupported_type(",
          "def test_bounds_checking(",
          "def test_rng_zero_and_extremes(",
          "def test_full_range(",
          "def test_in_bounds_fuzz(",
          "def test_repeatability(",
          "def test_int64_uint64_corner_case(",
          "def test_respect_dtype_singleton(",
          "def test_rand(",
          "def test_randn(",
          "def test_randint(",
          "def test_random_integers(",
          "def test_random_integers_max_int(",
          "def test_random_integers_deprecated(",
          "def test_random(",
          "def test_choice_uniform_replace(",
          "def test_choice_nonuniform_replace(",
          "def test_choice_uniform_noreplace(",
          "def test_choice_nonuniform_noreplace(",
          "def test_choice_noninteger(",
          "def test_choice_exceptions(",
          "def test_choice_return_shape(",
          "def test_choice_nan_probabilities(",
          "def test_bytes(",
          "def test_shuffle(",
          "def test_shuffle_masked(",
          "def test_shuffle_untyped_warning(",
          "def test_shuffle_no_object_unpacking(",
          "def test_shuffle_memoryview(",
          "def test_shuffle_not_writeable(",
          "def test_beta(",
          "def test_binomial(",
          "def test_chisquare(",
          "def test_dirichlet(",
          "def test_dirichlet_size(",
          "def test_dirichlet_bad_alpha(",
          "def test_exponential(",
          "def test_exponential_0(",
          "def test_f(",
          "def test_gamma(",
          "def test_gamma_0(",
          "def test_geometric(",
          "def test_gumbel(",
          "def test_gumbel_0(",
          "def test_hypergeometric(",
          "def test_laplace(",
          "def test_laplace_0(",
          "def test_logistic(",
          "def test_lognormal(",
          "def test_lognormal_0(",
          "def test_logseries(",
          "def test_multinomial(",
          "def test_multivariate_normal(",
          "def test_negative_binomial(",
          "def test_noncentral_chisquare(",
          "def test_noncentral_f(",
          "def test_normal(",
          "def test_normal_0(",
          "def test_pareto(",
          "def test_poisson(",
          "def test_poisson_exceptions(",
          "def test_power(",
          "def test_rayleigh(",
          "def test_rayleigh_0(",
          "def test_standard_cauchy(",
          "def test_standard_exponential(",
          "def test_standard_gamma(",
          "def test_standard_gamma_0(",
          "def test_standard_normal(",
          "def test_standard_t(",
          "def test_triangular(",
          "def test_uniform(",
          "def test_uniform_range_bounds(",
          "def test_scalar_exception_propagation(",
          "def test_vonmises(",
          "def test_vonmises_small(",
          "def test_wald(",
          "def test_weibull(",
          "def test_weibull_0(",
          "def test_zipf(",
          "def test_uniform(",
          "def test_normal(",
          "def test_beta(",
          "def test_exponential(",
          "def test_standard_gamma(",
          "def test_gamma(",
          "def test_f(",
          "def test_noncentral_f(",
          "def test_noncentral_f_small_df(",
          "def test_chisquare(",
          "def test_noncentral_chisquare(",
          "def test_standard_t(",
          "def test_vonmises(",
          "def test_pareto(",
          "def test_weibull(",
          "def test_power(",
          "def test_laplace(",
          "def test_gumbel(",
          "def test_logistic(",
          "def test_lognormal(",
          "def test_rayleigh(",
          "def test_wald(",
          "def test_triangular(",
          "def test_binomial(",
          "def test_negative_binomial(",
          "def test_poisson(",
          "def test_zipf(",
          "def test_geometric(",
          "def test_hypergeometric(",
          "def test_logseries(",
          "def test_normal(",
          "def test_exp(",
          "def test_multinomial(",
          "def test_one_arg_funcs(",
          "def test_two_arg_funcs(",
          "def test_randint(",
          "def test_three_arg_funcs("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate.py": [
          "def test_scalar(",
          "def test_array(",
          "def test_invalid_scalar(",
          "def test_invalid_array(",
          "def test_invalid_array_shape(",
          "def test_cannot_seed(",
          "def test_invalid_initialization(",
          "def test_n_zero(",
          "def test_p_is_nan(",
          "def test_basic(",
          "def test_zero_probability(",
          "def test_int_negative_interval(",
          "def test_size(",
          "def test_invalid_prob(",
          "def test_invalid_n(",
          "def test_p_non_contiguous(",
          "def test_multinomial_pvals_float32(",
          "def test_multinomial_n_float(",
          "def test_basic(",
          "def test_gaussian_reset(",
          "def test_gaussian_reset_in_media_res(",
          "def test_backwards_compatibility(",
          "def test_negative_binomial(",
          "def test_get_state_warning(",
          "def test_invalid_legacy_state_setting(",
          "def test_pickle(",
          "def test_state_setting(",
          "def test_repr(",
          "def test_unsupported_type(",
          "def test_bounds_checking(",
          "def test_rng_zero_and_extremes(",
          "def test_full_range(",
          "def test_in_bounds_fuzz(",
          "def test_repeatability(",
          "def test_repeatability_32bit_boundary_broadcasting(",
          "def test_int64_uint64_corner_case(",
          "def test_respect_dtype_singleton(",
          "def test_rand(",
          "def test_rand_singleton(",
          "def test_randn(",
          "def test_randint(",
          "def test_random_integers(",
          "def test_tomaxint(",
          "def test_random_integers_max_int(",
          "def test_random_integers_deprecated(",
          "def test_random_sample(",
          "def test_choice_uniform_replace(",
          "def test_choice_nonuniform_replace(",
          "def test_choice_uniform_noreplace(",
          "def test_choice_nonuniform_noreplace(",
          "def test_choice_noninteger(",
          "def test_choice_exceptions(",
          "def test_choice_return_shape(",
          "def test_choice_nan_probabilities(",
          "def test_choice_p_non_contiguous(",
          "def test_bytes(",
          "def test_shuffle(",
          "def test_shuffle_masked(",
          "def test_shuffle_invalid_objects(",
          "def test_permutation(",
          "def test_beta(",
          "def test_binomial(",
          "def test_chisquare(",
          "def test_dirichlet(",
          "def test_dirichlet_size(",
          "def test_dirichlet_bad_alpha(",
          "def test_dirichlet_alpha_non_contiguous(",
          "def test_exponential(",
          "def test_exponential_0(",
          "def test_f(",
          "def test_gamma(",
          "def test_gamma_0(",
          "def test_geometric(",
          "def test_geometric_exceptions(",
          "def test_gumbel(",
          "def test_gumbel_0(",
          "def test_hypergeometric(",
          "def test_laplace(",
          "def test_laplace_0(",
          "def test_logistic(",
          "def test_lognormal(",
          "def test_lognormal_0(",
          "def test_logseries(",
          "def test_logseries_zero(",
          "def test_logseries_exceptions(",
          "def test_multinomial(",
          "def test_multivariate_normal(",
          "def test_negative_binomial(",
          "def test_negative_binomial_exceptions(",
          "def test_noncentral_chisquare(",
          "def test_noncentral_f(",
          "def test_noncentral_f_nan(",
          "def test_normal(",
          "def test_normal_0(",
          "def test_pareto(",
          "def test_poisson(",
          "def test_poisson_exceptions(",
          "def test_power(",
          "def test_rayleigh(",
          "def test_rayleigh_0(",
          "def test_standard_cauchy(",
          "def test_standard_exponential(",
          "def test_standard_gamma(",
          "def test_standard_gamma_0(",
          "def test_standard_normal(",
          "def test_randn_singleton(",
          "def test_standard_t(",
          "def test_triangular(",
          "def test_uniform(",
          "def test_uniform_range_bounds(",
          "def test_scalar_exception_propagation(",
          "def test_vonmises(",
          "def test_vonmises_small(",
          "def test_vonmises_large(",
          "def test_vonmises_nan(",
          "def test_wald(",
          "def test_weibull(",
          "def test_weibull_0(",
          "def test_zipf(",
          "def test_uniform(",
          "def test_normal(",
          "def test_beta(",
          "def test_exponential(",
          "def test_standard_gamma(",
          "def test_gamma(",
          "def test_f(",
          "def test_noncentral_f(",
          "def test_noncentral_f_small_df(",
          "def test_chisquare(",
          "def test_noncentral_chisquare(",
          "def test_standard_t(",
          "def test_vonmises(",
          "def test_pareto(",
          "def test_weibull(",
          "def test_power(",
          "def test_laplace(",
          "def test_gumbel(",
          "def test_logistic(",
          "def test_lognormal(",
          "def test_rayleigh(",
          "def test_wald(",
          "def test_triangular(",
          "def test_binomial(",
          "def test_negative_binomial(",
          "def test_poisson(",
          "def test_zipf(",
          "def test_geometric(",
          "def test_hypergeometric(",
          "def test_logseries(",
          "def test_normal(",
          "def test_exp(",
          "def test_multinomial(",
          "def test_one_arg_funcs(",
          "def test_two_arg_funcs(",
          "def test_three_arg_funcs(",
          "def test_integer_dtype(",
          "def test_integer_repeat(",
          "def test_broadcast_size_error(",
          "def test_randomstate_ctor_old_style_pickle(",
          "def test_hot_swap(",
          "def test_seed_alt_bit_gen(",
          "def test_state_error_alt_bit_gen(",
          "def test_swap_worked(",
          "def test_swapped_singleton_against_direct("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate_regression.py": [
          "def test_VonMises_range(",
          "def test_hypergeometric_range(",
          "def test_logseries_convergence(",
          "def test_shuffle_mixed_dimension(",
          "def test_call_within_randomstate(",
          "def test_multivariate_normal_size_types(",
          "def test_beta_small_parameters(",
          "def test_choice_sum_of_probs_tolerance(",
          "def test_shuffle_of_array_of_different_length_strings(",
          "def test_shuffle_of_array_of_objects(",
          "def test_permutation_subclass(",
          "def test_warns_byteorder(",
          "def test_named_argument_initialization(",
          "def test_choice_retun_dtype(",
          "def test_randint_117(",
          "def test_p_zero_stream(",
          "def test_n_zero_stream(",
          "def test_multinomial_empty(",
          "def test_multinomial_1d_pval("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_regression.py": [
          "def test_VonMises_range(",
          "def test_hypergeometric_range(",
          "def test_logseries_convergence(",
          "def test_shuffle_mixed_dimension(",
          "def test_call_within_randomstate(",
          "def test_multivariate_normal_size_types(",
          "def test_beta_small_parameters(",
          "def test_choice_sum_of_probs_tolerance(",
          "def test_shuffle_of_array_of_different_length_strings(",
          "def test_shuffle_of_array_of_objects(",
          "def test_permutation_subclass("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_seed_sequence.py": [
          "def test_reference_data(",
          "def test_zero_padding("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_smoke.py": [
          "def test_init(",
          "def test_advance(",
          "def test_jump(",
          "def test_uniform(",
          "def test_uniform_array(",
          "def test_random(",
          "def test_standard_normal_zig(",
          "def test_standard_normal(",
          "def test_standard_gamma(",
          "def test_standard_exponential(",
          "def test_standard_exponential_float(",
          "def test_standard_exponential_float_log(",
          "def test_standard_cauchy(",
          "def test_standard_t(",
          "def test_binomial(",
          "def test_reset_state(",
          "def test_entropy_init(",
          "def test_seed(",
          "def test_reset_state_gauss(",
          "def test_reset_state_uint32(",
          "def test_reset_state_float(",
          "def test_shuffle(",
          "def test_permutation(",
          "def test_beta(",
          "def test_bytes(",
          "def test_chisquare(",
          "def test_exponential(",
          "def test_f(",
          "def test_gamma(",
          "def test_geometric(",
          "def test_gumbel(",
          "def test_laplace(",
          "def test_logitic(",
          "def test_logseries(",
          "def test_negative_binomial(",
          "def test_noncentral_chisquare(",
          "def test_noncentral_f(",
          "def test_normal(",
          "def test_pareto(",
          "def test_poisson(",
          "def test_power(",
          "def test_integers(",
          "def test_rayleigh(",
          "def test_vonmises(",
          "def test_wald(",
          "def test_weibull(",
          "def test_zipf(",
          "def test_hypergeometric(",
          "def test_triangular(",
          "def test_multivariate_normal(",
          "def test_multinomial(",
          "def test_dirichlet(",
          "def test_pickle(",
          "def test_seed_array(",
          "def test_uniform_float(",
          "def test_gamma_floats(",
          "def test_normal_floats(",
          "def test_normal_zig_floats(",
          "def test_output_fill(",
          "def test_output_filling_uniform(",
          "def test_output_filling_exponential(",
          "def test_output_filling_gamma(",
          "def test_output_filling_gamma_broadcast(",
          "def test_output_fill_error(",
          "def test_integers_broadcast(",
          "def test_integers_numpy(",
          "def test_integers_broadcast_errors(",
          "def test_numpy_state(",
          "def test_default_is_pcg64(",
          "def test_seed("
        ],
        ".venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py": [
          "def _test_equal(",
          "def _test_not_equal(",
          "def test_array_rank1_eq(",
          "def test_array_rank1_noteq(",
          "def test_array_rank2_eq(",
          "def test_array_diffshape(",
          "def test_objarray(",
          "def test_array_likes(",
          "def test_generic_rank1(",
          "def test_0_ndim_array(",
          "def test_generic_rank3(",
          "def test_nan_array(",
          "def test_string_arrays(",
          "def test_recarrays(",
          "def test_masked_nan_inf(",
          "def test_subclass_that_overrides_eq(",
          "def test_subclass_that_does_not_implement_npall(",
          "def test_suppress_overflow_warnings(",
          "def test_array_vs_scalar_is_equal(",
          "def test_array_vs_array_not_equal(",
          "def test_array_vs_scalar_strict(",
          "def test_array_vs_array_strict(",
          "def test_array_vs_float_array_strict(",
          "def test_build_err_msg_defaults(",
          "def test_build_err_msg_no_verbose(",
          "def test_build_err_msg_custom_names(",
          "def test_build_err_msg_custom_precision(",
          "def test_nan_items(",
          "def test_inf_items(",
          "def test_datetime(",
          "def test_nat_items(",
          "def test_non_numeric(",
          "def test_complex_item(",
          "def test_negative_zero(",
          "def test_complex(",
          "def test_object(",
          "def test_closeness(",
          "def test_simple(",
          "def test_array_vs_scalar(",
          "def test_nan(",
          "def test_inf(",
          "def test_subclass(",
          "def test_subclass_2(",
          "def test_subclass_that_cannot_be_bool(",
          "def test_closeness(",
          "def test_nan_item(",
          "def test_inf_item(",
          "def test_simple_item(",
          "def test_complex_item(",
          "def test_complex(",
          "def test_error_message(",
          "def test_error_message_2(",
          "def test_subclass_that_cannot_be_bool(",
          "def test_simple_0d_arrays(",
          "def test_simple_items(",
          "def test_nan_array(",
          "def test_nan_items(",
          "def test_simple_arrays(",
          "def test_rank2(",
          "def test_rank3(",
          "def test_simple_items(",
          "def test_simple_items_and_array(",
          "def test_zeroes(",
          "def test_nan_noncompare(",
          "def test_nan_noncompare_array(",
          "def test_inf_compare(",
          "def test_inf_compare_array(",
          "def test_strict(",
          "def test_warn(",
          "def test_context_manager(",
          "def test_args(",
          "def test_warn_wrong_warning(",
          "def test_simple(",
          "def test_min_int(",
          "def test_report_fail_percentage(",
          "def test_equal_nan(",
          "def test_not_equal_nan(",
          "def test_equal_nan_default(",
          "def test_report_max_relative_error(",
          "def test_timedelta(",
          "def test_error_message_unsigned(",
          "def test_strict(",
          "def test_float64_pass(",
          "def test_float64_fail(",
          "def test_float64_ignore_nan(",
          "def test_float32_pass(",
          "def test_float32_fail(",
          "def test_float32_ignore_nan(",
          "def test_float16_pass(",
          "def test_float16_fail(",
          "def test_float16_ignore_nan(",
          "def test_complex128_pass(",
          "def test_complex128_fail(",
          "def test_complex64_pass(",
          "def test_complex64_fail(",
          "def test_equal(",
          "def test_single(",
          "def test_double(",
          "def test_inf(",
          "def test_nan(",
          "def test_simple(",
          "def test_regex(",
          "def test_warn_len_equal_call_scenarios(",
          "def test_clear_and_catch_warnings(",
          "def test_suppress_warnings_module(",
          "def test_suppress_warnings_type(",
          "def test_suppress_warnings_decorate_no_record(",
          "def test_suppress_warnings_record(",
          "def test_suppress_warnings_forwarding(",
          "def test_tempdir(",
          "def test_temppath(",
          "def test_clear_and_catch_warnings_inherit(",
          "def test_passes(",
          "def test_asserts(",
          "def test_fails("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_configtool.py": [
          "def test_configtool_version(",
          "def test_configtool_cflags(",
          "def test_configtool_pkgconfigdir(",
          "def test_pkg_config_entrypoint(",
          "def test_pkg_config_config_exists("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_ctypeslib.py": [
          "def test_basic(",
          "def test_basic2(",
          "def test_dtype(",
          "def test_ndim(",
          "def test_shape(",
          "def test_flags(",
          "def test_cache(",
          "def test_arguments(",
          "def test_return(",
          "def test_vague_return_value(",
          "def test_array(",
          "def test_pointer(",
          "def test_struct_array_pointer(",
          "def test_reference_cycles(",
          "def test_segmentation_fault(",
          "def test_scalar(",
          "def test_subarray(",
          "def test_structure(",
          "def test_structure_aligned(",
          "def test_union(",
          "def test_padded_union(",
          "def test_overlapping("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_lazyloading.py": [
          "def test_lazy_load("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_matlib.py": [
          "def test_empty(",
          "def test_ones(",
          "def test_zeros(",
          "def test_identity(",
          "def test_eye(",
          "def test_rand(",
          "def test_randn(",
          "def test_repmat("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_config.py": [
          "def test_pyyaml_not_found(",
          "def test_dict_mode(",
          "def test_invalid_mode(",
          "def test_warn_to_add_tests("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_version.py": [
          "def test_valid_numpy_version(",
          "def test_short_version(",
          "def test_version_module("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_public_api.py": [
          "def test_numpy_namespace(",
          "def test_import_lazy_import(",
          "def test_dir_testing(",
          "def test_numpy_linalg(",
          "def test_numpy_fft(",
          "def test_NPY_NO_EXPORT(",
          "def test_all_modules_are_expected(",
          "def test_all_modules_are_expected_2(",
          "def test_api_importable(",
          "def test_array_api_entry_point(",
          "def test_main_namespace_all_dir_coherence(",
          "def test_core_shims_coherence(",
          "def test_functions_single_location(",
          "def test___module___attribute(",
          "def test___qualname___and___module___attribute("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_reloading.py": [
          "def test_numpy_reloading(",
          "def test_novalue(",
          "def test_full_reimport("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_scripts.py": [
          "def test_f2py(",
          "def test_pep338("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_warnings.py": [
          "def test_warning_calls("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test__all__.py": [
          "def test_no_duplicates_in_np__all__("
        ],
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_isfile.py": [
          "def test_isfile("
        ],
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_runtime.py": [
          "def test_get_args(",
          "def test_get_origin(",
          "def test_get_type_hints(",
          "def test_get_type_hints_str(",
          "def test_keys(",
          "def test_isinstance(",
          "def test_issubclass("
        ],
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_typing.py": [
          "def get_test_cases(",
          "def test_pass(",
          "def test_reveal(",
          "def test_code_runs("
        ],
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\recfunctions.py": [
          "def test_recursive_fill_fields(",
          "def test_get_names(",
          "def test_get_names_flat(",
          "def test_flatten_descr(",
          "def test_get_fieldstructure(",
          "def test_merge_arrays(",
          "def test_drop_fields(",
          "def test_rename_fields(",
          "def test_repack_fields(",
          "def test_structured_to_unstructured(",
          "def test_apply_along_fields(",
          "def test_assign_fields_by_name(",
          "def test_require_fields(",
          "def test_stack_arrays(",
          "def test_find_duplicates("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_abc.py": [
          "def test_abstract(",
          "def test_floats(",
          "def test_complex(",
          "def test_int(",
          "def test_uint("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_api.py": [
          "def test_array_array(",
          "def test_array_impossible_casts(",
          "def test_array_astype(",
          "def test_array_astype_to_string_discovery_empty(",
          "def test_array_astype_to_void(",
          "def test_object_array_astype_to_void(",
          "def test_array_astype_warning(",
          "def test_string_to_boolean_cast(",
          "def test_string_to_complex_cast(",
          "def test_none_to_nan_cast(",
          "def test_copyto_fromscalar(",
          "def test_copyto(",
          "def test_copyto_cast_safety(",
          "def test_copyto_permut(",
          "def test_copy_order(",
          "def test_contiguous_flags(",
          "def test_broadcast_arrays(",
          "def test_full_from_list(",
          "def test_astype_copyflag("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_argparse.py": [
          "def test_thread_safe_argparse_cache(",
          "def test_invalid_integers(",
          "def test_missing_arguments(",
          "def test_too_many_positional(",
          "def test_multiple_values(",
          "def test_string_fallbacks(",
          "def test_too_many_arguments_method_forwarding("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arraymethod.py": [
          "def test_invalid_arguments(",
          "def test_invalid_arguments(",
          "def test_class_getitem(",
          "def test_subscript_tup("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arrayobject.py": [
          "def test_matrix_transpose_raises_error_for_1d(",
          "def test_matrix_transpose_equals_transpose_2d(",
          "def test_matrix_transpose_equals_swapaxes(",
          "def test_array_wrap("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arrayprint.py": [
          "def test_nan_inf(",
          "def test_subclass(",
          "def test_object_subclass(",
          "def test_0d_object_subclass(",
          "def test_self_containing(",
          "def test_containing_list(",
          "def test_void_scalar_recursion(",
          "def test_fieldless_structured(",
          "def test_str(",
          "def test_basic(",
          "def test_unexpected_kwarg(",
          "def test_format_function(",
          "def test_structure_format_mixed(",
          "def test_structure_format_int(",
          "def test_structure_format_float(",
          "def test_unstructured_void_repr(",
          "def test_edgeitems_kwarg(",
          "def test_summarize_1d(",
          "def test_summarize_2d(",
          "def test_summarize_2d_dtype(",
          "def test_summarize_structure(",
          "def test_linewidth(",
          "def test_wide_element(",
          "def test_multiline_repr(",
          "def test_nested_array_repr(",
          "def test_any_text(",
          "def test_refcount(",
          "def test_with_sign(",
          "def test_basic(",
          "def test_precision_zero(",
          "def test_formatter(",
          "def test_formatter_reset(",
          "def test_override_repr(",
          "def test_0d_arrays(",
          "def test_float_spacing(",
          "def test_bool_spacing(",
          "def test_sign_spacing(",
          "def test_float_overflow_nowarn(",
          "def test_sign_spacing_structured(",
          "def test_floatmode(",
          "def test_gh_28679(",
          "def test_legacy_2_2_mode(",
          "def test_legacy_get_options(",
          "def test_legacy_mode_scalars(",
          "def test_legacy_stray_comma(",
          "def test_dtype_linewidth_wrapping(",
          "def test_dtype_endianness_repr(",
          "def test_linewidth_repr(",
          "def test_linewidth_str(",
          "def test_edgeitems(",
          "def test_edgeitems_structured(",
          "def test_bad_args(",
          "def test_unicode_object_array(",
          "def test_ctx_mgr(",
          "def test_ctx_mgr_restores(",
          "def test_ctx_mgr_exceptions(",
          "def test_ctx_mgr_as_smth(",
          "def test_scalar_repr_numbers(",
          "def test_scalar_repr_special(",
          "def test_scalar_void_float_str(",
          "def test_printoptions_asyncio_safe(",
          "def test_multithreaded_array_printing("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_api_info.py": [
          "def test_capabilities(",
          "def test_default_device(",
          "def test_default_dtypes(",
          "def test_dtypes_all(",
          "def test_dtypes_kind(",
          "def test_dtypes_tuple(",
          "def test_dtypes_invalid_kind(",
          "def test_dtypes_invalid_device(",
          "def test_devices("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_coercion.py": [
          "def test_basic_stringlength(",
          "def test_nested_arrays_stringlength(",
          "def test_unpack_first_level(",
          "def test_void_special_case(",
          "def test_char_special_case(",
          "def test_char_special_case_deep(",
          "def test_unknown_object(",
          "def test_scalar(",
          "def test_scalar_promotion(",
          "def test_scalar_coercion(",
          "def test_scalar_coercion_same_as_cast_and_assignment(",
          "def test_pyscalar_subclasses(",
          "def test_default_dtype_instance(",
          "def test_scalar_to_int_coerce_does_not_cast(",
          "def test_coercion_basic(",
          "def test_coercion_timedelta_convert_to_number(",
          "def test_coercion_assignment_datetime(",
          "def test_coercion_assignment_timedelta(",
          "def test_nested_simple(",
          "def test_pathological_self_containing(",
          "def test_nested_arraylikes(",
          "def test_uneven_depth_ragged(",
          "def test_empty_sequence(",
          "def test_array_of_different_depths(",
          "def test_growing_list(",
          "def test_mutated_list(",
          "def test_replace_0d_array(",
          "def test_0d_object_special_case(",
          "def test_object_assignment_special_case(",
          "def test_0d_generic_special_case(",
          "def test_arraylike_classes(",
          "def test_too_large_array_error_paths(",
          "def test_bad_array_like_attributes(",
          "def test_bad_array_like_bad_length(",
          "def test_array_interface_descr_optional(",
          "def test_dtype_identity(",
          "def test_deprecated(",
          "def test_subarray_from_array_construction(",
          "def test_empty_string("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_interface.py": [
          "def test_cstruct("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_floatingpoint_errors.py": [
          "def test_floatingpoint_errors_casting("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_unittests.py": [
          "def test_float_to_string(",
          "def test_to_void(",
          "def test_simple_cancast(",
          "def test_simple_direct_casts(",
          "def test_numeric_to_times(",
          "def test_time_to_time(",
          "def test_string_cancast(",
          "def test_simple_string_casts_roundtrip(",
          "def test_string_to_string_cancast(",
          "def test_unicode_byteswapped_cast(",
          "def test_void_to_string_special_case(",
          "def test_object_to_parametric_internal_error(",
          "def test_object_and_simple_resolution(",
          "def test_simple_to_object_resolution(",
          "def test_void_and_structured_with_subarray(",
          "def test_structured_field_offsets(",
          "def test_structured_view_offsets_parametric(",
          "def test_object_casts_NULL_None_equivalence(",
          "def test_nonstandard_bool_to_other("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_conversion_utils.py": [
          "def test_wrong_type(",
          "def test_wrong_value(",
          "def test_valid(",
          "def test_valid(",
          "def test_valid(",
          "def test_valid(",
          "def test_valid(",
          "def test_flatten_invalid_order(",
          "def test_valid(",
          "def test_valid(",
          "def test_basic(",
          "def test_none(",
          "def test_float(",
          "def test_too_large(",
          "def test_too_many_dims("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cpu_dispatcher.py": [
          "def test_dispatcher("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cpu_features.py": [
          "def test_features(",
          "def test_runtime_feature_selection(",
          "def test_both_enable_disable_set(",
          "def test_variable_too_long(",
          "def test_impossible_feature_disable(",
          "def test_impossible_feature_enable("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_custom_dtypes.py": [
          "def test_sfloat_rescaled(",
          "def test_class_discovery(",
          "def test_scaled_float_from_floats(",
          "def test_repr(",
          "def test_dtype_str(",
          "def test_dtype_name(",
          "def test_sfloat_structured_dtype_printing(",
          "def test_sfloat_from_float(",
          "def test_sfloat_getitem(",
          "def test_sfloat_casts(",
          "def test_sfloat_cast_internal_errors(",
          "def test_sfloat_promotion(",
          "def test_basic_multiply(",
          "def test_possible_and_impossible_reduce(",
          "def test_basic_ufunc_at(",
          "def test_basic_multiply_promotion(",
          "def test_basic_addition(",
          "def test_addition_cast_safety(",
          "def test_logical_ufuncs_casts_to_bool(",
          "def test_wrapped_and_wrapped_reductions(",
          "def test_astype_class(",
          "def test_creation_class(",
          "def test_np_save_load(",
          "def test_flatiter(",
          "def test_flatiter_index(",
          "def test_type_pickle(",
          "def test_is_numeric("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cython.py": [
          "def test_is_timedelta64_object(",
          "def test_is_datetime64_object(",
          "def test_get_datetime64_value(",
          "def test_get_timedelta64_value(",
          "def test_get_datetime64_unit(",
          "def test_abstract_scalars(",
          "def test_default_int(",
          "def test_ravel_axis(",
          "def test_convert_datetime64_to_datetimestruct(",
          "def test_make_iso_8601_datetime(",
          "def test_get_datetime_iso_8601_strlen(",
          "def test_multiiter_fields(",
          "def test_dtype_flags(",
          "def test_conv_intp(",
          "def test_npyiter_api(",
          "def test_fillwithbytes(",
          "def test_complex(",
          "def test_npystring_pack(",
          "def test_npystring_load(",
          "def test_npystring_multiple_allocators(",
          "def test_npystring_allocators_other_dtype(",
          "def test_npy_uintp_type_enum("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_datetime.py": [
          "def test_string(",
          "def test_datetime(",
          "def test_datetime_dtype_creation(",
          "def test_datetime_casting_rules(",
          "def test_datetime_prefix_conversions(",
          "def test_prohibit_negative_datetime(",
          "def test_compare_generic_nat(",
          "def test_datetime_nat_argsort_stability(",
          "def test_timedelta_nat_argsort_stability(",
          "def test_datetime_timedelta_sort_nat(",
          "def test_datetime_scalar_construction(",
          "def test_datetime_scalar_construction_timezone(",
          "def test_datetime_array_find_type(",
          "def test_timedelta_np_int_construction(",
          "def test_timedelta_scalar_construction(",
          "def test_timedelta_object_array_conversion(",
          "def test_timedelta_0_dim_object_array_conversion(",
          "def test_timedelta_nat_format(",
          "def test_timedelta_scalar_construction_units(",
          "def test_datetime_nat_casting(",
          "def test_days_creation(",
          "def test_days_to_pydate(",
          "def test_dtype_comparison(",
          "def test_pydatetime_creation(",
          "def test_datetime_string_conversion(",
          "def test_time_byteswapping(",
          "def test_time_byteswapped_cast(",
          "def test_datetime_conversions_byteorders(",
          "def test_datetime_array_str(",
          "def test_timedelta_array_str(",
          "def test_pickle(",
          "def test_setstate(",
          "def test_dtype_promotion(",
          "def test_cast_overflow(",
          "def test_pyobject_roundtrip(",
          "def test_month_truncation(",
          "def test_different_unit_comparison(",
          "def test_datetime_like(",
          "def test_datetime_unary(",
          "def test_datetime_add(",
          "def test_datetime_subtract(",
          "def test_datetime_multiply(",
          "def test_timedelta_floor_divide(",
          "def test_timedelta_floor_div_warnings(",
          "def test_timedelta_floor_div_precision(",
          "def test_timedelta_floor_div_error(",
          "def test_timedelta_divmod(",
          "def test_timedelta_divmod_typeerror(",
          "def test_timedelta_divmod_warnings(",
          "def test_datetime_divide(",
          "def test_datetime_compare(",
          "def test_datetime_compare_nat(",
          "def test_datetime_minmax(",
          "def test_hours(",
          "def test_divisor_conversion_year(",
          "def test_divisor_conversion_month(",
          "def test_divisor_conversion_week(",
          "def test_divisor_conversion_day(",
          "def test_divisor_conversion_hour(",
          "def test_divisor_conversion_minute(",
          "def test_divisor_conversion_second(",
          "def test_divisor_conversion_fs(",
          "def test_divisor_conversion_as(",
          "def test_string_parser_variants(",
          "def test_string_parser_error_check(",
          "def test_creation_overflow(",
          "def test_datetime_as_string(",
          "def test_datetime_as_string_timezone(",
          "def test_datetime_arange(",
          "def test_datetime_arange_no_dtype(",
          "def test_timedelta_arange(",
          "def test_timedelta_modulus(",
          "def test_timedelta_modulus_error(",
          "def test_timedelta_modulus_div_by_zero(",
          "def test_timedelta_modulus_type_resolution(",
          "def test_timedelta_arange_no_dtype(",
          "def test_datetime_maximum_reduce(",
          "def test_timedelta_correct_mean(",
          "def test_datetime_no_subtract_reducelike(",
          "def test_datetime_busday_offset(",
          "def test_datetime_busdaycalendar(",
          "def test_datetime_busday_holidays_offset(",
          "def test_datetime_busday_holidays_count(",
          "def test_datetime_is_busday(",
          "def test_datetime_y2038(",
          "def test_isnat(",
          "def test_isnat_error(",
          "def test_isfinite_scalar(",
          "def test_isfinite_isinf_isnan_units(",
          "def test_assert_equal(",
          "def test_corecursive_input(",
          "def test_discovery_from_object_array(",
          "def test_limit_symmetry(",
          "def test_limit_str_roundtrip(",
          "def test_datetime_hash_nat(",
          "def test_datetime_hash_weeks(",
          "def test_datetime_hash_weeks_vs_pydatetime(",
          "def test_datetime_hash_big_negative(",
          "def test_datetime_hash_minutes(",
          "def test_datetime_hash_ns(",
          "def test_datetime_hash_big_positive(",
          "def test_timedelta_hash_generic(",
          "def test_timedelta_hash_year_month(",
          "def test_timedelta_hash_weeks(",
          "def test_timedelta_hash_weeks_vs_pydelta(",
          "def test_timedelta_hash_ms(",
          "def test_timedelta_hash_big_positive(",
          "def test_basic(",
          "def test_bytes(",
          "def test_non_ascii(",
          "def test_comparisons_return_not_implemented("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_defchararray.py": [
          "def test_from_object_array(",
          "def test_from_object_array_unicode(",
          "def test_from_string_array(",
          "def test_from_unicode_array(",
          "def test_unicode_upconvert(",
          "def test_from_string(",
          "def test_from_unicode(",
          "def test_non_existent_method(",
          "def test_non_string_array(",
          "def test_invalid_args_tuple(",
          "def test_invalid_type_descr(",
          "def test_invalid_function_args(",
          "def test_invalid_result_type(",
          "def test_broadcast_error(",
          "def test1(",
          "def test_it(",
          "def test_not_equal(",
          "def test_equal(",
          "def test_greater_equal(",
          "def test_less_equal(",
          "def test_greater(",
          "def test_less(",
          "def test_type(",
          "def test_len(",
          "def test_count(",
          "def test_endswith(",
          "def test_find(",
          "def test_index(",
          "def test_isalnum(",
          "def test_isalpha(",
          "def test_isdigit(",
          "def test_islower(",
          "def test_isspace(",
          "def test_istitle(",
          "def test_isupper(",
          "def test_rfind(",
          "def test_rindex(",
          "def test_startswith(",
          "def test_capitalize(",
          "def test_center(",
          "def test_decode(",
          "def test_encode(",
          "def test_expandtabs(",
          "def test_join(",
          "def test_ljust(",
          "def test_lower(",
          "def test_lstrip(",
          "def test_partition(",
          "def test_replace(",
          "def test_replace_count_and_size(",
          "def test_replace_broadcasting(",
          "def test_rjust(",
          "def test_rpartition(",
          "def test_rsplit(",
          "def test_rstrip(",
          "def test_strip(",
          "def test_split(",
          "def test_splitlines(",
          "def test_swapcase(",
          "def test_title(",
          "def test_upper(",
          "def test_isnumeric(",
          "def test_isdecimal(",
          "def test_add(",
          "def test_radd(",
          "def test_mul(",
          "def test_rmul(",
          "def test_mod(",
          "def test_rmod(",
          "def test_slice(",
          "def test_getitem_length_zero_item(",
          "def test_encode(",
          "def test_decode(",
          "def test_decode_with_reshape(",
          "def test_mod(",
          "def test_decode(",
          "def test_encode(",
          "def test_expandtabs(",
          "def test_join(",
          "def test_partition(",
          "def test_rpartition(",
          "def test_replace(",
          "def test_empty_indexing("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_deprecations.py": [
          "def test_assert_deprecated(",
          "def test_bincount_bad_list(",
          "def test_generator_sum(",
          "def test_deprecated(",
          "def test_not_deprecated(",
          "def test_deprecated(",
          "def test_not_deprecated(",
          "def test_deprecated(",
          "def test_not_deprecated(",
          "def test_deprecated_module(",
          "def test_deprecated(",
          "def test_both_passed(",
          "def test_float_conversion(",
          "def test_behaviour(",
          "def test_deprecated_scalar(",
          "def test_future_scalar_attributes(",
          "def test_attributeerror_includes_info(",
          "def test_deprecated_none(",
          "def test_deprecated_np_lib_math(",
          "def test_lib_functions_deprecation_call(",
          "def test_a_dtype_alias(",
          "def test_deprecated(",
          "def test_parenthesized_repeat_count(",
          "def test_deprecated(",
          "def test_deprecated("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dlpack.py": [
          "def test_dunder_dlpack_refcount(",
          "def test_dunder_dlpack_stream(",
          "def test_dunder_dlpack_copy(",
          "def test_strides_not_multiple_of_itemsize(",
          "def test_from_dlpack_refcount(",
          "def test_dtype_passthrough(",
          "def test_invalid_dtype(",
          "def test_invalid_byte_swapping(",
          "def test_non_contiguous(",
          "def test_higher_dims(",
          "def test_dlpack_device(",
          "def test_dlpack_destructor_exception(",
          "def test_readonly(",
          "def test_writeable(",
          "def test_ndim0(",
          "def test_size1dims_arrays(",
          "def test_copy(",
          "def test_device("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py": [
          "def test_run(",
          "def test_dtype(",
          "def test_equivalent_dtype_hashing(",
          "def test_invalid_types(",
          "def test_richcompare_invalid_dtype_equality(",
          "def test_richcompare_invalid_dtype_comparison(",
          "def test_numeric_style_types_are_invalid(",
          "def test_expired_dtypes_with_bad_bytesize(",
          "def test_dtype_bytes_str_equivalence(",
          "def test_dtype_from_bytes(",
          "def test_bad_param(",
          "def test_field_order_equality(",
          "def test_create_string_dtypes_directly(",
          "def test_create_invalid_string_errors(",
          "def test_leading_zero_parsing(",
          "def test_equivalent_record(",
          "def test_different_names(",
          "def test_different_titles(",
          "def test_refcount_dictionary_setting(",
          "def test_mutate(",
          "def test_init_simple_structured(",
          "def test_mutate_error(",
          "def test_not_lists(",
          "def test_aligned_size(",
          "def test_empty_struct_alignment(",
          "def test_union_struct(",
          "def test_subarray_list(",
          "def test_parenthesized_single_number(",
          "def test_comma_datetime(",
          "def test_from_dictproxy(",
          "def test_from_dict_with_zero_width_field(",
          "def test_bool_commastring(",
          "def test_nonint_offsets(",
          "def test_fields_by_index(",
          "def test_multifield_index(",
          "def test_partial_dict(",
          "def test_fieldless_views(",
          "def test_nonstructured_with_object(",
          "def test_single_subarray(",
          "def test_equivalent_record(",
          "def test_nonequivalent_record(",
          "def test_shape_equal(",
          "def test_shape_simple(",
          "def test_shape_monster(",
          "def test_shape_sequence(",
          "def test_shape_matches_ndim(",
          "def test_shape_invalid(",
          "def test_alignment(",
          "def test_aligned_empty(",
          "def test_subarray_base_item(",
          "def test_subarray_cast_copies(",
          "def test_structured_object_create_delete(",
          "def test_structured_object_item_setting(",
          "def test_structured_object_indexing(",
          "def test_structured_object_take_and_repeat(",
          "def test_sparse_field_assignment(",
          "def test_sparse_field_assignment_fancy(",
          "def test1(",
          "def test_list_recursion(",
          "def test_tuple_recursion(",
          "def test_dict_recursion(",
          "def test_no_metadata(",
          "def test_metadata_takes_dict(",
          "def test_metadata_rejects_nondict(",
          "def test_nested_metadata(",
          "def test_base_metadata_copied(",
          "def test_complex_dtype_str(",
          "def test_repr_structured(",
          "def test_repr_structured_not_packed(",
          "def test_repr_structured_datetime(",
          "def test_repr_str_subarray(",
          "def test_base_dtype_with_object_type(",
          "def test_empty_string_to_object(",
          "def test_void_subclass_unsized(",
          "def test_void_subclass_sized(",
          "def test_void_subclass_fields(",
          "def test_custom_dtype_str(",
          "def test_dtype_non_writable_attributes_deletion(",
          "def test_dtype_writable_attributes_deletion(",
          "def test_descr_has_trailing_void(",
          "def test_name_dtype_subclass(",
          "def test_zero_stride(",
          "def test_simple(",
          "def test_object_flag_not_inherited(",
          "def test_make_canonical_hypothesis(",
          "def test_structured(",
          "def test_builtin(",
          "def test_structured(",
          "def test_structured_aligned(",
          "def test_structured_unaligned(",
          "def test_structured_padded(",
          "def test_structured_titles(",
          "def test_datetime(",
          "def test_metadata(",
          "def test_pickle_dtype_class(",
          "def test_pickle_dtype(",
          "def test_complex_other_value_based(",
          "def test_complex_scalar_value_based(",
          "def test_complex_pyscalar_promote_rational(",
          "def test_python_integer_promotion(",
          "def test_float_int_pyscalar_promote_rational(",
          "def test_permutations_do_not_influence_result(",
          "def test_rational_dtype(",
          "def test_dtypes_are_true(",
          "def test_invalid_dtype_string(",
          "def test_keyword_argument(",
          "def test_simple(",
          "def test_recursion(",
          "def test_void_subtype(",
          "def test_void_subtype_recursion(",
          "def test_basic_dtypes_subclass_properties(",
          "def test_dtype_superclass(",
          "def test_is_numeric(",
          "def test_integer_alias_names(",
          "def test_float_alias_names(",
          "def test_scalar_helper_all_dtypes(",
          "def test_array(",
          "def test_padded_structure(",
          "def test_bit_fields(",
          "def test_pointer(",
          "def test_size_t(",
          "def test_void_pointer(",
          "def test_union(",
          "def test_union_with_struct_packed(",
          "def test_union_packed(",
          "def test_packed_structure(",
          "def test_large_packed_structure(",
          "def test_big_endian_structure_packed(",
          "def test_little_endian_structure_packed(",
          "def test_little_endian_structure(",
          "def test_big_endian_structure(",
          "def test_simple_endian_types(",
          "def test_pairs(",
          "def test_custom_structured_dtype(",
          "def test_custom_structured_dtype_errors(",
          "def test_dtype(",
          "def test_dtype_subclass(",
          "def test_subscript_tuple(",
          "def test_subscript_scalar(",
          "def test_result_type_integers_and_unitless_timedelta64(",
          "def test_creating_dtype_with_dtype_class_errors("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_einsum.py": [
          "def test_einsum_errors(",
          "def test_einsum_sorting_behavior(",
          "def test_einsum_specific_errors(",
          "def test_einsum_object_errors(",
          "def test_einsum_views(",
          "def test_einsum_sums_int8(",
          "def test_einsum_sums_uint8(",
          "def test_einsum_sums_int16(",
          "def test_einsum_sums_uint16(",
          "def test_einsum_sums_int32(",
          "def test_einsum_sums_uint32(",
          "def test_einsum_sums_int64(",
          "def test_einsum_sums_uint64(",
          "def test_einsum_sums_float16(",
          "def test_einsum_sums_float32(",
          "def test_einsum_sums_float64(",
          "def test_einsum_sums_longdouble(",
          "def test_einsum_sums_cfloat64(",
          "def test_einsum_sums_cfloat128(",
          "def test_einsum_sums_clongdouble(",
          "def test_einsum_sums_object(",
          "def test_einsum_misc(",
          "def test_object_loop(",
          "def test_subscript_range(",
          "def test_einsum_broadcast(",
          "def test_einsum_fixedstridebug(",
          "def test_einsum_fixed_collapsingbug(",
          "def test_einsum_failed_on_p9_and_s390x(",
          "def test_einsum_all_contig_non_contig_output(",
          "def test_different_paths(",
          "def test_small_boolean_arrays(",
          "def test_out_is_res(",
          "def test_hadamard_like_products(",
          "def test_index_transformations(",
          "def test_complex(",
          "def test_collapse(",
          "def test_expand(",
          "def test_edge_cases(",
          "def test_inner_product(",
          "def test_random_cases(",
          "def test_combined_views_mapping(",
          "def test_broadcasting_dot_cases(",
          "def test_output_order(",
          "def test_memory_contraints(",
          "def test_long_paths(",
          "def test_edge_paths(",
          "def test_path_type_input(",
          "def test_path_type_input_internal_trace(",
          "def test_path_type_input_invalid(",
          "def test_spaces(",
          "def test_overlap(",
          "def test_einsum_chunking_precision("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_errstate.py": [
          "def test_invalid(",
          "def test_divide(",
          "def test_errcall(",
          "def test_errstate_decorator(",
          "def test_errstate_enter_once(",
          "def test_asyncio_safe("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_extint128.py": [
          "def test_safe_binop(",
          "def test_to_128(",
          "def test_to_64(",
          "def test_mul_64_64(",
          "def test_add_128(",
          "def test_sub_128(",
          "def test_neg_128(",
          "def test_shl_128(",
          "def test_shr_128(",
          "def test_gt_128(",
          "def test_divmod_128_64(",
          "def test_floordiv_128_64(",
          "def test_ceildiv_128_64("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_function_base.py": [
          "def test_basic(",
          "def test_start_stop_array(",
          "def test_base_array(",
          "def test_stop_base_array(",
          "def test_dtype(",
          "def test_physical_quantities(",
          "def test_subclass(",
          "def test_basic(",
          "def test_boundaries_match_start_and_stop_exactly(",
          "def test_nan_interior(",
          "def test_complex(",
          "def test_complex_shortest_path(",
          "def test_dtype(",
          "def test_start_stop_array_scalar(",
          "def test_start_stop_array(",
          "def test_physical_quantities(",
          "def test_subclass(",
          "def test_bounds(",
          "def test_basic(",
          "def test_corner(",
          "def test_type(",
          "def test_dtype(",
          "def test_start_stop_array_scalar(",
          "def test_start_stop_array(",
          "def test_complex(",
          "def test_physical_quantities(",
          "def test_subclass(",
          "def test_array_interface(",
          "def test_denormal_numbers(",
          "def test_equivalent_to_arange(",
          "def test_retstep(",
          "def test_object(",
          "def test_round_negative(",
          "def test_any_step_zero_and_not_mult_inplace(",
          "def test_add_doc(",
          "def test_errors_are_ignored("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_getlimits.py": [
          "def test_singleton(",
          "def test_singleton(",
          "def test_singleton(",
          "def test_singleton(",
          "def test_singleton(",
          "def test_basic(",
          "def test_regression_gh23108(",
          "def test_regression_gh23867(",
          "def test_basic(",
          "def test_unsigned_max(",
          "def test_iinfo_repr(",
          "def test_finfo_repr(",
          "def test_instances(",
          "def test_known_types(",
          "def test_subnormal_warning(",
          "def test_plausible_finfo(",
          "def test_finfo_generic(",
          "def test_iinfo_generic("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_half.py": [
          "def test_half_conversions(",
          "def test_half_conversion_to_string(",
          "def test_half_conversion_from_string(",
          "def test_half_conversion_rounding(",
          "def test_half_conversion_denormal_round_even(",
          "def test_nans_infs(",
          "def test_half_values(",
          "def test_half_rounding(",
          "def test_half_correctness(",
          "def test_half_ordering(",
          "def test_half_funcs(",
          "def test_spacing_nextafter(",
          "def test_half_ufuncs(",
          "def test_half_coercion(",
          "def test_half_fpe(",
          "def test_half_array_interface("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_hashtable.py": [
          "def test_identity_hashtable("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexerrors.py": [
          "def test_arraytypes_fasttake(",
          "def test_take_from_object(",
          "def test_multiindex_exceptions(",
          "def test_put_exceptions(",
          "def test_iterators_exceptions(",
          "def test_mapping(",
          "def test_mapping_error_message(",
          "def test_methods("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexing.py": [
          "def test_index_no_floats(",
          "def test_slicing_no_floats(",
          "def test_index_no_array_to_index(",
          "def test_none_index(",
          "def test_empty_tuple_index(",
          "def test_void_scalar_empty_tuple(",
          "def test_same_kind_index_casting(",
          "def test_empty_fancy_index(",
          "def test_gh_26542(",
          "def test_gh_26542_2d(",
          "def test_gh_26542_index_overlap(",
          "def test_gh_26844(",
          "def test_gh_26844_segfault(",
          "def test_ellipsis_index(",
          "def test_single_int_index(",
          "def test_single_bool_index(",
          "def test_boolean_shape_mismatch(",
          "def test_boolean_indexing_onedim(",
          "def test_boolean_assignment_value_mismatch(",
          "def test_boolean_assignment_needs_api(",
          "def test_boolean_indexing_twodim(",
          "def test_boolean_indexing_list(",
          "def test_reverse_strides_and_subspace_bufferinit(",
          "def test_reversed_strides_result_allocation(",
          "def test_uncontiguous_subspace_assignment(",
          "def test_too_many_fancy_indices_special_case(",
          "def test_scalar_array_bool(",
          "def test_everything_returns_views(",
          "def test_broaderrors_indexing(",
          "def test_trivial_fancy_out_of_bounds(",
          "def test_trivial_fancy_not_possible(",
          "def test_nonbaseclass_values(",
          "def test_array_like_values(",
          "def test_subclass_writeable(",
          "def test_memory_order(",
          "def test_scalar_return_type(",
          "def test_small_regressions(",
          "def test_unaligned(",
          "def test_tuple_subclass(",
          "def test_broken_sequence_not_nd_index(",
          "def test_indexing_array_weird_strides(",
          "def test_indexing_array_negative_strides(",
          "def test_character_assignment(",
          "def test_too_many_advanced_indices(",
          "def test_nontuple_ndindex(",
          "def test_flat_index_on_flatiter(",
          "def test_empty_string_flat_index_on_flatiter(",
          "def test_nonempty_string_flat_index_on_flatiter(",
          "def test_scalar_return_type(",
          "def test_prepending_ones(",
          "def test_prepend_not_one(",
          "def test_simple_broadcasting_errors(",
          "def test_broadcast_error_reports_correct_shape(",
          "def test_index_is_larger(",
          "def test_broadcast_subspace(",
          "def test_basic(",
          "def test_fancy_on_read_only(",
          "def test_finalize_gets_full_info(",
          "def test_boolean_index_cast_assign(",
          "def test_object_assign(",
          "def test_cast_equivalence(",
          "def test_boolean(",
          "def test_multidim(",
          "def test_1d(",
          "def test_valid_indexing(",
          "def test_valid_slicing(",
          "def test_non_integer_argument_errors(",
          "def test_non_integer_sequence_multiplication(",
          "def test_reduce_axis_float_index(",
          "def test_bool_as_int_argument_errors(",
          "def test_boolean_indexing_weirdness(",
          "def test_boolean_indexing_fast_path(",
          "def test_array_to_index_error(",
          "def test_basic(",
          "def test_basic(",
          "def test_getitem(",
          "def test_setitem("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_item_selection.py": [
          "def test_simple(",
          "def test_refcounting(",
          "def test_unicode_mode(",
          "def test_empty_partition(",
          "def test_empty_argpartition(",
          "def test_simple(",
          "def test_empty(",
          "def test_simple(",
          "def test_empty("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_limited_api.py": [
          "def test_limited_api("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_longdouble.py": [
          "def test_scalar_extraction(",
          "def test_str_roundtrip(",
          "def test_str_roundtrip_bytes(",
          "def test_array_and_stringlike_roundtrip(",
          "def test_bogus_string(",
          "def test_fromstring(",
          "def test_fromstring_complex(",
          "def test_fromstring_bogus(",
          "def test_fromstring_empty(",
          "def test_fromstring_missing(",
          "def test_fromfile_bogus(",
          "def test_fromfile_complex(",
          "def test_fromfile(",
          "def test_genfromtxt(",
          "def test_loadtxt(",
          "def test_tofile_roundtrip(",
          "def test_str_exact(",
          "def test_format(",
          "def test_percent(",
          "def test_array_repr(",
          "def test_str_roundtrip_foreign(",
          "def test_fromstring_foreign_repr(",
          "def test_fromstring_foreign(",
          "def test_fromstring_foreign_sep(",
          "def test_fromstring_foreign_value(",
          "def test_longdouble_from_int(",
          "def test_longdouble_from_bool(",
          "def test_musllinux_x86_64_signature(",
          "def test_eps_positive("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_machar.py": [
          "def test_underlow("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_memmap.py": [
          "def test_roundtrip(",
          "def test_open_with_filename(",
          "def test_unnamed_file(",
          "def test_attributes(",
          "def test_filename(",
          "def test_path(",
          "def test_filename_fileobj(",
          "def test_flush(",
          "def test_del(",
          "def test_arithmetic_drops_references(",
          "def test_indexing_drops_references(",
          "def test_slicing_keeps_references(",
          "def test_view(",
          "def test_ufunc_return_ndarray(",
          "def test_getitem(",
          "def test_memmap_subclass(",
          "def test_mmap_offset_greater_than_allocation_granularity(",
          "def test_empty_array_with_offset_multiple_of_allocation_granularity(",
          "def test_no_shape(",
          "def test_empty_array(",
          "def test_shape_type("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_overlap.py": [
          "def test_overlapping_assignments(",
          "def test_diophantine_fuzz(",
          "def test_diophantine_overflow(",
          "def test_may_share_memory_manual(",
          "def test_may_share_memory_easy_fuzz(",
          "def test_may_share_memory_harder_fuzz(",
          "def test_shares_memory_api(",
          "def test_may_share_memory_bad_max_work(",
          "def test_internal_overlap_diophantine(",
          "def test_internal_overlap_slices(",
          "def test_internal_overlap_manual(",
          "def test_internal_overlap_fuzz(",
          "def test_non_ndarray_inputs(",
          "def test_unary_ufunc_call_fuzz(",
          "def test_unary_ufunc_call_complex_fuzz(",
          "def test_binary_ufunc_accumulate_fuzz(",
          "def test_binary_ufunc_reduce_fuzz(",
          "def test_binary_ufunc_reduceat_fuzz(",
          "def test_binary_ufunc_reduceat_manual(",
          "def test_unary_gufunc_fuzz(",
          "def test_ufunc_at_manual(",
          "def test_unary_ufunc_1d_manual(",
          "def test_unary_ufunc_where_same(",
          "def test_binary_ufunc_1d_manual(",
          "def test_inplace_op_simple_manual("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_policy.py": [
          "def test_set_policy(",
          "def test_default_policy_singleton(",
          "def test_policy_propagation(",
          "def async_test_context_locality(",
          "def test_context_locality(",
          "def test_thread_locality(",
          "def test_new_policy(",
          "def test_switch_owner(",
          "def test_owner_is_base("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py": [
          "def test_writeable(",
          "def test_writeable_any_base(",
          "def test_writeable_from_readonly(",
          "def test_writeable_from_buffer(",
          "def test_writeable_pickle(",
          "def test_writeable_from_c_data(",
          "def test_warnonwrite(",
          "def test_readonly_flag_protocols(",
          "def test_otherflags(",
          "def test_string_align(",
          "def test_void_align(",
          "def test_xcontiguous_load_txt(",
          "def test_int(",
          "def test_attributes(",
          "def test_dtypeattr(",
          "def test_int_subclassing(",
          "def test_stridesattr(",
          "def test_set_stridesattr(",
          "def test_fill(",
          "def test_fill_max_uint64(",
          "def test_fill_struct_array(",
          "def test_fill_readonly(",
          "def test_fill_subarrays(",
          "def test_array(",
          "def test_array_empty(",
          "def test_0d_array_shape(",
          "def test_array_copy_false(",
          "def test_array_copy_if_needed(",
          "def test_array_copy_true(",
          "def test_array_copy_str(",
          "def test_array_cont(",
          "def test_bad_arguments_error(",
          "def test_array_as_keyword(",
          "def test_assignment_broadcasting(",
          "def test_assignment_errors(",
          "def test_unicode_assignment(",
          "def test_stringlike_empty_list(",
          "def test_longdouble_assignment(",
          "def test_cast_to_string(",
          "def test_construction(",
          "def test_byteorders(",
          "def test_structured_non_void(",
          "def test_ellipsis_subscript(",
          "def test_empty_subscript(",
          "def test_invalid_subscript(",
          "def test_ellipsis_subscript_assignment(",
          "def test_empty_subscript_assignment(",
          "def test_invalid_subscript_assignment(",
          "def test_newaxis(",
          "def test_invalid_newaxis(",
          "def test_constructor(",
          "def test_output(",
          "def test_real_imag(",
          "def test_ellipsis_subscript(",
          "def test_empty_subscript(",
          "def test_invalid_subscript(",
          "def test_invalid_subscript_assignment(",
          "def test_newaxis(",
          "def test_invalid_newaxis(",
          "def test_overlapping_assignment(",
          "def test_from_attribute(",
          "def test_from_string(",
          "def test_void(",
          "def test_structured_void_promotion(",
          "def test_too_big_error(",
          "def test_malloc_fails(",
          "def test_zeros(",
          "def test_zeros_big(",
          "def test_zeros_obj(",
          "def test_zeros_obj_obj(",
          "def test_zeros_like_like_zeros(",
          "def test_empty_unicode(",
          "def test_sequence_non_homogeneous(",
          "def test_non_sequence_sequence(",
          "def test_no_len_object_type(",
          "def test_false_len_sequence(",
          "def test_false_len_iterable(",
          "def test_failed_len_sequence(",
          "def test_array_too_big(",
          "def test_ragged_ndim_object(",
          "def test_ragged_shape_object(",
          "def test_array_of_ragged_array(",
          "def test_deep_nonragged_object(",
          "def test_object_initialized_to_None(",
          "def test_creation_from_dtypemeta(",
          "def test_subarray_field_access(",
          "def test_subarray_comparison(",
          "def test_empty_structured_array_comparison(",
          "def test_structured_array_comparison_bad_broadcasts(",
          "def test_structured_comparisons_with_promotion(",
          "def test_void_comparison_failures(",
          "def test_casting(",
          "def test_objview(",
          "def test_setfield(",
          "def test_setfield_object(",
          "def testassign(",
          "def test_zero_width_string(",
          "def test_base_attr(",
          "def test_assignment(",
          "def testassign(",
          "def test_structuredscalar_indexing(",
          "def test_multiindex_titles(",
          "def test_structured_cast_promotion_fieldorder(",
          "def test_structured_promotion_packs(",
          "def test_structured_asarray_is_view(",
          "def test_test_interning(",
          "def test_sum(",
          "def test_count_nonzero(",
          "def test_count_nonzero_all(",
          "def test_count_nonzero_unaligned(",
          "def _test_cast_from_flexible(",
          "def test_cast_from_void(",
          "def test_cast_from_unicode(",
          "def test_cast_from_bytes(",
          "def test_create(",
          "def _test_sort_partition(",
          "def test_sort(",
          "def test_argsort(",
          "def test_partition(",
          "def test_argpartition(",
          "def test_resize(",
          "def test_view(",
          "def test_dumps(",
          "def test_pickle(",
          "def test_pickle_empty(",
          "def test_pickle_with_buffercallback(",
          "def test_all_where(",
          "def test_any_where(",
          "def test_any_and_all_result_dtype(",
          "def test_any_and_all_object_dtype(",
          "def test_compress(",
          "def test_choose(",
          "def test_prod(",
          "def test_repeat(",
          "def test_reshape(",
          "def test_round(",
          "def test_squeeze(",
          "def test_transpose(",
          "def test_sort(",
          "def test_sort_unsigned(",
          "def test_sort_signed(",
          "def test_sort_complex(",
          "def test_sort_complex_byte_swapping(",
          "def test_sort_string(",
          "def test_sort_object(",
          "def test_sort_structured(",
          "def test_sort_time(",
          "def test_sort_axis(",
          "def test_sort_size_0(",
          "def test_sort_bad_ordering(",
          "def test_void_sort(",
          "def test_sort_raises(",
          "def test_sort_degraded(",
          "def test_copy(",
          "def test__deepcopy__(",
          "def test__deepcopy__catches_failure(",
          "def test_sort_order(",
          "def test_argsort(",
          "def test_sort_unicode_kind(",
          "def test_searchsorted_floats(",
          "def test_searchsorted_complex(",
          "def test_searchsorted_n_elements(",
          "def test_searchsorted_unaligned_array(",
          "def test_searchsorted_resetting(",
          "def test_searchsorted_type_specific(",
          "def test_searchsorted_unicode(",
          "def test_searchsorted_with_invalid_sorter(",
          "def test_searchsorted_with_sorter(",
          "def test_searchsorted_return_type(",
          "def test_argpartition_out_of_range(",
          "def test_partition_out_of_range(",
          "def test_argpartition_integer(",
          "def test_partition_integer(",
          "def test_partition_empty_array(",
          "def test_argpartition_empty_array(",
          "def test_partition(",
          "def test_partition_iterative(",
          "def test_partition_cdtype(",
          "def test_partition_unicode_kind(",
          "def test_partition_fuzz(",
          "def test_argpartition_gh5524(",
          "def test_flatten(",
          "def test_arr_mult(",
          "def test_no_dgemv(",
          "def test_dot(",
          "def test_dot_errstate(",
          "def test_dot_type_mismatch(",
          "def test_dot_out_mem_overlap(",
          "def test_dot_matmul_out(",
          "def test_dot_matmul_inner_array_casting_fails(",
          "def test_matmul_out(",
          "def test_diagonal(",
          "def test_diagonal_view_notwriteable(",
          "def test_diagonal_memleak(",
          "def test_size_zero_memleak(",
          "def test_trace(",
          "def test_trace_subclass(",
          "def test_put(",
          "def test_ravel(",
          "def test_ravel_subclass(",
          "def test_swapaxes(",
          "def test_conjugate(",
          "def test_conjugate_out(",
          "def test_conjugate_scalar(",
          "def test__complex__(",
          "def test__complex__should_not_work(",
          "def test_array_contains(",
          "def test_inplace(",
          "def test_ufunc_binop_interaction(",
          "def test_ufunc_binop_bad_array_priority(",
          "def test_scalar_binop_guarantees_ufunc(",
          "def test_ufunc_override_normalize_signature(",
          "def test_array_ufunc_index(",
          "def test_out_override(",
          "def test_pow_array_object_dtype(",
          "def test_pos_array_ufunc_override(",
          "def test_extension_incref_elide(",
          "def test_extension_incref_elide_stack(",
          "def test_temporary_with_cast(",
          "def test_elide_broadcast(",
          "def test_elide_scalar(",
          "def test_elide_scalar_readonly(",
          "def test_elide_readonly(",
          "def test_elide_updateifcopy(",
          "def test_IsPythonScalar(",
          "def test_intp_sequence_converters(",
          "def test_intp_sequence_converters_errors(",
          "def test_test_zero_rank(",
          "def test_correct_protocol5_error_message(",
          "def test_record_array_with_object_dtype(",
          "def test_f_contiguous_array(",
          "def test_transposed_contiguous_array(",
          "def test_load_legacy_pkl_protocol5(",
          "def test_non_contiguous_array(",
          "def test_roundtrip(",
          "def test_version0_int8(",
          "def test_version0_float32(",
          "def test_version0_object(",
          "def test_version1_int8(",
          "def test_version1_float32(",
          "def test_version1_object(",
          "def test_subarray_int_shape(",
          "def test_datetime64_byteorder(",
          "def test_list(",
          "def test_tuple(",
          "def test_mask(",
          "def test_mask2(",
          "def test_assign_mask(",
          "def test_assign_mask2(",
          "def test_string(",
          "def test_mixed(",
          "def test_unicode(",
          "def test_np_argmin_argmax_keepdims(",
          "def test_all(",
          "def test_output_shape(",
          "def test_ret_is_out(",
          "def test_unicode(",
          "def test_np_vs_ndarray(",
          "def test_object_with_NULLs(",
          "def test_combinations(",
          "def test_maximum_signed_integers(",
          "def test_combinations(",
          "def test_minimum_signed_integers(",
          "def test_scalar(",
          "def test_axis(",
          "def test_datetime(",
          "def test_basic(",
          "def test_basic(",
          "def test_int_out_of_range(",
          "def test_record_array(",
          "def test_max_or_min(",
          "def test_nan(",
          "def test_axis(",
          "def test_truncate(",
          "def test_flatten(",
          "def test_ip_types(",
          "def test_mask_size(",
          "def test_byteorder(",
          "def test_record_array(",
          "def test_overlaps(",
          "def test_writeable(",
          "def test_kwargs(",
          "def test_ip_types(",
          "def test_raise(",
          "def test_clip(",
          "def test_wrap(",
          "def test_byteorder(",
          "def test_record_array(",
          "def test_out_overlap(",
          "def test_ret_is_out(",
          "def test_basic(",
          "def test_mixed(",
          "def test_datetime(",
          "def test_object(",
          "def test_strings(",
          "def test_invalid_axis(",
          "def test_nofile(",
          "def test_bool_fromstring(",
          "def test_uint64_fromstring(",
          "def test_int64_fromstring(",
          "def test_fromstring_count0(",
          "def test_empty_files_text(",
          "def test_empty_files_binary(",
          "def test_roundtrip_file(",
          "def test_roundtrip(",
          "def test_roundtrip_dump_pathlib(",
          "def test_roundtrip_binary_str(",
          "def test_roundtrip_str(",
          "def test_roundtrip_repr(",
          "def test_unseekable_fromfile(",
          "def test_io_open_unbuffered_fromfile(",
          "def test_largish_file(",
          "def test_io_open_buffered_fromfile(",
          "def test_file_position_after_fromfile(",
          "def test_file_position_after_tofile(",
          "def test_load_object_array_fromfile(",
          "def test_fromfile_offset(",
          "def test_fromfile_bad_dup(",
          "def test_decimal(",
          "def test_decimal_period_separator(",
          "def test_decimal_comma_separator(",
          "def test_nan(",
          "def test_inf(",
          "def test_numbers(",
          "def test_binary(",
          "def test_string(",
          "def test_counted_string(",
          "def test_string_with_ws(",
          "def test_counted_string_with_ws(",
          "def test_ascii(",
          "def test_malformed(",
          "def test_long_sep(",
          "def test_dtype(",
          "def test_dtype_bool(",
          "def test_tofile_sep(",
          "def test_tofile_format(",
          "def test_tofile_cleanup(",
          "def test_fromfile_subarray_binary(",
          "def test_parsing_subarray_unsupported(",
          "def test_read_shorter_than_count_subarray(",
          "def test_basic(",
          "def test_array_base(",
          "def test_empty(",
          "def test_mmap_close(",
          "def test_contiguous(",
          "def test_discontiguous(",
          "def test___array__(",
          "def test_refcount(",
          "def test_index_getset(",
          "def test_maxdims(",
          "def test_basic(",
          "def test_check_reference(",
          "def test_int_shape(",
          "def test_none_shape(",
          "def test_0d_shape(",
          "def test_invalid_arguments(",
          "def test_freeform_shape(",
          "def test_zeros_appended(",
          "def test_obj_obj(",
          "def test_empty_view(",
          "def test_check_weakref(",
          "def test_field_rename(",
          "def test_multiple_field_name_occurrence(",
          "def test_dtype_init(",
          "def test_bytes_fields(",
          "def test_multiple_field_name_unicode(",
          "def test_dtype_unicode(",
          "def test_fromarrays_unicode(",
          "def test_unicode_order(",
          "def test_field_names(",
          "def test_record_hash(",
          "def test_record_no_hash(",
          "def test_empty_structure_creation(",
          "def test_multifield_indexing_view(",
          "def test_basic(",
          "def test_python_type(",
          "def test_keepdims(",
          "def test_out(",
          "def test_dtype_from_input(",
          "def test_dtype_from_dtype(",
          "def test_ddof(",
          "def test_ddof_too_big(",
          "def test_empty(",
          "def test_mean_values(",
          "def test_mean_float16(",
          "def test_mean_axis_error(",
          "def test_mean_where(",
          "def test_var_values(",
          "def test_var_complex_values(",
          "def test_var_dimensions(",
          "def test_var_complex_byteorder(",
          "def test_var_axis_error(",
          "def test_var_where(",
          "def test_std_values(",
          "def test_std_where(",
          "def test_subclass(",
          "def test_basic(",
          "def test_vdot_array_order(",
          "def test_vdot_uncontiguous(",
          "def test_dotmatmat(",
          "def test_dotmatvec(",
          "def test_dotmatvec2(",
          "def test_dotvecmat(",
          "def test_dotvecmat2(",
          "def test_dotvecmat3(",
          "def test_dotvecvecouter(",
          "def test_dotvecvecinner(",
          "def test_dotcolumnvect1(",
          "def test_dotcolumnvect2(",
          "def test_dotvecscalar(",
          "def test_dotvecscalar2(",
          "def test_all(",
          "def test_vecobject(",
          "def test_dot_2args(",
          "def test_dot_3args(",
          "def test_dot_3args_errors(",
          "def test_dot_out_result(",
          "def test_dot_out_aliasing(",
          "def test_dot_array_order(",
          "def test_accelerate_framework_sgemv_fix(",
          "def test_huge_vectordot(",
          "def test_dtype_discovery_fails(",
          "def test_exceptions(",
          "def test_shapes(",
          "def test_result_types(",
          "def test_scalar_output(",
          "def test_vector_vector_values(",
          "def test_vector_matrix_values(",
          "def test_matrix_vector_values(",
          "def test_matrix_matrix_values(",
          "def test_out_arg(",
          "def test_empty_out(",
          "def test_out_contiguous(",
          "def test_dot_equivalent(",
          "def test_matmul_object(",
          "def test_matmul_object_type_scalar(",
          "def test_matmul_empty(",
          "def test_matmul_exception_multiply(",
          "def test_matmul_exception_add(",
          "def test_matmul_bool(",
          "def test_array_priority_override(",
          "def test_matmul_raises(",
          "def test_basic(",
          "def test_shapes(",
          "def test_matmul_axes(",
          "def test_inner_type_mismatch(",
          "def test_inner_scalar_and_vector(",
          "def test_vecself(",
          "def test_inner_product_with_various_contiguities(",
          "def test_3d_tensor(",
          "def test_basic(",
          "def test_broadcast1(",
          "def test_broadcast2(",
          "def test_output_dtype(",
          "def test_dimension_and_args_limit(",
          "def test_basic(",
          "def test_broadcast1(",
          "def test_axis_spec(",
          "def test_broadcast2(",
          "def test_simple2d(",
          "def test_mirror2d(",
          "def test_simple(",
          "def test_mirror(",
          "def test_circular(",
          "def test_simple_const(",
          "def test_simple_mirror(",
          "def test_simple_circular(",
          "def test_simple_strict_within(",
          "def test_complex_warning(",
          "def test_usigned_shortshort(",
          "def test_usigned_short(",
          "def test_usigned_int(",
          "def test_usigned_longlong(",
          "def test_object(",
          "def test_native_padding(",
          "def test_native_padding_2(",
          "def test_trailing_padding(",
          "def test_native_padding_3(",
          "def test_padding_with_array_inside_struct(",
          "def test_byteorder_inside_struct(",
          "def test_intra_padding(",
          "def test_char_vs_string(",
          "def test_field_order(",
          "def test_unnamed_fields(",
          "def test_roundtrip(",
          "def test_roundtrip_half(",
          "def test_roundtrip_single_types(",
          "def test_roundtrip_scalar(",
          "def test_invalid_buffer_format(",
          "def test_export_simple_1d(",
          "def test_export_simple_nd(",
          "def test_export_discontiguous(",
          "def test_export_record(",
          "def test_export_subarray(",
          "def test_export_endian(",
          "def test_export_flags(",
          "def test_export_and_pickle_user_dtype(",
          "def test_repr_user_dtype(",
          "def test_padding(",
          "def test_reference_leak(",
          "def test_padded_struct_array(",
          "def test_relaxed_strides(self, c=np.ones((",
          "def test_out_of_order_fields(",
          "def test_max_dims(",
          "def test_error_pointer_type(",
          "def test_error_message_unsupported(",
          "def test_ctypes_integer_via_memoryview(",
          "def test_ctypes_struct_via_memoryview(",
          "def test_error_if_stored_buffer_info_is_corrupted(",
          "def test_no_suboffsets(",
          "def test_scalars(",
          "def test_compatible_cast(",
          "def test_buffer_interface(",
          "def test_array_interfaces(",
          "def test___array__(",
          "def test___array__copy_arg(",
          "def test___array__copy_once(",
          "def test__array__reference_leak(",
          "def test_order_mismatch(",
          "def test_striding_not_ok(",
          "def test_multiarray_writable_attributes_deletion(",
          "def test_multiarray_not_writable_attributes_deletion(",
          "def test_multiarray_flags_writable_attribute_deletion(",
          "def test_multiarray_flags_not_writable_attribute_deletion(",
          "def test_scalar_interface(",
          "def test_interface_no_shape(",
          "def test_array_interface_itemsize(",
          "def test_array_interface_empty_shape(",
          "def test_array_interface_offset(",
          "def test_array_interface_unicode_typestr(",
          "def test_flat_element_deletion(",
          "def test_scalar_element_deletion(",
          "def test_1darray(",
          "def test_2darray(",
          "def test_3darray(",
          "def test_array_scalar_relational_operation(",
          "def test_to_bool_scalar(",
          "def test_to_bool_scalar_not_convertible(",
          "def test_to_bool_scalar_size_errors(",
          "def test_to_int_scalar(",
          "def test_basic(",
          "def test_exotic(",
          "def test_ndim(",
          "def test_dtype_mix(",
          "def test_foreign(",
          "def test_error(",
          "def test_string(",
          "def test_empty_result(",
          "def test_largedim(",
          "def test_kwargs(",
          "def test_empty_array(",
          "def test_array_int32(",
          "def test_array_int64(",
          "def test_array_float32(",
          "def test_array_float64(",
          "def test_view(",
          "def test_reshape(",
          "def test_resize(",
          "def test_resize_structured(",
          "def test_error(",
          "def test_arrays_not_hashable(",
          "def test_collections_hashable(",
          "def test_ndarray_subclass(",
          "def test_ndarray_other(",
          "def test_subclass_subclass(",
          "def test_subclass_other(",
          "def test_empty_bstring_array_is_falsey(",
          "def test_whitespace_bstring_array_is_truthy(",
          "def test_all_null_bstring_array_is_falsey(",
          "def test_null_inside_bstring_array_is_truthy(",
          "def test_round_trip(",
          "def test_assign_scalar(",
          "def test_fill_scalar(",
          "def test_empty_ustring_array_is_falsey(",
          "def test_whitespace_ustring_array_is_truthy(",
          "def test_all_null_ustring_array_is_falsey(",
          "def test_null_inside_ustring_array_is_truthy(",
          "def test_0d(",
          "def test_1d_no_format(",
          "def test_1d_format(",
          "def test_ctypes_is_available(",
          "def test_ctypes_is_not_available(",
          "def test_ctypes_data_as_holds_reference(",
          "def test_ctypes_as_parameter_holds_reference(",
          "def test_argmax_with_out(",
          "def test_argmin_with_out(",
          "def test_insert_noncontiguous(",
          "def test_put_noncontiguous(",
          "def test_putmask_noncontiguous(",
          "def test_take_mode_raise(",
          "def test_choose_mod_raise(",
          "def test_flatiter__array__(",
          "def test_dot_out(",
          "def test_view_assign(",
          "def test_dealloc_warning(",
          "def test_view_discard_refcount(",
          "def test_infinite(",
          "def test_nan_step(",
          "def test_zero_step(",
          "def test_require_range(",
          "def test_start_stop_kwarg(",
          "def test_arange_booleans(",
          "def test_rejects_bad_dtypes(",
          "def test_rejects_strings(",
          "def test_byteswapped(",
          "def test_error_paths_and_promotion(",
          "def test_dtype_attribute_ignored(",
          "def test_dtype_coercion(",
          "def test_array_construction(",
          "def test_not_deprecated(",
          "def test_dt_tuple(",
          "def test_receives_base(",
          "def test_bad_finalize1(",
          "def test_bad_finalize2(",
          "def test_bad_finalize3(",
          "def test_lifetime_on_error(",
          "def test_can_use_super(",
          "def test_orderconverter_with_nonASCII_unicode_ordering(",
          "def test_equal_override(",
          "def test_equal_subclass_no_override(",
          "def test_no_loop_gives_all_true_or_false(",
          "def test_comparisons_forwards_error(",
          "def test_richcompare_scalar_boolean_singleton_return(",
          "def test_ragged_comparison_fails(",
          "def test_npymath_complex(",
          "def test_npymath_real(",
          "def test_uintalignment_and_alignment(",
          "def test_various_alignments(",
          "def test_strided_loop_alignments(",
          "def test_getfield(",
          "def test_smaller_dtype_multiple(",
          "def test_smaller_dtype_not_multiple(",
          "def test_larger_dtype_multiple(",
          "def test_larger_dtype_not_multiple(",
          "def test_f_contiguous(",
          "def test_non_c_contiguous(",
          "def test_sort_float(",
          "def test_sort_float16(",
          "def test_sort_int(",
          "def test_sort_uint(",
          "def test_private_get_ndarray_c_version(",
          "def test_argsort_float(",
          "def test_argsort_int(",
          "def test_sort_largearrays(",
          "def test_argsort_largearrays(",
          "def test_gh_22683(",
          "def test_gh_24459(",
          "def test_gh_28206(",
          "def test_partition_int(",
          "def test_partition_fp(",
          "def test_cannot_assign_data(",
          "def test_insufficient_width(",
          "def test_npy_char_raises(",
          "def test_device(",
          "def test_to_device(",
          "def test_array_interface_excess_dimensions_raises(",
          "def test_array_dunder_array_preserves_dtype_on_none("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multithreading.py": [
          "def test_parallel_randomstate_creation(",
          "def test_parallel_ufunc_execution(",
          "def test_temp_elision_thread_safety(",
          "def test_eigvalsh_thread_safety(",
          "def test_printoptions_thread_safety(",
          "def test_parallel_reduction(",
          "def test_parallel_flat_iterator(",
          "def test_multithreaded_repeat(",
          "def test_structured_advanced_indexing(",
          "def test_structured_threadsafety2(",
          "def test_stringdtype_multithreaded_access_and_mutation(",
          "def test_legacy_usertype_cast_init_thread_safety(",
          "def test_nonzero("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nditer.py": [
          "def test_iter_refcount(",
          "def test_iter_best_order(",
          "def test_iter_c_order(",
          "def test_iter_f_order(",
          "def test_iter_c_or_f_order(",
          "def test_nditer_multi_index_set(",
          "def test_nditer_multi_index_set_refcount(",
          "def test_iter_best_order_multi_index_1d(",
          "def test_iter_best_order_multi_index_2d(",
          "def test_iter_best_order_multi_index_3d(",
          "def test_iter_best_order_c_index_1d(",
          "def test_iter_best_order_c_index_2d(",
          "def test_iter_best_order_c_index_3d(",
          "def test_iter_best_order_f_index_1d(",
          "def test_iter_best_order_f_index_2d(",
          "def test_iter_best_order_f_index_3d(",
          "def test_iter_no_inner_full_coalesce(",
          "def test_iter_no_inner_dim_coalescing(",
          "def test_iter_dim_coalescing(",
          "def test_iter_broadcasting(",
          "def test_iter_itershape(",
          "def test_iter_broadcasting_errors(",
          "def test_iter_flags_errors(",
          "def test_iter_slice(",
          "def test_iter_assign_mapping(",
          "def test_iter_nbo_align_contig(",
          "def test_iter_array_cast(",
          "def test_iter_array_cast_errors(",
          "def test_iter_scalar_cast(",
          "def test_iter_scalar_cast_errors(",
          "def test_iter_object_arrays_basic(",
          "def test_iter_object_arrays_conversions(",
          "def test_iter_common_dtype(",
          "def test_iter_copy_if_overlap(",
          "def test_iter_op_axes(",
          "def test_iter_op_axes_errors(",
          "def test_iter_copy(",
          "def test_iter_copy_casts(",
          "def test_iter_copy_casts_structured(",
          "def test_iter_copy_casts_structured2(",
          "def test_iter_allocate_output_simple(",
          "def test_iter_allocate_output_buffered_readwrite(",
          "def test_iter_allocate_output_itorder(",
          "def test_iter_allocate_output_opaxes(",
          "def test_iter_allocate_output_types_promotion(",
          "def test_iter_allocate_output_types_byte_order(",
          "def test_iter_allocate_output_types_scalar(",
          "def test_iter_allocate_output_subtype(",
          "def test_iter_allocate_output_errors(",
          "def test_all_allocated(",
          "def test_iter_remove_axis(",
          "def test_iter_remove_multi_index_inner_loop(",
          "def test_iter_iterindex(",
          "def test_iter_iterrange(",
          "def test_iter_buffering(",
          "def test_iter_write_buffering(",
          "def test_iter_buffering_delayed_alloc(",
          "def test_iter_buffered_cast_simple(",
          "def test_iter_buffered_cast_byteswapped(",
          "def test_iter_buffered_cast_byteswapped_complex(",
          "def test_iter_buffered_cast_structured_type(",
          "def test_iter_buffered_cast_structured_type_failure_with_cleanup(",
          "def test_buffered_cast_error_paths(",
          "def test_buffered_cast_error_paths_unraisable(",
          "def test_iter_buffered_cast_subarray(",
          "def test_iter_buffering_badwriteback(",
          "def test_iter_buffering_string(",
          "def test_iter_buffering_growinner(",
          "def test_iter_contig_flag_reduce_error(",
          "def test_iter_contig_flag_single_operand_strides(",
          "def test_iter_contig_flag_incorrect(",
          "def test_iter_buffered_reduce_reuse(",
          "def test_iter_buffered_reduce_reuse_core(",
          "def test_iter_no_broadcast(",
          "def test_basic(",
          "def test_reorder(",
          "def test_flip_axes(",
          "def test_broadcast(",
          "def test_dtype_copy(",
          "def test_dtype_buffered(",
          "def test_0d(",
          "def test_iter_nested_iters_dtype_buffered(",
          "def test_iter_reduction_error(",
          "def test_iter_reduction(",
          "def test_iter_buffering_reduction(",
          "def test_iter_buffering_reduction_reuse_reduce_loops(",
          "def test_iter_writemasked_badinput(",
          "def test_iter_writemasked(",
          "def test_iter_writemasked_broadcast_error(",
          "def test_iter_writemasked_decref(",
          "def test_iter_non_writable_attribute_deletion(",
          "def test_iter_writable_attribute_deletion(",
          "def test_iter_element_deletion(",
          "def test_iter_allocated_array_dtypes(",
          "def test_0d_iter(",
          "def test_object_iter_cleanup(",
          "def test_object_iter_cleanup_reduce(",
          "def test_object_iter_cleanup_large_reduce(",
          "def test_iter_too_large(",
          "def test_iter_too_large_with_multiindex(",
          "def test_writebacks(",
          "def test_close_equivalent(",
          "def test_close_raises(",
          "def test_close_parameters(",
          "def test_warn_noclose(",
          "def test_partial_iteration_cleanup(",
          "def test_partial_iteration_error(",
          "def test_arbitrary_number_of_ops(",
          "def test_arbitrary_number_of_ops_nested(",
          "def test_arbitrary_number_of_ops_error(",
          "def test_debug_print("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nep50_promotions.py": [
          "def test_nep50_examples(",
          "def test_nep50_weak_integers(",
          "def test_nep50_weak_integers_with_inexact(",
          "def test_weak_promotion_scalar_path(",
          "def test_nep50_complex_promotion(",
          "def test_nep50_integer_conversion_errors(",
          "def test_nep50_with_axisconcatenator(",
          "def test_nep50_huge_integers(",
          "def test_nep50_in_concat_and_choose(",
          "def test_expected_promotion(",
          "def test_integer_comparison(",
          "def test_integer_comparison_with_cast(",
          "def test_integer_integer_comparison(",
          "def test_oob_creation("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numeric.py": [
          "def test_copies(",
          "def test_repeats(",
          "def test_zeroresize(",
          "def test_reshape_from_zero(",
          "def test_negative_resize(",
          "def test_unsigned_resize(",
          "def test_subclass(",
          "def test_choose(",
          "def test_clip(",
          "def test_compress(",
          "def test_count_nonzero(",
          "def test_diagonal(",
          "def test_mean(",
          "def test_ptp(",
          "def test_prod(",
          "def test_ravel(",
          "def test_repeat(",
          "def test_reshape(",
          "def test_reshape_shape_arg(",
          "def test_reshape_copy_arg(",
          "def test_round(",
          "def test_dunder_round(",
          "def test_dunder_round_edgecases(",
          "def test_dunder_round_accuracy(",
          "def test_round_py_consistency(",
          "def test_searchsorted(",
          "def test_size(",
          "def test_squeeze(",
          "def test_std(",
          "def test_swapaxes(",
          "def test_sum(",
          "def test_take(",
          "def test_trace(",
          "def test_transpose(",
          "def test_var(",
          "def test_std_with_mean_keyword(",
          "def test_var_with_mean_keyword(",
          "def test_std_with_mean_keyword_keepdims_false(",
          "def test_var_with_mean_keyword_keepdims_false(",
          "def test_std_with_mean_keyword_where_nontrivial(",
          "def test_var_with_mean_keyword_where_nontrivial(",
          "def test_std_with_mean_keyword_multiple_axis(",
          "def test_std_with_mean_keyword_axis_None(",
          "def test_std_with_mean_keyword_keepdims_true_masked(",
          "def test_var_with_mean_keyword_keepdims_true_masked(",
          "def test_isscalar(",
          "def test_logical(",
          "def test_bitwise_or(",
          "def test_bitwise_and(",
          "def test_bitwise_xor(",
          "def test_all_any(",
          "def test_logical_not_abs(",
          "def test_logical_and_or_xor(",
          "def test_float(",
          "def test_double(",
          "def test_default(",
          "def test_set(",
          "def test_divide_err(",
          "def test_floating_exceptions(",
          "def test_warnings(",
          "def test_coercion(",
          "def test_result_type(",
          "def test_promote_types_endian(",
          "def test_can_cast_and_promote_usertypes(",
          "def test_promote_types_strings(",
          "def test_invalid_void_promotion(",
          "def test_valid_void_promotion(",
          "def test_promote_identical_types_metadata(",
          "def test_promote_types_metadata(",
          "def test_can_cast(",
          "def test_can_cast_simple_to_structured(",
          "def test_can_cast_structured_to_simple(",
          "def test_can_cast_values(",
          "def test_can_cast_scalars(",
          "def test_types(",
          "def test_lengths(",
          "def test_values(",
          "def test_2592(",
          "def test_empty_not_structured(",
          "def test_growth_and_complicated_dtypes(",
          "def test_empty_result(",
          "def test_too_few_items(",
          "def test_failed_itemsetting(",
          "def test_nonzero_trivial(",
          "def test_nonzero_zerodim(",
          "def test_nonzero_onedim(",
          "def test_nonzero_twodim(",
          "def test_sparse(",
          "def test_nonzero_float_dtypes(",
          "def test_nonzero_integer_dtypes(",
          "def test_return_type(",
          "def test_count_nonzero_axis(",
          "def test_count_nonzero_axis_all_dtypes(",
          "def test_count_nonzero_axis_consistent(",
          "def test_countnonzero_axis_empty(",
          "def test_countnonzero_keepdims(",
          "def test_array_method(",
          "def test_nonzero_invalid_object(",
          "def test_nonzero_sideeffect_safety(",
          "def test_nonzero_sideffects_structured_void(",
          "def test_nonzero_exception_safe(",
          "def test_nonzero_byteorder(",
          "def test_count_nonzero_non_aligned_array(",
          "def test_boolean(",
          "def test_boolean_edgecase(",
          "def test_zero(",
          "def test_positive(",
          "def test_negative(",
          "def test_sufficient_width(",
          "def test_neg_width_boundaries(",
          "def test_large_neg_int64(",
          "def test_base3(",
          "def test_positive(",
          "def test_negative(",
          "def test_base_range(",
          "def test_minimal_signed_int(",
          "def _test_array_equal_parametrizations(",
          "def test_array_equal_equal_nan(",
          "def test_array_equal_different_scalar_types(",
          "def test_none_compares_elementwise(",
          "def test_array_equiv(",
          "def test_compare_unstructured_voids(",
          "def test_ones_pathological(",
          "def test_simple_double(",
          "def test_simple_int(",
          "def test_array_double(",
          "def test_simple_nonnative(",
          "def test_simple_complex(",
          "def test_clip_complex(",
          "def test_clip_non_contig(",
          "def test_simple_out(",
          "def test_simple_int32_inout(",
          "def test_simple_int64_out(",
          "def test_simple_int64_inout(",
          "def test_simple_int32_out(",
          "def test_simple_inplace_01(",
          "def test_simple_inplace_02(",
          "def test_noncontig_inplace(",
          "def test_type_cast_01(",
          "def test_type_cast_02(",
          "def test_type_cast_03(",
          "def test_type_cast_04(",
          "def test_type_cast_05(",
          "def test_type_cast_06(",
          "def test_type_cast_07(",
          "def test_type_cast_08(",
          "def test_type_cast_09(",
          "def test_type_cast_10(",
          "def test_type_cast_11(",
          "def test_type_cast_12(",
          "def test_clip_with_out_simple(",
          "def test_clip_with_out_simple2(",
          "def test_clip_with_out_simple_int32(",
          "def test_clip_with_out_array_int32(",
          "def test_clip_with_out_array_outint32(",
          "def test_clip_with_out_transposed(",
          "def test_clip_with_out_memory_overlap(",
          "def test_clip_inplace_array(",
          "def test_clip_inplace_simple(",
          "def test_clip_func_takes_out(",
          "def test_clip_nan(",
          "def test_object_clip(",
          "def test_clip_all_none(",
          "def test_clip_invalid_casting(",
          "def test_clip_value_min_max_flip(",
          "def test_clip_problem_cases(",
          "def test_clip_scalar_nan_propagation(",
          "def test_NaT_propagation(",
          "def test_clip_property(",
          "def test_clip_min_max_args(",
          "def test_out_of_bound_pyints(",
          "def test_ip_allclose(",
          "def test_ip_not_allclose(",
          "def test_no_parameter_modification(",
          "def test_min_int(",
          "def test_equalnan(",
          "def test_return_class_is_ndarray(",
          "def test_ip_isclose(",
          "def test_nep50_isclose(",
          "def test_ip_all_isclose(",
          "def test_ip_none_isclose(",
          "def test_ip_isclose_allclose(",
          "def test_equal_nan(",
          "def test_masked_arrays(",
          "def test_scalar_return(",
          "def test_no_parameter_modification(",
          "def test_non_finite_scalar(",
          "def test_timedelta(",
          "def test_tol_warnings(",
          "def test_basic(",
          "def test_scalars(",
          "def test_ddof1(",
          "def test_ddof2(",
          "def test_correction(",
          "def test_out_scalar(",
          "def test_basic(",
          "def test_scalars(",
          "def test_zeros(",
          "def test_ones(",
          "def test_empty(",
          "def test_full(",
          "def test_for_reference_leak(",
          "def test_ones_like(",
          "def test_zeros_like(",
          "def test_empty_like(",
          "def test_filled_like(",
          "def test_dtype_str_bytes(",
          "def test_float(",
          "def test_object(",
          "def test_no_overwrite(",
          "def test_complex(",
          "def test_zero_size(",
          "def test_mode(",
          "def test_object(",
          "def test_no_overwrite(",
          "def test_mode(",
          "def test_nd(",
          "def test_2D(",
          "def test_list(",
          "def test_roll1d(",
          "def test_roll2d(",
          "def test_roll_empty(",
          "def test_roll_unsigned_shift(",
          "def test_roll_big_int(",
          "def test_exceptions(",
          "def test_results(",
          "def test_move_to_end(",
          "def test_move_new_position(",
          "def test_preserve_order(",
          "def test_move_multiples(",
          "def test_errors(",
          "def test_array_likes(",
          "def test_2x2(",
          "def test_2x3(",
          "def test_3x3(",
          "def test_broadcasting(",
          "def test_broadcasting_shapes(",
          "def test_uint8_int32_mixed_dtypes(",
          "def test_zero_dimension(",
          "def test_outer_out_param(",
          "def test_simple(",
          "def test_single_input(",
          "def test_scalar_input(",
          "def test_sparse(",
          "def test_return_type(",
          "def test_require_each(",
          "def test_unknown_requirement(",
          "def test_non_array_input(",
          "def test_C_and_F_simul(",
          "def test_ensure_array(",
          "def test_preserve_subtype(",
          "def test_broadcast_in_args(",
          "def test_broadcast_single_arg(",
          "def test_number_of_arguments(",
          "def test_broadcast_error_kwargs(",
          "def test_shape_mismatch_error_message(",
          "def test_raise(",
          "def test_zero_dimension(",
          "def test_zero_dimensional(",
          "def test_astype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numerictypes.py": [
          "def test_zeros0D(",
          "def test_zerosSD(",
          "def test_zerosMD(",
          "def test_tuple(",
          "def test_list_of_tuple(",
          "def test_list_of_list_of_tuple(",
          "def test_access_fields(",
          "def test_access_top_fields(",
          "def test_nested1_acessors(",
          "def test_nested2_acessors(",
          "def test_nested1_descriptor(",
          "def test_nested2_descriptor(",
          "def test_assign(",
          "def test_no_tuple(",
          "def test_return(",
          "def test_both_abstract(",
          "def test_same(",
          "def test_subclass(",
          "def test_subclass_backwards(",
          "def test_sibling_class(",
          "def test_nondtype_nonscalartype(",
          "def test_isdtype(",
          "def test_isdtype_invalid_args(",
          "def test_sctypes_complete(",
          "def test_longdouble(",
          "def test_ulong(",
          "def test_int(",
          "def test_uint(",
          "def test_float(",
          "def test_complex(",
          "def test_other(",
          "def test_scalar_type(",
          "def test_other_type(",
          "def test_third_party_scalar_type(",
          "def test_array_instance(",
          "def test_abstract_type(",
          "def test_non_type(",
          "def test_issctype(",
          "def test_platform_dependent_aliases(",
          "def test_names_are_unique(",
          "def test_names_reflect_attributes(",
          "def test_names_are_undersood_by_dtype(",
          "def test_bool_definition("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_overrides.py": [
          "def test_ndarray(",
          "def test_ndarray_subclasses(",
          "def test_ndarray_and_duck_array(",
          "def test_ndarray_subclass_and_duck_array(",
          "def test_many_duck_arrays(",
          "def test_too_many_duck_arrays(",
          "def test_method(",
          "def test_no_wrapper(",
          "def test_wrong_arguments(",
          "def test_pickle(",
          "def test_name_and_docstring(",
          "def test_interface(",
          "def test_not_implemented(",
          "def test_where_dispatch(",
          "def test_verify_matching_signatures(",
          "def test_array_function_dispatch(",
          "def test_one_arg(",
          "def test_optional_args(",
          "def test_not_implemented(",
          "def test_signature_error_message_simple(",
          "def test_signature_error_message(",
          "def test_dispatcher_error(",
          "def test_properties(",
          "def test_bad_like_sig(",
          "def test_bad_like_passing(",
          "def test_too_many_args(",
          "def test_repr(",
          "def test_set_module(",
          "def test_inspect_sum(",
          "def test_override_sum(",
          "def test_sum_on_mock_array(",
          "def test_sum_forwarding_implementation(",
          "def test_array_like_not_implemented(",
          "def test_nep35_functions_as_array_functions(",
          "def test_array_like(",
          "def test_no_array_function_like(",
          "def test_subclass(",
          "def test_array_like_fromfile(",
          "def test_exception_handling(",
          "def test_like_as_none(",
          "def test_function_like("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_print.py": [
          "def test_float_types(",
          "def test_nan_inf_float(",
          "def test_complex_types(",
          "def test_complex_inf_nan(",
          "def _test_redirected_print(",
          "def test_float_type_print(",
          "def test_complex_type_print(",
          "def test_scalar_format(",
          "def test_locale_single(",
          "def test_locale_double(",
          "def test_locale_longdouble("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_protocols.py": [
          "def test_getattr_warning(",
          "def test_array_called("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_records.py": [
          "def test_fromrecords(",
          "def test_fromrecords_0len(",
          "def test_fromrecords_2d(",
          "def test_method_array(",
          "def test_method_array2(",
          "def test_recarray_slices(",
          "def test_recarray_fromarrays(",
          "def test_recarray_fromfile(",
          "def test_recarray_from_obj(",
          "def test_recarray_repr(",
          "def test_0d_recarray_repr(",
          "def test_recarray_from_repr(",
          "def test_recarray_views(",
          "def test_recarray_from_names(",
          "def test_recarray_conflict_fields(",
          "def test_fromrecords_with_explicit_dtype(",
          "def test_recarray_stringtypes(",
          "def test_recarray_returntypes(",
          "def test_zero_width_strings(",
          "def test_tofile_fromfile(",
          "def test_assignment1(",
          "def test_assignment2(",
          "def test_invalid_assignment(",
          "def test_nonwriteable_setfield(",
          "def test_out_of_order_fields(",
          "def test_pickle_1(",
          "def test_pickle_2(",
          "def test_pickle_3(",
          "def test_pickle_void(",
          "def test_objview_record(",
          "def test_record_scalar_setitem(",
          "def test_missing_field(",
          "def test_fromarrays_nested_structured_arrays(",
          "def test_assign_dtype_attribute(",
          "def test_nested_fields_are_records(",
          "def test_nested_dtype_padding(",
          "def test_find_duplicate("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_regression.py": [
          "def test_invalid_round(",
          "def test_mem_empty(",
          "def test_pickle_transposed(",
          "def test_dtype_names(",
          "def test_reduce(",
          "def test_zeros_order(",
          "def test_asarray_with_order(",
          "def test_ravel_with_order(",
          "def test_sort_bigendian(",
          "def test_negative_nd_indexing(",
          "def test_char_dump(",
          "def test_noncontiguous_fill(",
          "def test_bool(",
          "def test_indexing1(",
          "def test_indexing2(",
          "def test_round(",
          "def test_scalar_compare(",
          "def test_unicode_swapping(",
          "def test_object_array_fill(",
          "def test_mem_dtype_align(",
          "def test_endian_bool_indexing(",
          "def test_endian_where(",
          "def test_endian_recarray(",
          "def test_mem_dot(",
          "def test_arange_endian(",
          "def test_arange_inf_step(",
          "def test_arange_underflow_stop_and_step(",
          "def test_argmax(",
          "def test_mem_divmod(",
          "def test_hstack_invalid_dims(",
          "def test_squeeze_type(",
          "def test_add_identity(",
          "def test_numpy_float_python_long_addition(",
          "def test_binary_repr_0(",
          "def test_rec_iterate(",
          "def test_unicode_string_comparison(",
          "def test_tobytes_FORTRANORDER_discontiguous(",
          "def test_flat_assignment(",
          "def test_broadcast_flat_assignment(",
          "def test_nonarray_assignment(",
          "def test_unpickle_dtype_with_object(",
          "def test_mem_array_creation_invalid_specification(",
          "def test_recarray_single_element(",
          "def test_zero_sized_array_indexing(",
          "def test_chararray_rstrip(",
          "def test_object_array_shape(",
          "def test_mem_around(",
          "def test_character_array_strip(",
          "def test_lexsort(",
          "def test_lexsort_invalid_sequence(",
          "def test_lexsort_zerolen_custom_strides(",
          "def test_lexsort_zerolen_custom_strides_2d(",
          "def test_lexsort_invalid_axis(",
          "def test_lexsort_zerolen_element(",
          "def test_pickle_py2_bytes_encoding(",
          "def test_pickle_dtype(",
          "def test_swap_real(",
          "def test_object_array_from_list(",
          "def test_multiple_assign(",
          "def test_empty_array_type(",
          "def test_void_copyswap(",
          "def test_method_args(",
          "def test_mem_lexsort_strings(",
          "def test_fancy_index(",
          "def test_recarray_copy(",
          "def test_rec_fromarray(",
          "def test_object_array_assign(",
          "def test_ndmin_float64(",
          "def test_ndmin_order(",
          "def test_mem_axis_minimization(",
          "def test_mem_float_imag(",
          "def test_dtype_tuple(",
          "def test_dtype_posttuple(",
          "def test_numeric_carray_compare(",
          "def test_string_array_size(",
          "def test_dtype_repr(",
          "def test_reshape_order(",
          "def test_reshape_zero_strides(",
          "def test_reshape_zero_size(",
          "def test_reshape_trailing_ones_strides(",
          "def test_repeat_discont(",
          "def test_array_index(",
          "def test_object_argmax(",
          "def test_recarray_fields(",
          "def test_random_shuffle(",
          "def test_refcount_vdot(",
          "def test_startswith(",
          "def test_noncommutative_reduce_accumulate(",
          "def test_convolve_empty(",
          "def test_multidim_byteswap(",
          "def test_string_NULL(",
          "def test_junk_in_string_fields_of_recarray(",
          "def test_take_output(",
          "def test_take_object_fail(",
          "def test_array_str_64bit(",
          "def test_frompyfunc_endian(",
          "def test_mem_string_arr(",
          "def test_arr_transpose(",
          "def test_string_mergesort(",
          "def test_argmax_byteorder(",
          "def test_rand_seed(",
          "def test_mem_deallocation_leak(",
          "def test_mem_on_invalid_dtype(",
          "def test_dot_negative_stride(",
          "def test_object_casting(",
          "def test_unicode_scalar(",
          "def test_arange_non_native_dtype(",
          "def test_bool_flat_indexing_invalid_nr_elements(",
          "def test_mem_scalar_indexing(",
          "def test_binary_repr_0_width(",
          "def test_fromstring(",
          "def test_searchsorted_variable_length(",
          "def test_string_argsort_with_zeros(",
          "def test_string_sort_with_zeros(",
          "def test_copy_detection_zero_dim(",
          "def test_flat_byteorder(",
          "def test_sign_bit(",
          "def test_flat_index_byteswap(",
          "def test_copy_detection_corner_case(",
          "def test_object_array_refcounting(",
          "def test_mem_custom_float_to_array(",
          "def test_object_array_refcount_self_assign(",
          "def test_mem_fromiter_invalid_dtype_string(",
          "def test_reduce_big_object_array(",
          "def test_mem_0d_array_index(",
          "def test_nonnative_endian_fill(",
          "def test_dot_alignment_sse2(",
          "def test_astype_copy(",
          "def test_compress_small_type(",
          "def test_attributes(",
          "def test_recarray_tolist(",
          "def test_nonscalar_item_method(",
          "def test_char_array_creation(",
          "def test_unaligned_unicode_access(",
          "def test_sign_for_complex_nan(",
          "def test_for_equal_names(",
          "def test_for_object_scalar_creation(",
          "def test_array_resize_method_system_error(",
          "def test_for_zero_length_in_choose(",
          "def test_array_ndmin_overflow(",
          "def test_void_scalar_with_titles(",
          "def test_void_scalar_constructor(",
          "def test_blasdot_uninitialized_memory(",
          "def test_zeros(",
          "def test_huge_arange(",
          "def test_fromiter_bytes(",
          "def test_array_from_sequence_scalar_array(",
          "def test_array_from_sequence_scalar_array2(",
          "def test_array_too_big(",
          "def test_dtype_keyerrors_(",
          "def test_lexsort_buffer_length(",
          "def test_object_array_to_fixed_string(",
          "def test_unicode_to_string_cast(",
          "def test_unicode_to_string_cast_error(",
          "def test_mixed_string_byte_array_creation(",
          "def test_misaligned_objects_segfault(",
          "def test_misaligned_scalars_segfault(",
          "def test_misaligned_dot_product_objects(",
          "def test_byteswap_complex_scalar(",
          "def test_structured_arrays_with_objects1(",
          "def test_structured_arrays_with_objects2(",
          "def test_duplicate_title_and_name(",
          "def test_signed_integer_division_overflow(",
          "def test_type(",
          "def test_buffer_hashlib(",
          "def test_0d_string_scalar(",
          "def test_log1p_compiler_shenanigans(",
          "def test_fromiter_comparison(",
          "def test_fromstring_crash(",
          "def test_ticket_1539(",
          "def test_ticket_1538(",
          "def test_ticket_1434(",
          "def test_complex_nan_maximum(",
          "def test_subclass_int_tuple_assignment(",
          "def test_ufunc_no_unnecessary_views(",
          "def test_take_refcount(",
          "def test_fromfile_tofile_seeks(",
          "def test_complex_scalar_warning(",
          "def test_complex_scalar_complex_cast(",
          "def test_complex_boolean_cast(",
          "def test_uint_int_conversion(",
          "def test_duplicate_field_names_assign(",
          "def test_eq_string_and_object_array(",
          "def test_nonzero_byteswap(",
          "def test_empty_mul(",
          "def test_array_side_effect(",
          "def test_any_float(",
          "def test_large_float_sum(",
          "def test_ufunc_casting_out(",
          "def test_array_scalar_contiguous(",
          "def test_squeeze_contiguous(",
          "def test_squeeze_axis_handling(",
          "def test_reduce_contiguous(",
          "def test_object_array_self_reference(",
          "def test_object_array_circular_reference(",
          "def test_object_array_nested(",
          "def test_object_array_self_copy(",
          "def test_zerosize_accumulate(",
          "def test_objectarray_setfield(",
          "def test_setting_rank0_string(",
          "def test_string_astype(",
          "def test_ticket_1756(",
          "def test_fields_strides(",
          "def test_alignment_update(",
          "def test_ticket_1770(",
          "def test_ticket_1608(",
          "def test_pickle_string_overwrite(",
          "def test_pickle_bytes_overwrite(",
          "def test_pickle_py2_array_latin1_hack(",
          "def test_pickle_py2_scalar_latin1_hack(",
          "def test_structured_type_to_object(",
          "def test_assign_obj_listoflists(",
          "def test_memoryleak(",
          "def test_ufunc_reduce_memoryleak(",
          "def test_search_sorted_invalid_arguments(",
          "def test_string_truncation(",
          "def test_string_truncation_ucs2(",
          "def test_unique_stable(",
          "def test_unicode_alloc_dealloc_match(",
          "def test_refcount_error_in_clip(",
          "def test_searchsorted_wrong_dtype(",
          "def test_complex64_alignment(",
          "def test_structured_count_nonzero(",
          "def test_copymodule_preserves_f_contiguity(",
          "def test_fortran_order_buffer(",
          "def test_assign_from_sequence_error(",
          "def test_format_on_flex_array_element(",
          "def test_deepcopy_on_0d_array(",
          "def test_deepcopy_F_order_object_array(",
          "def test_deepcopy_empty_object_array(",
          "def test_bool_subscript_crash(",
          "def test_richcompare_crash(",
          "def test_richcompare_scalar_and_subclass(",
          "def test_pickle_empty_string(",
          "def test_frompyfunc_many_args(",
          "def test_repeat_broadcasting(",
          "def test_frompyfunc_nout_0(",
          "def test_leak_in_structured_dtype_comparison(",
          "def test_empty_percentile(",
          "def test_void_compare_segfault(",
          "def test_reshape_size_overflow(",
          "def test_invalid_structured_dtypes(",
          "def test_correct_hash_dict(",
          "def test_scalar_copy(",
          "def test_void_item_memview(",
          "def test_void_getitem(",
          "def test_structarray_title(",
          "def test_dtype_scalar_squeeze(",
          "def test_field_access_by_title(",
          "def test_pickle_module(",
          "def test_object_casting_errors(",
          "def test_eff1d_casting(",
          "def test_pickle_datetime64_array(",
          "def test_bad_array_interface(",
          "def test_2d__array__shape(",
          "def test_to_ctypes(",
          "def test_complex_conversion_error(",
          "def test__array_interface__descr(",
          "def test_dot_big_stride(",
          "def test_frompyfunc_name(",
          "def test_ufunc_order(",
          "def test_nonbool_logical(",
          "def test_gh_23737(",
          "def test_load_ufunc_pickle(",
          "def test__array_namespace__(",
          "def test_isin_refcnt_bug(",
          "def test_replace_regression(",
          "def test_logspace_base_does_not_determine_dtype(",
          "def test_vectorize_fixed_width_string(",
          "def test_repeated_square_consistency(",
          "def test_sort_unique_crash(",
          "def test_sort_overlap(",
          "def test_searchsorted_structured("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarbuffer.py": [
          "def test_scalar_match_array(",
          "def test_scalar_dim(",
          "def test_scalar_code_and_properties(",
          "def test_scalar_buffers_readonly(",
          "def test_void_scalar_structured_data(",
          "def test_datetime_memoryview(",
          "def test_str_ucs4(",
          "def test_user_scalar_fails_buffer("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarinherit.py": [
          "def test_init(",
          "def test_init2(",
          "def test_gh_15395(",
          "def test_int_repr(",
          "def test_char_radd(",
          "def test_char_repeat("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarmath.py": [
          "def test_types(",
          "def test_type_add(",
          "def test_type_create(",
          "def test_leak(",
          "def test_array_scalar_ufunc_equivalence(",
          "def test_array_scalar_ufunc_dtypes(",
          "def test_int_float_promotion_truediv(",
          "def test_blocked(",
          "def test_lower_align(",
          "def test_small_types(",
          "def test_large_types(",
          "def test_integers_to_negative_integer_power(",
          "def test_mixed_types(",
          "def test_modular_power(",
          "def test_modulus_basic(",
          "def test_float_modulus_exact(",
          "def test_float_modulus_roundoff(",
          "def test_float_modulus_corner_cases(",
          "def test_inplace_floordiv_handling(",
          "def test_comparision_different_types(",
          "def test_zero_division(",
          "def test_signed_zeros(",
          "def test_branches(",
          "def test_int_from_long(",
          "def test_iinfo_long_values(",
          "def test_int_raise_behaviour(",
          "def test_int_from_infinite_longdouble(",
          "def test_int_from_infinite_longdouble___int__(",
          "def test_int_from_huge_longdouble(",
          "def test_int_from_longdouble(",
          "def test_numpy_scalar_relational_operators(",
          "def test_scalar_comparison_to_none(",
          "def test_repr(",
          "def _test_type_repr(",
          "def test_float_repr(",
          "def test_equal_nbytes(",
          "def test_error(",
          "def test_seq_repeat(",
          "def test_no_seq_repeat_basic_array_like(",
          "def test_exceptions(",
          "def test_result(",
          "def test_exceptions(",
          "def test_result(",
          "def _test_abs_func(",
          "def test_builtin_abs(",
          "def test_numpy_abs(",
          "def test_shift_all_bits(",
          "def test_integer_hashes(",
          "def test_float_and_complex_hashes(",
          "def test_complex_hashes(",
          "def test_operator_object_left(",
          "def test_operator_object_right(",
          "def test_operator_scalars(",
          "def test_longdouble_operators_with_obj(",
          "def test_longdouble_with_arrlike(",
          "def test_longdouble_operators_with_large_int(",
          "def test_scalar_integer_operation_overflow(",
          "def test_scalar_signed_integer_overflow(",
          "def test_scalar_unsigned_integer_overflow(",
          "def test_scalar_integer_operation_divbyzero(",
          "def test_subclass_deferral(",
          "def test_longdouble_complex(",
          "def test_pyscalar_subclasses(",
          "def test_truediv_int(",
          "def test_scalar_matches_array_op_with_pyscalar("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarprint.py": [
          "def test_str(",
          "def test_scalar_cutoffs(",
          "def test_gh_28679(",
          "def test_legacy_2_2_mode(",
          "def test_dragon4(",
          "def test_dragon4_positional_interface(",
          "def test_dragon4_positional_interface_trim(",
          "def test_dragon4_positional_interface_overflow(",
          "def test_dragon4_scientific_interface(",
          "def test_ppc64_ibm_double_double128("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalar_ctors.py": [
          "def test_floating(",
          "def test_floating_overflow(",
          "def test_superclass(",
          "def test_datetime(",
          "def test_bool(",
          "def test_void(",
          "def test_intp(",
          "def test_uint64_from_negative(",
          "def _do_test(",
          "def test_integers(",
          "def test_reals(",
          "def test_complex(",
          "def test_complex_errors(",
          "def test_void_via_length(",
          "def test_void_from_byteslike(",
          "def test_void_arraylike_trumps_byteslike(",
          "def test_void_dtype_arg(",
          "def test_void_from_integer_with_dtype(",
          "def test_void_from_structure(",
          "def test_void_bad_dtype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalar_methods.py": [
          "def test_small(",
          "def test_simple_fractions(",
          "def test_errors(",
          "def test_against_known_values(",
          "def test_roundtrip(",
          "def test_special(",
          "def test_true(",
          "def test_false(",
          "def test_abc(",
          "def test_abc_complexfloating(",
          "def test_abc_complexfloating_subscript_tuple(",
          "def test_abc_non_numeric(",
          "def test_concrete(",
          "def test_subscript_tuple(",
          "def test_subscript_scalar(",
          "def test_small(",
          "def test_bit_count(",
          "def test_device(",
          "def test_to_device(",
          "def test___array_namespace__(",
          "def test_array_wrap("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_shape_base.py": [
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_3D_array(",
          "def test_r1array(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_3D_array(",
          "def test_r2array(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_3D_array(",
          "def test_non_iterable(",
          "def test_empty_input(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_generator(",
          "def test_casting_and_dtype(",
          "def test_casting_and_dtype_type_error(",
          "def test_non_iterable(",
          "def test_empty_input(",
          "def test_0D_array(",
          "def test_1D_array(",
          "def test_2D_array(",
          "def test_2D_array2(",
          "def test_generator(",
          "def test_casting_and_dtype(",
          "def test_casting_and_dtype_type_error(",
          "def test_returns_copy(",
          "def test_exceptions(",
          "def test_huge_list_error(",
          "def test_concatenate_axis_None(",
          "def test_large_concatenate_axis_None(",
          "def test_concatenate(",
          "def test_operator_concat(",
          "def test_bad_out_shape(",
          "def test_out_and_dtype(",
          "def test_dtype_with_promotion(",
          "def test_string_dtype_does_not_inspect(",
          "def test_subarray_error(",
          "def test_stack(",
          "def test_unstack(",
          "def test_stack_out_and_dtype(",
          "def test_returns_copy(",
          "def test_block_total_size_estimate(",
          "def test_block_simple_row_wise(",
          "def test_block_simple_column_wise(",
          "def test_block_with_1d_arrays_row_wise(",
          "def test_block_with_1d_arrays_multiple_rows(",
          "def test_block_with_1d_arrays_column_wise(",
          "def test_block_mixed_1d_and_2d(",
          "def test_block_complicated(",
          "def test_nested(",
          "def test_3d(",
          "def test_block_with_mismatched_shape(",
          "def test_no_lists(",
          "def test_invalid_nesting(",
          "def test_empty_lists(",
          "def test_tuple(",
          "def test_different_ndims(",
          "def test_different_ndims_depths(",
          "def test_block_memory_order(",
          "def test_block_dispatcher("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd.py": [
          "def test_operators_logical(",
          "def test_tobits(",
          "def test_pack(",
          "def test_operators_crosstest(",
          "def test_operators_shift(",
          "def test_arithmetic_subadd_saturated(",
          "def test_math_max_min(",
          "def test_reduce_max_min(",
          "def test_conversions(",
          "def test_conversions(",
          "def test_arithmetic_fused(",
          "def test_abs(",
          "def test_sqrt(",
          "def test_square(",
          "def test_rounding(",
          "def test_max_min(",
          "def test_reciprocal(",
          "def test_special_cases(",
          "def test_unary_invalid_fpexception(",
          "def test_comparison_with_nan(",
          "def test_operators_crosstest(",
          "def test_memory_load(",
          "def test_memory_store(",
          "def test_memory_partial_load(",
          "def test_memory_partial_store(",
          "def test_memory_noncont_load(",
          "def test_memory_noncont_partial_load(",
          "def test_memory_noncont_store(",
          "def test_memory_noncont_partial_store(",
          "def test_lut(",
          "def test_misc(",
          "def test_reorder(",
          "def test_reorder_rev64(",
          "def test_reorder_permi128(",
          "def test_operators_comparison(",
          "def test_operators_logical(",
          "def test_operators_crosstest(",
          "def test_conversion_boolean(",
          "def test_conversion_expand(",
          "def test_arithmetic_subadd(",
          "def test_arithmetic_mul(",
          "def test_arithmetic_div(",
          "def test_arithmetic_intdiv(",
          "def test_arithmetic_reduce_sum(",
          "def test_arithmetic_reduce_sumup(",
          "def test_mask_conditional("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd_module.py": [
          "def test_num_lanes(",
          "def test_type_name(",
          "def test_raises(",
          "def test_nomix(",
          "def test_unsigned_overflow(",
          "def test_signed_overflow(",
          "def test_truncate_f32(",
          "def test_compare("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_stringdtype.py": [
          "def test_dtype_creation(",
          "def test_dtype_equality(",
          "def test_dtype_repr(",
          "def test_create_with_na(",
          "def test_set_replace_na(",
          "def test_null_roundtripping(",
          "def test_string_too_large_error(",
          "def test_array_creation_utf8(",
          "def test_scalars_string_conversion(",
          "def test_self_casts(",
          "def test_unicode_casts(",
          "def test_void_casts(",
          "def test_bytes_casts(",
          "def test_additional_unicode_cast(",
          "def test_insert_scalar(",
          "def test_comparisons(",
          "def test_isnan(",
          "def test_pickle(",
          "def test_stdlib_copy(",
          "def test_sort(",
          "def test_sort(",
          "def test_nonzero(",
          "def test_where(",
          "def test_fancy_indexing(",
          "def test_creation_functions(",
          "def test_concatenate(",
          "def test_resize_method(",
          "def test_create_with_copy_none(",
          "def test_astype_copy_false(",
          "def test_argmax(",
          "def test_arrfuncs_zeros(",
          "def test_cast_to_bool(",
          "def test_cast_from_bool(",
          "def test_sized_integer_casts(",
          "def test_unsized_integer_casts(",
          "def test_float_casts(",
          "def test_float_nan_cast_na_object(",
          "def test_cfloat_casts(",
          "def test_take(",
          "def test_ufuncs_minmax(",
          "def test_max_regression(",
          "def test_ufunc_add(",
          "def test_ufunc_add_reduce(",
          "def test_add_promoter(",
          "def test_add_no_legacy_promote_with_signature(",
          "def test_add_promoter_reduce(",
          "def test_multiply_reduce(",
          "def test_multiply_two_string_raises(",
          "def test_ufunc_multiply(",
          "def test_findlike_promoters(",
          "def test_strip_promoter(",
          "def test_replace_promoter(",
          "def test_center_promoter(",
          "def test_datetime_timedelta_cast(",
          "def test_nat_casts(",
          "def test_nat_conversion(",
          "def test_growing_strings(",
          "def test_unary(",
          "def test_binary(",
          "def test_non_default_start_stop(",
          "def test_replace_non_default_repeat(",
          "def test_strip_ljust_rjust_consistency(",
          "def test_unset_na_coercion(",
          "def test_repeat(",
          "def test_accumulation(",
          "def test_setup(",
          "def test_empty(",
          "def test_zeros(",
          "def test_copy(",
          "def test_arena_use_with_setting(",
          "def test_arena_reuse_with_setting(",
          "def test_arena_reuse_after_missing(",
          "def test_arena_reuse_after_empty(",
          "def test_arena_reuse_for_shorter(",
          "def test_arena_reuse_if_possible(",
          "def test_arena_no_reuse_after_short("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_strings.py": [
          "def test_mixed_string_comparison_ufuncs_fail(",
          "def test_mixed_string_comparisons_ufuncs_with_cast(",
          "def test_string_comparisons(",
          "def test_string_comparisons_empty(",
          "def test_float_to_string_cast(",
          "def test_string_size_dtype_errors(",
          "def test_string_size_dtype_large_repr(",
          "def test_large_string_coercion_error(",
          "def test_large_string_addition_error(",
          "def test_large_string_cast(",
          "def test_add(",
          "def test_multiply(",
          "def test_multiply_raises(",
          "def test_inplace_multiply(",
          "def test_multiply_integer_dtypes(",
          "def test_isalpha(",
          "def test_isalnum(",
          "def test_isdigit(",
          "def test_isspace(",
          "def test_islower(",
          "def test_isupper(",
          "def test_istitle(",
          "def test_str_len(",
          "def test_find(",
          "def test_rfind(",
          "def test_count(",
          "def test_startswith(",
          "def test_endswith(",
          "def test_lstrip(",
          "def test_rstrip(",
          "def test_strip(",
          "def test_replace(",
          "def test_index(",
          "def test_index_raises(",
          "def test_rindex(",
          "def test_rindex_raises(",
          "def test_expandtabs(",
          "def test_expandtabs_raises_overflow(",
          "def test_center_raises_multiple_character_fill(",
          "def test_ljust_raises_multiple_character_fill(",
          "def test_rjust_raises_multiple_character_fill(",
          "def test_center(",
          "def test_ljust(",
          "def test_rjust(",
          "def test_zfill(",
          "def test_partition(",
          "def test_rpartition(",
          "def test_slice(",
          "def test_slice_unsupported(",
          "def test_slice_int_type_promotion(",
          "def test_isdecimal_unicode(",
          "def test_isnumeric_unicode(",
          "def test_replace_unicode(",
          "def test_isalnum_unicode(",
          "def test_islower_unicode(",
          "def test_isupper_unicode(",
          "def test_istitle_unicode(",
          "def test_index_unicode(",
          "def test_index_raises_unicode(",
          "def test_expandtabs(",
          "def test_center(",
          "def test_ljust(",
          "def test_rjust(",
          "def test_partition(",
          "def test_rpartition(",
          "def test_strip_functions_unicode(",
          "def test_slice(",
          "def test_center(",
          "def test_ljust(",
          "def test_rjust(",
          "def test_isdecimal_raises(",
          "def test_isnumeric_bytes(",
          "def test_replace_count_and_size(",
          "def test_replace_broadcasting(",
          "def test_override_function(",
          "def test_override_ufunc("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_ufunc.py": [
          "def test_kwarg_exact(",
          "def test_sig_signature(",
          "def test_sig_dtype(",
          "def test_extobj_removed(",
          "def test_unary_PyUFunc(",
          "def test_binary_PyUFunc(",
          "def test_unary_PyUFunc_O_O(",
          "def test_unary_PyUFunc_O_O_method_simple(",
          "def test_binary_PyUFunc_OO_O(",
          "def test_binary_PyUFunc_OO_O_method(",
          "def test_binary_PyUFunc_On_Om_method(",
          "def test_python_complex_conjugate(",
          "def test_unary_PyUFunc_O_O_method_full(",
          "def test_pickle(",
          "def test_pickle_withstring(",
          "def test_pickle_name_is_qualname(",
          "def test_reduceat_shifting_sum(",
          "def test_all_ufunc(",
          "def test_signature0(",
          "def test_signature1(",
          "def test_signature2(",
          "def test_signature3(",
          "def test_signature4(",
          "def test_signature5(",
          "def test_signature6(",
          "def test_signature7(",
          "def test_signature8(",
          "def test_signature9(",
          "def test_signature10(",
          "def test_signature_failure_extra_parenthesis(",
          "def test_signature_failure_mismatching_parenthesis(",
          "def test_signature_failure_signature_missing_input_arg(",
          "def test_signature_failure_signature_missing_output_arg(",
          "def test_get_signature(",
          "def test_forced_sig(",
          "def test_signature_all_None(",
          "def test_signature_dtype_type(",
          "def test_signature_dtype_instances_allowed(",
          "def test_partial_signature_mismatch(",
          "def test_partial_signature_mismatch_with_cache(",
          "def test_use_output_signature_for_all_arguments(",
          "def test_signature_errors(",
          "def test_forced_dtype_times(",
          "def test_cast_safety(",
          "def test_cast_safety_scalar(",
          "def test_cast_safety_scalar_special(",
          "def test_true_divide(",
          "def test_sum_stability(",
          "def test_sum(",
          "def test_sum_complex(",
          "def test_sum_initial(",
          "def test_sum_where(",
          "def test_vecdot(",
          "def test_matvec(",
          "def test_vecmatvec_identity(",
          "def test_vecdot_matvec_vecmat_complex(",
          "def test_vecdot_subclass(",
          "def test_vecdot_object_no_conjugate(",
          "def test_vecdot_object_breaks_outer_loop_on_error(",
          "def test_broadcast(",
          "def test_out_broadcasts(",
          "def test_out_broadcast_errors(",
          "def test_type_cast(",
          "def test_endian(",
          "def test_incontiguous_array(",
          "def test_output_argument(",
          "def test_output_ellipsis(",
          "def test_output_ellipsis_errors(",
          "def test_axes_argument(",
          "def test_axis_argument(",
          "def test_keepdims_argument(",
          "def test_innerwt(",
          "def test_innerwt_empty(",
          "def test_cross1d(",
          "def test_can_ignore_signature(",
          "def test_matrix_multiply(",
          "def test_matrix_multiply_umath_empty(",
          "def test_euclidean_pdist(",
          "def test_cumsum(",
          "def test_object_logical(",
          "def test_object_comparison(",
          "def test_object_array_reduction(",
          "def test_object_array_accumulate_inplace(",
          "def test_object_array_accumulate_failure(",
          "def test_object_array_reduceat_inplace(",
          "def test_object_array_reduceat_failure(",
          "def test_zerosize_reduction(",
          "def test_axis_out_of_bounds(",
          "def test_scalar_reduction(",
          "def test_casting_out_param(",
          "def test_where_param(",
          "def test_where_param_buffer_output(",
          "def test_where_param_alloc(",
          "def test_where_with_broadcasting(",
          "def test_identityless_reduction(",
          "def test_identityless_reduction_huge_array(",
          "def test_reduce_identity_depends_on_loop(",
          "def test_initial_reduction(",
          "def test_empty_reduction_and_identity(",
          "def test_reduction_with_where(",
          "def test_reduction_with_where_and_initial(",
          "def test_reduction_where_initial_needed(",
          "def test_identityless_reduction_nonreorderable(",
          "def test_reduce_zero_axis(",
          "def test_safe_casting(",
          "def test_ufunc_custom_out(",
          "def test_operand_flags(",
          "def test_struct_ufunc(",
          "def test_custom_ufunc(",
          "def test_custom_ufunc_forced_sig(",
          "def test_custom_array_like(",
          "def test_array_wrap_array_priority(",
          "def test_ufunc_at_basic(",
          "def test_ufunc_at_inner_loops(",
          "def test_ufunc_at_inner_loops_complex(",
          "def test_ufunc_at_ellipsis(",
          "def test_ufunc_at_negative(",
          "def test_ufunc_at_large(",
          "def test_cast_index_fastpath(",
          "def test_ufunc_at_scalar_value_fastpath(",
          "def test_ufunc_at_multiD(",
          "def test_ufunc_at_0D(",
          "def test_ufunc_at_dtypes(",
          "def test_ufunc_at_boolean(",
          "def test_ufunc_at_advanced(",
          "def test_at_negative_indexes(",
          "def test_at_not_none_signature(",
          "def test_at_no_loop_for_op(",
          "def test_at_output_casting(",
          "def test_at_broadcast_failure(",
          "def test_reduce_arguments(",
          "def test_structured_equal(",
          "def test_scalar_equal(",
          "def test_NotImplemented_not_returned(",
          "def test_logical_ufuncs_object_signatures(",
          "def test_logical_ufuncs_mixed_object_signatures(",
          "def test_logical_ufuncs_support_anything(",
          "def test_logical_ufuncs_supports_string(",
          "def test_logical_ufuncs_out_cast_check(",
          "def test_reducelike_byteorder_resolution(",
          "def test_reducelike_out_promotes(",
          "def test_reducelike_output_needs_identical_cast(",
          "def test_reduce_noncontig_output(",
          "def test_reduceat_and_accumulate_out_shape_mismatch(",
          "def test_reduce_wrong_dimension_output(",
          "def test_reduce_output_does_not_broadcast_input(",
          "def test_reduce_output_subclass_ok(",
          "def test_no_doc_string(",
          "def test_invalid_args(",
          "def test_nat_is_not_finite(",
          "def test_nat_is_nan(",
          "def test_nat_is_not_inf(",
          "def test_conv1d_full_without_out(",
          "def test_conv1d_full_with_out(",
          "def test_conv1d_full_basic_broadcast(",
          "def test_bad_out_shape(",
          "def test_bad_input_both_inputs_length_zero(",
          "def test_ufunc_types(",
          "def test_ufunc_noncontiguous(",
          "def test_ufunc_warn_with_nan(",
          "def test_ufunc_out_casterrors(",
          "def test_ufunc_input_casterrors(",
          "def test_ufunc_input_floatingpoint_error(",
          "def test_trivial_loop_invalid_cast(",
          "def test_reduce_casterrors(",
          "def test_object_reduce_cleanup_on_failure(",
          "def test_ufunc_methods_floaterrors(",
          "def test_addition_negative_zero(",
          "def test_addition_reduce_negative_zero(",
          "def test_addition_string_types(",
          "def test_addition_unicode_inverse_byte_order(",
          "def test_find_non_long_args(",
          "def test_find_access_past_buffer(",
          "def test_resolve_dtypes_basic(",
          "def test_resolve_dtypes_comparison(",
          "def test_weird_dtypes(",
          "def test_resolve_dtypes_reduction(",
          "def test_resolve_dtypes_reduction_no_output(",
          "def test_resolve_dtypes_errors(",
          "def test_resolve_dtypes_reduction_errors(",
          "def test_loop_access(",
          "def test__get_strided_loop_errors_bad_strides(",
          "def test__get_strided_loop_errors_bad_call_info(",
          "def test_long_arrays("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath.py": [
          "def test_pi(",
          "def test_e(",
          "def test_euler_gamma(",
          "def test_out_subok(",
          "def test_out_wrap_subok(",
          "def test_out_wrap_no_leak(",
          "def test_comparison_functions(",
          "def test_ignore_object_identity_in_equal(",
          "def test_ignore_object_identity_in_not_equal(",
          "def test_error_in_equal_reduce(",
          "def test_object_dtype(",
          "def test_object_nonbool_dtype_error(",
          "def test_large_integer_direct_comparison(",
          "def test_unsigned_signed_direct_comparison(",
          "def test_reduce_alignment(",
          "def test_division_int(",
          "def test_division_int_boundary(",
          "def test_division_int_reduce(",
          "def test_division_int_timedelta(",
          "def test_division_complex(",
          "def test_zero_division_complex(",
          "def test_floor_division_complex(",
          "def test_floor_division_signed_zero(",
          "def test_floor_division_errors(",
          "def test_floor_division_corner_cases(",
          "def test_remainder_basic(",
          "def test_float_remainder_exact(",
          "def test_float_remainder_roundoff(",
          "def test_float_divmod_errors(",
          "def test_float_remainder_errors(",
          "def test_float_remainder_overflow(",
          "def test_float_divmod_corner_cases(",
          "def test_float_remainder_corner_cases(",
          "def test_signed_division_overflow(",
          "def test_divide_by_zero(",
          "def test_overflows(",
          "def test_cbrt_scalar(",
          "def test_cbrt(",
          "def test_power_float(",
          "def test_power_complex(",
          "def test_power_zero(",
          "def test_zero_power_nonzero(",
          "def test_fast_power(",
          "def test_integer_power(",
          "def test_integer_power_with_integer_zero_exponent(",
          "def test_integer_power_of_1(",
          "def test_integer_power_of_zero(",
          "def test_integer_to_negative_power(",
          "def test_float_to_inf_power(",
          "def test_power_fast_paths(",
          "def test_type_conversion(",
          "def test_log2_values(",
          "def test_log2_ints(",
          "def test_log2_special(",
          "def test_exp2_values(",
          "def test_logaddexp2_values(",
          "def test_logaddexp2_range(",
          "def test_inf(",
          "def test_nan(",
          "def test_reduce(",
          "def test_log_values(",
          "def test_log_values_maxofdtype(",
          "def test_log_strides(",
          "def test_log_precision_float64(",
          "def test_log_precision_float32(",
          "def test_exp_values(",
          "def test_exp_strides(",
          "def test_exp_values(",
          "def test_exp_exceptions(",
          "def test_log_values(",
          "def test_sincos_values(",
          "def test_sincos_underflow(",
          "def test_sincos_errors(",
          "def test_sincos_overlaps(",
          "def test_sqrt_values(",
          "def test_abs_values(",
          "def test_square_values(",
          "def test_reciprocal_values(",
          "def test_tan(",
          "def test_arcsincos(",
          "def test_arctan(",
          "def test_sinh(",
          "def test_cosh(",
          "def test_tanh(",
          "def test_arcsinh(",
          "def test_arccosh(",
          "def test_arctanh(",
          "def test_exp2(",
          "def test_expm1(",
          "def test_unary_spurious_fpexception(",
          "def test_divide_spurious_fpexception(",
          "def test_fpclass(",
          "def test_fp_noncontiguous(",
          "def test_ldexp(",
          "def test_frexp(",
          "def test_avx_based_ufunc(",
          "def test_exp_float32(",
          "def test_log_float32(",
          "def test_sincos_float32(",
          "def test_strided_float32(",
          "def test_logaddexp_values(",
          "def test_logaddexp_range(",
          "def test_inf(",
          "def test_nan(",
          "def test_reduce(",
          "def test_log1p(",
          "def test_special(",
          "def test_expm1(",
          "def test_special(",
          "def test_complex(",
          "def test_simple(",
          "def test_reduce(",
          "def test_nan_outputs(",
          "def test_nan_outputs2(",
          "def test_no_fpe(",
          "def test_one_one(",
          "def test_zero_nzero(",
          "def test_zero_pzero(",
          "def test_zero_negative(",
          "def test_zero_positive(",
          "def test_positive_zero(",
          "def test_negative_zero(",
          "def test_any_ninf(",
          "def test_any_pinf(",
          "def test_inf_any(",
          "def test_inf_ninf(",
          "def test_inf_pinf(",
          "def test_nan_any(",
          "def test_ldexp(",
          "def test_ldexp_overflow(",
          "def test_reduce(",
          "def test_reduce_complex(",
          "def test_float_nans(",
          "def test_object_nans(",
          "def test_complex_nans(",
          "def test_object_array(",
          "def test_strided_array(",
          "def test_precision(",
          "def test_reduce(",
          "def test_reduce_complex(",
          "def test_float_nans(",
          "def test_object_nans(",
          "def test_complex_nans(",
          "def test_object_array(",
          "def test_strided_array(",
          "def test_precision(",
          "def test_reduce(",
          "def test_reduce_complex(",
          "def test_float_nans(",
          "def test_complex_nans(",
          "def test_precision(",
          "def test_reduce(",
          "def test_reduce_complex(",
          "def test_float_nans(",
          "def test_complex_nans(",
          "def test_precision(",
          "def test_exceptions(",
          "def test_truth_table_logical(",
          "def test_truth_table_bitwise(",
          "def test_reduce(",
          "def test_values(",
          "def test_types(",
          "def test_identity(",
          "def test_reduction(",
          "def test_bitwise_count(",
          "def test_logical_not(",
          "def test_floating_point(",
          "def test_degrees(",
          "def test_radians(",
          "def test_heaviside(",
          "def test_sign(",
          "def test_sign_complex(",
          "def test_sign_dtype_object(",
          "def test_sign_dtype_nan_object(",
          "def test_nan(",
          "def test_minmax_blocked(",
          "def test_lower_align(",
          "def test_reduce_reorder(",
          "def test_minimize_no_warns(",
          "def test_abs_neg_blocked(",
          "def test_lower_align(",
          "def test_noncontiguous(",
          "def test_valid(",
          "def test_invalid(",
          "def test_wrap(",
          "def test_wrap_out(",
          "def do_test(",
          "def test_wrap_with_iterable(",
          "def test_priority_with_scalar(",
          "def test_priority(",
          "def test_failing_wrap(",
          "def test_failing_out_wrap(",
          "def test_none_wrap(",
          "def test_default_prepare(",
          "def test_array_too_many_args(",
          "def test_ufunc_override(",
          "def test_ufunc_override_mro(",
          "def test_ufunc_override_methods(",
          "def test_ufunc_override_out(",
          "def test_ufunc_override_where(",
          "def test_ufunc_override_exception(",
          "def test_ufunc_override_not_implemented(",
          "def test_ufunc_override_disabled(",
          "def test_gufunc_override(",
          "def test_ufunc_override_with_super(",
          "def test_array_ufunc_direct_call(",
          "def test_ufunc_docstring(",
          "def test_mixed(",
          "def test_lcm(",
          "def test_lcm_object(",
          "def test_gcd(",
          "def test_gcd_object(",
          "def _test_lcm_inner(",
          "def _test_gcd_inner(",
          "def test_lcm_overflow(",
          "def test_gcd_overflow(",
          "def test_decimal(",
          "def test_float(",
          "def test_huge_integers(",
          "def test_inf_and_nan(",
          "def test_object_direct(",
          "def test_object_indirect(",
          "def test_fraction(",
          "def test_output_dtype(",
          "def test_it(",
          "def test_precisions_consistent(",
          "def test_branch_cuts(",
          "def test_branch_cuts_complex64(",
          "def test_against_cmath(",
          "def test_loss_of_precision(",
          "def test_promotion_corner_cases(",
          "def test_attributes(",
          "def test_doc(",
          "def test_subclass_op(",
          "def test_identity(",
          "def test_copysign(",
          "def _test_nextafter(",
          "def test_nextafter(",
          "def test_nextafterf(",
          "def test_nextafterl(",
          "def test_nextafter_0(",
          "def _test_spacing(",
          "def test_spacing(",
          "def test_spacingf(",
          "def test_spacingl(",
          "def test_spacing_gfortran(",
          "def test_nextafter_vs_spacing(",
          "def test_pos_nan(",
          "def test_reduceat(",
          "def test_reduceat_empty(",
          "def test_complex_nan_comparisons(",
          "def test_rint_big_int(",
          "def test_memoverlap_accumulate(",
          "def test_memoverlap_accumulate_cmp(",
          "def test_memoverlap_accumulate_symmetric(",
          "def test_signaling_nan_exceptions(",
          "def test_outer_subclass_preserve(",
          "def test_outer_bad_subclass(",
          "def test_outer_exceeds_maxdims(",
          "def test_bad_legacy_ufunc_silent_errors(",
          "def test_bad_legacy_gufunc_silent_errors(",
          "def test_add_same_docstring(",
          "def test_different_docstring_fails(",
          "def test_ufunc_arg(",
          "def test_string_arg("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_accuracy.py": [
          "def test_validate_transcendentals(",
          "def test_validate_fp16_transcendentals(",
          "def test_validate_svml_fp16("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_complex.py": [
          "def test_simple(",
          "def test_special_values(",
          "def test_special_values2(",
          "def test_simple(",
          "def test_special_values(",
          "def test_simple(",
          "def test_simple_conjugate(",
          "def test_branch_cut(",
          "def test_special_values(",
          "def test_simple(",
          "def test_scalar(",
          "def test_array(",
          "def test_simple(",
          "def test_fabs(",
          "def test_cabs_inf_nan(",
          "def test_simple(",
          "def test_zero(",
          "def test_branch_cuts(",
          "def test_special_values(",
          "def test_array(",
          "def test_array(",
          "def test_array("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_unicode.py": [
          "def test_string_cast(",
          "def test_zeros0D(",
          "def test_zerosSD(",
          "def test_zerosMD(",
          "def test_values0D(",
          "def test_valuesSD(",
          "def test_valuesMD(",
          "def test_values0D(",
          "def test_valuesSD(",
          "def test_valuesMD(",
          "def test_values0D(",
          "def test_valuesSD(",
          "def test_valuesMD(",
          "def test_values_cast(",
          "def test_values_updowncast("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test__exceptions.py": [
          "def test_pickling(",
          "def test_str(",
          "def test__size_to_string(",
          "def test__total_size(",
          "def test_pickling(",
          "def test_attr(",
          "def test_pickling("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_pyinstaller\\tests\\test_pyinstaller.py": [
          "def test_pyinstaller("
        ],
        ".venv\\Lib\\site-packages\\pandas\\conftest.py": [
          "def pytest_addoption(",
          "def ignore_doctest_warning(",
          "def pytest_collection_modifyitems(",
          "def add_doctest_imports(",
          "def configure_tests(",
          "def tests_path(",
          "def tests_io_data_path(",
          "def test_something(",
          "def fsspectest("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\expressions.py": [
          "def set_test_mode(",
          "def _store_test_result(",
          "def get_test_result("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_aggregation.py": [
          "def test_maybe_mangle_lambdas_passthrough(",
          "def test_maybe_mangle_lambdas_listlike(",
          "def test_maybe_mangle_lambdas(",
          "def test_maybe_mangle_lambdas_args(",
          "def test_maybe_mangle_lambdas_named(",
          "def test_make_unique("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_algos.py": [
          "def test_factorize(",
          "def test_series_factorize_use_na_sentinel_false(",
          "def test_basic(",
          "def test_mixed(",
          "def test_factorize_datetime64(",
          "def test_factorize_period(",
          "def test_factorize_timedelta(",
          "def test_factorize_nan(",
          "def test_factorizer_with_mask(",
          "def test_factorizer_object_with_nan(",
          "def test_factorize_tuple_list(",
          "def test_complex_sorting(",
          "def test_numeric_dtype_factorize(",
          "def test_float64_factorize(",
          "def test_uint64_factorize(",
          "def test_int64_factorize(",
          "def test_string_factorize(",
          "def test_object_factorize(",
          "def test_datetime64_factorize(",
          "def test_factorize_rangeindex(",
          "def test_factorize_rangeindex_decreasing(",
          "def test_deprecate_order(",
          "def test_parametrized_factorize_na_value_default(",
          "def test_parametrized_factorize_na_value(",
          "def test_factorize_use_na_sentinel(",
          "def test_object_factorize_use_na_sentinel_false(",
          "def test_int_factorize_use_na_sentinel_false(",
          "def test_factorize_mixed_values(",
          "def test_ints(",
          "def test_objects(",
          "def test_object_refcount_bug(",
          "def test_on_index_object(",
          "def test_dtype_preservation(",
          "def test_datetime64_dtype_array_returned(",
          "def test_datetime_non_ns(",
          "def test_timedelta_non_ns(",
          "def test_timedelta64_dtype_array_returned(",
          "def test_uint64_overflow(",
          "def test_nan_in_object_array(",
          "def test_categorical(",
          "def test_datetime64tz_aware(",
          "def test_order_of_appearance(",
          "def test_tuple_with_strings(",
          "def test_obj_none_preservation(",
          "def test_signed_zero(",
          "def test_different_nans(",
          "def test_first_nan_kept(",
          "def test_do_not_mangle_na_values(",
          "def test_unique_masked(",
          "def test_nunique_ints(",
          "def test_invalid(",
          "def test_basic(",
          "def test_i8(",
          "def test_isin_datetimelike_values_numeric_comps(",
          "def test_large(",
          "def test_categorical_from_codes(",
          "def test_categorical_isin(",
          "def test_same_nan_is_in(",
          "def test_same_nan_is_in_large(",
          "def test_same_nan_is_in_large_series(",
          "def test_same_object_is_in(",
          "def test_different_nans(",
          "def test_no_cast(",
          "def test_empty(",
          "def test_different_nan_objects(",
          "def test_different_nans_as_float64(",
          "def test_isin_int_df_string_search(",
          "def test_isin_nan_df_string_search(",
          "def test_isin_float_df_string_search(",
          "def test_isin_unsigned_dtype(",
          "def test_value_counts(",
          "def test_value_counts_bins(",
          "def test_value_counts_dtypes(",
          "def test_value_counts_nat(",
          "def test_value_counts_datetime_outofbounds(",
          "def test_categorical(",
          "def test_categorical_nans(",
          "def test_categorical_zeroes(",
          "def test_value_counts_dropna(",
          "def test_value_counts_normalized(",
          "def test_value_counts_uint64(",
          "def test_value_counts_series(",
          "def test_duplicated_with_nas(",
          "def test_numeric_object_likes(",
          "def test_datetime_likes(",
          "def test_unique_index(",
          "def test_unique_tuples(",
          "def test_unique_complex_numbers(",
          "def test_hashtable_unique(",
          "def test_hashtable_factorize(",
          "def test_scipy_compat(",
          "def test_basic(",
          "def test_uint64_overflow(",
          "def test_too_many_ndims(",
          "def test_pct_max_many_rows(",
          "def test_pad_backfill_object_segfault(",
          "def test_backfill(",
          "def test_pad(",
          "def test_is_lexsorted(",
          "def test_groupsort_indexer(",
          "def test_infinity_sort(",
          "def test_infinity_against_nan(",
          "def test_ensure_platform_int(",
          "def test_int64_add_overflow(",
          "def test_no_mode(",
          "def test_mode_single(",
          "def test_mode_obj_int(",
          "def test_number_mode(",
          "def test_strobj_mode(",
          "def test_strobj_multi_char(",
          "def test_datelike_mode(",
          "def test_timedelta_mode(",
          "def test_mixed_dtype(",
          "def test_uint64_overflow(",
          "def test_categorical(",
          "def test_index(",
          "def test_ser_mode_with_name(",
          "def test_diff_datetimelike_nat(",
          "def test_diff_ea_axis(",
          "def test_diff_low_precision_int(",
          "def test_union_with_duplicates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_common.py": [
          "def test_get_callable_name(",
          "def test_any_none(",
          "def test_all_not_none(",
          "def test_random_state(",
          "def test_maybe_match_name(",
          "def test_standardize_mapping(",
          "def test_git_version(",
          "def test_version_tag(",
          "def test_serializable(",
          "def test_non_bool_array_with_na(",
          "def test_list_subclass(",
          "def test_frozenlist(",
          "def test_temp_setattr(",
          "def test_str_size(",
          "def test_bz2_missing_import("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_downstream.py": [
          "def test_dask(",
          "def test_dask_ufunc(",
          "def test_construct_dask_float_array_int_dtype_match_ndarray(",
          "def test_xarray(",
          "def test_xarray_cftimeindex_nearest(",
          "def test_oo_optimizable(",
          "def test_oo_optimized_datetime_index_unpickle(",
          "def test_statsmodels(",
          "def test_scikit_learn(",
          "def test_seaborn(",
          "def test_pandas_gbq(",
          "def test_pandas_datareader(",
          "def test_pyarrow(",
          "def test_yaml_dump(",
          "def test_missing_required_dependency(",
          "def test_frame_setitem_dask_array_into_new_col(",
          "def test_pandas_priority(",
          "def test_from_obscure_array(",
          "def test_dataframe_consortium(",
          "def test_xarray_coerce_unit("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_errors.py": [
          "def test_exception_importable(",
          "def test_catch_oob(",
          "def test_catch_undefined_variable_error(",
          "def test_AbstractMethodError_classmethod("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_expressions.py": [
          "def test_run_arithmetic(",
          "def test_run_binary(",
          "def test_invalid(",
          "def test_binary_ops(",
          "def testit(",
          "def test_comparison_ops(",
          "def testit(",
          "def test_where(",
          "def testit(",
          "def test_bool_ops_raise_on_arithmetic(",
          "def test_bool_ops_warn_on_arithmetic(",
          "def test_bool_ops_column_name_dtype(",
          "def test_frame_series_axis(",
          "def test_python_semantics_with_numexpr_installed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_flags.py": [
          "def test_equality(",
          "def test_set(",
          "def test_repr(",
          "def test_obj_ref(",
          "def test_getitem("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_multilevel.py": [
          "def test_reindex_level(",
          "def test_reindex(",
          "def test_reindex_preserve_levels(",
          "def test_groupby_transform(",
          "def test_groupby_corner(",
          "def test_groupby_level_no_obs(",
          "def test_setitem_with_expansion_multiindex_columns(",
          "def test_alignment(",
          "def test_groupby_multilevel(",
          "def test_multilevel_consolidate(",
          "def test_level_with_tuples(",
          "def test_reindex_level_partial_selection(",
          "def test_empty_frame_groupby_dtypes_consistency(",
          "def test_duplicate_groupby_issues(",
          "def test_subsets_multiindex_dtype(",
          "def test_datetime_object_multiindex(",
          "def test_multiindex_with_na(",
          "def test_sort_non_lexsorted("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_nanops.py": [
          "def test_nan_funcs(",
          "def test_nansum(",
          "def test_nanmean(",
          "def test_nanmedian(",
          "def test_nanvar(",
          "def test_nanstd(",
          "def test_nansem(",
          "def test_nanops_with_warnings(",
          "def test_nanargmax(",
          "def test_nanargmin(",
          "def test_nanskew(",
          "def test_nankurt(",
          "def test_nanprod(",
          "def test_nancorr(",
          "def test_nancorr_pearson(",
          "def test_nancorr_kendall(",
          "def test_nancorr_spearman(",
          "def test_invalid_method(",
          "def test_nancov(",
          "def test_has_infs_non_float(",
          "def test_has_infs_floats(",
          "def test_bn_ok_dtype(",
          "def test_bn_not_ok_dtype(",
          "def test_numeric_values(",
          "def test_ndarray(",
          "def test_convertable_values(",
          "def test_non_convertable_values(",
          "def test_nanvar_all_finite(",
          "def test_nanvar_nans(",
          "def test_nanstd_nans(",
          "def test_nanvar_axis(",
          "def test_nanvar_ddof(",
          "def test_ground_truth(",
          "def test_nanstd_roundoff(",
          "def test_constant_series(",
          "def test_all_finite(",
          "def test_ground_truth(",
          "def test_axis(",
          "def test_nans(",
          "def test_nans_skipna(",
          "def test_constant_series(",
          "def test_all_finite(",
          "def test_ground_truth(",
          "def test_axis(",
          "def test_nans(",
          "def test_nans_skipna(",
          "def test_nanmean(",
          "def test_nanmean_skipna_false(",
          "def test_use_bottleneck(",
          "def test_numpy_ops(",
          "def test_nanops_independent_of_mask_param(",
          "def test_check_below_min_count_negative_or_zero_min_count(",
          "def test_check_below_min_count_positive_min_count(",
          "def test_check_below_min_count_large_shape(",
          "def test_check_bottleneck_disallow(",
          "def test_nanmean_overflow(",
          "def test_returned_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_optional_dependency.py": [
          "def test_import_optional(",
          "def test_xlrd_version_fallback(",
          "def test_bad_version(",
          "def test_submodule(",
          "def test_no_version_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_register_accessor.py": [
          "def test_dirname_mixin(",
          "def test_register(",
          "def test_accessor_works(",
          "def test_overwrite_warns(",
          "def test_raises_attribute_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_sorting.py": [
          "def test_int64_overflow(",
          "def test_int64_overflow_groupby_large_range(",
          "def test_int64_overflow_groupby_large_df_shuffled(",
          "def test_lexsort_indexer(",
          "def test_nargsort(",
          "def test_int64_overflow_outer_merge(",
          "def test_int64_overflow_check_sum_col(",
          "def test_int64_overflow_how_merge(",
          "def test_int64_overflow_sort_false_order(",
          "def test_int64_overflow_one_to_many_none_match(",
          "def test_decons(",
          "def test_basic_sort(",
          "def test_codes(",
          "def test_codes_out_of_bound(",
          "def test_mixed_integer(",
          "def test_mixed_integer_with_codes(",
          "def test_unsortable(",
          "def test_exceptions(",
          "def test_extension_array(",
          "def test_extension_array_codes(",
          "def test_mixed_str_null(",
          "def test_safe_sort_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_take.py": [
          "def test_1d_fill_nonna(",
          "def test_2d_fill_nonna(",
          "def test_3d_fill_nonna(",
          "def test_1d_other_dtypes(",
          "def test_2d_other_dtypes(",
          "def test_1d_bool(",
          "def test_2d_bool(",
          "def test_2d_float32(",
          "def test_2d_datetime64(",
          "def test_take_axis_0(",
          "def test_take_axis_1(",
          "def test_take_non_hashable_fill_value(",
          "def test_bounds_check_large(",
          "def test_bounds_check_small(",
          "def test_take_empty(",
          "def test_take_na_empty(",
          "def test_take_coerces_list("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_api.py": [
          "def test_api(",
          "def test_api_all(",
          "def test_depr(",
          "def test_api(",
          "def test_api_typing(",
          "def test_api_types(",
          "def test_api_interchange(",
          "def test_api_indexers(",
          "def test_api_extensions(",
          "def test_testing(",
          "def test_util_in_top_level(",
          "def test_pandas_array_alias("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_types.py": [
          "def test_types(",
          "def test_deprecated_from_api_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply.py": [
          "def test_apply(",
          "def test_apply_args(",
          "def test_apply_categorical_func(",
          "def test_apply_axis1_with_ea(",
          "def test_agg_axis1_duplicate_index(",
          "def test_apply_mixed_datetimelike(",
          "def test_apply_empty(",
          "def test_apply_float_frame(",
          "def test_apply_empty_except_index(",
          "def test_apply_with_reduce_empty(",
          "def test_apply_funcs_over_empty(",
          "def test_nunique_empty(",
          "def test_apply_standard_nonunique(",
          "def test_apply_broadcast_scalars(",
          "def test_apply_broadcast_scalars_axis1(",
          "def test_apply_broadcast_lists_columns(",
          "def test_apply_broadcast_lists_index(",
          "def test_apply_broadcast_list_lambda_func(",
          "def test_apply_broadcast_series_lambda_func(",
          "def test_apply_raw_float_frame(",
          "def test_apply_raw_float_frame_lambda(",
          "def test_apply_raw_float_frame_no_reduction(",
          "def test_apply_raw_mixed_type_frame(",
          "def test_apply_axis1(",
          "def test_apply_mixed_dtype_corner(",
          "def test_apply_mixed_dtype_corner_indexing(",
          "def test_apply_empty_infer_type(",
          "def test_apply_empty_infer_type_broadcast(",
          "def test_apply_with_args_kwds_add_some(",
          "def test_apply_with_args_kwds_agg_and_add(",
          "def test_apply_with_args_kwds_subtract_and_divide(",
          "def test_apply_yield_list(",
          "def test_apply_reduce_Series(",
          "def test_apply_reduce_to_dict(",
          "def test_apply_differently_indexed(",
          "def test_apply_bug(",
          "def test_apply_convert_objects(",
          "def test_apply_attach_name(",
          "def test_apply_attach_name_axis1(",
          "def test_apply_attach_name_non_reduction(",
          "def test_apply_attach_name_non_reduction_axis1(",
          "def test_apply_multi_index(",
          "def test_apply_dict(",
          "def test_apply_non_numpy_dtype(",
          "def test_apply_non_numpy_dtype_category(",
          "def test_apply_dup_names_multi_agg(",
          "def test_apply_nested_result_axis_1(",
          "def test_apply_noreduction_tzaware_object(",
          "def test_apply_function_runs_once(",
          "def test_apply_raw_function_runs_once(",
          "def test_apply_with_byte_string(",
          "def test_apply_category_equalness(",
          "def test_infer_row_shape(",
          "def test_dictlike_lambda(",
          "def test_dictlike_lambda_raises(",
          "def test_with_dictlike_columns(",
          "def test_with_dictlike_columns_with_datetime(",
          "def test_with_dictlike_columns_with_infer(",
          "def test_listlike_lambda(",
          "def test_listlike_lambda_raises(",
          "def test_with_listlike_columns(",
          "def test_with_listlike_columns_returning_list(",
          "def test_infer_output_shape_columns(",
          "def test_infer_output_shape_listlike_columns(",
          "def test_infer_output_shape_listlike_columns_np_func(",
          "def test_infer_output_shape_listlike_columns_with_timestamp(",
          "def test_consistent_coerce_for_shapes(",
          "def test_consistent_names(",
          "def test_result_type(",
          "def test_result_type_shorter_list(",
          "def test_result_type_broadcast(",
          "def test_result_type_broadcast_series_func(",
          "def test_result_type_series_result(",
          "def test_result_type_series_result_other_index(",
          "def test_consistency_for_boxed(",
          "def test_agg_transform(",
          "def test_demo(",
          "def test_demo_dict_agg(",
          "def test_agg_with_name_as_column_name(",
          "def test_agg_multiple_mixed(",
          "def test_agg_multiple_mixed_raises(",
          "def test_agg_reduce(",
          "def test_nuiscance_columns(",
          "def test_non_callable_aggregates(",
          "def test_size_as_str(",
          "def test_agg_listlike_result(",
          "def test_agg_args_kwargs(",
          "def test_frequency_is_original(",
          "def test_apply_datetime_tz_issue(",
          "def test_mixed_column_raises(",
          "def test_apply_dtype(",
          "def test_apply_mutating(",
          "def test_apply_empty_list_reduce(",
          "def test_apply_no_suffix_index(",
          "def test_apply_raw_returns_string(",
          "def test_aggregation_func_column_order(",
          "def test_apply_getitem_axis_1(",
          "def test_nuisance_depr_passes_through_warnings(",
          "def test_apply_type(",
          "def test_apply_on_empty_dataframe(",
          "def test_apply_return_list(",
          "def test_unique_agg_type_is_series(",
          "def test_any_apply_keyword_non_zero_axis_regression(",
          "def test_agg_mapping_func_deprecated(",
          "def test_agg_std(",
          "def test_agg_dist_like_and_nonunique_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply_relabeling.py": [
          "def test_agg_relabel(",
          "def test_agg_relabel_multi_columns_multi_methods(",
          "def test_agg_relabel_partial_functions(",
          "def test_agg_namedtuple(",
          "def test_reconstruct_func("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_transform.py": [
          "def test_transform_ufunc(",
          "def test_transform_listlike(",
          "def test_transform_empty_listlike(",
          "def test_transform_listlike_func_with_args(",
          "def test_transform_dictlike(",
          "def test_transform_dictlike_mixed(",
          "def test_transform_empty_dictlike(",
          "def test_transform_udf(",
          "def test_transform_bad_dtype(",
          "def test_transform_failure_typeerror(",
          "def test_transform_failure_valueerror(",
          "def test_transform_passes_args(",
          "def test_transform_empty_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_invalid_arg.py": [
          "def test_result_type_error(",
          "def test_apply_invalid_axis_value(",
          "def test_agg_raises(",
          "def test_map_with_invalid_na_action_raises(",
          "def test_map_arg_is_dict_with_invalid_na_action_raises(",
          "def test_nested_renamer(",
          "def test_series_nested_renamer(",
          "def test_apply_dict_depr(",
          "def test_dict_nested_renaming_depr(",
          "def test_missing_column(",
          "def test_transform_mixed_column_name_dtypes(",
          "def test_apply_str_axis_1_raises(",
          "def test_transform_axis_1_raises(",
          "def test_apply_modify_traceback(",
          "def test_agg_cython_table_raises_frame(",
          "def test_agg_cython_table_raises_series(",
          "def test_agg_none_to_type(",
          "def test_transform_none_to_type(",
          "def test_apply_broadcast_error(",
          "def test_transform_and_agg_err_agg(",
          "def test_transform_and_agg_err_series(",
          "def test_transform_wont_agg_frame(",
          "def test_transform_wont_agg_series(",
          "def test_transform_reducer_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply.py": [
          "def test_series_map_box_timedelta(",
          "def test_apply(",
          "def test_apply_map_same_length_inference_bug(",
          "def test_apply_convert_dtype_deprecated(",
          "def test_apply_args(",
          "def test_agg_args(",
          "def test_agg_mapping_func_deprecated(",
          "def test_series_apply_map_box_timestamps(",
          "def test_apply_box(",
          "def test_apply_datetimetz(",
          "def test_apply_categorical(",
          "def test_apply_categorical_with_nan_values(",
          "def test_apply_empty_integer_series_with_datetime_index(",
          "def test_apply_dataframe_iloc(",
          "def test_transform(",
          "def test_transform_partial_failure(",
          "def test_transform_partial_failure_valueerror(",
          "def test_demo(",
          "def test_apply_map_evaluate_lambdas_the_same(",
          "def test_agg_evaluate_lambdas(",
          "def test_with_nested_series(",
          "def test_replicate_describe(",
          "def test_reduce(",
          "def test_non_callable_aggregates(",
          "def test_series_apply_no_suffix_index(",
          "def test_apply_series_on_date_time_index_aware_series(",
          "def test_apply_scalar_on_date_time_index_aware_series(",
          "def test_apply_to_timedelta(",
          "def test_apply_listlike_reducer(",
          "def test_apply_dictlike_reducer(",
          "def test_apply_listlike_transformer(",
          "def test_apply_listlike_lambda(",
          "def test_apply_dictlike_transformer(",
          "def test_apply_dictlike_lambda(",
          "def test_apply_retains_column_name(",
          "def test_apply_type(",
          "def test_series_apply_unpack_nested_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply_relabeling.py": [
          "def test_relabel_no_duplicated_method(",
          "def test_relabel_duplicated_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_transform.py": [
          "def test_agg_args(",
          "def test_transform_listlike(",
          "def test_transform_listlike_func_with_args(",
          "def test_transform_dictlike(",
          "def test_transform_dictlike_mixed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_str.py": [
          "def test_apply_with_string_funcs(",
          "def test_with_string_args(",
          "def test_apply_np_reducer(",
          "def test_apply_np_transformer(",
          "def test_agg_cython_table_series(",
          "def test_agg_cython_table_transform_series(",
          "def test_agg_cython_table_frame(",
          "def test_agg_cython_table_transform_frame(",
          "def test_transform_groupby_kernel_series(",
          "def test_transform_groupby_kernel_frame(",
          "def test_transform_method_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_array_ops.py": [
          "def test_na_logical_op_2d(",
          "def test_object_comparison_2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_categorical.py": [
          "def test_categorical_nan_equality(",
          "def test_categorical_tuple_equality("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_datetime64.py": [
          "def test_compare_zerodim(",
          "def test_dt64arr_cmp_scalar_invalid(",
          "def test_dt64arr_cmp_arraylike_invalid(",
          "def test_dt64arr_cmp_mixed_invalid(",
          "def test_dt64arr_nat_comparison(",
          "def test_nat_comparisons(",
          "def test_nat_comparisons_scalar(",
          "def test_series_comparison_scalars(",
          "def test_timestamp_compare_series(",
          "def test_dt64arr_timestamp_equality(",
          "def test_dt64_compare_datetime_scalar(",
          "def test_comparators(",
          "def test_dti_cmp_datetimelike(",
          "def test_dti_cmp_nat(",
          "def test_dti_cmp_nat_behaves_like_float_cmp_nan(",
          "def test_comparison_tzawareness_compat(",
          "def test_comparison_tzawareness_compat_scalars(",
          "def test_scalar_comparison_tzawareness(",
          "def test_nat_comparison_tzawareness(",
          "def test_dti_cmp_str(",
          "def test_dti_cmp_list(",
          "def test_dti_cmp_tdi_tzawareness(",
          "def test_dti_cmp_object_dtype(",
          "def test_dt64arr_add_timedeltalike_scalar(",
          "def test_dt64arr_sub_timedeltalike_scalar(",
          "def test_dt64_array_sub_dt_with_different_timezone(",
          "def test_dt64_array_sub_dt64_array_with_different_timezone(",
          "def test_dt64arr_add_sub_td64_nat(",
          "def test_dt64arr_add_sub_td64ndarray(",
          "def test_dt64arr_sub_dtscalar(",
          "def test_dt64arr_sub_timestamp_tzaware(",
          "def test_dt64arr_sub_NaT(",
          "def test_dt64arr_sub_dt64object_array(",
          "def test_dt64arr_naive_sub_dt64ndarray(",
          "def test_dt64arr_aware_sub_dt64ndarray_raises(",
          "def test_dt64arr_add_dtlike_raises(",
          "def test_dt64arr_addsub_intlike(",
          "def test_dt64arr_add_sub_invalid(",
          "def test_dt64arr_add_sub_parr(",
          "def test_dt64arr_addsub_time_objects_raises(",
          "def test_dt64_mul_div_numeric_invalid(",
          "def test_dt64arr_series_add_tick_DateOffset(",
          "def test_dt64arr_series_sub_tick_DateOffset(",
          "def test_dt64arr_add_sub_tick_DateOffset_smoke(",
          "def test_dti_add_tick_tzaware(",
          "def test_dt64arr_add_sub_relativedelta_offsets(",
          "def test_dt64arr_add_sub_DateOffsets(",
          "def test_dt64arr_add_sub_DateOffset(",
          "def test_dt64arr_add_sub_offset_array(",
          "def test_dti_add_sub_nonzero_mth_offset(",
          "def test_dt64_overflow_masking(",
          "def test_dt64_series_arith_overflow(",
          "def test_datetimeindex_sub_timestamp_overflow(",
          "def test_datetimeindex_sub_datetimeindex_overflow(",
          "def test_empty_series_add_sub(",
          "def test_operators_datetimelike(",
          "def test_dt64ser_sub_datetime_dtype(",
          "def test_operators_datetimelike_invalid(",
          "def test_sub_single_tz(",
          "def test_dt64tz_series_sub_dtitz(",
          "def test_sub_datetime_compat(",
          "def test_dt64_series_add_mixed_tick_DateOffset(",
          "def test_datetime64_ops_nat(",
          "def test_operators_datetimelike_with_timezones(",
          "def test_dti_add_tdi(",
          "def test_dti_iadd_tdi(",
          "def test_dti_sub_tdi(",
          "def test_dti_isub_tdi(",
          "def test_dta_add_sub_index(",
          "def test_sub_dti_dti(",
          "def test_timedelta64_equal_timedelta_supported_ops(",
          "def test_ops_nat_mixed_datetime64_timedelta64(",
          "def test_ufunc_coercions(",
          "def test_dti_add_series(",
          "def test_dti_addsub_offset_arraylike(",
          "def test_dti_addsub_object_arraylike(",
          "def test_shift_months(",
          "def test_dt64arr_addsub_object_dtype_2d(",
          "def test_non_nano_dt64_addsub_np_nat_scalars(",
          "def test_non_nano_dt64_addsub_np_nat_scalars_unitless(",
          "def test_non_nano_dt64_addsub_np_nat_scalars_unsupported_unit("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_interval.py": [
          "def test_compare_scalar_interval(",
          "def test_compare_scalar_interval_mixed_closed(",
          "def test_compare_scalar_na(",
          "def test_compare_scalar_other(",
          "def test_compare_list_like_interval(",
          "def test_compare_list_like_interval_mixed_closed(",
          "def test_compare_list_like_object(",
          "def test_compare_list_like_nan(",
          "def test_compare_list_like_other(",
          "def test_compare_length_mismatch_errors(",
          "def test_index_series_compat(",
          "def test_comparison_operations("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_numeric.py": [
          "def test_operator_series_comparison_zerorank(",
          "def test_df_numeric_cmp_dt64_raises(",
          "def test_compare_invalid(",
          "def test_numeric_cmp_string_numexpr_path(",
          "def test_mul_td64arr(",
          "def test_div_td64arr(",
          "def test_numeric_arr_mul_tdscalar(",
          "def test_numeric_arr_mul_tdscalar_numexpr_path(",
          "def test_numeric_arr_rdiv_tdscalar(",
          "def test_add_sub_datetimedeltalike_invalid(",
          "def test_div_zero(",
          "def test_floordiv_zero(",
          "def test_mod_zero(",
          "def test_divmod_zero(",
          "def test_div_negative_zero(",
          "def test_ser_div_ser(",
          "def test_ser_divmod_zero(",
          "def test_ser_divmod_inf(",
          "def test_rdiv_zero_compat(",
          "def test_div_zero_inf_signs(",
          "def test_rdiv_zero(",
          "def test_floordiv_div(",
          "def test_df_div_zero_df(",
          "def test_df_div_zero_array(",
          "def test_df_div_zero_int(",
          "def test_df_div_zero_series_does_not_commute(",
          "def test_df_mod_zero_df(",
          "def test_df_mod_zero_array(",
          "def test_df_mod_zero_int(",
          "def test_df_mod_zero_series_does_not_commute(",
          "def test_divide_decimal(",
          "def test_div_equiv_binop(",
          "def test_div_int(",
          "def test_mul_int_identity(",
          "def test_mul_int_array(",
          "def test_mul_int_series(",
          "def test_mul_float_series(",
          "def test_mul_index(",
          "def test_mul_datelike_raises(",
          "def test_mul_size_mismatch_raises(",
          "def test_pow_float(",
          "def test_modulo(",
          "def test_divmod_scalar(",
          "def test_divmod_ndarray(",
          "def test_divmod_series(",
          "def test_ops_np_scalar(",
          "def test_operators_frame(",
          "def test_modulo2(",
          "def test_modulo_zero_int(",
          "def test_add_series(",
          "def test_add_frames(",
          "def test_series_frame_radd_bug(",
          "def test_datetime64_with_index(",
          "def test_frame_operators(",
          "def test_frame_operators_col_align(",
          "def test_frame_operators_none_to_nan(",
          "def test_frame_operators_empty_like(",
          "def test_series_operators_arithmetic(",
          "def test_series_operators_compare(",
          "def test_divmod(",
          "def test_series_divmod_zero(",
          "def test_ufunc_compat(",
          "def test_ufunc_coercions(",
          "def test_ufunc_multiple_return_values(",
          "def test_ufunc_at(",
          "def test_numarr_with_dtype_add_nan(",
          "def test_numarr_with_dtype_add_int(",
          "def test_operators_reverse_object(",
          "def test_binops_index(",
          "def test_binops_index_scalar(",
          "def test_binops_index_pow(",
          "def test_binops_index_scalar_pow(",
          "def test_arithmetic_with_frame_or_series(",
          "def test_numeric_compat2(",
          "def test_numeric_compat2_floordiv(",
          "def test_addsub_arithmetic(",
          "def test_fill_value_inf_masking(",
          "def test_dataframe_div_silenced(",
          "def test_integer_array_add_list_like(",
          "def test_sub_multiindex_swapped_levels(",
          "def test_empty_str_comparison(",
          "def test_series_add_sub_with_UInt64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_object.py": [
          "def test_comparison_object_numeric_nas(",
          "def test_object_comparisons(",
          "def test_more_na_comparisons(",
          "def test_add_period_to_array_of_offset(",
          "def test_pow_ops_object(",
          "def test_add_extension_scalar(",
          "def test_objarr_add_str(",
          "def test_objarr_radd_str(",
          "def test_objarr_radd_str_invalid(",
          "def test_objarr_add_invalid(",
          "def test_operators_na_handling(",
          "def test_series_with_dtype_radd_timedelta(",
          "def test_mixed_timezone_series_ops_object(",
          "def test_iadd_preserves_name(",
          "def test_add_string(",
          "def test_iadd_string(",
          "def test_add(",
          "def test_sub_fail(",
          "def test_sub_object(",
          "def test_rsub_object(",
          "def test_index_ops_defer_to_unknown_subclasses("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_period.py": [
          "def test_eq_scalar(",
          "def test_compare_zerodim(",
          "def test_compare_invalid_scalar(",
          "def test_compare_invalid_listlike(",
          "def test_compare_object_dtype(",
          "def test_pi_cmp_period(",
          "def test_parr_cmp_period_scalar2(",
          "def test_parr_cmp_period_scalar(",
          "def test_parr_cmp_pi(",
          "def test_parr_cmp_pi_mismatched_freq(",
          "def test_pi_cmp_nat(",
          "def test_pi_cmp_nat_mismatched_freq_raises(",
          "def test_comp_nat(",
          "def test_cmp_series_period_series_mixed_freq(",
          "def test_pi_comp_period(",
          "def test_pi_comp_period_nat(",
          "def test_ops_frame_period(",
          "def test_parr_add_iadd_parr_raises(",
          "def test_pi_sub_isub_pi(",
          "def test_pi_sub_pi_with_nat(",
          "def test_parr_sub_pi_mismatched_freq(",
          "def test_sub_n_gt_1_ticks(",
          "def test_sub_n_gt_1_offsets(",
          "def test_parr_add_sub_invalid(",
          "def test_pi_add_sub_td64_array_non_tick_raises(",
          "def test_pi_add_sub_td64_array_tick(",
          "def test_parr_sub_td64array(",
          "def test_pi_add_offset_array(",
          "def test_pi_sub_offset_array(",
          "def test_pi_add_iadd_int(",
          "def test_pi_sub_isub_int(",
          "def test_pi_sub_intlike(",
          "def test_pi_add_sub_int_array_freqn_gt1(",
          "def test_pi_sub_isub_offset(",
          "def test_pi_add_offset_n_gt1(",
          "def test_pi_add_offset_n_gt1_not_divisible(",
          "def test_pi_add_intarray(",
          "def test_pi_sub_intarray(",
          "def test_parr_add_timedeltalike_minute_gt1(",
          "def test_parr_add_timedeltalike_tick_gt1(",
          "def test_pi_add_iadd_timedeltalike_daily(",
          "def test_pi_sub_isub_timedeltalike_daily(",
          "def test_parr_add_sub_timedeltalike_freq_mismatch_daily(",
          "def test_pi_add_iadd_timedeltalike_hourly(",
          "def test_parr_add_timedeltalike_mismatched_freq_hourly(",
          "def test_pi_sub_isub_timedeltalike_hourly(",
          "def test_add_iadd_timedeltalike_annual(",
          "def test_pi_add_sub_timedeltalike_freq_mismatch_annual(",
          "def test_pi_add_iadd_timedeltalike_M(",
          "def test_pi_add_sub_timedeltalike_freq_mismatch_monthly(",
          "def test_parr_add_sub_td64_nat(",
          "def test_parr_add_sub_tdt64_nat_array(",
          "def test_parr_add_sub_index(",
          "def test_parr_add_sub_object_array(",
          "def test_parr_add_timedeltalike_scalar(",
          "def test_ops_series_period(",
          "def test_pi_ops(",
          "def test_parr_ops_errors(",
          "def test_pi_ops_nat(",
          "def test_pi_ops_array_int(",
          "def test_pi_ops_offset(",
          "def test_pi_offset_errors(",
          "def test_pi_sub_period(",
          "def test_pi_sub_pdnat(",
          "def test_pi_sub_period_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_timedelta64.py": [
          "def test_compare_timedelta64_zerodim(",
          "def test_compare_timedeltalike_scalar(",
          "def test_td64_comparisons_invalid(",
          "def test_td64arr_cmp_arraylike_invalid(",
          "def test_td64arr_cmp_mixed_invalid(",
          "def test_comp_nat(",
          "def test_comparisons_nat(",
          "def test_comparisons_coverage(",
          "def test_ufunc_coercions(",
          "def test_subtraction_ops(",
          "def test_subtraction_ops_with_tz(",
          "def test_dti_tdi_numeric_ops(",
          "def test_addition_ops(",
          "def test_timedelta(",
          "def test_timedelta_tick_arithmetic(",
          "def test_tda_add_sub_index(",
          "def test_tda_add_dt64_object_array(",
          "def test_tdi_iadd_timedeltalike(",
          "def test_tdi_isub_timedeltalike(",
          "def test_tdi_ops_attributes(",
          "def test_tdarr_add_timestamp_nat_masking(",
          "def test_tdi_add_overflow(",
          "def test_sub_nat_retain_unit(",
          "def test_timedelta_ops_with_missing_values(",
          "def test_operators_timedelta64(",
          "def test_timedelta64_ops_nat(",
          "def test_td64arr_add_sub_datetimelike_scalar(",
          "def test_td64arr_add_datetime64_nat(",
          "def test_td64arr_sub_dt64_array(",
          "def test_td64arr_add_dt64_array(",
          "def test_td64arr_sub_periodlike(",
          "def test_td64arr_addsub_numeric_scalar_invalid(",
          "def test_td64arr_addsub_numeric_arr_invalid(",
          "def test_td64arr_add_sub_int(",
          "def test_td64arr_add_sub_integer_array(",
          "def test_td64arr_addsub_integer_array_no_freq(",
          "def test_td64arr_add_sub_td64_array(",
          "def test_td64arr_add_sub_tdi(",
          "def test_td64arr_add_sub_td64_nat(",
          "def test_td64arr_add_timedeltalike(",
          "def test_td64arr_sub_timedeltalike(",
          "def test_td64arr_add_sub_offset_index(",
          "def test_td64arr_add_sub_offset_array(",
          "def test_td64arr_with_offset_series(",
          "def test_td64arr_addsub_anchored_offset_arraylike(",
          "def test_td64arr_add_sub_object_array(",
          "def test_td64arr_mul_int(",
          "def test_td64arr_mul_tdlike_scalar_raises(",
          "def test_tdi_mul_int_array_zerodim(",
          "def test_tdi_mul_int_array(",
          "def test_tdi_mul_int_series(",
          "def test_tdi_mul_float_series(",
          "def test_tdi_rmul_arraylike(",
          "def test_td64arr_div_nat_invalid(",
          "def test_td64arr_div_td64nat(",
          "def test_td64arr_div_int(",
          "def test_td64arr_div_tdlike_scalar(",
          "def test_td64arr_div_td64_scalar(",
          "def test_td64arr_div_tdlike_scalar_with_nat(",
          "def test_td64arr_div_td64_ndarray(",
          "def test_tdarr_div_length_mismatch(",
          "def test_td64_div_object_mixed_result(",
          "def test_td64arr_floordiv_td64arr_with_nat(",
          "def test_td64arr_floordiv_tdscalar(",
          "def test_td64arr_floordiv_int(",
          "def test_td64arr_mod_tdscalar(",
          "def test_td64arr_mod_int(",
          "def test_td64arr_rmod_tdscalar(",
          "def test_td64arr_mul_tdscalar_invalid(",
          "def test_td64arr_mul_too_short_raises(",
          "def test_td64arr_mul_td64arr_raises(",
          "def test_td64arr_mul_numeric_scalar(",
          "def test_td64arr_div_numeric_scalar(",
          "def test_td64arr_floordiv_numeric_scalar(",
          "def test_td64arr_rmul_numeric_array(",
          "def test_td64arr_div_numeric_array(",
          "def test_td64arr_mul_int_series(",
          "def test_float_series_rdiv_td64arr(",
          "def test_td64arr_all_nat_div_object_dtype_numeric(",
          "def test_td64arr_pow_invalid(",
          "def test_add_timestamp_to_timedelta("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked_shared.py": [
          "def test_scalar(",
          "def test_searchsorted_nan(",
          "def test_no_shared_mask(",
          "def test_array(",
          "def test_compare_with_booleanarray(",
          "def test_compare_to_string(",
          "def test_ufunc_with_out(",
          "def test_mul_td64_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_array.py": [
          "def test_dt64_array(",
          "def test_array(",
          "def test_array_copy(",
          "def test_array_inference(",
          "def test_array_inference_fails(",
          "def test_nd_raises(",
          "def test_scalar_raises(",
          "def test_dataframe_raises(",
          "def test_bounds_check(",
          "def test_array_unboxes(",
          "def test_array_to_numpy_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimelike.py": [
          "def test_compare_len1_raises(",
          "def test_compare_with_Categorical(",
          "def test_compare_categorical_dtype(",
          "def test_take(",
          "def test_take_fill_raises(",
          "def test_take_fill(",
          "def test_take_fill_str(",
          "def test_concat_same_type(",
          "def test_unbox_scalar(",
          "def test_check_compatible_with(",
          "def test_scalar_from_string(",
          "def test_reduce_invalid(",
          "def test_fillna_method_doesnt_change_orig(",
          "def test_searchsorted(",
          "def test_searchsorted_castable_strings(",
          "def test_getitem_near_implementation_bounds(",
          "def test_getitem_2d(",
          "def test_iter_2d(",
          "def test_repr_2d(",
          "def test_setitem(",
          "def test_setitem_object_dtype(",
          "def test_setitem_strs(",
          "def test_setitem_categorical(",
          "def test_setitem_raises(",
          "def test_setitem_numeric_raises(",
          "def test_inplace_arithmetic(",
          "def test_shift_fill_int_deprecated(",
          "def test_median(",
          "def test_from_integer_array(",
          "def test_round(",
          "def test_array_interface(",
          "def test_array_object_dtype(",
          "def test_array_tz(",
          "def test_array_i8_dtype(",
          "def test_from_array_keeps_base(",
          "def test_from_dti(",
          "def test_astype_object(",
          "def test_to_period(",
          "def test_to_period_2d(",
          "def test_bool_properties(",
          "def test_int_properties(",
          "def test_take_fill_valid(",
          "def test_concat_same_type_invalid(",
          "def test_concat_same_type_different_freq(",
          "def test_strftime(",
          "def test_strftime_nat(",
          "def test_from_tdi(",
          "def test_astype_object(",
          "def test_to_pytimedelta(",
          "def test_total_seconds(",
          "def test_int_properties(",
          "def test_array_interface(",
          "def test_take_fill_valid(",
          "def test_from_pi(",
          "def test_astype_object(",
          "def test_take_fill_valid(",
          "def test_to_timestamp(",
          "def test_to_timestamp_roundtrip_bday(",
          "def test_to_timestamp_out_of_bounds(",
          "def test_bool_properties(",
          "def test_int_properties(",
          "def test_array_interface(",
          "def test_strftime(",
          "def test_strftime_nat(",
          "def test_casting_nat_setitem_array(",
          "def test_invalid_nat_setitem_array(",
          "def test_to_numpy_extra(",
          "def test_searchsorted_datetimelike_with_listlike(",
          "def test_searchsorted_datetimelike_with_listlike_invalid_dtype(",
          "def test_period_index_construction_from_strings(",
          "def test_from_pandas_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimes.py": [
          "def test_non_nano(",
          "def test_fields(",
          "def test_normalize(",
          "def test_simple_new_requires_match(",
          "def test_std_non_nano(",
          "def test_to_period(",
          "def test_iter(",
          "def test_astype_object(",
          "def test_to_pydatetime(",
          "def test_time_date(",
          "def test_format_native_types(",
          "def test_repr(",
          "def test_compare_mismatched_resolutions(",
          "def test_add_mismatched_reso_doesnt_downcast(",
          "def test_add_timedeltalike_scalar_mismatched_reso(",
          "def test_sub_datetimelike_scalar_mismatch(",
          "def test_sub_datetime64_reso_mismatch(",
          "def test_cmp_dt64_arraylike_tznaive(",
          "def test_astype_non_nano_tznaive(",
          "def test_astype_non_nano_tzaware(",
          "def test_astype_to_same(",
          "def test_astype_copies(",
          "def test_astype_int(",
          "def test_astype_to_sparse_dt64(",
          "def test_tz_setter_raises(",
          "def test_setitem_str_impute_tz(",
          "def test_setitem_different_tz_raises(",
          "def test_setitem_clears_freq(",
          "def test_setitem_objects(",
          "def test_repeat_preserves_tz(",
          "def test_value_counts_preserves_tz(",
          "def test_fillna_preserves_tz(",
          "def test_fillna_2d(",
          "def test_array_interface_tz(",
          "def test_array_interface(",
          "def test_searchsorted_different_tz(",
          "def test_searchsorted_tzawareness_compat(",
          "def test_searchsorted_invalid_types(",
          "def test_shift_fill_value(",
          "def test_shift_value_tzawareness_mismatch(",
          "def test_shift_requires_tzmatch(",
          "def test_tz_localize_t2d(",
          "def test_iter_zoneinfo_fold(",
          "def test_factorize_sort_without_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_ndarray_backed.py": [
          "def test_empty_categorical(",
          "def test_empty_dt64tz(",
          "def test_empty_dt64(",
          "def test_empty_td64(",
          "def test_empty_pandas_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_period.py": [
          "def test_registered(",
          "def test_asi8(",
          "def test_take_raises(",
          "def test_fillna_raises(",
          "def test_fillna_copies(",
          "def test_setitem(",
          "def test_setitem_raises_incompatible_freq(",
          "def test_setitem_raises_length(",
          "def test_setitem_raises_type(",
          "def test_sub_period(",
          "def test_sub_period_overflow(",
          "def test_where_different_freq_raises(",
          "def test_repr_small(",
          "def test_repr_large("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_timedeltas.py": [
          "def test_non_nano(",
          "def test_as_unit_raises(",
          "def test_fields(",
          "def test_to_pytimedelta(",
          "def test_total_seconds(",
          "def test_timedelta_array_total_seconds(",
          "def test_total_seconds_nanoseconds(",
          "def test_add_nat_datetimelike_scalar(",
          "def test_add_pdnat(",
          "def test_add_datetimelike_scalar(",
          "def test_mul_scalar(",
          "def test_mul_listlike(",
          "def test_mul_listlike_object(",
          "def test_div_numeric_scalar(",
          "def test_div_td_scalar(",
          "def test_div_numeric_array(",
          "def test_div_td_array(",
          "def test_add_timedeltaarraylike(",
          "def test_astype_int(",
          "def test_setitem_clears_freq(",
          "def test_setitem_objects(",
          "def test_searchsorted_invalid_types(",
          "def test_abs(",
          "def test_pos(",
          "def test_neg(",
          "def test_neg_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_arithmetic.py": [
          "def test_add_mul(",
          "def test_sub(",
          "def test_div(",
          "def test_op_int8(",
          "def test_error_invalid_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_astype.py": [
          "def test_astype(",
          "def test_astype_to_boolean_array(",
          "def test_astype_to_integer_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_comparison.py": [
          "def test_compare_scalar(",
          "def test_compare_array(",
          "def test_scalar(",
          "def test_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_construction.py": [
          "def test_boolean_array_constructor(",
          "def test_boolean_array_constructor_copy(",
          "def test_to_boolean_array(",
          "def test_to_boolean_array_all_none(",
          "def test_to_boolean_array_missing_indicators(",
          "def test_to_boolean_array_error(",
          "def test_to_boolean_array_from_integer_array(",
          "def test_to_boolean_array_from_float_array(",
          "def test_to_boolean_array_integer_like(",
          "def test_coerce_to_array(",
          "def test_coerce_to_array_from_boolean_array(",
          "def test_coerce_to_numpy_array(",
          "def test_to_boolean_array_from_strings(",
          "def test_to_boolean_array_from_strings_invalid_string(",
          "def test_to_numpy(",
          "def test_to_numpy_copy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_function.py": [
          "def test_ufuncs_binary(",
          "def test_ufuncs_unary(",
          "def test_ufunc_numeric(",
          "def test_ufunc_reduce_raises(",
          "def test_value_counts_na(",
          "def test_value_counts_with_normalize(",
          "def test_diff("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_indexing.py": [
          "def test_setitem_missing_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_logical.py": [
          "def test_numpy_scalars_ok(",
          "def test_empty_ok(",
          "def test_eq_mismatched_type(",
          "def test_logical_length_mismatch_raises(",
          "def test_logical_nan_raises(",
          "def test_non_bool_or_na_other_raises(",
          "def test_kleene_or(",
          "def test_kleene_or_scalar(",
          "def test_kleene_and(",
          "def test_kleene_and_scalar(",
          "def test_kleene_xor(",
          "def test_kleene_xor_scalar(",
          "def test_no_masked_assumptions(",
          "def test_error_both_scalar("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_ops.py": [
          "def test_invert(",
          "def test_abs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_reduction.py": [
          "def test_any_all(",
          "def test_reductions_return_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_repr.py": [
          "def test_repr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_algos.py": [
          "def test_factorize(",
          "def test_factorized_sort(",
          "def test_factorized_sort_ordered(",
          "def test_isin_cats(",
          "def test_isin_cats_corner_cases(",
          "def test_isin_empty(",
          "def test_diff("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_analytics.py": [
          "def test_min_max_not_ordered_raises(",
          "def test_min_max_ordered(",
          "def test_min_max_reduce(",
          "def test_min_max_ordered_empty(",
          "def test_min_max_with_nan(",
          "def test_min_max_only_nan(",
          "def test_numeric_only_min_max_raises(",
          "def test_numpy_min_max_raises(",
          "def test_numpy_min_max_unsupported_kwargs_raises(",
          "def test_numpy_min_max_axis_equals_none(",
          "def test_mode(",
          "def test_searchsorted(",
          "def test_unique(",
          "def test_unique_index_series(",
          "def test_shift(",
          "def test_nbytes(",
          "def test_memory_usage(",
          "def test_map(",
          "def test_validate_inplace_raises(",
          "def test_quantile_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_api.py": [
          "def test_to_list_deprecated(",
          "def test_ordered_api(",
          "def test_set_ordered(",
          "def test_rename_categories(",
          "def test_rename_categories_wrong_length_raises(",
          "def test_rename_categories_series(",
          "def test_rename_categories_dict(",
          "def test_reorder_categories(",
          "def test_reorder_categories_raises(",
          "def test_add_categories(",
          "def test_add_categories_existing_raises(",
          "def test_add_categories_losing_dtype_information(",
          "def test_set_categories(",
          "def test_set_categories_many(",
          "def test_set_categories_rename_less(",
          "def test_set_categories_private(",
          "def test_remove_categories(",
          "def test_remove_categories_raises(",
          "def test_remove_unused_categories(",
          "def test_describe(",
          "def test_codes_immutable(",
          "def test_recode_to_categories(",
          "def test_recode_to_categories_large("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_astype.py": [
          "def test_astype_nan_to_int(",
          "def test_astype_category_to_extension_dtype(",
          "def test_astype_to_datetime64(",
          "def test_astype_str_int_categories_to_nullable_int(",
          "def test_astype_str_int_categories_to_nullable_float(",
          "def test_astype(",
          "def test_astype_category(",
          "def test_astype_object_datetime_categories(",
          "def test_astype_object_timestamp_categories(",
          "def test_astype_category_readonly_mask_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_constructors.py": [
          "def test_fastpath_deprecated(",
          "def test_categorical_from_cat_and_dtype_str_preserve_ordered(",
          "def test_categorical_disallows_scalar(",
          "def test_categorical_1d_only(",
          "def test_validate_ordered(",
          "def test_constructor_empty(",
          "def test_constructor_empty_boolean(",
          "def test_constructor_tuples(",
          "def test_constructor_tuples_datetimes(",
          "def test_constructor_unsortable(",
          "def test_constructor_interval(",
          "def test_constructor(",
          "def test_constructor_with_existing_categories(",
          "def test_constructor_not_sequence(",
          "def test_constructor_with_null(",
          "def test_constructor_with_index(",
          "def test_constructor_with_generator(",
          "def test_constructor_with_rangeindex(",
          "def test_constructor_with_datetimelike(",
          "def test_constructor_from_index_series_datetimetz(",
          "def test_constructor_date_objects(",
          "def test_constructor_from_index_series_timedelta(",
          "def test_constructor_from_index_series_period(",
          "def test_constructor_invariant(",
          "def test_constructor_with_dtype(",
          "def test_constructor_dtype_and_others_raises(",
          "def test_constructor_str_category(",
          "def test_constructor_str_unknown(",
          "def test_constructor_np_strs(",
          "def test_constructor_from_categorical_with_dtype(",
          "def test_constructor_from_categorical_with_unknown_dtype(",
          "def test_constructor_from_categorical_string(",
          "def test_constructor_with_categorical_categories(",
          "def test_construction_with_null(",
          "def test_from_codes_nullable_int_categories(",
          "def test_from_codes_empty(",
          "def test_from_codes_validate(",
          "def test_from_codes_too_few_categories(",
          "def test_from_codes_non_int_codes(",
          "def test_from_codes_non_unique_categories(",
          "def test_from_codes_nan_cat_included(",
          "def test_from_codes_too_negative(",
          "def test_from_codes(",
          "def test_from_codes_with_categorical_categories(",
          "def test_from_codes_with_non_unique_categorical_categories(",
          "def test_from_codes_with_nan_code(",
          "def test_from_codes_with_float(",
          "def test_from_codes_with_dtype_raises(",
          "def test_from_codes_neither(",
          "def test_from_codes_with_nullable_int(",
          "def test_from_codes_with_nullable_int_na_raises(",
          "def test_from_inferred_categories(",
          "def test_from_inferred_categories_sorts(",
          "def test_from_inferred_categories_dtype(",
          "def test_from_inferred_categories_coerces(",
          "def test_construction_with_ordered(",
          "def test_constructor_imaginary(",
          "def test_constructor_string_and_tuples(",
          "def test_interval(",
          "def test_categorical_extension_array_nullable(",
          "def test_from_sequence_copy(",
          "def test_constructor_datetime64_non_nano(",
          "def test_constructor_preserves_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_dtypes.py": [
          "def test_categories_match_up_to_permutation(",
          "def test_set_dtype_same(",
          "def test_set_dtype_new_categories(",
          "def test_set_dtype_many(",
          "def test_set_dtype_no_overlap(",
          "def test_codes_dtypes(",
          "def test_iter_python_types(",
          "def test_iter_python_types_datetime(",
          "def test_interval_index_category("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_indexing.py": [
          "def test_getitem(",
          "def test_setitem(",
          "def test_setitem_same_but_unordered(",
          "def test_setitem_different_unordered_raises(",
          "def test_setitem_same_ordered_raises(",
          "def test_setitem_tuple(",
          "def test_setitem_listlike(",
          "def test_getitem_slice(",
          "def test_getitem_listlike(",
          "def test_periodindex(",
          "def test_periodindex_on_null_types(",
          "def test_categories_assignments_wrong_length_raises(",
          "def test_get_indexer_non_unique(",
          "def test_where_unobserved_nan(",
          "def test_where_unobserved_categories(",
          "def test_where_other_categorical(",
          "def test_where_new_category_raises(",
          "def test_where_ordered_differs_rasies(",
          "def test_contains(",
          "def test_contains_interval(",
          "def test_contains_list(",
          "def test_mask_with_boolean(",
          "def test_mask_with_boolean_na_treated_as_false(",
          "def test_series_at("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_map.py": [
          "def test_map_str(",
          "def test_map(",
          "def test_map_with_nan_none(",
          "def test_map_with_nan_ignore(",
          "def test_map_with_dict_or_series(",
          "def test_map_na_action_no_default_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_missing.py": [
          "def test_isna(",
          "def test_na_flags_int_categories(",
          "def test_nan_handling(",
          "def test_set_dtype_nans(",
          "def test_set_item_nan(",
          "def test_fillna_raises(",
          "def test_fillna_iterable_category(",
          "def test_fillna_array(",
          "def test_use_inf_as_na(",
          "def test_use_inf_as_na_outside_context(",
          "def test_compare_categorical_with_missing(",
          "def test_categorical_only_missing_values_no_cast("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_operators.py": [
          "def test_categories_none_comparisons(",
          "def test_comparisons(",
          "def test_not_equal_with_na(",
          "def test_compare_frame(",
          "def test_compare_frame_raises(",
          "def test_datetime_categorical_comparison(",
          "def test_reflected_comparison_with_scalars(",
          "def test_comparison_with_unknown_scalars(",
          "def test_comparison_with_tuple(",
          "def test_comparison_of_ordered_categorical_with_nan_to_scalar(",
          "def test_comparison_of_ordered_categorical_with_nan_to_listlike(",
          "def test_comparisons(",
          "def test_unordered_different_order_equal(",
          "def test_unordered_different_categories_raises(",
          "def test_compare_different_lengths(",
          "def test_compare_unordered_different_order(",
          "def test_numeric_like_ops(",
          "def test_numeric_like_ops_series(",
          "def test_numeric_like_ops_series_arith(",
          "def test_numeric_like_ops_series_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_replace.py": [
          "def test_replace_categorical_series(",
          "def test_replace_categorical(",
          "def test_replace_categorical_ea_dtype(",
          "def test_replace_maintain_ordering("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_repr.py": [
          "def test_print(",
          "def test_big_print(",
          "def test_empty_print(",
          "def test_print_none_width(",
          "def test_unicode_print(",
          "def test_categorical_repr(",
          "def test_categorical_repr_ordered(",
          "def test_categorical_repr_datetime(",
          "def test_categorical_repr_datetime_ordered(",
          "def test_categorical_repr_int_with_nan(",
          "def test_categorical_repr_period(",
          "def test_categorical_repr_period_ordered(",
          "def test_categorical_repr_timedelta(",
          "def test_categorical_repr_timedelta_ordered(",
          "def test_categorical_index_repr(",
          "def test_categorical_index_repr_ordered(",
          "def test_categorical_index_repr_datetime(",
          "def test_categorical_index_repr_datetime_ordered(",
          "def test_categorical_index_repr_period(",
          "def test_categorical_index_repr_period_ordered(",
          "def test_categorical_index_repr_timedelta(",
          "def test_categorical_index_repr_timedelta_ordered(",
          "def test_categorical_str_repr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_sorting.py": [
          "def test_argsort(",
          "def test_numpy_argsort(",
          "def test_sort_values(",
          "def test_sort_values_na_position("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_subclass.py": [
          "def test_constructor(",
          "def test_from_codes(",
          "def test_map("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_take.py": [
          "def test_take_default_allow_fill(",
          "def test_take_positive_no_warning(",
          "def test_take_bounds(",
          "def test_take_empty(",
          "def test_positional_take(",
          "def test_positional_take_unobserved(",
          "def test_take_allow_fill(",
          "def test_take_fill_with_negative_one(",
          "def test_take_fill_value(",
          "def test_take_fill_value_new_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_warnings.py": [
          "def test_tab_complete_warning("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_constructors.py": [
          "def test_from_sequence_invalid_type(",
          "def test_only_1dim_accepted(",
          "def test_freq_validation(",
          "def test_mixing_naive_tzaware_raises(",
          "def test_from_pandas_array(",
          "def test_mismatched_timezone_raises(",
          "def test_non_array_raises(",
          "def test_bool_dtype_raises(",
          "def test_incorrect_dtype_raises(",
          "def test_freq_infer_raises(",
          "def test_copy(",
          "def test_numpy_datetime_unit(",
          "def test_tz_dtype_mismatch_raises(",
          "def test_tz_dtype_matches(",
          "def test_2d(",
          "def test_from_arrowtest_from_arrow_with_different_units_and_timezones_with_(",
          "def test_from_arrow_from_empty(",
          "def test_from_arrow_from_integers("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_cumulative.py": [
          "def test_accumulators_freq(",
          "def test_accumulators_disallowed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_reductions.py": [
          "def test_min_max(",
          "def test_min_max_empty(",
          "def test_median_empty(",
          "def test_median(",
          "def test_median_axis(",
          "def test_median_2d(",
          "def test_mean(",
          "def test_mean_2d(",
          "def test_mean_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_arithmetic.py": [
          "def test_array_op(",
          "def test_divide_by_zero(",
          "def test_pow_scalar(",
          "def test_pow_array(",
          "def test_rpow_one_to_na(",
          "def test_arith_zero_dim_ndarray(",
          "def test_error_invalid_values(",
          "def test_cross_type_arithmetic(",
          "def test_unary_float_operators(",
          "def test_bitwise("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_astype.py": [
          "def test_astype(",
          "def test_astype_to_floating_array(",
          "def test_astype_to_boolean_array(",
          "def test_astype_to_integer_array(",
          "def test_astype_str(",
          "def test_astype_copy(",
          "def test_astype_object(",
          "def test_Float64_conversion("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_comparison.py": [
          "def test_scalar(",
          "def test_compare_with_integerarray(",
          "def test_equals(",
          "def test_equals_nan_vs_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_concat.py": [
          "def test_concat_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_construction.py": [
          "def test_uses_pandas_na(",
          "def test_floating_array_constructor(",
          "def test_floating_array_disallows_float16(",
          "def test_floating_array_disallows_Float16_dtype(",
          "def test_floating_array_constructor_copy(",
          "def test_to_array(",
          "def test_to_array_none_is_nan(",
          "def test_to_array_mixed_integer_float(",
          "def test_to_array_error(",
          "def test_construct_from_float_strings(",
          "def test_to_array_inferred_dtype(",
          "def test_to_array_dtype_keyword(",
          "def test_to_array_integer(",
          "def test_to_array_bool(",
          "def test_series_from_float("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_contains.py": [
          "def test_contains_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_function.py": [
          "def test_ufuncs_single(",
          "def test_ufuncs_single_float(",
          "def test_ufuncs_binary_float(",
          "def test_ufunc_reduce_raises(",
          "def test_stat_method(",
          "def test_value_counts_na(",
          "def test_value_counts_empty(",
          "def test_value_counts_with_normalize(",
          "def test_floating_array_sum(",
          "def test_floating_array_numpy_sum(",
          "def test_preserve_dtypes(",
          "def test_floating_array_min_max(",
          "def test_floating_array_prod("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_repr.py": [
          "def test_dtypes(",
          "def test_repr_dtype(",
          "def test_repr_array(",
          "def test_repr_array_long(",
          "def test_frame_repr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_to_numpy.py": [
          "def test_to_numpy(",
          "def test_to_numpy_float(",
          "def test_to_numpy_int(",
          "def test_to_numpy_na_value(",
          "def test_to_numpy_na_value_with_nan(",
          "def test_to_numpy_dtype(",
          "def test_to_numpy_na_raises(",
          "def test_to_numpy_string(",
          "def test_to_numpy_copy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_arithmetic.py": [
          "def test_add_mul(",
          "def test_sub(",
          "def test_div(",
          "def test_divide_by_zero(",
          "def test_floordiv(",
          "def test_floordiv_by_int_zero_no_mask(",
          "def test_mod(",
          "def test_pow_scalar(",
          "def test_pow_array(",
          "def test_rpow_one_to_na(",
          "def test_numpy_zero_dim_ndarray(",
          "def test_error_invalid_values(",
          "def test_arith_coerce_scalar(",
          "def test_arithmetic_conversion(",
          "def test_cross_type_arithmetic(",
          "def test_reduce_to_float(",
          "def test_unary_int_operators(",
          "def test_values_multiplying_large_series_by_NA(",
          "def test_bitwise("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_comparison.py": [
          "def test_scalar(",
          "def test_compare_to_int(",
          "def test_equals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_concat.py": [
          "def test_concat_series(",
          "def test_concat_series_with_numpy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_construction.py": [
          "def test_uses_pandas_na(",
          "def test_from_dtype_from_float(",
          "def test_conversions(",
          "def test_integer_array_constructor(",
          "def test_integer_array_constructor_copy(",
          "def test_to_integer_array_none_is_nan(",
          "def test_to_integer_array_error(",
          "def test_to_integer_array_inferred_dtype(",
          "def test_to_integer_array_dtype_keyword(",
          "def test_to_integer_array_float(",
          "def test_to_integer_array_str(",
          "def test_to_integer_array_bool(",
          "def test_to_integer_array(",
          "def test_integer_array_from_boolean("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_dtypes.py": [
          "def test_dtypes(",
          "def test_preserve_dtypes(",
          "def test_astype_nansafe(",
          "def test_construct_index(",
          "def test_astype_index(",
          "def test_astype(",
          "def test_astype_copy(",
          "def test_astype_to_larger_numpy(",
          "def test_astype_specific_casting(",
          "def test_astype_floating(",
          "def test_astype_dt64(",
          "def test_construct_cast_invalid(",
          "def test_to_numpy_na_nan(",
          "def test_to_numpy_dtype(",
          "def test_to_numpy_na_raises(",
          "def test_astype_str(",
          "def test_astype_boolean("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_function.py": [
          "def test_ufuncs_single_int(",
          "def test_ufuncs_single_float(",
          "def test_ufuncs_binary_int(",
          "def test_ufunc_binary_output(",
          "def test_ufunc_reduce_raises(",
          "def test_stat_method(",
          "def test_value_counts_na(",
          "def test_value_counts_empty(",
          "def test_value_counts_with_normalize(",
          "def test_integer_array_sum(",
          "def test_integer_array_min_max(",
          "def test_integer_array_prod(",
          "def test_integer_array_numpy_sum(",
          "def test_dataframe_reductions("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_indexing.py": [
          "def test_array_setitem_nullable_boolean_mask(",
          "def test_array_setitem("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_reduction.py": [
          "def test_series_reductions(",
          "def test_dataframe_reductions(",
          "def test_groupby_reductions(",
          "def test_mixed_reductions("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_repr.py": [
          "def test_dtypes(",
          "def test_repr_dtype(",
          "def test_repr_array(",
          "def test_repr_array_long(",
          "def test_frame_repr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_astype.py": [
          "def test_astype_categorical_retains_ordered("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_interval.py": [
          "def test_is_empty(",
          "def test_set_closed(",
          "def test_where_raises(",
          "def test_shift(",
          "def test_shift_datetime(",
          "def test_set_na(",
          "def test_setitem_mismatched_closed(",
          "def test_repr(",
          "def test_min_max_invalid_axis(",
          "def test_min_max(",
          "def test_arrow_extension_type(",
          "def test_arrow_array(",
          "def test_arrow_array_missing(",
          "def test_arrow_table_roundtrip(",
          "def test_arrow_table_roundtrip_without_metadata(",
          "def test_from_arrow_from_raw_struct_array(",
          "def test_interval_index_subtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_ops.py": [
          "def test_overlaps_interval(",
          "def test_overlaps_interval_container(",
          "def test_overlaps_na(",
          "def test_overlaps_invalid_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arithmetic.py": [
          "def test_array_scalar_like_equivalence(",
          "def test_array_NA(",
          "def test_numpy_array_equivalence(",
          "def test_frame(",
          "def test_series(",
          "def test_error_invalid_object(",
          "def test_error_len_mismatch(",
          "def test_unary_op_does_not_propagate_mask("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arrow_compat.py": [
          "def test_arrow_array(",
          "def test_arrow_roundtrip(",
          "def test_dataframe_from_arrow_types_mapper(",
          "def test_arrow_load_from_zero_chunks(",
          "def test_arrow_from_arrow_uint(",
          "def test_arrow_sliced(",
          "def test_pyarrow_array_to_numpy_and_mask(",
          "def test_from_arrow_null(",
          "def test_from_arrow_type_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_function.py": [
          "def test_round(",
          "def test_tolist("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_indexing.py": [
          "def test_setitem_validation_scalar_bool(",
          "def test_setitem_validation_scalar_int(",
          "def test_setitem_validation_scalar_float("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_indexing.py": [
          "def test_searchsorted_string(",
          "def test_searchsorted_numeric_dtypes_scalar(",
          "def test_searchsorted_numeric_dtypes_vector(",
          "def test_searchsorted_sorter("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_numpy.py": [
          "def test_is_numeric(",
          "def test_is_boolean(",
          "def test_repr(",
          "def test_constructor_from_string(",
          "def test_dtype_univalent(",
          "def test_constructor_no_coercion(",
          "def test_series_constructor_with_copy(",
          "def test_series_constructor_with_astype(",
          "def test_from_sequence_dtype(",
          "def test_constructor_copy(",
          "def test_constructor_with_data(",
          "def test_to_numpy(",
          "def test_setitem_series(",
          "def test_setitem(",
          "def test_bad_reduce_raises(",
          "def test_validate_reduction_keyword_args(",
          "def test_np_max_nested_tuples(",
          "def test_np_reduce_2d(",
          "def test_ufunc_unary(",
          "def test_ufunc(",
          "def test_basic_binop(",
          "def test_setitem_object_typecode(",
          "def test_setitem_no_coercion(",
          "def test_setitem_preserves_views(",
          "def test_quantile_empty(",
          "def test_factorize_unsigned("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_arrow_compat.py": [
          "def test_arrow_extension_type(",
          "def test_arrow_array(",
          "def test_arrow_array_missing(",
          "def test_arrow_table_roundtrip(",
          "def test_arrow_load_from_zero_chunks(",
          "def test_arrow_table_roundtrip_without_metadata("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_astype.py": [
          "def test_astype_int(",
          "def test_astype_copies(",
          "def test_astype_categorical(",
          "def test_astype_period(",
          "def test_astype_datetime("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_constructors.py": [
          "def test_period_array_ok(",
          "def test_period_array_readonly_object(",
          "def test_from_datetime64_freq_changes(",
          "def test_from_datetime64_freq_2M(",
          "def test_period_array_raises(",
          "def test_period_array_non_period_series_raies(",
          "def test_period_array_freq_mismatch(",
          "def test_from_sequence_disallows_i8(",
          "def test_from_td64nat_sequence_raises(",
          "def test_freq_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_reductions.py": [
          "def test_min_max(",
          "def test_min_max_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_accessor.py": [
          "def test_to_dense(",
          "def test_get_attributes(",
          "def test_from_coo(",
          "def test_to_coo(",
          "def test_non_sparse_raises(",
          "def test_accessor_raises(",
          "def test_from_spmatrix(",
          "def test_from_spmatrix_including_explicit_zero(",
          "def test_from_spmatrix_columns(",
          "def test_to_coo(",
          "def test_to_coo_nonzero_fill_val_raises(",
          "def test_to_coo_midx_categorical(",
          "def test_to_dense(",
          "def test_density(",
          "def test_series_from_coo(",
          "def test_series_from_coo_incorrect_format_raises(",
          "def test_with_column_named_sparse("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_arithmetics.py": [
          "def test_float_scalar(",
          "def test_float_scalar_comparison(",
          "def test_float_same_index_without_nans(",
          "def test_float_same_index_with_nans(",
          "def test_float_same_index_comparison(",
          "def test_float_array(",
          "def test_float_array_different_kind(",
          "def test_float_array_comparison(",
          "def test_int_array(",
          "def test_int_array_comparison(",
          "def test_bool_same_index(",
          "def test_bool_array_logical(",
          "def test_mixed_array_float_int(",
          "def test_mixed_array_comparison(",
          "def test_xor(",
          "def test_with_list(",
          "def test_with_dataframe(",
          "def test_with_zerodim_ndarray(",
          "def test_ufuncs(",
          "def test_binary_ufuncs(",
          "def test_ndarray_inplace(",
          "def test_sparray_inplace(",
          "def test_mismatched_length_cmp_op(",
          "def test_binary_operators("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_array.py": [
          "def test_shift_fill_value(",
          "def test_set_fill_value(",
          "def test_set_fill_invalid_non_scalar(",
          "def test_copy(",
          "def test_values_asarray(",
          "def test_shape(",
          "def test_dense_repr(",
          "def test_pickle(",
          "def test_generator_warnings(",
          "def test_where_retain_fill_value(",
          "def test_fillna(",
          "def test_fillna_overlap(",
          "def test_nonzero(",
          "def test_cumsum(",
          "def test_ufunc(",
          "def test_ufunc_args(",
          "def test_modf(",
          "def test_nbytes_integer(",
          "def test_nbytes_block(",
          "def test_asarray_datetime64(",
          "def test_density(",
          "def test_npoints(",
          "def test_setting_fill_value_fillna_still_works(",
          "def test_setting_fill_value_updates(",
          "def test_first_fill_value_loc(",
          "def test_unique_na_fill(",
          "def test_unique_all_sparse(",
          "def test_map(",
          "def test_map_missing(",
          "def test_dropna(",
          "def test_drop_duplicates_fill_value(",
          "def test_zero_sparse_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_astype.py": [
          "def test_astype(",
          "def test_astype_bool(",
          "def test_astype_all(",
          "def test_astype_more(",
          "def test_astype_nan_raises(",
          "def test_astype_copy_false(",
          "def test_astype_dt64_to_int64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_combine_concat.py": [
          "def test_basic(",
          "def test_uses_first_kind(",
          "def test_concat_with_non_sparse("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_constructors.py": [
          "def test_constructor_dtype(",
          "def test_constructor_dtype_str(",
          "def test_constructor_sparse_dtype(",
          "def test_constructor_sparse_dtype_str(",
          "def test_constructor_object_dtype(",
          "def test_constructor_object_dtype_bool_fill(",
          "def test_constructor_na_dtype(",
          "def test_constructor_warns_when_losing_timezone(",
          "def test_constructor_spindex_dtype(",
          "def test_constructor_spindex_dtype_scalar(",
          "def test_constructor_spindex_dtype_scalar_broadcasts(",
          "def test_constructor_inferred_fill_value(",
          "def test_from_spmatrix(",
          "def test_from_spmatrix_including_explicit_zero(",
          "def test_from_spmatrix_raises(",
          "def test_constructor_from_too_large_array(",
          "def test_constructor_from_sparse(",
          "def test_constructor_copy(",
          "def test_constructor_bool(",
          "def test_constructor_bool_fill_value(",
          "def test_constructor_float32("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_dtype.py": [
          "def test_inferred_dtype(",
          "def test_from_sparse_dtype(",
          "def test_from_sparse_dtype_fill_value(",
          "def test_equal(",
          "def test_nans_equal(",
          "def test_not_equal(",
          "def test_construct_from_string_raises(",
          "def test_is_numeric(",
          "def test_str_uses_object(",
          "def test_construct_from_string(",
          "def test_hash_equal(",
          "def test_parse_subtype(",
          "def test_construct_from_string_fill_value_raises(",
          "def test_update_dtype(",
          "def test_update_dtype_raises(",
          "def test_repr(",
          "def test_sparse_dtype_subtype_must_be_numpy_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_indexing.py": [
          "def test_getitem(",
          "def test_getitem_arraylike_mask(",
          "def test_getslice(",
          "def test_getslice_tuple(",
          "def test_boolean_slice_empty(",
          "def test_getitem_bool_sparse_array(",
          "def test_getitem_bool_sparse_array_as_comparison(",
          "def test_get_item(",
          "def test_set_item(",
          "def test_take_scalar_raises(",
          "def test_take(",
          "def test_take_all_empty(",
          "def test_take_fill_value(",
          "def test_take_negative(",
          "def test_bad_take(",
          "def test_take_filling(",
          "def test_take_filling_fill_value(",
          "def test_take_filling_all_nan(",
          "def test_where_retain_fill_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_libsparse.py": [
          "def test_length(",
          "def test_index_make_union(",
          "def test_int_index_make_union(",
          "def test_intersect(",
          "def test_intersect_empty(",
          "def test_intersect_identical(",
          "def test_int_internal(",
          "def test_block_internal(",
          "def test_lookup(",
          "def test_lookup_array(",
          "def test_lookup_basics(",
          "def test_block_internal(",
          "def test_make_block_boundary(",
          "def test_equals(",
          "def test_check_integrity(",
          "def test_to_int_index(",
          "def test_to_block_index(",
          "def test_check_integrity(",
          "def test_int_internal(",
          "def test_equals(",
          "def test_to_block_index(",
          "def test_to_int_index(",
          "def test_op("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_reductions.py": [
          "def test_all(",
          "def test_numpy_all(",
          "def test_any(",
          "def test_numpy_any(",
          "def test_sum(",
          "def test_sum_min_count(",
          "def test_bool_sum_min_count(",
          "def test_numpy_sum(",
          "def test_mean(",
          "def test_numpy_mean(",
          "def test_nan_fill_value(",
          "def test_fill_value(",
          "def test_only_fill_value(",
          "def test_na_value_if_no_valid_values(",
          "def test_argmax_argmin(",
          "def test_empty_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_unary.py": [
          "def test_unary_op(",
          "def test_invert(",
          "def test_neg_operator(",
          "def test_abs_operator(",
          "def test_invert_operator("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string.py": [
          "def test_repr(",
          "def test_none_to_nan(",
          "def test_setitem_validates(",
          "def test_setitem_with_scalar_string(",
          "def test_setitem_with_array_with_missing(",
          "def test_astype_roundtrip(",
          "def test_add(",
          "def test_add_2d(",
          "def test_add_sequence(",
          "def test_mul(",
          "def test_add_strings(",
          "def test_add_frame(",
          "def test_comparison_methods_scalar(",
          "def test_comparison_methods_scalar_pd_na(",
          "def test_comparison_methods_scalar_not_string(",
          "def test_comparison_methods_array(",
          "def test_constructor_raises(",
          "def test_constructor_nan_like(",
          "def test_from_sequence_no_mutate(",
          "def test_astype_int(",
          "def test_astype_nullable_int(",
          "def test_astype_float(",
          "def test_reduce(",
          "def test_reduce_missing(",
          "def test_min_max(",
          "def test_min_max_numpy(",
          "def test_fillna_args(",
          "def test_arrow_array(",
          "def test_arrow_roundtrip(",
          "def test_arrow_load_from_zero_chunks(",
          "def test_value_counts_na(",
          "def test_value_counts_with_normalize(",
          "def test_use_inf_as_na(",
          "def test_memory_usage(",
          "def test_astype_from_float_dtype(",
          "def test_to_numpy_returns_pdna_default(",
          "def test_to_numpy_na_value(",
          "def test_isin(",
          "def test_setitem_scalar_with_mask_validation(",
          "def test_from_numpy_str(",
          "def test_tolist("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string_arrow.py": [
          "def test_eq_all_na(",
          "def test_config(",
          "def test_config_bad_storage_raises(",
          "def test_constructor_not_string_type_raises(",
          "def test_constructor_not_string_type_value_dictionary_raises(",
          "def test_constructor_valid_string_type_value_dictionary(",
          "def test_constructor_from_list(",
          "def test_from_sequence_wrong_dtype_raises(",
          "def test_pyarrow_not_installed_raises(",
          "def test_setitem(",
          "def test_setitem_invalid_indexer_raises(",
          "def test_pickle_roundtrip(",
          "def test_string_dtype_error_message("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_constructors.py": [
          "def test_only_1dim_accepted(",
          "def test_freq_validation(",
          "def test_non_array_raises(",
          "def test_other_type_raises(",
          "def test_incorrect_dtype_raises(",
          "def test_copy(",
          "def test_from_sequence_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_cumulative.py": [
          "def test_accumulators_disallowed(",
          "def test_cumsum("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_reductions.py": [
          "def test_reductions_empty(",
          "def test_sum_empty(",
          "def test_min_max(",
          "def test_sum(",
          "def test_npsum(",
          "def test_sum_2d_skipna_false(",
          "def test_std(",
          "def test_median(",
          "def test_mean(",
          "def test_mean_2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_constructors.py": [
          "def test_method(",
          "def test_invalid_delegation(",
          "def test_memory_usage(",
          "def test_mixin(",
          "def test_constructor_datetime_outofbound(",
          "def test_constructor_datetime_nonns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_conversion.py": [
          "def test_iterable(",
          "def test_iterable_object_and_category(",
          "def test_iterable_items(",
          "def test_iterable_map(",
          "def test_categorial_datetimelike(",
          "def test_iter_box(",
          "def test_values_consistent(",
          "def test_numpy_array(",
          "def test_numpy_array_all_dtypes(",
          "def test_array(",
          "def test_array_multiindex_raises(",
          "def test_to_numpy(",
          "def test_to_numpy_copy(",
          "def test_to_numpy_dtype(",
          "def test_to_numpy_na_value_numpy_dtype(",
          "def test_to_numpy_multiindex_series_na_value(",
          "def test_to_numpy_kwargs_raises(",
          "def test_to_numpy_dataframe_na_value(",
          "def test_to_numpy_dataframe_single_block(",
          "def test_to_numpy_dataframe_single_block_no_mutate(",
          "def test_asarray_object_dt64(",
          "def test_asarray_tz_naive(",
          "def test_asarray_tz_aware("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_fillna.py": [
          "def test_fillna(",
          "def test_fillna_null("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_misc.py": [
          "def test_isnull_notnull_docstrings(",
          "def test_binary_ops_docstring(",
          "def test_ndarray_compat_properties(",
          "def test_memory_usage(",
          "def test_memory_usage_components_series(",
          "def test_memory_usage_components_narrow_series(",
          "def test_searchsorted(",
          "def test_access_by_position("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_transpose.py": [
          "def test_transpose(",
          "def test_transpose_non_default_axes(",
          "def test_numpy_transpose(",
          "def test_duplicate_labels("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_unique.py": [
          "def test_unique(",
          "def test_unique_null(",
          "def test_nunique(",
          "def test_nunique_null(",
          "def test_unique_bad_unicode(",
          "def test_nunique_dropna("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_value_counts.py": [
          "def test_value_counts(",
          "def test_value_counts_null(",
          "def test_value_counts_inferred(",
          "def test_value_counts_bins(",
          "def test_value_counts_datetime64(",
          "def test_value_counts_with_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_compat.py": [
          "def test_compat(",
          "def test_invalid_numexpr_version("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_eval.py": [
          "def test_complex_cmp_ops(",
          "def test_simple_cmp_ops(",
          "def test_compound_invert_op(",
          "def test_chained_cmp_op(",
          "def test_binary_arith_ops(",
          "def test_modulus(",
          "def test_floor_division(",
          "def test_pow(",
          "def test_check_single_invert_op(",
          "def test_frame_invert(",
          "def test_series_invert(",
          "def test_frame_negate(",
          "def test_series_negate(",
          "def test_frame_pos(",
          "def test_series_pos(",
          "def test_scalar_unary(",
          "def test_unary_in_array(",
          "def test_float_comparison_bin_op(",
          "def test_unary_in_function(",
          "def test_disallow_scalar_bool_ops(",
          "def test_identical(",
          "def test_line_continuation(",
          "def test_float_truncation(",
          "def test_disallow_python_keywords(",
          "def test_true_false_logic(",
          "def test_and_logic_string_match(",
          "def test_binop_typecasting(",
          "def test_align_nested_unary_op(",
          "def test_basic_frame_alignment(",
          "def test_frame_comparison(",
          "def test_medium_complex_frame_alignment(",
          "def test_basic_frame_series_alignment(",
          "def test_basic_series_frame_alignment(",
          "def test_series_frame_commutativity(",
          "def test_complex_series_frame_alignment(",
          "def test_performance_warning_for_poor_alignment(",
          "def test_simple_arith_ops(",
          "def test_simple_bool_ops(",
          "def test_bool_ops_with_constants(",
          "def test_4d_ndarray_fails(",
          "def test_constant(",
          "def test_single_variable(",
          "def test_failing_subscript_with_name_error(",
          "def test_lhs_expression_subscript(",
          "def test_attr_expression(",
          "def test_assignment_fails(",
          "def test_assignment_column_multiple_raise(",
          "def test_assignment_column_invalid_assign(",
          "def test_assignment_column_invalid_assign_function_call(",
          "def test_assignment_single_assign_existing(",
          "def test_assignment_single_assign_new(",
          "def test_assignment_single_assign_local_overlap(",
          "def test_assignment_single_assign_name(",
          "def test_assignment_multiple_raises(",
          "def test_assignment_explicit(",
          "def test_column_in(",
          "def test_assignment_not_inplace(",
          "def test_multi_line_expression(",
          "def test_multi_line_expression_not_inplace(",
          "def test_multi_line_expression_local_variable(",
          "def test_multi_line_expression_callable_local_variable(",
          "def test_multi_line_expression_callable_local_variable_with_kwargs(",
          "def test_assignment_in_query(",
          "def test_query_inplace(",
          "def test_cannot_item_assign(",
          "def test_cannot_copy_item(",
          "def test_inplace_no_assignment(",
          "def test_basic_period_index_boolean_expression(",
          "def test_basic_period_index_subscript_expression(",
          "def test_nested_period_index_subscript_expression(",
          "def test_date_boolean(",
          "def test_simple_in_ops(",
          "def test_check_many_exprs(",
          "def test_fails_and_or_not(",
          "def test_fails_ampersand_pipe(",
          "def test_unary_functions(",
          "def test_binary_functions(",
          "def test_df_use_case(",
          "def test_df_arithmetic_subexpression(",
          "def test_result_types(",
          "def test_undefined_func(",
          "def test_keyword_arg(",
          "def test_global_scope(",
          "def test_no_new_locals(",
          "def test_no_new_globals(",
          "def test_empty_locals(",
          "def test_empty_globals(",
          "def test_invalid_engine(",
          "def test_numexpr_option_respected(",
          "def test_numexpr_option_incompatible_op(",
          "def test_invalid_parser(",
          "def test_disallowed_nodes(",
          "def test_syntax_error_exprs(",
          "def test_name_error_exprs(",
          "def test_invalid_local_variable_reference(",
          "def test_numexpr_builtin_raises(",
          "def test_bad_resolver_raises(",
          "def test_empty_string_raises(",
          "def test_more_than_one_expression_raises(",
          "def test_bool_ops_fails_on_scalars(",
          "def test_equals_various(",
          "def test_inf(",
          "def test_query_token(",
          "def test_negate_lt_eq_le(",
          "def test_eval_no_support_column_name(",
          "def test_set_inplace(",
          "def test_validate_bool_args("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_config.py": [
          "def test_api(",
          "def test_is_one_of_factory(",
          "def test_register_option(",
          "def test_describe_option(",
          "def test_case_insensitive(",
          "def test_get_option(",
          "def test_set_option(",
          "def test_set_option_empty_args(",
          "def test_set_option_uneven_args(",
          "def test_set_option_invalid_single_argument_type(",
          "def test_set_option_multiple(",
          "def test_validation(",
          "def test_reset_option(",
          "def test_reset_option_all(",
          "def test_deprecate_option(",
          "def test_config_prefix(",
          "def test_callback(",
          "def test_set_ContextManager(",
          "def test_attribute_access(",
          "def test_option_context_scope(",
          "def test_dictwrapper_getattr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_localization.py": [
          "def test_can_set_current_locale(",
          "def test_can_set_locale_valid_set(",
          "def test_can_set_locale_invalid_set(",
          "def test_can_set_locale_no_leak(",
          "def test_can_set_locale_invalid_get(",
          "def test_get_locales_at_least_one(",
          "def test_get_locales_prefix(",
          "def test_set_locale(",
          "def test_encoding_detected("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\construction\\test_extract_array.py": [
          "def test_extract_array_rangeindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_array.py": [
          "def test_series_values(",
          "def test_dataframe_values(",
          "def test_series_to_numpy(",
          "def test_ravel_read_only(",
          "def test_series_array_ea_dtypes(",
          "def test_dataframe_array_ea_dtypes(",
          "def test_dataframe_array_string_dtype(",
          "def test_dataframe_multiple_numpy_dtypes(",
          "def test_values_is_ea(",
          "def test_empty_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_astype.py": [
          "def test_astype_single_dtype(",
          "def test_astype_avoids_copy(",
          "def test_astype_different_target_dtype(",
          "def test_astype_numpy_to_ea(",
          "def test_astype_string_and_object(",
          "def test_astype_string_and_object_update_original(",
          "def test_astype_dict_dtypes(",
          "def test_astype_different_datetime_resos(",
          "def test_astype_different_timezones(",
          "def test_astype_different_timezones_different_reso(",
          "def test_astype_arrow_timestamp(",
          "def test_convert_dtypes_infer_objects(",
          "def test_convert_dtypes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_clip.py": [
          "def test_clip_inplace_reference(",
          "def test_clip_inplace_reference_no_op(",
          "def test_clip_inplace(",
          "def test_clip(",
          "def test_clip_no_op(",
          "def test_clip_chained_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_constructors.py": [
          "def test_series_from_series(",
          "def test_series_from_series_with_reindex(",
          "def test_series_from_array(",
          "def test_series_from_array_different_dtype(",
          "def test_series_from_index(",
          "def test_series_from_index_different_dtypes(",
          "def test_series_from_block_manager(",
          "def test_series_from_block_manager_different_dtype(",
          "def test_dataframe_constructor_mgr_or_df(",
          "def test_dataframe_from_dict_of_series(",
          "def test_dataframe_from_dict_of_series_with_reindex(",
          "def test_dataframe_from_series_or_index(",
          "def test_dataframe_from_series_or_index_different_dtype(",
          "def test_dataframe_from_series_infer_datetime(",
          "def test_dataframe_from_dict_of_series_with_dtype(",
          "def test_frame_from_numpy_array(",
          "def test_dataframe_from_records_with_dataframe(",
          "def test_frame_from_dict_of_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_core_functionalities.py": [
          "def test_assigning_to_same_variable_removes_references(",
          "def test_setitem_dont_track_unnecessary_references(",
          "def test_setitem_with_view_copies(",
          "def test_setitem_with_view_invalidated_does_not_copy(",
          "def test_out_of_scope(",
          "def test_delete(",
          "def test_delete_reference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_functions.py": [
          "def test_concat_frames(",
          "def test_concat_frames_updating_input(",
          "def test_concat_series(",
          "def test_concat_frames_chained(",
          "def test_concat_series_chained(",
          "def test_concat_series_updating_input(",
          "def test_concat_mixed_series_frame(",
          "def test_concat_copy_keyword(",
          "def test_merge_on_key(",
          "def test_merge_on_index(",
          "def test_merge_on_key_enlarging_one(",
          "def test_merge_copy_keyword(",
          "def test_join_on_key(",
          "def test_join_multiple_dataframes_on_key("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_indexing.py": [
          "def test_subset_column_selection(",
          "def test_subset_column_selection_modify_parent(",
          "def test_subset_row_slice(",
          "def test_subset_column_slice(",
          "def test_subset_loc_rows_columns(",
          "def test_subset_iloc_rows_columns(",
          "def test_subset_set_with_row_indexer(",
          "def test_subset_set_with_mask(",
          "def test_subset_set_column(",
          "def test_subset_set_column_with_loc(",
          "def test_subset_set_column_with_loc2(",
          "def test_subset_set_columns(",
          "def test_subset_set_with_column_indexer(",
          "def test_subset_chained_getitem(",
          "def test_subset_chained_getitem_column(",
          "def test_subset_chained_getitem_series(",
          "def test_subset_chained_single_block_row(",
          "def test_null_slice(",
          "def test_null_slice_series(",
          "def test_series_getitem_slice(",
          "def test_series_subset_set_with_indexer(",
          "def test_del_frame(",
          "def test_del_series(",
          "def test_column_as_series(",
          "def test_column_as_series_set_with_upcast(",
          "def test_column_as_series_no_item_cache(",
          "def test_dataframe_add_column_from_series(",
          "def test_set_value_copy_only_necessary_column(",
          "def test_series_midx_slice(",
          "def test_getitem_midx_slice(",
          "def test_series_midx_tuples_slice(",
          "def test_loc_enlarging_with_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_internals.py": [
          "def test_consolidate(",
          "def test_switch_options(",
          "def test_iset_splits_blocks_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_interp_fillna.py": [
          "def test_interpolate_no_op(",
          "def test_interp_fill_functions(",
          "def test_interpolate_triggers_copy(",
          "def test_interpolate_inplace_no_reference_no_copy(",
          "def test_interpolate_inplace_with_refs(",
          "def test_interpolate_cleaned_fill_method(",
          "def test_interpolate_object_convert_no_op(",
          "def test_interpolate_object_convert_copies(",
          "def test_interpolate_downcast(",
          "def test_interpolate_downcast_reference_triggers_copy(",
          "def test_fillna(",
          "def test_fillna_dict(",
          "def test_fillna_inplace(",
          "def test_fillna_inplace_reference(",
          "def test_fillna_interval_inplace_reference(",
          "def test_fillna_series_empty_arg(",
          "def test_fillna_series_empty_arg_inplace(",
          "def test_fillna_ea_noop_shares_memory(",
          "def test_fillna_inplace_ea_noop_shares_memory(",
          "def test_fillna_chained_assignment(",
          "def test_interpolate_chained_assignment("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_methods.py": [
          "def test_copy(",
          "def test_copy_shallow(",
          "def test_methods_copy_keyword(",
          "def test_methods_series_copy_keyword(",
          "def test_transpose_copy_keyword(",
          "def test_reset_index(",
          "def test_reset_index_series_drop(",
          "def test_rename_columns(",
          "def test_rename_columns_modify_parent(",
          "def test_pipe(",
          "def testfunc(",
          "def test_pipe_modify_df(",
          "def testfunc(",
          "def test_reindex_columns(",
          "def test_reindex_rows(",
          "def test_drop_on_column(",
          "def test_select_dtypes(",
          "def test_filter(",
          "def test_shift_no_op(",
          "def test_shift_index(",
          "def test_shift_rows_freq(",
          "def test_shift_columns(",
          "def test_pop(",
          "def test_align_frame(",
          "def test_align_series(",
          "def test_align_copy_false(",
          "def test_align_with_series_copy_false(",
          "def test_to_frame(",
          "def test_swapaxes_noop(",
          "def test_swapaxes_single_block(",
          "def test_swapaxes_read_only_array(",
          "def test_chained_methods(",
          "def test_to_timestamp(",
          "def test_to_period(",
          "def test_set_index(",
          "def test_set_index_mutating_parent_does_not_mutate_index(",
          "def test_add_prefix(",
          "def test_add_suffix(",
          "def test_dropna(",
          "def test_dropna_series(",
          "def test_head_tail(",
          "def test_infer_objects(",
          "def test_infer_objects_no_reference(",
          "def test_infer_objects_reference(",
          "def test_truncate(",
          "def test_assign_drop_duplicates(",
          "def test_take(",
          "def test_between_time(",
          "def test_reindex_like(",
          "def test_sort_index(",
          "def test_sort_values(",
          "def test_sort_values_inplace(",
          "def test_round(",
          "def test_reorder_levels(",
          "def test_series_reorder_levels(",
          "def test_swaplevel(",
          "def test_frame_set_axis(",
          "def test_series_set_axis(",
          "def test_set_flags(",
          "def test_rename_axis(",
          "def test_tz_convert_localize(",
          "def test_droplevel(",
          "def test_squeeze(",
          "def test_items(",
          "def test_putmask(",
          "def test_putmask_no_reference(",
          "def test_putmask_aligns_rhs_no_reference(",
          "def test_putmask_dont_copy_some_blocks(",
          "def test_where_mask_noop(",
          "def test_where_mask(",
          "def test_where_mask_noop_on_single_column(",
          "def test_chained_where_mask(",
          "def test_asfreq_noop(",
          "def test_iterrows(",
          "def test_interpolate_creates_copy(",
          "def test_isetitem(",
          "def test_isetitem_series(",
          "def test_isetitem_frame(",
          "def test_get(",
          "def test_xs(",
          "def test_xs_multiindex(",
          "def test_update_frame(",
          "def test_update_series(",
          "def test_update_chained_assignment(",
          "def test_inplace_arithmetic_series(",
          "def test_inplace_arithmetic_series_with_reference(",
          "def test_transpose(",
          "def test_transpose_different_dtypes(",
          "def test_transpose_ea_single_column(",
          "def test_transform_frame(",
          "def test_transform_series(",
          "def test_count_read_only_array(",
          "def test_series_view(",
          "def test_insert_series(",
          "def test_eval(",
          "def test_eval_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_replace.py": [
          "def test_replace(",
          "def test_replace_regex_inplace_refs(",
          "def test_replace_regex_inplace(",
          "def test_replace_regex_inplace_no_op(",
          "def test_replace_mask_all_false_second_block(",
          "def test_replace_coerce_single_column(",
          "def test_replace_to_replace_wrong_dtype(",
          "def test_replace_list_categorical(",
          "def test_replace_list_inplace_refs_categorical(",
          "def test_replace_inplace(",
          "def test_replace_inplace_reference(",
          "def test_replace_inplace_reference_no_op(",
          "def test_replace_categorical_inplace_reference(",
          "def test_replace_categorical_inplace(",
          "def test_replace_categorical(",
          "def test_masking_inplace(",
          "def test_replace_empty_list(",
          "def test_replace_object_list_inplace(",
          "def test_replace_list_multiple_elements_inplace(",
          "def test_replace_list_none(",
          "def test_replace_list_none_inplace_refs(",
          "def test_replace_columnwise_no_op_inplace(",
          "def test_replace_columnwise_no_op(",
          "def test_replace_chained_assignment(",
          "def test_replace_listlike(",
          "def test_replace_listlike_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_setitem.py": [
          "def test_set_column_with_array(",
          "def test_set_column_with_series(",
          "def test_set_column_with_index(",
          "def test_set_columns_with_dataframe(",
          "def test_setitem_series_no_copy(",
          "def test_setitem_series_no_copy_single_block(",
          "def test_setitem_series_no_copy_split_block(",
          "def test_setitem_series_column_midx_broadcasting("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_util.py": [
          "def test_get_array_numpy(",
          "def test_get_array_masked("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_datetimeindex.py": [
          "def test_datetimeindex(",
          "def test_datetimeindex_tz_convert(",
          "def test_datetimeindex_tz_localize(",
          "def test_datetimeindex_isocalendar(",
          "def test_index_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_index.py": [
          "def test_set_index_update_column(",
          "def test_set_index_drop_update_column(",
          "def test_set_index_series(",
          "def test_assign_index_as_series(",
          "def test_assign_index_as_index(",
          "def test_index_from_series(",
          "def test_index_from_series_copy(",
          "def test_index_from_index(",
          "def test_index_ops(",
          "def test_infer_objects(",
          "def test_index_to_frame(",
          "def test_index_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_periodindex.py": [
          "def test_periodindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_timedeltaindex.py": [
          "def test_timedeltaindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_common.py": [
          "def test_invalid_dtype_error(",
          "def test_pandas_dtype_valid(",
          "def test_numpy_dtype(",
          "def test_numpy_string_dtype(",
          "def test_datetimetz_dtype(",
          "def test_categorical_dtype(",
          "def test_period_dtype(",
          "def test_dtype_equal(",
          "def test_pyarrow_string_import_error(",
          "def test_dtype_equal_strict(",
          "def test_get_dtype_error_catch(",
          "def test_is_object(",
          "def test_is_sparse(",
          "def test_is_scipy_sparse(",
          "def test_is_datetime64_dtype(",
          "def test_is_datetime64tz_dtype(",
          "def test_custom_ea_kind_M_not_datetime64tz(",
          "def test_is_timedelta64_dtype(",
          "def test_is_period_dtype(",
          "def test_is_interval_dtype(",
          "def test_is_categorical_dtype(",
          "def test_is_string_dtype(",
          "def test_is_string_dtype_arraylike_with_object_elements_not_strings(",
          "def test_is_string_dtype_nullable(",
          "def test_is_integer_dtype(",
          "def test_is_not_integer_dtype(",
          "def test_is_signed_integer_dtype(",
          "def test_is_not_signed_integer_dtype(",
          "def test_is_unsigned_integer_dtype(",
          "def test_is_not_unsigned_integer_dtype(",
          "def test_is_int64_dtype(",
          "def test_type_comparison_with_numeric_ea_dtype(",
          "def test_type_comparison_with_real_numpy_dtype(",
          "def test_type_comparison_with_signed_int_ea_dtype_and_signed_int_numpy_dtype(",
          "def test_is_not_int64_dtype(",
          "def test_is_datetime64_any_dtype(",
          "def test_is_datetime64_ns_dtype(",
          "def test_is_timedelta64_ns_dtype(",
          "def test_is_numeric_v_string_like(",
          "def test_needs_i8_conversion(",
          "def test_is_numeric_dtype(",
          "def test_is_any_real_numeric_dtype(",
          "def test_is_float_dtype(",
          "def test_is_bool_dtype(",
          "def test_is_bool_dtype_numpy_error(",
          "def test_is_extension_array_dtype(",
          "def test_is_complex_dtype(",
          "def test_get_dtype(",
          "def test_get_dtype_fails(",
          "def test__is_dtype_type(",
          "def test_astype_nansafe_copy_false(",
          "def test_astype_object_preserves_datetime_na(",
          "def test_validate_allhashable(",
          "def test_pandas_dtype_numpy_warning(",
          "def test_pandas_dtype_ea_not_instance("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_concat.py": [
          "def test_concat_mismatched_categoricals_with_empty(",
          "def test_concat_single_dataframe_tz_aware(",
          "def test_concat_periodarray_2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_dtypes.py": [
          "def test_hash(",
          "def test_equality_invalid(",
          "def test_numpy_informed(",
          "def test_pickle(",
          "def test_hash_vs_equality(",
          "def test_equality(",
          "def test_construction_from_string(",
          "def test_constructor_invalid(",
          "def test_from_values_or_dtype(",
          "def test_from_values_or_dtype_raises(",
          "def test_from_values_or_dtype_invalid_dtype(",
          "def test_is_dtype(",
          "def test_basic(",
          "def test_tuple_categories(",
          "def test_is_boolean(",
          "def test_dtype_specific_categorical_dtype(",
          "def test_not_string(",
          "def test_repr_range_categories(",
          "def test_update_dtype(",
          "def test_repr(",
          "def test_alias_to_unit_raises(",
          "def test_alias_to_unit_bad_alias_raises(",
          "def test_hash_vs_equality(",
          "def test_construction_non_nanosecond(",
          "def test_day_not_supported(",
          "def test_subclass(",
          "def test_compat(",
          "def test_construction_from_string(",
          "def test_construct_from_string_invalid_raises(",
          "def test_construct_from_string_wrong_type_raises(",
          "def test_is_dtype(",
          "def test_equality(",
          "def test_basic(",
          "def test_dst(",
          "def test_parser(",
          "def test_empty(",
          "def test_tz_standardize(",
          "def test_hash_vs_equality(",
          "def test_construction(",
          "def test_cannot_use_custom_businessday(",
          "def test_subclass(",
          "def test_identity(",
          "def test_compat(",
          "def test_construction_from_string(",
          "def test_construct_dtype_from_string_invalid_raises(",
          "def test_is_dtype(",
          "def test_equality(",
          "def test_basic(",
          "def test_freq_argument_required(",
          "def test_not_string(",
          "def test_perioddtype_caching_dateoffset_normalize(",
          "def test_dont_keep_ref_after_del(",
          "def test_hash_vs_equality(",
          "def test_construction(",
          "def test_construction_allows_closed_none(",
          "def test_closed_mismatch(",
          "def test_construction_generic(",
          "def test_construction_not_supported(",
          "def test_construction_errors(",
          "def test_closed_must_match(",
          "def test_closed_invalid(",
          "def test_construction_from_string(",
          "def test_construction_from_string_errors(",
          "def test_construction_from_string_error_subtype(",
          "def test_subclass(",
          "def test_is_dtype(",
          "def test_equality(",
          "def test_equality_generic(",
          "def test_name_repr(",
          "def test_name_repr_generic(",
          "def test_basic(",
          "def test_basic_dtype(",
          "def test_caching(",
          "def test_not_string(",
          "def test_unpickling_without_closed(",
          "def test_dont_keep_ref_after_del(",
          "def test_basic(",
          "def test_order_matters(",
          "def test_unordered_same(",
          "def test_categories(",
          "def test_equal_but_different(",
          "def test_order_hashes_different(",
          "def test_nan_invalid(",
          "def test_non_unique_invalid(",
          "def test_same_categories_different_order(",
          "def test_categorical_equality(",
          "def test_categorical_dtype_equality_requires_categories(",
          "def test_categorical_equality_strings(",
          "def test_invalid_raises(",
          "def test_mixed(",
          "def test_from_categorical_dtype_identity(",
          "def test_from_categorical_dtype_categories(",
          "def test_from_categorical_dtype_ordered(",
          "def test_from_categorical_dtype_both(",
          "def test_str_vs_repr(",
          "def test_categorical_categories(",
          "def test_update_dtype(",
          "def test_update_dtype_string(",
          "def test_update_dtype_errors(",
          "def test_registry(",
          "def test_registry_find(",
          "def test_is_bool_dtype(",
          "def test_is_bool_dtype_sparse(",
          "def test_is_dtype_no_warning(",
          "def test_period_dtype_compare_to_string(",
          "def test_compare_complex_dtypes(",
          "def test_cast_string_to_complex(",
          "def test_categorical_complex(",
          "def test_multi_column_dtype_assignment("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_generic.py": [
          "def test_abc_pairs_instance_check(",
          "def test_abc_pairs_subclass_check(",
          "def test_abc_hierarchy(",
          "def test_abc_coverage(",
          "def test_setattr_warnings("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_inference.py": [
          "def test_is_list_like(",
          "def test_is_list_like_disallow_sets(",
          "def test_is_list_like_recursion(",
          "def test_is_list_like_iter_is_none(",
          "def test_is_list_like_generic(",
          "def test_is_sequence(",
          "def test_is_array_like(",
          "def test_is_nested_list_like_passes(",
          "def test_is_nested_list_like_fails(",
          "def test_is_dict_like_passes(",
          "def test_is_dict_like_fails(",
          "def test_is_dict_like_duck_type(",
          "def test_is_file_like(",
          "def test_is_names_tuple_passes(",
          "def test_is_names_tuple_fails(",
          "def test_is_hashable(",
          "def test_is_re_passes(",
          "def test_is_re_fails(",
          "def test_is_recompilable_passes(",
          "def test_is_recompilable_fails(",
          "def test_infer_dtype_bytes(",
          "def test_isposinf_scalar(",
          "def test_isneginf_scalar(",
          "def test_maybe_convert_nullable_boolean(",
          "def test_maybe_convert_numeric_infinities(",
          "def test_maybe_convert_numeric_infinities_raises(",
          "def test_maybe_convert_numeric_post_floatify_nan(",
          "def test_convert_infs(",
          "def test_scientific_no_exponent(",
          "def test_convert_non_hashable(",
          "def test_convert_numeric_uint64(",
          "def test_convert_numeric_uint64_nan(",
          "def test_convert_numeric_uint64_nan_values(",
          "def test_convert_numeric_int64_uint64(",
          "def test_convert_numeric_string_uint64(",
          "def test_convert_int_overflow(",
          "def test_maybe_convert_objects_nat_inference(",
          "def test_maybe_convert_objects_uint(",
          "def test_maybe_convert_objects_datetime(",
          "def test_maybe_convert_objects_dtype_if_all_nat(",
          "def test_maybe_convert_objects_dtype_if_all_nat_invalid(",
          "def test_maybe_convert_objects_datetime_overflow_safe(",
          "def test_maybe_convert_objects_mixed_datetimes(",
          "def test_maybe_convert_objects_timedelta64_nat(",
          "def test_maybe_convert_objects_nullable_integer(",
          "def test_maybe_convert_objects_nullable_none(",
          "def test_maybe_convert_numeric_nullable_integer(",
          "def test_maybe_convert_numeric_floating_array(",
          "def test_maybe_convert_objects_bool_nan(",
          "def test_maybe_convert_objects_nullable_boolean(",
          "def test_maybe_convert_objects_nullable_boolean_na(",
          "def test_maybe_convert_objects_itemsize(",
          "def test_mixed_dtypes_remain_object_array(",
          "def test_maybe_convert_objects_ea(",
          "def test_inferred_dtype_fixture(",
          "def test_length_zero(",
          "def test_integers(",
          "def test_integer_na(",
          "def test_infer_dtype_skipna_default(",
          "def test_bools(",
          "def test_floats(",
          "def test_decimals(",
          "def test_complex(",
          "def test_string(",
          "def test_unicode(",
          "def test_object_empty(",
          "def test_datetime(",
          "def test_infer_dtype_datetime64(",
          "def test_infer_dtype_datetime64_with_na(",
          "def test_infer_datetimelike_dtype_mixed(",
          "def test_infer_dtype_mixed_integer(",
          "def test_infer_dtype_datetime(",
          "def test_infer_dtype_datetime_with_na(",
          "def test_infer_dtype_timedelta(",
          "def test_infer_dtype_timedelta_with_na(",
          "def test_infer_dtype_period(",
          "def test_infer_dtype_period_array(",
          "def test_infer_dtype_period_mixed(",
          "def test_infer_dtype_period_with_na(",
          "def test_infer_dtype_all_nan_nat_like(",
          "def test_is_datetimelike_array_all_nan_nat_like(",
          "def test_other_dtypes_for_array(",
          "def test_date(",
          "def test_infer_dtype_date_order_invariant(",
          "def test_is_numeric_array(",
          "def test_is_string_array(",
          "def test_to_object_array_tuples(",
          "def test_object(",
          "def test_to_object_array_width(",
          "def test_is_period(",
          "def test_categorical(",
          "def test_interval(",
          "def test_interval_mismatched_closed(",
          "def test_interval_mismatched_subtype(",
          "def test_string_dtype(",
          "def test_boolean_dtype(",
          "def test_is_number(",
          "def test_is_bool(",
          "def test_is_integer(",
          "def test_is_float(",
          "def test_is_datetime_dtypes(",
          "def test_is_datetime_dtypes_with_tz(",
          "def test_is_timedelta(",
          "def test_is_scalar_builtin_scalars(",
          "def test_is_scalar_builtin_nonscalars(",
          "def test_is_scalar_numpy_array_scalars(",
          "def test_is_scalar_numpy_zerodim_arrays(",
          "def test_is_scalar_numpy_arrays(",
          "def test_is_scalar_pandas_scalars(",
          "def test_is_scalar_pandas_containers(",
          "def test_is_scalar_number(",
          "def test_datetimeindex_from_empty_datetime64_array(",
          "def test_nan_to_nat_conversions(",
          "def test_is_scipy_sparse(",
          "def test_ensure_int32("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_missing.py": [
          "def test_notna_notnull(",
          "def test_null_check_is_series(",
          "def test_0d_array(",
          "def test_empty_object(",
          "def test_isna_isnull(",
          "def test_isna_isnull_frame(",
          "def test_isna_lists(",
          "def test_isna_nat(",
          "def test_isna_numpy_nat(",
          "def test_isna_datetime(",
          "def test_isna_old_datetimelike(",
          "def test_complex(",
          "def test_datetime_other_units(",
          "def test_datetime_other_units_astype(",
          "def test_timedelta_other_units(",
          "def test_timedelta_other_units_dtype(",
          "def test_period(",
          "def test_decimal(",
          "def test_array_equivalent(",
          "def test_array_equivalent_series(",
          "def test_array_equivalent_array_mismatched_shape(",
          "def test_array_equivalent_array_mismatched_dtype(",
          "def test_array_equivalent_different_dtype_but_equal(",
          "def test_array_equivalent_tzawareness(",
          "def test_array_equivalent_compat(",
          "def test_array_equivalent_str(",
          "def test_array_equivalent_nested(",
          "def test_array_equivalent_nested2(",
          "def test_array_equivalent_nested_list(",
          "def test_array_equivalent_nested_mixed_list(",
          "def test_array_equivalent_nested_dicts(",
          "def test_array_equivalent_index_with_tuples(",
          "def test_na_value_for_dtype(",
          "def test_basic(",
          "def test_non_obj_dtype(",
          "def test_empty_arr(",
          "def test_empty_str_inp(",
          "def test_empty_like(",
          "def test_checknull_na_vals(",
          "def test_checknull_inf_vals(",
          "def test_checknull_intna_vals(",
          "def test_checknull_never_na_vals(",
          "def test_checknull_old_na_vals(",
          "def test_checknull_old_inf_vals(",
          "def test_checknull_old_intna_vals(",
          "def test_checknull_old_never_na_vals(",
          "def test_is_matching_na(",
          "def test_is_matching_na_nan_matches_none(",
          "def test_is_valid_na_for_dtype_interval(",
          "def test_is_valid_na_for_dtype_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_can_hold_element.py": [
          "def test_can_hold_element_range(",
          "def test_can_hold_element_int_values_float_ndarray(",
          "def test_can_hold_element_int8_int("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_from_scalar.py": [
          "def test_cast_1d_array_like_from_scalar_categorical(",
          "def test_cast_1d_array_like_from_timestamp(",
          "def test_cast_1d_array_like_from_timedelta(",
          "def test_cast_1d_array_like_mismatched_datetimelike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_ndarray.py": [
          "def test_construct_1d_ndarray_preserving_na(",
          "def test_construct_1d_ndarray_preserving_na_datetimelike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_object_arr.py": [
          "def test_cast_1d_array(",
          "def test_cast_1d_array_invalid_scalar("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_dict_compat.py": [
          "def test_dict_compat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_downcast.py": [
          "def test_downcast(",
          "def test_downcast_booleans(",
          "def test_downcast_conversion_no_nan(",
          "def test_downcast_conversion_nan(",
          "def test_downcast_conversion_empty(",
          "def test_datetime_likes_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_find_common_type.py": [
          "def test_numpy_dtypes(",
          "def test_raises_empty_input(",
          "def test_categorical_dtype(",
          "def test_datetimetz_dtype_match(",
          "def test_datetimetz_dtype_mismatch(",
          "def test_period_dtype_match(",
          "def test_period_dtype_mismatch(",
          "def test_interval_dtype(",
          "def test_interval_dtype_with_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_infer_datetimelike.py": [
          "def test_maybe_infer_to_datetimelike_df_construct(",
          "def test_maybe_infer_to_datetimelike_ser_construct("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_infer_dtype.py": [
          "def test_infer_dtype_from_int_scalar(",
          "def test_infer_dtype_from_float_scalar(",
          "def test_infer_dtype_from_python_scalar(",
          "def test_infer_dtype_from_boolean(",
          "def test_infer_dtype_from_complex(",
          "def test_infer_dtype_from_datetime(",
          "def test_infer_dtype_from_timedelta(",
          "def test_infer_dtype_from_period(",
          "def test_infer_dtype_misc(",
          "def test_infer_from_scalar_tz(",
          "def test_infer_from_interval(",
          "def test_infer_dtype_from_scalar_errors(",
          "def test_infer_dtype_from_scalar(",
          "def test_infer_dtype_from_array(",
          "def test_infer_dtype_from_scalar_zerodim_datetimelike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_maybe_box_native.py": [
          "def test_maybe_box_native("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_promote.py": [
          "def test_maybe_promote_int_with_int(",
          "def test_maybe_promote_int_with_float(",
          "def test_maybe_promote_float_with_int(",
          "def test_maybe_promote_float_with_float(",
          "def test_maybe_promote_bool_with_any(",
          "def test_maybe_promote_any_with_bool(",
          "def test_maybe_promote_bytes_with_any(",
          "def test_maybe_promote_any_with_bytes(",
          "def test_maybe_promote_datetime64_with_any(",
          "def test_maybe_promote_any_with_datetime64(",
          "def test_maybe_promote_any_numpy_dtype_with_datetimetz(",
          "def test_maybe_promote_timedelta64_with_any(",
          "def test_maybe_promote_any_with_timedelta64(",
          "def test_maybe_promote_string_with_any(",
          "def test_maybe_promote_any_with_string(",
          "def test_maybe_promote_object_with_any(",
          "def test_maybe_promote_any_with_object(",
          "def test_maybe_promote_any_numpy_dtype_with_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_arrow.py": [
          "def test_astype_str(",
          "def test_from_dtype(",
          "def test_from_sequence_pa_array(",
          "def test_from_sequence_pa_array_notimplemented(",
          "def test_from_sequence_of_strings_pa_array(",
          "def test_accumulate_series(",
          "def test_reduce_series_numeric(",
          "def test_reduce_series_boolean(",
          "def test_reduce_frame(",
          "def test_median_not_approximate(",
          "def test_in_numeric_groupby(",
          "def test_construct_from_string_own_name(",
          "def test_is_dtype_from_name(",
          "def test_construct_from_string_another_type_raises(",
          "def test_get_common_dtype(",
          "def test_is_not_string_type(",
          "def test_view(",
          "def test_fillna_no_op_returns_copy(",
          "def test_transpose(",
          "def test_setitem_preserves_views(",
          "def test_EA_types(",
          "def test_invert(",
          "def test_diff(",
          "def test_value_counts_returns_pyarrow_int64(",
          "def test_argmin_argmax(",
          "def test_argreduce_series(",
          "def test_arith_series_with_scalar(",
          "def test_arith_frame_with_scalar(",
          "def test_arith_series_with_array(",
          "def test_add_series_with_extension_array(",
          "def test_compare_array(",
          "def test_invalid_other_comp(",
          "def test_comp_masked_numpy(",
          "def test_kleene_or(",
          "def test_kleene_or_scalar(",
          "def test_kleene_and(",
          "def test_kleene_and_scalar(",
          "def test_kleene_xor(",
          "def test_kleene_xor_scalar(",
          "def test_logical_masked_numpy(",
          "def test_bitwise(",
          "def test_arrowdtype_construct_from_string_type_with_unsupported_parameters(",
          "def test_arrowdtype_construct_from_string_supports_dt64tz(",
          "def test_arrowdtype_construct_from_string_type_only_one_pyarrow(",
          "def test_quantile(",
          "def test_mode_dropna_true(",
          "def test_mode_dropna_false_mode_na(",
          "def test_arrow_dtype_type(",
          "def test_is_bool_dtype(",
          "def test_is_numeric_dtype(",
          "def test_is_integer_dtype(",
          "def test_is_signed_integer_dtype(",
          "def test_is_unsigned_integer_dtype(",
          "def test_is_float_dtype(",
          "def test_pickle_roundtrip(",
          "def test_astype_from_non_pyarrow(",
          "def test_astype_float_from_non_pyarrow_str(",
          "def test_to_numpy_with_defaults(",
          "def test_to_numpy_int_with_na(",
          "def test_to_numpy_null_array(",
          "def test_to_numpy_null_array_no_dtype(",
          "def test_setitem_null_slice(",
          "def test_setitem_invalid_dtype(",
          "def test_from_arrow_respecting_given_dtype(",
          "def test_from_arrow_respecting_given_dtype_unsafe(",
          "def test_round(",
          "def test_searchsorted_with_na_raises(",
          "def test_sort_values_dictionary(",
          "def test_str_count(",
          "def test_str_count_flags_unsupported(",
          "def test_str_pad(",
          "def test_str_pad_invalid_side(",
          "def test_str_contains(",
          "def test_str_contains_flags_unsupported(",
          "def test_str_start_ends_with(",
          "def test_str_replace_unsupported(",
          "def test_str_replace(",
          "def test_str_repeat_unsupported(",
          "def test_str_repeat(",
          "def test_str_match(",
          "def test_str_fullmatch(",
          "def test_str_find(",
          "def test_str_find_notimplemented(",
          "def test_str_get(",
          "def test_str_join(",
          "def test_str_join_string_type(",
          "def test_str_slice(",
          "def test_str_slice_replace(",
          "def test_str_is_functions(",
          "def test_str_transform_functions(",
          "def test_str_len(",
          "def test_str_strip(",
          "def test_str_removesuffix(",
          "def test_str_removeprefix(",
          "def test_str_encode(",
          "def test_str_findall(",
          "def test_str_r_index(",
          "def test_str_normalize(",
          "def test_str_rfind(",
          "def test_str_translate(",
          "def test_str_wrap(",
          "def test_get_dummies(",
          "def test_str_partition(",
          "def test_str_split(",
          "def test_str_rsplit(",
          "def test_str_unsupported_extract(",
          "def test_duration_from_strings_with_nat(",
          "def test_unsupported_dt(",
          "def test_dt_properties(",
          "def test_dt_is_month_start_end(",
          "def test_dt_is_year_start_end(",
          "def test_dt_is_quarter_start_end(",
          "def test_dt_days_in_month(",
          "def test_dt_normalize(",
          "def test_dt_time_preserve_unit(",
          "def test_dt_tz(",
          "def test_dt_isocalendar(",
          "def test_dt_day_month_name(",
          "def test_dt_strftime(",
          "def test_dt_roundlike_tz_options_not_supported(",
          "def test_dt_roundlike_unsupported_freq(",
          "def test_dt_ceil_year_floor(",
          "def test_dt_to_pydatetime(",
          "def test_dt_to_pydatetime_date_error(",
          "def test_dt_tz_localize_unsupported_tz_options(",
          "def test_dt_tz_localize_none(",
          "def test_dt_tz_localize(",
          "def test_dt_tz_localize_nonexistent(",
          "def test_dt_tz_convert_not_tz_raises(",
          "def test_dt_tz_convert_none(",
          "def test_dt_tz_convert(",
          "def test_boolean_reduce_series_all_null(",
          "def test_from_sequence_of_strings_boolean(",
          "def test_concat_empty_arrow_backed_series(",
          "def test_series_from_string_array(",
          "def test_pickle_old_arrowextensionarray(",
          "def test_setitem_boolean_replace_with_mask_segfault(",
          "def test_conversion_large_dtypes_from_numpy_array(",
          "def test_concat_null_array(",
          "def test_describe_numeric_data(",
          "def test_describe_timedelta_data(",
          "def test_describe_datetime_data(",
          "def test_quantile_temporal(",
          "def test_date32_repr(",
          "def test_duration_overflow_from_ndarray_containing_nat(",
          "def test_infer_dtype_pyarrow_dtype(",
          "def test_from_sequence_temporal(",
          "def test_setitem_temporal(",
          "def test_arithmetic_temporal(",
          "def test_comparison_temporal(",
          "def test_getitem_temporal(",
          "def test_iter_temporal(",
          "def test_groupby_series_size_returns_pa_int(",
          "def test_to_numpy_temporal(",
          "def test_groupby_count_return_arrow_dtype(",
          "def test_fixed_size_list(",
          "def test_arrowextensiondtype_dataframe_repr(",
          "def test_duration_fillna_numpy(",
          "def test_comparison_not_propagating_arrow_error(",
          "def test_factorize_chunked_dictionary("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_categorical.py": [
          "def test_memory_usage(",
          "def test_contains(",
          "def test_empty(",
          "def test_getitem_scalar(",
          "def test_value_counts(",
          "def test_combine_add(",
          "def test_map(",
          "def test_arith_frame_with_scalar(",
          "def test_arith_series_with_scalar(",
          "def test_repr_2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_common.py": [
          "def test_is_extension_array_dtype(",
          "def test_is_not_extension_array_dtype(",
          "def test_astype(",
          "def test_astype_no_copy(",
          "def test_is_extension_array_dtype(",
          "def test_ellipsis_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_datetime.py": [
          "def test_series_constructor(",
          "def test_map("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_extension.py": [
          "def test_errors("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_interval.py": [
          "def test_fillna_length_mismatch(",
          "def test_EA_types(",
          "def test_invert(",
          "def test_fillna_non_scalar_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_masked.py": [
          "def test_divmod_series_array(",
          "def test_combine_le(",
          "def test_invert("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_numpy.py": [
          "def test_from_dtype(",
          "def test_series_constructor_scalar_with_index(",
          "def test_check_dtype(",
          "def test_is_not_object_type(",
          "def test_getitem_scalar(",
          "def test_array_interface(",
          "def test_shift_fill_value(",
          "def test_fillna_copy_frame(",
          "def test_fillna_copy_series(",
          "def test_searchsorted(",
          "def test_diff(",
          "def test_insert(",
          "def test_insert_invalid(",
          "def test_divmod(",
          "def test_arith_series_with_scalar(",
          "def test_arith_series_with_array(",
          "def test_arith_frame_with_scalar(",
          "def test_reduce_frame(",
          "def test_fillna_series(",
          "def test_fillna_frame(",
          "def test_setitem_invalid(",
          "def test_setitem_sequence_broadcasts(",
          "def test_setitem_mask_broadcast(",
          "def test_setitem_scalar_key_sequence_raise(",
          "def test_setitem_mask(",
          "def test_setitem_integer_array(",
          "def test_setitem_integer_with_missing_raises(",
          "def test_setitem_slice(",
          "def test_setitem_loc_iloc_slice(",
          "def test_setitem_with_expansion_dataframe_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_period.py": [
          "def test_diff(",
          "def test_map("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_sparse.py": [
          "def test_array_type_with_arg(",
          "def test_concat_mixed_dtypes(",
          "def test_stack(",
          "def test_concat_columns(",
          "def test_concat_extension_arrays_copy_false(",
          "def test_align(",
          "def test_align_frame(",
          "def test_align_series_frame(",
          "def test_merge(",
          "def test_get(",
          "def test_reindex(",
          "def test_isna(",
          "def test_fillna_limit_backfill(",
          "def test_fillna_no_op_returns_copy(",
          "def test_fillna_series(",
          "def test_fillna_frame(",
          "def test_fillna_copy_frame(",
          "def test_fillna_copy_series(",
          "def test_fillna_length_mismatch(",
          "def test_where_series(",
          "def test_searchsorted(",
          "def test_shift_0_periods(",
          "def test_argmin_argmax_all_na(",
          "def test_equals(",
          "def test_map(",
          "def test_map_raises(",
          "def test_astype_string(",
          "def test_arith_series_with_scalar(",
          "def test_arith_series_with_array(",
          "def test_arith_frame_with_scalar(",
          "def test_scalar(",
          "def test_array(",
          "def test_sparse_array(",
          "def test_array_repr(",
          "def test_EA_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_string.py": [
          "def test_eq_with_str(",
          "def test_is_not_string_type(",
          "def test_view(",
          "def test_from_dtype(",
          "def test_transpose(",
          "def test_setitem_preserves_views(",
          "def test_dropna_array(",
          "def test_fillna_no_op_returns_copy(",
          "def test_reduce_series_numeric(",
          "def test_compare_scalar(",
          "def test_groupby_extension_apply(",
          "def test_searchsorted_with_na_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\array_with_attr\\test_array_with_attr.py": [
          "def test_concat_with_all_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\accumulate.py": [
          "def test_accumulate_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\casting.py": [
          "def test_astype_object_series(",
          "def test_astype_object_frame(",
          "def test_tolist(",
          "def test_astype_str(",
          "def test_astype_string(",
          "def test_to_numpy(",
          "def test_astype_empty_dataframe(",
          "def test_astype_own_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\constructors.py": [
          "def test_from_sequence_from_cls(",
          "def test_array_from_scalars(",
          "def test_series_constructor(",
          "def test_series_constructor_no_data_with_index(",
          "def test_series_constructor_scalar_na_with_index(",
          "def test_series_constructor_scalar_with_index(",
          "def test_dataframe_constructor_from_dict(",
          "def test_dataframe_from_series(",
          "def test_series_given_mismatched_index_raises(",
          "def test_from_dtype(",
          "def test_pandas_array(",
          "def test_pandas_array_dtype(",
          "def test_construct_empty_dataframe(",
          "def test_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\dim2.py": [
          "def test_transpose(",
          "def test_frame_from_2d_array(",
          "def test_swapaxes(",
          "def test_delete_2d(",
          "def test_take_2d(",
          "def test_repr_2d(",
          "def test_reshape(",
          "def test_getitem_2d(",
          "def test_iter_2d(",
          "def test_tolist_2d(",
          "def test_concat_2d(",
          "def test_fillna_2d_method(",
          "def test_reductions_2d_axis_none(",
          "def test_reductions_2d_axis0(",
          "def test_reductions_2d_axis1(",
          "def test_copy_order("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\dtype.py": [
          "def test_name(",
          "def test_kind(",
          "def test_is_dtype_from_name(",
          "def test_is_dtype_unboxes_dtype(",
          "def test_is_dtype_from_self(",
          "def test_is_dtype_other_input(",
          "def test_is_not_string_type(",
          "def test_is_not_object_type(",
          "def test_eq_with_str(",
          "def test_eq_with_numpy_object(",
          "def test_eq_with_self(",
          "def test_array_type(",
          "def test_check_dtype(",
          "def test_hashable(",
          "def test_str(",
          "def test_eq(",
          "def test_construct_from_string_own_name(",
          "def test_construct_from_string_another_type_raises(",
          "def test_construct_from_string_wrong_type_raises(",
          "def test_get_common_dtype(",
          "def test_infer_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\getitem.py": [
          "def test_iloc_series(",
          "def test_iloc_frame(",
          "def test_iloc_frame_single_block(",
          "def test_loc_series(",
          "def test_loc_frame(",
          "def test_loc_iloc_frame_single_dtype(",
          "def test_getitem_scalar(",
          "def test_getitem_invalid(",
          "def test_getitem_scalar_na(",
          "def test_getitem_empty(",
          "def test_getitem_mask(",
          "def test_getitem_mask_raises(",
          "def test_getitem_boolean_array_mask(",
          "def test_getitem_boolean_na_treated_as_false(",
          "def test_getitem_integer_array(",
          "def test_getitem_integer_with_missing_raises(",
          "def test_getitem_series_integer_with_missing_raises(",
          "def test_getitem_slice(",
          "def test_getitem_ellipsis_and_slice(",
          "def test_get(",
          "def test_take_sequence(",
          "def test_take(",
          "def test_take_empty(",
          "def test_take_negative(",
          "def test_take_non_na_fill_value(",
          "def test_take_pandas_style_negative_raises(",
          "def test_take_out_of_bounds_raises(",
          "def test_take_series(",
          "def test_reindex(",
          "def test_reindex_non_na_fill_value(",
          "def test_loc_len1(",
          "def test_item("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\groupby.py": [
          "def test_grouping_grouper(",
          "def test_groupby_extension_agg(",
          "def test_groupby_agg_extension(",
          "def test_groupby_extension_no_sort(",
          "def test_groupby_extension_transform(",
          "def test_groupby_extension_apply(",
          "def test_groupby_apply_identity(",
          "def test_in_numeric_groupby("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\index.py": [
          "def test_index_from_array(",
          "def test_index_from_listlike_with_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\interface.py": [
          "def test_len(",
          "def test_size(",
          "def test_ndim(",
          "def test_can_hold_na_valid(",
          "def test_contains(",
          "def test_memory_usage(",
          "def test_array_interface(",
          "def test_is_extension_array_dtype(",
          "def test_no_values_attribute(",
          "def test_is_numeric_honored(",
          "def test_isna_extension_array(",
          "def test_copy(",
          "def test_view(",
          "def test_tolist("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\io.py": [
          "def test_EA_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\methods.py": [
          "def test_hash_pandas_object(",
          "def test_value_counts_default_dropna(",
          "def test_value_counts(",
          "def test_value_counts_with_normalize(",
          "def test_count(",
          "def test_series_count(",
          "def test_apply_simple_series(",
          "def test_map(",
          "def test_argsort(",
          "def test_argsort_missing_array(",
          "def test_argsort_missing(",
          "def test_argmin_argmax(",
          "def test_argmin_argmax_empty_array(",
          "def test_argmin_argmax_all_na(",
          "def test_argreduce_series(",
          "def test_argmax_argmin_no_skipna_notimplemented(",
          "def test_nargsort(",
          "def test_sort_values(",
          "def test_sort_values_missing(",
          "def test_sort_values_frame(",
          "def test_unique(",
          "def test_factorize(",
          "def test_factorize_equivalence(",
          "def test_factorize_empty(",
          "def test_fillna_copy_frame(",
          "def test_fillna_copy_series(",
          "def test_fillna_length_mismatch(",
          "def test_combine_le(",
          "def test_combine_add(",
          "def test_combine_first(",
          "def test_container_shift(",
          "def test_shift_0_periods(",
          "def test_diff(",
          "def test_shift_non_empty_array(",
          "def test_shift_empty_array(",
          "def test_shift_zero_copies(",
          "def test_shift_fill_value(",
          "def test_not_hashable(",
          "def test_hash_pandas_object_works(",
          "def test_searchsorted(",
          "def _test_searchsorted_bool_dtypes(",
          "def test_where_series(",
          "def test_repeat(",
          "def test_repeat_raises(",
          "def test_delete(",
          "def test_insert(",
          "def test_insert_invalid(",
          "def test_insert_invalid_loc(",
          "def test_equals(",
          "def test_equals_same_data_different_object("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\missing.py": [
          "def test_isna(",
          "def test_isna_returns_copy(",
          "def test_dropna_array(",
          "def test_dropna_series(",
          "def test_dropna_frame(",
          "def test_fillna_scalar(",
          "def test_fillna_limit_pad(",
          "def test_fillna_limit_backfill(",
          "def test_fillna_no_op_returns_copy(",
          "def test_fillna_series(",
          "def test_fillna_series_method(",
          "def test_fillna_frame(",
          "def test_fillna_fill_other(",
          "def test_use_inf_as_na_no_effect("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\ops.py": [
          "def test_arith_series_with_scalar(",
          "def test_arith_frame_with_scalar(",
          "def test_arith_series_with_array(",
          "def test_divmod(",
          "def test_divmod_series_array(",
          "def test_add_series_with_extension_array(",
          "def test_direct_arith_with_ndframe_returns_not_implemented(",
          "def test_compare_scalar(",
          "def test_compare_array(",
          "def test_invert(",
          "def test_unary_ufunc_dunder_equivalence("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\printing.py": [
          "def test_array_repr(",
          "def test_array_repr_unicode(",
          "def test_series_repr(",
          "def test_dataframe_repr(",
          "def test_dtype_name_in_info("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\reduce.py": [
          "def test_reduce_series_boolean(",
          "def test_reduce_series_numeric(",
          "def test_reduce_frame("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\reshaping.py": [
          "def test_concat(",
          "def test_concat_all_na_block(",
          "def test_concat_mixed_dtypes(",
          "def test_concat_columns(",
          "def test_concat_extension_arrays_copy_false(",
          "def test_concat_with_reindex(",
          "def test_align(",
          "def test_align_frame(",
          "def test_align_series_frame(",
          "def test_set_frame_expand_regular_with_extension(",
          "def test_set_frame_expand_extension_with_regular(",
          "def test_set_frame_overwrite_object(",
          "def test_merge(",
          "def test_merge_on_extension_array(",
          "def test_merge_on_extension_array_duplicates(",
          "def test_stack(",
          "def test_unstack(",
          "def test_ravel(",
          "def test_transpose(",
          "def test_transpose_frame("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\setitem.py": [
          "def test_is_immutable(",
          "def test_setitem_scalar_series(",
          "def test_setitem_sequence(",
          "def test_setitem_sequence_mismatched_length_raises(",
          "def test_setitem_empty_indexer(",
          "def test_setitem_sequence_broadcasts(",
          "def test_setitem_scalar(",
          "def test_setitem_loc_scalar_mixed(",
          "def test_setitem_loc_scalar_single(",
          "def test_setitem_loc_scalar_multiple_homogoneous(",
          "def test_setitem_iloc_scalar_mixed(",
          "def test_setitem_iloc_scalar_single(",
          "def test_setitem_iloc_scalar_multiple_homogoneous(",
          "def test_setitem_mask(",
          "def test_setitem_mask_raises(",
          "def test_setitem_mask_boolean_array_with_na(",
          "def test_setitem_integer_array(",
          "def test_setitem_integer_with_missing_raises(",
          "def test_setitem_mask_aligned(",
          "def test_setitem_mask_broadcast(",
          "def test_setitem_expand_columns(",
          "def test_setitem_expand_with_extension(",
          "def test_setitem_frame_invalid_length(",
          "def test_setitem_tuple_index(",
          "def test_setitem_slice(",
          "def test_setitem_loc_iloc_slice(",
          "def test_setitem_slice_mismatch_length_raises(",
          "def test_setitem_slice_array(",
          "def test_setitem_scalar_key_sequence_raise(",
          "def test_setitem_preserves_views(",
          "def test_setitem_with_expansion_dataframe_column(",
          "def test_setitem_with_expansion_row(",
          "def test_setitem_series(",
          "def test_setitem_frame_2d_values(",
          "def test_delitem_series(",
          "def test_setitem_invalid(",
          "def test_setitem_2d_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\decimal\\test_decimal.py": [
          "def test_reduce_series_numeric(",
          "def test_reduce_frame(",
          "def test_compare_scalar(",
          "def test_compare_array(",
          "def test_arith_series_with_array(",
          "def test_fillna_frame(",
          "def test_fillna_limit_pad(",
          "def test_fillna_limit_backfill(",
          "def test_fillna_no_op_returns_copy(",
          "def test_fillna_series(",
          "def test_fillna_series_method(",
          "def test_fillna_copy_frame(",
          "def test_fillna_copy_series(",
          "def test_value_counts(",
          "def test_series_repr(",
          "def test_invert(",
          "def test_unary_ufunc_dunder_equivalence(",
          "def test_take_na_value_other_decimal(",
          "def test_series_constructor_coerce_data_to_extension_dtype(",
          "def test_series_constructor_with_dtype(",
          "def test_dataframe_constructor_with_dtype(",
          "def test_astype_dispatches(",
          "def test_combine_from_sequence_raises(",
          "def test_scalar_ops_from_sequence_raises(",
          "def test_divmod_array(",
          "def test_ufunc_fallback(",
          "def test_array_ufunc(",
          "def test_array_ufunc_series(",
          "def test_array_ufunc_series_scalar_other(",
          "def test_array_ufunc_series_defer(",
          "def test_groupby_agg(",
          "def test_groupby_agg_ea_method(",
          "def test_indexing_no_materialize(",
          "def test_to_numpy_keyword(",
          "def test_array_copy_on_write("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\json\\test_json.py": [
          "def test_contains(",
          "def test_from_dtype(",
          "def test_series_constructor_no_data_with_index(",
          "def test_series_constructor_scalar_na_with_index(",
          "def test_series_constructor_scalar_with_index(",
          "def test_stack(",
          "def test_unstack(",
          "def test_fillna_series(",
          "def test_fillna_frame(",
          "def test_value_counts(",
          "def test_value_counts_with_normalize(",
          "def test_sort_values_frame(",
          "def test_sort_values(",
          "def test_sort_values_missing(",
          "def test_combine_le(",
          "def test_combine_first(",
          "def test_where_series(",
          "def test_searchsorted(",
          "def test_equals(",
          "def test_fillna_copy_frame(",
          "def test_equals_same_data_different_object(",
          "def test_astype_str(",
          "def test_groupby_extension_transform(",
          "def test_groupby_extension_apply(",
          "def test_groupby_extension_agg(",
          "def test_groupby_extension_no_sort(",
          "def test_arith_frame_with_scalar(",
          "def test_compare_array(",
          "def test_custom_asserts("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\list\\test_list.py": [
          "def test_to_csv("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_alter_axes.py": [
          "def test_set_axis_setattr_index(",
          "def test_assign_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_api.py": [
          "def test_getitem_pop_assign_name(",
          "def test_get_axis(",
          "def test_column_contains_raises(",
          "def test_tab_completion(",
          "def test_display_max_dir_items(",
          "def test_not_hashable(",
          "def test_column_name_contains_unicode_surrogate(",
          "def test_new_empty_index(",
          "def test_get_agg_axis(",
          "def test_empty(",
          "def test_len(",
          "def test_axis_aliases(",
          "def test_class_axis(",
          "def test_series_put_names(",
          "def test_empty_nonzero(",
          "def test_empty_like(",
          "def test_with_datetimelikes(",
          "def test_deepcopy(",
          "def test_inplace_return_self(",
          "def test_tab_complete_warning(",
          "def test_attrs(",
          "def test_set_flags(",
          "def test_constructor_expanddim(",
          "def test_inspect_getmembers("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_arithmetic.py": [
          "def test_comparison_with_categorical_dtype(",
          "def test_frame_in_list(",
          "def test_comparison_invalid(",
          "def test_timestamp_compare(",
          "def test_mixed_comparison(",
          "def test_df_boolean_comparison_error(",
          "def test_df_float_none_comparison(",
          "def test_df_string_comparison(",
          "def test_bool_flex_frame(",
          "def test_bool_flex_series(",
          "def test_bool_flex_frame_na(",
          "def test_bool_flex_frame_complex_dtype(",
          "def test_bool_flex_frame_object_dtype(",
          "def test_flex_comparison_nat(",
          "def test_df_flex_cmp_constant_return_types(",
          "def test_df_flex_cmp_constant_return_types_empty(",
          "def test_df_flex_cmp_ea_dtype_with_ndarray_series(",
          "def test_floordiv_axis0(",
          "def test_floordiv_axis0_numexpr_path(",
          "def test_df_add_td64_columnwise(",
          "def test_df_add_flex_filled_mixed_dtypes(",
          "def test_arith_flex_frame(",
          "def test_arith_flex_frame_mixed(",
          "def test_arith_flex_frame_raise(",
          "def test_arith_flex_frame_corner(",
          "def test_arith_flex_series_ops(",
          "def test_arith_flex_series(",
          "def test_arith_flex_series_broadcasting(",
          "def test_arith_flex_zero_len_raises(",
          "def test_flex_add_scalar_fill_value(",
          "def test_sub_alignment_with_duplicate_index(",
          "def test_arithmetic_with_duplicate_columns(",
          "def test_broadcast_multiindex(",
          "def test_frame_multiindex_operations(",
          "def test_frame_multiindex_operations_series_index_to_frame_index(",
          "def test_frame_multiindex_operations_no_align(",
          "def test_frame_multiindex_operations_part_align(",
          "def test_td64_op_nat_casting(",
          "def test_df_add_2d_array_rowlike_broadcasts(",
          "def test_df_add_2d_array_collike_broadcasts(",
          "def test_df_arith_2d_array_rowlike_broadcasts(",
          "def test_df_arith_2d_array_collike_broadcasts(",
          "def test_df_bool_mul_int(",
          "def test_arith_mixed(",
          "def test_arith_getitem_commute(",
          "def test_arith_alignment_non_pandas_object(",
          "def test_arith_non_pandas_object(",
          "def test_operations_with_interval_categories_index(",
          "def test_frame_with_frame_reindex(",
          "def test_binop_other(",
          "def test_arithmetic_midx_cols_different_dtypes(",
          "def test_arithmetic_midx_cols_different_dtypes_different_order(",
          "def test_frame_with_zero_len_series_corner_cases(",
          "def test_zero_len_frame_with_series_corner_cases(",
          "def test_frame_single_columns_object_sum_axis_1(",
          "def test_frame_add_tz_mismatch_converts_to_utc(",
          "def test_align_frame(",
          "def test_operators_none_as_na(",
          "def test_logical_typeerror_with_non_valid(",
          "def test_binary_ops_align(",
          "def test_binary_ops_align_series_dataframe(",
          "def test_add_with_dti_mismatched_tzs(",
          "def test_combineFrame(",
          "def test_combine_series(",
          "def test_combine_timeseries(",
          "def test_combineFunc(",
          "def test_comparisons(",
          "def test_strings_to_numbers_comparisons_raises(",
          "def test_comparison_protected_from_errstate(",
          "def test_boolean_comparison(",
          "def test_inplace_ops_alignment(",
          "def test_inplace_ops_identity(",
          "def test_inplace_ops_identity2(",
          "def test_alignment_non_pandas(",
          "def test_alignment_non_pandas_length_mismatch(",
          "def test_alignment_non_pandas_index_columns(",
          "def test_no_warning(",
          "def test_dunder_methods_binary(",
          "def test_align_int_fill_bug(",
          "def test_pow_with_realignment(",
          "def test_pow_nan_with_zero(",
          "def test_dataframe_series_extension_dtypes(",
          "def test_dataframe_blockwise_slicelike(",
          "def test_dataframe_operation_with_non_numeric_types(",
          "def test_arith_reindex_with_duplicates(",
          "def test_arith_list_of_arraylike_raise(",
          "def test_inplace_arithmetic_series_update(",
          "def test_arithmetic_multiindex_align(",
          "def test_bool_frame_mult_float(",
          "def test_frame_sub_nullable_int(",
          "def test_frame_op_subclass_nonclass_constructor(",
          "def test_enum_column_equality("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_block_internals.py": [
          "def test_setitem_invalidates_datetime_index_freq(",
          "def test_cast_internals(",
          "def test_consolidate(",
          "def test_consolidate_inplace(",
          "def test_modify_values(",
          "def test_boolean_set_uncons(",
          "def test_constructor_with_convert(",
          "def test_construction_with_mixed(",
          "def test_construction_with_conversions(",
          "def test_constructor_compound_dtypes(",
          "def test_pickle(",
          "def test_consolidate_datetime64(",
          "def test_is_mixed_type(",
          "def test_stale_cached_series_bug_473(",
          "def test_strange_column_corruption_issue(",
          "def test_constructor_no_pandas_array(",
          "def test_add_column_with_pandas_array(",
          "def test_update_inplace_sets_valid_block_values(",
          "def test_nonconsolidated_item_cache_take("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_constructors.py": [
          "def test_constructor_from_ndarray_with_str_dtype(",
          "def test_constructor_from_2d_datetimearray(",
          "def test_constructor_dict_with_tzaware_scalar(",
          "def test_construct_ndarray_with_nas_and_int_dtype(",
          "def test_construct_from_list_of_datetimes(",
          "def test_constructor_from_tzaware_datetimeindex(",
          "def test_columns_with_leading_underscore_work_with_to_dict(",
          "def test_columns_with_leading_number_and_underscore_work_with_to_dict(",
          "def test_array_of_dt64_nat_with_td64dtype_raises(",
          "def test_datetimelike_values_with_object_dtype(",
          "def test_series_with_name_not_matching_column(",
          "def test_empty_constructor(",
          "def test_empty_constructor_object_index(",
          "def test_emptylike_constructor(",
          "def test_constructor_mixed(",
          "def test_constructor_cast_failure(",
          "def test_constructor_dtype_copy(",
          "def test_constructor_dtype_nocast_view_dataframe(",
          "def test_constructor_dtype_nocast_view_2d_array(",
          "def test_1d_object_array_does_not_copy(",
          "def test_2d_object_array_does_not_copy(",
          "def test_constructor_dtype_list_data(",
          "def test_constructor_list_of_2d_raises(",
          "def test_constructor_mixed_dtypes(",
          "def test_constructor_complex_dtypes(",
          "def test_constructor_dtype_str_na_values(",
          "def test_constructor_rec(",
          "def test_constructor_bool(",
          "def test_constructor_overflow_int64(",
          "def test_constructor_int_overflow(",
          "def test_constructor_numpy_uints(",
          "def test_constructor_ordereddict(",
          "def test_constructor_dict(",
          "def test_constructor_dict_length1(",
          "def test_constructor_dict_with_index(",
          "def test_constructor_dict_with_index_and_columns(",
          "def test_constructor_dict_of_empty_lists(",
          "def test_constructor_dict_with_none(",
          "def test_constructor_dict_errors(",
          "def test_constructor_invalid_items_unused(",
          "def test_constructor_dict_nan_key(",
          "def test_constructor_dict_nan_tuple_key(",
          "def test_constructor_dict_order_insertion(",
          "def test_constructor_dict_nan_key_and_columns(",
          "def test_constructor_multi_index(",
          "def test_constructor_2d_index(",
          "def test_constructor_error_msgs(",
          "def test_constructor_subclass_dict(",
          "def test_constructor_defaultdict(",
          "def test_constructor_dict_block(",
          "def test_constructor_dict_cast(",
          "def test_constructor_dict_cast2(",
          "def test_constructor_dict_dont_upcast(",
          "def test_constructor_dict_dont_upcast2(",
          "def test_constructor_dict_of_tuples(",
          "def test_constructor_dict_of_ranges(",
          "def test_constructor_dict_of_iterators(",
          "def test_constructor_dict_of_generators(",
          "def test_constructor_dict_multiindex(",
          "def test_constructor_dict_datetime64_index(",
          "def test_constructor_dict_timedelta64_index(",
          "def test_constructor_period_dict(",
          "def test_constructor_dict_extension_scalar(",
          "def test_constructor_extension_scalar_data(",
          "def test_nested_dict_frame_constructor(",
          "def test_constructor_ndarray(",
          "def test_constructor_maskedarray(",
          "def test_constructor_maskedarray_nonfloat(",
          "def test_constructor_maskedarray_hardened(",
          "def test_constructor_maskedrecarray_dtype(",
          "def test_constructor_corner_shape(",
          "def test_constructor_dtype(",
          "def test_constructor_dtype_nullable_extension_arrays(",
          "def test_constructor_scalar_inference(",
          "def test_constructor_arrays_and_scalars(",
          "def test_constructor_DataFrame(",
          "def test_constructor_empty_dataframe(",
          "def test_constructor_more(",
          "def test_constructor_empty_list(",
          "def test_constructor_list_of_lists(",
          "def test_nested_pandasarray_matches_nested_ndarray(",
          "def test_constructor_list_like_data_nested_list_column(",
          "def test_constructor_wrong_length_nested_list_column(",
          "def test_constructor_unequal_length_nested_list_column(",
          "def test_constructor_one_element_data_list(",
          "def test_constructor_sequence_like(",
          "def test_constructor_stdlib_array(",
          "def test_constructor_range(",
          "def test_constructor_list_of_ranges(",
          "def test_constructor_iterable(",
          "def test_constructor_iterator(",
          "def test_constructor_list_of_iterators(",
          "def test_constructor_generator(",
          "def test_constructor_list_of_dicts(",
          "def test_constructor_ordered_dict_nested_preserve_order(",
          "def test_constructor_ordered_dict_preserve_order(",
          "def test_constructor_ordered_dict_conflicting_orders(",
          "def test_constructor_list_of_series_aligned_index(",
          "def test_constructor_list_of_derived_dicts(",
          "def test_constructor_ragged(",
          "def test_constructor_scalar(",
          "def test_constructor_Series_copy_bug(",
          "def test_constructor_mixed_dict_and_Series(",
          "def test_constructor_mixed_type_rows(",
          "def test_constructor_tuple(",
          "def test_constructor_list_of_tuples(",
          "def test_constructor_list_of_namedtuples(",
          "def test_constructor_list_of_dataclasses(",
          "def test_constructor_list_of_dataclasses_with_varying_types(",
          "def test_constructor_list_of_dataclasses_error_thrown(",
          "def test_constructor_list_of_dict_order(",
          "def test_constructor_Series_named(",
          "def test_constructor_Series_named_and_columns(",
          "def test_constructor_Series_differently_indexed(",
          "def test_constructor_index_names(",
          "def test_constructor_manager_resize(",
          "def test_constructor_mix_series_nonseries(",
          "def test_constructor_miscast_na_int_dtype(",
          "def test_constructor_column_duplicates(",
          "def test_constructor_empty_with_string_dtype(",
          "def test_constructor_empty_with_string_extension(",
          "def test_constructor_single_value(",
          "def test_constructor_with_datetimes(",
          "def test_constructor_with_datetimes1(",
          "def test_constructor_with_datetimes2(",
          "def test_constructor_with_datetimes3(",
          "def test_constructor_with_datetimes4(",
          "def test_constructor_with_datetimes5(",
          "def test_constructor_with_datetimes6(",
          "def test_constructor_datetimes_with_nulls(",
          "def test_constructor_datetimes_non_ns(",
          "def test_constructor_timedelta_non_ns(",
          "def test_constructor_for_list_with_dtypes(",
          "def test_constructor_frame_copy(",
          "def test_constructor_frame_shallow_copy(",
          "def test_constructor_ndarray_copy(",
          "def test_constructor_series_copy(",
          "def test_constructor_with_nas(",
          "def test_constructor_lists_to_object_dtype(",
          "def test_constructor_ndarray_categorical_dtype(",
          "def test_constructor_categorical(",
          "def test_construct_from_1item_list_of_categorical(",
          "def test_construct_from_list_of_categoricals(",
          "def test_from_nested_listlike_mixed_types(",
          "def test_construct_from_listlikes_mismatched_lengths(",
          "def test_constructor_categorical_series(",
          "def test_check_dtype_empty_numeric_column(",
          "def test_check_dtype_empty_string_column(",
          "def test_to_frame_with_falsey_names(",
          "def test_constructor_range_dtype(",
          "def test_frame_from_list_subclass(",
          "def test_constructor_with_extension_array(",
          "def test_datetime_date_tuple_columns_from_dict(",
          "def test_construct_with_two_categoricalindex_series(",
          "def test_constructor_series_nonexact_categoricalindex(",
          "def test_from_M8_structured(",
          "def test_from_datetime_subclass(",
          "def test_with_mismatched_index_length_raises(",
          "def test_frame_ctor_datetime64_column(",
          "def test_dataframe_constructor_infer_multiindex(",
          "def test_constructor_list_str(",
          "def test_constructor_list_str_na(",
          "def test_dict_nocopy(",
          "def test_construct_from_dict_ea_series(",
          "def test_from_series_with_name_with_columns(",
          "def test_nested_list_columns(",
          "def test_from_2d_object_array_of_periods_or_intervals(",
          "def test_error_from_2darray(",
          "def test_from_dict_with_missing_copy_false(",
          "def test_construction_empty_array_multi_column_raises(",
          "def test_construct_with_strings_and_none(",
          "def test_frame_string_inference(",
          "def test_frame_string_inference_array_string_dtype(",
          "def test_frame_from_dict_of_series_overlapping_monthly_period_indexes(",
          "def test_frame_from_dict_with_mixed_tzaware_indexes(",
          "def test_dict_data_arrow_column_expansion(",
          "def test_floating_values_integer_dtype(",
          "def test_construction_preserves_tzaware_dtypes(",
          "def test_constructor_data_aware_dtype_naive(",
          "def test_from_dict(",
          "def test_from_index(",
          "def test_frame_dict_constructor_datetime64_1680(",
          "def test_frame_datetime64_mixed_index_ctor_1681(",
          "def test_frame_timeseries_column(",
          "def test_nested_dict_construction(",
          "def test_from_tzaware_object_array(",
          "def test_from_tzaware_mixed_object_array(",
          "def test_from_2d_ndarray_with_dtype(",
          "def test_construction_from_set_raises(",
          "def test_construction_from_ndarray_datetimelike(",
          "def test_construction_from_ndarray_with_eadtype_mismatched_columns(",
          "def test_columns_indexes_raise_on_sets(",
          "def test_from_nat_scalar(",
          "def test_from_timedelta_scalar_preserves_nanos(",
          "def test_from_timestamp_scalar_preserves_nanos(",
          "def test_from_timedelta64_scalar_object(",
          "def test_from_scalar_datetimelike_mismatched(",
          "def test_from_out_of_bounds_ns_datetime(",
          "def test_out_of_s_bounds_datetime64(",
          "def test_from_out_of_bounds_ns_timedelta(",
          "def test_out_of_s_bounds_timedelta64(",
          "def test_tzaware_data_tznaive_dtype(",
          "def test_index_allow_non_nano(",
          "def test_dti_tdi_allow_non_nano(",
          "def test_series_allow_non_nano(",
          "def test_frame_allow_non_nano(",
          "def test_frame_from_dict_allow_non_nano("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_cumulative.py": [
          "def test_cumulative_ops_smoke(",
          "def test_cumprod_smoke(",
          "def test_cumulative_ops_match_series_apply(",
          "def test_cumsum_preserve_dtypes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_iteration.py": [
          "def test_keys(",
          "def test_iteritems(",
          "def test_items(",
          "def test_items_names(",
          "def test_iter(",
          "def test_iterrows(",
          "def test_iterrows_iso8601(",
          "def test_iterrows_corner(",
          "def test_itertuples(",
          "def test_sequence_like_with_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_logical_ops.py": [
          "def test_logical_operators_nans(",
          "def test_logical_ops_empty_frame(",
          "def test_logical_ops_bool_frame(",
          "def test_logical_ops_int_frame(",
          "def test_logical_ops_invalid(",
          "def test_logical_operators(",
          "def test_logical_with_nas(",
          "def test_logical_ops_categorical_columns(",
          "def test_int_dtype_different_index_not_bool(",
          "def test_different_dtypes_different_index_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_nonunique_indexes.py": [
          "def test_setattr_columns_vs_construct_with_columns(",
          "def test_setattr_columns_vs_construct_with_columns_datetimeindx(",
          "def test_insert_with_duplicate_columns(",
          "def test_dup_across_dtypes(",
          "def test_column_dups_indexes(",
          "def test_changing_dtypes_with_duplicate_columns(",
          "def test_dup_columns_comparisons(",
          "def test_mixed_column_selection(",
          "def test_multi_axis_dups(",
          "def test_columns_with_dups(",
          "def test_columns_with_dup_index(",
          "def test_multi_dtype(",
          "def test_multi_dtype2(",
          "def test_dups_across_blocks(",
          "def test_dup_columns_across_dtype(",
          "def test_set_value_by_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_npfuncs.py": [
          "def test_asarray_homogeneous(",
          "def test_np_sqrt(",
          "def test_sum_deprecated_axis_behavior(",
          "def test_np_ravel("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_query_eval.py": [
          "def test_query_default(",
          "def test_query_None(",
          "def test_query_python(",
          "def test_query_numexpr(",
          "def test_ops(",
          "def test_dataframe_sub_numexpr_path(",
          "def test_query_non_str(",
          "def test_query_empty_string(",
          "def test_eval_resolvers_as_list(",
          "def test_eval_resolvers_combined(",
          "def test_eval_object_dtype_binop(",
          "def test_query_with_named_multiindex(",
          "def test_query_with_unnamed_multiindex(",
          "def test_query_with_partially_named_multiindex(",
          "def test_query_multiindex_get_index_resolvers(",
          "def test_date_query_with_attribute_access(",
          "def test_date_query_no_attribute_access(",
          "def test_date_query_with_NaT(",
          "def test_date_index_query(",
          "def test_date_index_query_with_NaT(",
          "def test_date_index_query_with_NaT_duplicates(",
          "def test_date_query_with_non_date(",
          "def test_query_syntax_error(",
          "def test_query_scope(",
          "def test_query_doesnt_pickup_local(",
          "def test_query_builtin(",
          "def test_query(",
          "def test_query_index_with_name(",
          "def test_query_index_without_name(",
          "def test_nested_scope(",
          "def test_nested_raises_on_local_self_reference(",
          "def test_local_syntax(",
          "def test_chained_cmp_and_in(",
          "def test_local_variable_with_in(",
          "def test_at_inside_string(",
          "def test_query_undefined_local(",
          "def test_index_resolvers_come_after_columns_with_the_same_name(",
          "def test_inf(",
          "def test_check_tz_aware_index_query(",
          "def test_method_calls_in_query(",
          "def test_date_query_no_attribute_access(",
          "def test_date_query_with_NaT(",
          "def test_date_index_query(",
          "def test_date_index_query_with_NaT(",
          "def test_date_index_query_with_NaT_duplicates(",
          "def test_nested_scope(",
          "def test_query_numexpr_with_min_and_max_columns(",
          "def test_query_builtin(",
          "def test_query_builtin(",
          "def test_str_query_method(",
          "def test_str_list_query_method(",
          "def test_query_with_string_columns(",
          "def test_object_array_eq_ne(",
          "def test_query_with_nested_strings(",
          "def test_query_with_nested_special_character(",
          "def test_query_lex_compare_strings(",
          "def test_query_single_element_booleans(",
          "def test_query_string_scalar_variable(",
          "def test_query_string_null_elements(",
          "def test_simple_expr(",
          "def test_bool_arith_expr(",
          "def test_invalid_type_for_operator_raises(",
          "def test_single_backtick_variable_query(",
          "def test_two_backtick_variables_query(",
          "def test_single_backtick_variable_expr(",
          "def test_two_backtick_variables_expr(",
          "def test_already_underscore_variable(",
          "def test_same_name_but_underscores(",
          "def test_mixed_underscores_and_spaces(",
          "def test_backtick_quote_name_with_no_spaces(",
          "def test_special_characters(",
          "def test_start_with_digit(",
          "def test_keyword(",
          "def test_unneeded_quoting(",
          "def test_parenthesis(",
          "def test_empty_string(",
          "def test_multiple_spaces(",
          "def test_start_with_spaces(",
          "def test_lots_of_operators_string(",
          "def test_missing_attribute(",
          "def test_failing_quote(",
          "def test_failing_character_outside_range(",
          "def test_failing_hashtag(",
          "def test_call_non_named_expression(",
          "def test_ea_dtypes(",
          "def test_ea_dtypes_and_scalar(",
          "def test_ea_dtypes_and_scalar_operation(",
          "def test_query_ea_dtypes(",
          "def test_query_ea_equality_comparison("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_reductions.py": [
          "def test_stat_op_api_float_string_frame(",
          "def test_stat_op_api_float_frame(",
          "def test_stat_op_calc(",
          "def test_stat_op_calc_skew_kurtosis(",
          "def test_median(",
          "def test_stat_operators_attempt_obj_array(",
          "def test_mixed_ops(",
          "def test_reduce_mixed_frame(",
          "def test_nunique(",
          "def test_mean_mixed_datetime_numeric(",
          "def test_mean_includes_datetimes(",
          "def test_mean_mixed_string_decimal(",
          "def test_var_std(",
          "def test_numeric_only_flag(",
          "def test_sem(",
          "def test_mode_dropna(",
          "def test_mode_sortwarning(",
          "def test_mode_empty_df(",
          "def test_operators_timedelta64(",
          "def test_std_timedelta64_skipna_false(",
          "def test_std_datetime64_with_nat(",
          "def test_sum_corner(",
          "def test_axis_1_empty(",
          "def test_sum_prod_nanops(",
          "def test_sum_nanops_timedelta(",
          "def test_sum_nanops_min_count(",
          "def test_sum_nanops_dtype_min_count(",
          "def test_prod_nanops_dtype_min_count(",
          "def test_sum_object(",
          "def test_sum_bool(",
          "def test_sum_mixed_datetime(",
          "def test_mean_corner(",
          "def test_mean_datetimelike(",
          "def test_mean_datetimelike_numeric_only_false(",
          "def test_mean_extensionarray_numeric_only_true(",
          "def test_stats_mixed_type(",
          "def test_sum_bools(",
          "def test_idxmin(",
          "def test_idxmin_empty(",
          "def test_idxmin_numeric_only(",
          "def test_idxmin_axis_2(",
          "def test_idxmax(",
          "def test_idxmax_empty(",
          "def test_idxmax_numeric_only(",
          "def test_idxmax_axis_2(",
          "def test_idxmax_mixed_dtype(",
          "def test_idxmax_idxmin_convert_dtypes(",
          "def test_idxmax_dt64_multicolumn_axis1(",
          "def test_any_all_mixed_float(",
          "def test_any_all_bool_with_na(",
          "def test_any_all_bool_frame(",
          "def test_any_all_extra(",
          "def test_any_all_object_dtype(",
          "def test_any_datetime(",
          "def test_any_all_bool_only(",
          "def test_any_all_np_func(",
          "def test_any_all_object(",
          "def test_any_all_object_bool_only(",
          "def test_series_broadcasting(",
          "def test_min_max_dt64_with_NaT(",
          "def test_min_max_dt64_with_NaT_skipna_false(",
          "def test_min_max_dt64_api_consistency_with_NaT(",
          "def test_min_max_dt64_api_consistency_empty_df(",
          "def test_preserve_timezone(",
          "def test_minmax_tzaware_skipna_axis_1(",
          "def test_frame_any_with_timedelta(",
          "def test_reductions_skipna_none_raises(",
          "def test_reduction_timestamp_smallest_unit(",
          "def test_reduction_timedelta_smallest_unit(",
          "def test_any_all_categorical_dtype_nuisance_column(",
          "def test_median_categorical_dtype_nuisance_column(",
          "def test_min_max_categorical_dtype_non_ordered_nuisance_column(",
          "def test_df_empty_min_count_0(",
          "def test_df_empty_min_count_1(",
          "def test_df_empty_nullable_min_count_0(",
          "def test_df_empty_nullable_min_count_1(",
          "def test_sum_timedelta64_skipna_false(",
          "def test_mixed_frame_with_integer_sum(",
          "def test_minmax_extensionarray(",
          "def test_frame_mixed_numeric_object_with_timestamp(",
          "def test_prod_sum_min_count_mixed_object(",
          "def test_reduction_axis_none_returns_scalar(",
          "def test_fails_on_non_numeric(",
          "def test_numeric_ea_axis_1("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_repr_info.py": [
          "def test_repr_bytes_61_lines(",
          "def test_repr_unicode_level_names(",
          "def test_assign_index_sequences(",
          "def test_repr_with_mi_nat(",
          "def test_repr_with_different_nulls(",
          "def test_repr_with_different_nulls_cols(",
          "def test_multiindex_na_repr(",
          "def test_repr_name_coincide(",
          "def test_repr_to_string(",
          "def test_repr_empty(",
          "def test_repr_mixed(",
          "def test_repr_mixed_big(",
          "def test_repr(",
          "def test_repr_dimensions(",
          "def test_repr_big(",
          "def test_repr_unsortable(",
          "def test_repr_unicode(",
          "def test_unicode_string_with_unicode(",
          "def test_repr_unicode_columns(",
          "def test_str_to_bytes_raises(",
          "def test_very_wide_info_repr(",
          "def test_repr_column_name_unicode_truncation_bug(",
          "def test_latex_repr(",
          "def test_repr_categorical_dates_periods(",
          "def test_repr_np_nat_with_object(",
          "def test_frame_datetime64_pre1900_repr(",
          "def test_frame_to_string_with_periodindex(",
          "def test_to_string_ea_na_in_multiindex(",
          "def test_datetime64tz_slice_non_truncate(",
          "def test_to_records_no_typeerror_in_repr(",
          "def test_to_records_with_na_record_value(",
          "def test_to_records_with_na_record(",
          "def test_to_records_with_inf_as_na_record(",
          "def test_to_records_with_inf_record(",
          "def test_masked_ea_with_formatter(",
          "def test_repr_ea_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_stack_unstack.py": [
          "def test_stack_unstack(",
          "def test_stack_mixed_level(",
          "def test_unstack_not_consolidated(",
          "def test_unstack_fill(",
          "def test_unstack_fill_frame(",
          "def test_unstack_fill_frame_datetime(",
          "def test_unstack_fill_frame_timedelta(",
          "def test_unstack_fill_frame_period(",
          "def test_unstack_fill_frame_categorical(",
          "def test_unstack_tuplename_in_multiindex(",
          "def test_unstack_mixed_type_name_in_multiindex(",
          "def test_unstack_preserve_dtypes(",
          "def test_stack_ints(",
          "def test_stack_mixed_levels(",
          "def test_stack_int_level_names(",
          "def test_unstack_bool(",
          "def test_unstack_level_binding(",
          "def test_unstack_to_series(",
          "def test_unstack_dtypes(",
          "def test_unstack_dtypes_mixed_date(",
          "def test_unstack_non_unique_index_names(",
          "def test_unstack_unused_levels(",
          "def test_unstack_unused_levels_mixed_with_nan(",
          "def test_unstack_unused_level(",
          "def test_unstack_long_index(",
          "def test_unstack_multi_level_cols(",
          "def test_unstack_multi_level_rows_and_cols(",
          "def test_unstack_nan_index1(",
          "def test_unstack_nan_index_repeats(",
          "def test_unstack_nan_index2(",
          "def test_unstack_nan_index3(",
          "def test_unstack_nan_index4(",
          "def test_unstack_nan_index5(",
          "def test_stack_datetime_column_multiIndex(",
          "def test_stack_partial_multiIndex(",
          "def test_stack_full_multiIndex(",
          "def test_stack_preserve_categorical_dtype(",
          "def test_stack_multi_preserve_categorical_dtype(",
          "def test_stack_preserve_categorical_dtype_values(",
          "def test_stack_multi_columns_non_unique_index(",
          "def test_stack_multi_columns_mixed_extension_types(",
          "def test_unstack_mixed_extension_types(",
          "def test_unstack_swaplevel_sortlevel(",
          "def test_unstack_sort_false(",
          "def test_unstack_fill_frame_object(",
          "def test_unstack_timezone_aware_values(",
          "def test_stack_timezone_aware_values(",
          "def test_stack_empty_frame(",
          "def test_stack_unstack_empty_frame(",
          "def test_unstack_single_index_series(",
          "def test_unstacking_multi_index_df(",
          "def test_stack_positional_level_duplicate_column_names(",
          "def test_unstack_non_slice_like_blocks(",
          "def test_stack_sort_false(",
          "def test_stack_sort_false_multi_level(",
          "def test_unstack(",
          "def test_unstack_partial(",
          "def test_unstack_multiple_no_empty_columns(",
          "def test_stack(",
          "def test_stack_duplicate_index(",
          "def test_unstack_odd_failure(",
          "def test_stack_mixed_dtype(",
          "def test_unstack_bug(",
          "def test_stack_unstack_preserve_names(",
          "def test_stack_unstack_wrong_level_name(",
          "def test_unstack_level_name(",
          "def test_stack_level_name(",
          "def test_stack_unstack_multiple(",
          "def test_stack_names_and_numbers(",
          "def test_stack_multiple_out_of_bounds(",
          "def test_unstack_period_series(",
          "def test_unstack_period_frame(",
          "def test_stack_multiple_bug(",
          "def test_stack_dropna(",
          "def test_unstack_multiple_hierarchical(",
          "def test_unstack_sparse_keyspace(",
          "def test_unstack_unobserved_keys(",
          "def test_unstack_number_of_levels_larger_than_int32(",
          "def test_stack_order_with_unsorted_levels(",
          "def test_stack_order_with_unsorted_levels_multi_row(",
          "def test_stack_order_with_unsorted_levels_multi_row_2(",
          "def test_stack_unstack_unordered_multiindex(",
          "def test_unstack_preserve_types(",
          "def test_unstack_group_index_overflow(",
          "def test_unstack_with_missing_int_cast_to_float(",
          "def test_unstack_with_level_has_nan(",
          "def test_stack_nan_in_multiindex_columns(",
          "def test_multi_level_stack_categorical(",
          "def test_stack_nan_level(",
          "def test_unstack_categorical_columns(",
          "def test_stack_unsorted(",
          "def test_stack_nullable_dtype(",
          "def test_unstack_mixed_level_names(",
          "def test_stack_tuple_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_subclass.py": [
          "def test_frame_subclassing_and_slicing(",
          "def test_dataframe_metadata(",
          "def test_indexing_sliced(",
          "def test_subclass_attr_err_propagation(",
          "def test_subclass_align(",
          "def test_subclass_align_combinations(",
          "def test_subclass_iterrows(",
          "def test_subclass_stack(",
          "def test_subclass_stack_multi(",
          "def test_subclass_stack_multi_mixed(",
          "def test_subclass_unstack(",
          "def test_subclass_unstack_multi(",
          "def test_subclass_unstack_multi_mixed(",
          "def test_subclass_pivot(",
          "def test_subclassed_melt(",
          "def test_subclassed_wide_to_long(",
          "def test_subclassed_apply(",
          "def test_subclassed_reductions(",
          "def test_subclassed_count(",
          "def test_isin(",
          "def test_duplicated(",
          "def test_idx(",
          "def test_dot(",
          "def test_memory_usage(",
          "def test_corrwith(",
          "def test_asof(",
          "def test_idxmin_preserves_subclass(",
          "def test_idxmax_preserves_subclass(",
          "def test_convert_dtypes_preserves_subclass(",
          "def test_astype_preserves_subclass(",
          "def test_equals_subclass(",
          "def test_replace_list_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_ufunc.py": [
          "def test_unary_unary(",
          "def test_unary_binary(",
          "def test_binary_input_dispatch_binop(",
          "def test_ufunc_passes_args(",
          "def test_binary_input_aligns_columns(",
          "def test_binary_input_aligns_index(",
          "def test_binary_frame_series_raises(",
          "def test_unary_accumulate_axis(",
          "def test_frame_outer_disallowed(",
          "def test_alignment_deprecation_enforced(",
          "def test_alignment_deprecation_many_inputs_enforced(",
          "def test_array_ufuncs_for_many_arguments("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_unary.py": [
          "def test_neg_numeric(",
          "def test_neg_object(",
          "def test_neg_raises(",
          "def test_invert(",
          "def test_invert_mixed(",
          "def test_invert_empty_not_input(",
          "def test_pos_numeric(",
          "def test_pos_object(",
          "def test_pos_object_raises(",
          "def test_pos_raises(",
          "def test_unary_nullable("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_validate.py": [
          "def test_validate_bool_args("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_dict.py": [
          "def test_constructor_list_of_odicts(",
          "def test_constructor_single_row(",
          "def test_constructor_list_of_series(",
          "def test_constructor_orient(",
          "def test_constructor_from_ordered_dict(",
          "def test_from_dict_columns_parameter(",
          "def test_constructor_from_dict_tuples(",
          "def test_frame_dict_constructor_empty_series(",
          "def test_from_dict_scalars_requires_index(",
          "def test_from_dict_orient_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_records.py": [
          "def test_from_records_dt64tz_frame(",
          "def test_from_records_with_datetimes(",
          "def test_from_records_sequencelike(",
          "def test_from_records_sequencelike_empty(",
          "def test_from_records_dictlike(",
          "def test_from_records_with_index_data(",
          "def test_from_records_bad_index_column(",
          "def test_from_records_non_tuple(",
          "def test_from_records_len0_with_columns(",
          "def test_from_records_series_list_dict(",
          "def test_from_records_series_categorical_index(",
          "def test_frame_from_records_utc(",
          "def test_from_records_to_records(",
          "def test_from_records_nones(",
          "def test_from_records_iterator(",
          "def test_from_records_tuples_generator(",
          "def test_from_records_lists_generator(",
          "def test_from_records_columns_not_modified(",
          "def test_from_records_decimal(",
          "def test_from_records_duplicates(",
          "def test_from_records_set_index_name(",
          "def test_from_records_misc_brokenness(",
          "def test_from_records_empty(",
          "def test_from_records_empty_with_nonempty_fields_gh3682(",
          "def test_from_records_empty2("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_coercion.py": [
          "def test_loc_setitem_multiindex_columns(",
          "def test_37477(",
          "def test_6942(",
          "def test_26395(",
          "def test_15231(",
          "def test_iloc_setitem_unnecesssary_float_upcasting(",
          "def test_12499(",
          "def test_20476("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_delitem.py": [
          "def test_delitem(",
          "def test_delitem_multiindex(",
          "def test_delitem_corner(",
          "def test_delitem_col_still_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_get.py": [
          "def test_get(",
          "def test_get_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_getitem.py": [
          "def test_getitem_unused_level_raises(",
          "def test_getitem_periodindex(",
          "def test_getitem_list_of_labels_categoricalindex_cols(",
          "def test_getitem_sparse_column_return_type_and_dtype(",
          "def test_getitem_string_columns(",
          "def test_getitem_list_missing_key(",
          "def test_getitem_list_duplicates(",
          "def test_getitem_dupe_cols(",
          "def test_getitem_listlike(",
          "def test_getitem_iloc_generator(",
          "def test_getitem_iloc_two_dimensional_generator(",
          "def test_getitem_iloc_dateoffset_days(",
          "def test_getitem_callable(",
          "def test_loc_multiindex_columns_one_level(",
          "def test_getitem_bool_mask_categorical_index(",
          "def test_getitem_bool_mask_duplicate_columns_mixed_dtypes(",
          "def test_getitem_boolean_frame_unaligned_with_duplicate_columns(",
          "def test_getitem_boolean_series_with_duplicate_columns(",
          "def test_getitem_boolean_frame_with_duplicate_columns(",
          "def test_getitem_empty_frame_with_boolean(",
          "def test_getitem_returns_view_when_column_is_unique_in_df(",
          "def test_getitem_frozenset_unique_in_column(",
          "def test_getitem_slice_float64(",
          "def test_getitem_datetime_slice(",
          "def test_getitem_slice_same_dim_only_one_axis(",
          "def test_getitem_dict_and_set_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_get_value.py": [
          "def test_get_set_value_no_partial_indexing(",
          "def test_get_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_indexing.py": [
          "def test_getitem(",
          "def test_getitem_numeric_should_not_fallback_to_positional(",
          "def test_getitem2(",
          "def test_setitem_numeric_should_not_fallback_to_positional(",
          "def test_setitem_list(",
          "def test_setitem_list2(",
          "def test_getitem_boolean(",
          "def test_getitem_boolean_casting(",
          "def test_getitem_boolean_list(",
          "def test_getitem_boolean_iadd(",
          "def test_boolean_index_empty_corner(",
          "def test_getitem_ix_mixed_integer(",
          "def test_getitem_ix_mixed_integer2(",
          "def test_getattr(",
          "def test_setattr_column(",
          "def test_setitem(",
          "def test_setitem2(",
          "def test_setitem_boolean(",
          "def test_setitem_cast(",
          "def test_setitem_corner(",
          "def test_setitem_corner2(",
          "def test_setitem_ambig(",
          "def test_setitem_None(",
          "def test_loc_setitem_boolean_mask_allfalse(",
          "def test_getitem_fancy_slice_integers_step(",
          "def test_getitem_setitem_integer_slice_keyerrors(",
          "def test_fancy_getitem_slice_mixed(",
          "def test_getitem_setitem_non_ix_labels(",
          "def test_ix_multi_take(",
          "def test_getitem_fancy_scalar(",
          "def test_setitem_fancy_scalar(",
          "def test_getitem_fancy_boolean(",
          "def test_setitem_fancy_boolean(",
          "def test_getitem_fancy_ints(",
          "def test_getitem_setitem_boolean_misaligned(",
          "def test_getitem_setitem_boolean_multi(",
          "def test_getitem_setitem_float_labels(",
          "def test_setitem_single_column_mixed_datetime(",
          "def test_setitem_mixed_datetime(",
          "def test_setitem_frame_float(",
          "def test_setitem_frame_mixed(",
          "def test_setitem_frame_mixed_rows_unaligned(",
          "def test_setitem_frame_mixed_key_unaligned(",
          "def test_setitem_frame_mixed_ndarray(",
          "def test_setitem_frame_upcast(",
          "def test_setitem_frame_align(",
          "def test_getitem_setitem_ix_duplicates(",
          "def test_getitem_ix_boolean_duplicates_multiple(",
          "def test_getitem_setitem_ix_bool_keyerror(",
          "def test_single_element_ix_dont_upcast(",
          "def test_iloc_row(",
          "def test_iloc_row_slice_view(",
          "def test_iloc_col(",
          "def test_iloc_col_slice_view(",
          "def test_loc_duplicates(",
          "def test_setitem_with_unaligned_tz_aware_datetime_column(",
          "def test_loc_setitem_datetimelike_with_inference(",
          "def test_getitem_boolean_indexing_mixed(",
          "def test_type_error_multiindex(",
          "def test_getitem_interval_index_partial_indexing(",
          "def test_setitem_array_as_cell_value(",
          "def test_iloc_setitem_nullable_2d_values(",
          "def test_getitem_segfault_with_empty_like_object(",
          "def test_setting_mismatched_na_into_nullable_fails(",
          "def test_loc_expand_empty_frame_keep_index_name(",
          "def test_loc_expand_empty_frame_keep_midx_names(",
          "def test_loc_setitem_rhs_frame(",
          "def test_iloc_setitem_enlarge_no_warning(",
          "def test_loc_internals_not_updated_correctly(",
          "def test_iloc_setitem_string_list_na(",
          "def test_iloc_setitem_string_na(",
          "def test_iloc_setitem_ea_null_slice_length_one_list(",
          "def test_loc_named_tuple_for_midx(",
          "def test_set_2d_casting_date_to_int(",
          "def test_loc_setitem_reordering_with_all_true_indexer(",
          "def test_loc_rhs_empty_warning(",
          "def test_iloc_ea_series_indexer(",
          "def test_iloc_ea_series_indexer_with_na(",
          "def test_loc_bool_multiindex(",
          "def test_loc_datetime_assignment_dtype_does_not_change(",
          "def test_setitem_value_coercing_dtypes(",
          "def test_setitem(",
          "def test_object_casting_indexing_wraps_datetimelike(",
          "def test_loc_iloc_setitem_list_of_lists(",
          "def test_loc_iloc_at_iat_setitem_single_value_in_categories(",
          "def test_loc_iloc_setitem_mask_single_value_in_categories(",
          "def test_loc_iloc_setitem_full_row_non_categorical_rhs(",
          "def test_loc_iloc_setitem_partial_col_categorical_rhs(",
          "def test_loc_iloc_setitem_non_categorical_rhs(",
          "def test_getitem_preserve_object_index_with_dates(",
          "def test_loc_on_multiindex_one_level(",
          "def test_getitem_dict_and_set_deprecated(",
          "def test_getitem_dict_and_set_deprecated_multiindex(",
          "def test_setitem_dict_and_set_disallowed(",
          "def test_setitem_dict_and_set_disallowed_multiindex(",
          "def test_setitem_validation_scalar_bool(",
          "def test_setitem_validation_scalar_int(",
          "def test_setitem_validation_scalar_float("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_insert.py": [
          "def test_insert(",
          "def test_insert_column_bug_4032(",
          "def test_insert_with_columns_dups(",
          "def test_insert_item_cache(",
          "def test_insert_EA_no_warning(",
          "def test_insert_frame(",
          "def test_insert_int64_loc("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_mask.py": [
          "def test_mask(",
          "def test_mask2(",
          "def test_mask_inplace(",
          "def test_mask_edge_case_1xN_frame(",
          "def test_mask_callable(",
          "def test_mask_dtype_bool_conversion(",
          "def test_mask_stringdtype(",
          "def test_mask_where_dtype_timedelta(",
          "def test_mask_return_dtype(",
          "def test_mask_inplace_no_other("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_setitem.py": [
          "def test_setitem_str_subclass(",
          "def test_setitem_dtype(",
          "def test_setitem_list_not_dataframe(",
          "def test_setitem_error_msmgs(",
          "def test_setitem_benchmark(",
          "def test_setitem_different_dtype(",
          "def test_setitem_empty_columns(",
          "def test_setitem_dt64_index_empty_columns(",
          "def test_setitem_timestamp_empty_columns(",
          "def test_setitem_wrong_length_categorical_dtype_raises(",
          "def test_setitem_with_sparse_value(",
          "def test_setitem_with_unaligned_sparse_value(",
          "def test_setitem_period_preserves_dtype(",
          "def test_setitem_dict_preserves_dtypes(",
          "def test_setitem_extension_types(",
          "def test_setitem_with_ea_name(",
          "def test_setitem_dt64_ndarray_with_NaT_and_diff_time_units(",
          "def test_frame_setitem_datetime64_col_other_units(",
          "def test_frame_setitem_existing_datetime64_col_other_units(",
          "def test_setitem_dt64tz(",
          "def test_setitem_periodindex(",
          "def test_setitem_complete_column_with_array(",
          "def test_setitem_period_d_dtype(",
          "def test_setitem_bool_with_numeric_index(",
          "def test_setitem_frame_length_0_str_key(",
          "def test_setitem_frame_duplicate_columns(",
          "def test_setitem_frame_duplicate_columns_size_mismatch(",
          "def test_setitem_df_wrong_column_number(",
          "def test_setitem_listlike_indexer_duplicate_columns(",
          "def test_setitem_listlike_indexer_duplicate_columns_not_equal_length(",
          "def test_setitem_intervals(",
          "def test_setitem_categorical(",
          "def test_setitem_with_empty_listlike(",
          "def test_setitem_same_column(",
          "def test_setitem_multi_index(",
          "def test_setitem_list_missing_columns(",
          "def test_setitem_list_of_tuples(",
          "def test_setitem_iloc_generator(",
          "def test_setitem_iloc_two_dimensional_generator(",
          "def test_setitem_dtypes_bytes_type_to_object(",
          "def test_boolean_mask_nullable_int64(",
          "def test_setitem_ea_dtype_rhs_series(",
          "def test_setitem_npmatrix_2d(",
          "def test_setitem_aligning_dict_with_index(",
          "def test_setitem_rhs_dataframe(",
          "def test_setitem_frame_overwrite_with_ea_dtype(",
          "def test_setitem_frame_midx_columns(",
          "def test_setitem_dt64series(",
          "def test_setitem_datetimeindex(",
          "def test_setitem_object_array_of_tzaware_datetimes(",
          "def test_setitem_listlike_views(",
          "def test_setitem_string_column_numpy_dtype_raising(",
          "def test_setitem_empty_df_duplicate_columns(",
          "def test_setitem_with_expansion_categorical_dtype(",
          "def test_setitem_scalars_no_index(",
          "def test_setitem_newcol_tuple_key(",
          "def test_frame_setitem_newcol_timestamp(",
          "def test_frame_setitem_rangeindex_into_new_col(",
          "def test_setitem_frame_keep_ea_dtype(",
          "def test_loc_expansion_with_timedelta_type(",
          "def test_setitem_slice_position(",
          "def test_setitem_slice_indexer_broadcasting_rhs(",
          "def test_setitem_list_indexer_broadcasting_rhs(",
          "def test_setitem_slice_broadcasting_rhs_mixed_dtypes(",
          "def test_setitem_callable(",
          "def test_setitem_other_callable(",
          "def test_setitem_boolean_mask(",
          "def test_setitem_loc_empty_indexer_raises_with_non_empty_value(",
          "def test_setitem_loc_only_false_indexer_dtype_changed(",
          "def test_setitem_boolean_mask_aligning(",
          "def test_setitem_mask_categorical(",
          "def test_setitem_empty_frame_with_boolean(",
          "def test_setitem_boolean_indexing(",
          "def test_loc_setitem_all_false_boolean_two_blocks(",
          "def test_setitem_ea_boolean_mask(",
          "def test_setitem_always_copy(",
          "def test_setitem_partial_column_inplace(",
          "def test_setitem_duplicate_columns_not_inplace(",
          "def test_setitem_same_dtype_not_inplace(",
          "def test_setitem_listlike_key_scalar_value_not_inplace(",
          "def test_setitem_not_operating_inplace(",
          "def test_setitem_column_update_inplace(",
          "def test_setitem_column_frame_as_category(",
          "def test_setitem_iloc_with_numpy_array(",
          "def test_setitem_frame_dup_cols_dtype(",
          "def test_frame_setitem_empty_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_set_value.py": [
          "def test_set_value(",
          "def test_set_value_resize(",
          "def test_set_value_with_index_dtype_change("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_take.py": [
          "def test_take_slices_deprecated(",
          "def test_take(",
          "def test_take_mixed_type(",
          "def test_take_mixed_numeric("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_where.py": [
          "def test_where_get(",
          "def test_where_upcasting(",
          "def test_where_alignment(",
          "def test_where_invalid(",
          "def test_where_set(",
          "def test_where_series_slicing(",
          "def test_where_array_like(",
          "def test_where_invalid_input_single(",
          "def test_where_invalid_input_multiple(",
          "def test_where_dataframe_col_match(",
          "def test_where_ndframe_align(",
          "def test_where_bug(",
          "def test_where_bug_mixed(",
          "def test_where_bug_transposition(",
          "def test_where_datetime(",
          "def test_where_none(",
          "def test_where_empty_df_and_empty_cond_having_non_bool_dtypes(",
          "def test_where_align(",
          "def test_where_complex(",
          "def test_where_axis(",
          "def test_where_axis_with_upcast(",
          "def test_where_axis_multiple_dtypes(",
          "def test_where_callable(",
          "def test_where_tz_values(",
          "def test_df_where_change_dtype(",
          "def test_df_where_with_category(",
          "def test_where_categorical_filtering(",
          "def test_where_ea_other(",
          "def test_where_interval_noop(",
          "def test_where_interval_fullop_downcast(",
          "def test_where_datetimelike_noop(",
          "def test_where_int_downcasting_deprecated(",
          "def test_where_copies_with_noop(",
          "def test_where_string_dtype(",
          "def test_where_bool_comparison(",
          "def test_where_none_nan_coerce(",
          "def test_where_duplicate_axes_mixed_dtypes(",
          "def test_where_columns_casting(",
          "def test_where_period_invalid_na(",
          "def test_where_nullable_invalid_na(",
          "def test_where_inplace_casting(",
          "def test_where_downcast_to_td64(",
          "def test_where_dt64_2d(",
          "def test_where_producing_ea_cond_for_np_dtype(",
          "def test_where_int_overflow(",
          "def test_where_inplace_no_other("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_xs.py": [
          "def test_xs(",
          "def test_xs_corner(",
          "def test_xs_duplicates(",
          "def test_xs_keep_level(",
          "def test_xs_view(",
          "def test_xs_doc_example(",
          "def test_xs_integer_key(",
          "def test_xs_level(",
          "def test_xs_level_eq_2(",
          "def test_xs_setting_with_copy_error(",
          "def test_xs_setting_with_copy_error_multiple(",
          "def test_xs_with_duplicates(",
          "def test_xs_missing_values_in_index(",
          "def test_xs_named_levels_axis_eq_1(",
          "def test_xs_level_multiple(",
          "def test_xs_level0(",
          "def test_xs_values(",
          "def test_xs_loc_equality(",
          "def test_xs_IndexSlice_argument_not_implemented(",
          "def test_xs_levels_raises(",
          "def test_xs_multiindex_droplevel_false(",
          "def test_xs_droplevel_false(",
          "def test_xs_droplevel_false_view(",
          "def test_xs_list_indexer_droplevel_false("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_add_prefix_suffix.py": [
          "def test_add_prefix_suffix(",
          "def test_add_prefix_suffix_axis(",
          "def test_add_prefix_suffix_invalid_axis("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_align.py": [
          "def test_align_asfreq_method_raises(",
          "def test_frame_align_aware(",
          "def test_align_float(",
          "def test_align_frame_with_series(",
          "def test_align_series_condition(",
          "def test_align_int(",
          "def test_align_mixed_type(",
          "def test_align_mixed_float(",
          "def test_align_mixed_int(",
          "def test_align_categorical(",
          "def test_align_multiindex(",
          "def test_align_series_combinations(",
          "def test_multiindex_align_to_series_with_common_index_level(",
          "def test_multiindex_align_to_series_with_common_index_level_missing_in_left(",
          "def test_multiindex_align_to_series_with_common_index_level_missing_in_right(",
          "def test_multiindex_align_to_series_with_common_index_level_missing_in_both(",
          "def test_multiindex_align_to_series_with_common_index_level_non_unique_cols(",
          "def test_missing_axis_specification_exception(",
          "def test_align_fill_method(",
          "def test_align_series_check_copy(",
          "def test_align_identical_different_object(",
          "def test_align_identical_different_object_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asfreq.py": [
          "def test_asfreq2(",
          "def test_asfreq_datetimeindex_empty(",
          "def test_tz_aware_asfreq_smoke(",
          "def test_asfreq_normalize(",
          "def test_asfreq_keep_index_name(",
          "def test_asfreq_ts(",
          "def test_asfreq_resample_set_correct_freq(",
          "def test_asfreq_empty(",
          "def test_asfreq(",
          "def test_asfreq_datetimeindex(",
          "def test_asfreq_fillvalue(",
          "def test_asfreq_with_date_object_index(",
          "def test_asfreq_with_unsorted_index(",
          "def test_asfreq_after_normalize(",
          "def test_asfreq_2M("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asof.py": [
          "def test_basic(",
          "def test_subset(",
          "def test_missing(",
          "def test_asof_all_nans(",
          "def test_all_nans(",
          "def test_time_zone_aware_index(",
          "def test_is_copy(",
          "def test_asof_periodindex_mismatched_freq(",
          "def test_asof_preserves_bool_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_assign.py": [
          "def test_assign(",
          "def test_assign_multiple(",
          "def test_assign_order(",
          "def test_assign_bad(",
          "def test_assign_dependent("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_astype.py": [
          "def test_astype_float(",
          "def test_astype_mixed_float(",
          "def test_astype_mixed_type(",
          "def test_astype_with_exclude_string(",
          "def test_astype_with_view_float(",
          "def test_astype_with_view_mixed_float(",
          "def test_astype_cast_nan_inf_int(",
          "def test_astype_str(",
          "def test_astype_str_float(",
          "def test_astype_dict_like(",
          "def test_astype_duplicate_col(",
          "def test_astype_duplicate_col_series_arg(",
          "def test_astype_categorical(",
          "def test_astype_categoricaldtype_class_raises(",
          "def test_astype_extension_dtypes(",
          "def test_astype_extension_dtypes_1d(",
          "def test_astype_extension_dtypes_duplicate_col(",
          "def test_astype_column_metadata(",
          "def test_astype_from_object_to_datetime_unit(",
          "def test_astype_from_object_to_timedelta_unit(",
          "def test_astype_from_datetimelike_to_object(",
          "def test_astype_to_datetimelike_unit(",
          "def test_astype_to_datetime_unit(",
          "def test_astype_to_timedelta_unit_ns(",
          "def test_astype_to_timedelta_unit(",
          "def test_astype_to_incorrect_datetimelike(",
          "def test_astype_arg_for_errors(",
          "def test_astype_invalid_conversion(",
          "def test_astype_arg_for_errors_dictlist(",
          "def test_astype_dt64tz(",
          "def test_astype_dt64tz_to_str(",
          "def test_astype_empty_dtype_dict(",
          "def test_astype_ignores_errors_for_extension_dtypes(",
          "def test_astype_tz_conversion(",
          "def test_astype_tz_object_conversion(",
          "def test_astype_dt64_to_string(",
          "def test_astype_td64_to_string(",
          "def test_astype_bytes(",
          "def test_astype_noncontiguous(",
          "def test_astype_retain_attrs(",
          "def test_astype_from_categorical3(",
          "def test_astype_from_categorical4(",
          "def test_categorical_astype_to_int(",
          "def test_astype_categorical_to_string_missing(",
          "def test_frame_astype_no_copy(",
          "def test_astype_copies(",
          "def test_astype_to_string_not_modifying_input("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_at_time.py": [
          "def test_localized_at_time(",
          "def test_at_time(",
          "def test_at_time_midnight(",
          "def test_at_time_nonexistent(",
          "def test_at_time_errors(",
          "def test_at_time_tz(",
          "def test_at_time_raises(",
          "def test_at_time_axis(",
          "def test_at_time_datetimeindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_between_time.py": [
          "def test_between_time_formats(",
          "def test_localized_between_time(",
          "def test_between_time_types(",
          "def test_between_time(",
          "def test_between_time_raises(",
          "def test_between_time_axis(",
          "def test_between_time_axis_aliases(",
          "def test_between_time_axis_raises(",
          "def test_between_time_datetimeindex(",
          "def test_between_time_incorrect_arg_inclusive("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_clip.py": [
          "def test_clip(",
          "def test_inplace_clip(",
          "def test_dataframe_clip(",
          "def test_clip_mixed_numeric(",
          "def test_clip_against_series(",
          "def test_clip_against_list_like(",
          "def test_clip_against_frame(",
          "def test_clip_against_unordered_columns(",
          "def test_clip_with_na_args(",
          "def test_clip_int_data_with_float_bound(",
          "def test_clip_with_list_bound("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine.py": [
          "def test_combine_datetlike_udf(",
          "def test_combine_generic("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine_first.py": [
          "def test_combine_first_mixed(",
          "def test_combine_first(",
          "def test_combine_first_mixed_bug(",
          "def test_combine_first_same_as_in_update(",
          "def test_combine_first_doc_example(",
          "def test_combine_first_return_obj_type_with_bools(",
          "def test_combine_first_convert_datatime_correctly(",
          "def test_combine_first_align_nan(",
          "def test_combine_first_timezone(",
          "def test_combine_first_timedelta(",
          "def test_combine_first_period(",
          "def test_combine_first_int(",
          "def test_combine_first_with_asymmetric_other(",
          "def test_combine_first_string_dtype_only_na(",
          "def test_combine_first_timestamp_bug(",
          "def test_combine_first_timestamp_bug_NaT(",
          "def test_combine_first_with_nan_multiindex(",
          "def test_combine_preserve_dtypes(",
          "def test_combine_first_duplicates_rows_for_nan_index_values(",
          "def test_combine_first_int64_not_cast_to_float64(",
          "def test_midx_losing_dtype(",
          "def test_combine_first_empty_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_compare.py": [
          "def test_compare_axis(",
          "def test_compare_various_formats(",
          "def test_compare_with_equal_nulls(",
          "def test_compare_with_non_equal_nulls(",
          "def test_compare_multi_index(",
          "def test_compare_unaligned_objects(",
          "def test_compare_result_names(",
          "def test_invalid_input_result_names(",
          "def test_compare_ea_and_np_dtype(",
          "def test_compare_nullable_int64_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_convert_dtypes.py": [
          "def test_convert_dtypes(",
          "def test_convert_empty(",
          "def test_convert_dtypes_retain_column_names(",
          "def test_pyarrow_dtype_backend(",
          "def test_pyarrow_dtype_backend_already_pyarrow(",
          "def test_pyarrow_dtype_backend_from_pandas_nullable(",
          "def test_pyarrow_dtype_empty_object(",
          "def test_pyarrow_engine_lines_false(",
          "def test_pyarrow_backend_no_conversion(",
          "def test_convert_dtypes_pyarrow_to_np_nullable(",
          "def test_convert_dtypes_pyarrow_timestamp("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_copy.py": [
          "def test_copy_index_name_checking(",
          "def test_copy_cache(",
          "def test_copy(",
          "def test_copy_consolidates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_count.py": [
          "def test_count(",
          "def test_count_objects("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_cov_corr.py": [
          "def test_cov(",
          "def test_cov_ddof(",
          "def test_cov_nullable_integer(",
          "def test_cov_numeric_only(",
          "def test_corr_scipy_method(",
          "def test_corr_non_numeric(",
          "def test_corr_nooverlap(",
          "def test_corr_constant(",
          "def test_corr_int_and_boolean(",
          "def test_corr_cov_independent_index_column(",
          "def test_corr_invalid_method(",
          "def test_corr_int(",
          "def test_corr_nullable_integer(",
          "def test_corr_item_cache(",
          "def test_corr_for_constant_columns(",
          "def test_calc_corr_small_numbers(",
          "def test_corr_min_periods_greater_than_length(",
          "def test_corr_numeric_only(",
          "def test_corrwith(",
          "def test_corrwith_with_objects(",
          "def test_corrwith_series(",
          "def test_corrwith_matches_corrcoef(",
          "def test_corrwith_mixed_dtypes(",
          "def test_corrwith_index_intersection(",
          "def test_corrwith_index_union(",
          "def test_corrwith_dup_cols(",
          "def test_corr_numerical_instabilities(",
          "def test_corrwith_spearman(",
          "def test_corrwith_kendall(",
          "def test_corrwith_spearman_with_tied_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_describe.py": [
          "def test_describe_bool_in_mixed_frame(",
          "def test_describe_empty_object(",
          "def test_describe_bool_frame(",
          "def test_describe_categorical(",
          "def test_describe_empty_categorical_column(",
          "def test_describe_categorical_columns(",
          "def test_describe_datetime_columns(",
          "def test_describe_timedelta_values(",
          "def test_describe_tz_values(",
          "def test_datetime_is_numeric_includes_datetime(",
          "def test_describe_tz_values2(",
          "def test_describe_percentiles_integer_idx(",
          "def test_describe_does_not_raise_error_for_dictlike_elements(",
          "def test_describe_when_include_all_exclude_not_allowed(",
          "def test_describe_with_duplicate_columns(",
          "def test_ea_with_na(",
          "def test_describe_exclude_pa_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_diff.py": [
          "def test_diff_requires_integer(",
          "def test_diff(",
          "def test_diff_int_dtype(",
          "def test_diff_mixed_numeric(",
          "def test_diff_axis1_nonconsolidated(",
          "def test_diff_timedelta64_with_nat(",
          "def test_diff_datetime_axis0_with_nat(",
          "def test_diff_datetime_with_nat_zero_periods(",
          "def test_diff_datetime_axis0(",
          "def test_diff_datetime_axis1(",
          "def test_diff_timedelta(",
          "def test_diff_mixed_dtype(",
          "def test_diff_neg_n(",
          "def test_diff_float_n(",
          "def test_diff_axis(",
          "def test_diff_period(",
          "def test_diff_axis1_mixed_dtypes(",
          "def test_diff_axis1_mixed_dtypes_large_periods(",
          "def test_diff_axis1_mixed_dtypes_negative_periods(",
          "def test_diff_sparse(",
          "def test_diff_integer_na(",
          "def test_diff_readonly(",
          "def test_diff_all_int_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dot.py": [
          "def test_dot_equiv_values_dot(",
          "def test_dot_2d_ndarray(",
          "def test_dot_1d_ndarray(",
          "def test_dot_series(",
          "def test_dot_series_alignment(",
          "def test_dot_aligns(",
          "def test_dot_shape_mismatch(",
          "def test_dot_misaligned(",
          "def test_arrow_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop.py": [
          "def test_drop_raise_exception_if_labels_not_in_level(",
          "def test_drop_errors_ignore(",
          "def test_drop_with_non_unique_datetime_index_and_invalid_keys(",
          "def test_drop_names(",
          "def test_drop(",
          "def test_drop_multiindex_not_lexsorted(",
          "def test_drop_api_equivalence(",
          "def test_raise_on_drop_duplicate_index(",
          "def test_drop_empty_list(",
          "def test_drop_non_empty_list(",
          "def test_drop_empty_listlike_non_unique_datetime_index(",
          "def test_mixed_depth_drop(",
          "def test_drop_multiindex_other_level_nan(",
          "def test_drop_nonunique(",
          "def test_drop_level(",
          "def test_drop_level_nonunique_datetime(",
          "def test_drop_tz_aware_timestamp_across_dst(",
          "def test_drop_preserve_names(",
          "def test_inplace_drop_and_operation(",
          "def test_drop_with_non_unique_multiindex(",
          "def test_drop_tuple_with_non_unique_multiindex(",
          "def test_drop_with_duplicate_columns(",
          "def test_drop_with_duplicate_columns2(",
          "def test_drop_inplace_no_leftover_column_reference(",
          "def test_drop_level_missing_label_multiindex(",
          "def test_drop_index_ea_dtype(",
          "def test_drop_parse_strings_datetime_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_droplevel.py": [
          "def test_droplevel("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dropna.py": [
          "def test_dropEmptyRows(",
          "def test_dropIncompleteRows(",
          "def test_dropna(",
          "def test_drop_and_dropna_caching(",
          "def test_dropna_corner(",
          "def test_dropna_multiple_axes(",
          "def test_dropna_tz_aware_datetime(",
          "def test_dropna_categorical_interval_index(",
          "def test_dropna_with_duplicate_columns(",
          "def test_set_single_column_subset(",
          "def test_single_column_not_present_in_axis(",
          "def test_subset_is_nparray(",
          "def test_no_nans_in_frame(",
          "def test_how_thresh_param_incompatible(",
          "def test_dropna_ignore_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop_duplicates.py": [
          "def test_drop_duplicates_with_misspelled_column_name(",
          "def test_drop_duplicates(",
          "def test_drop_duplicates_with_duplicate_column_names(",
          "def test_drop_duplicates_for_take_all(",
          "def test_drop_duplicates_tuple(",
          "def test_drop_duplicates_empty(",
          "def test_drop_duplicates_NA(",
          "def test_drop_duplicates_NA_for_take_all(",
          "def test_drop_duplicates_inplace(",
          "def test_drop_duplicates_ignore_index(",
          "def test_drop_duplicates_null_in_object_column(",
          "def test_drop_duplicates_series_vs_dataframe(",
          "def test_drop_duplicates_non_boolean_ignore_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dtypes.py": [
          "def test_empty_frame_dtypes(",
          "def test_datetime_with_tz_dtypes(",
          "def test_dtypes_are_correct_after_column_slice(",
          "def test_dtypes_are_correct_after_groupby_last(",
          "def test_dtypes_gh8722(",
          "def test_dtypes_timedeltas(",
          "def test_frame_apply_np_array_return_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_duplicated.py": [
          "def test_duplicated_with_misspelled_column_name(",
          "def test_duplicated_implemented_no_recursion(",
          "def test_duplicated_keep(",
          "def test_duplicated_nan_none(",
          "def test_duplicated_subset(",
          "def test_duplicated_on_empty_frame(",
          "def test_frame_datetime64_duplicated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_equals.py": [
          "def test_dataframe_not_equal(",
          "def test_equals_different_blocks(",
          "def test_equals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_explode.py": [
          "def test_error(",
          "def test_error_multi_columns(",
          "def test_basic(",
          "def test_multi_index_rows(",
          "def test_multi_index_columns(",
          "def test_usecase(",
          "def test_duplicate_index(",
          "def test_ignore_index(",
          "def test_explode_sets(",
          "def test_multi_columns(",
          "def test_multi_columns_nan_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_fillna.py": [
          "def test_fillna_dict_inplace_nonunique_columns(",
          "def test_fillna_on_column_view(",
          "def test_fillna_datetime(",
          "def test_fillna_mixed_type(",
          "def test_fillna_mixed_float(",
          "def test_fillna_empty(",
          "def test_fillna_different_dtype(",
          "def test_fillna_limit_and_value(",
          "def test_fillna_datelike(",
          "def test_fillna_tzaware(",
          "def test_fillna_tzaware_different_column(",
          "def test_na_actions_categorical(",
          "def test_fillna_categorical_nan(",
          "def test_fillna_downcast(",
          "def test_fillna_downcast_false(",
          "def test_fillna_downcast_noop(",
          "def test_fillna_dictlike_value_duplicate_colnames(",
          "def test_fillna_dtype_conversion(",
          "def test_fillna_dtype_conversion_equiv_replace(",
          "def test_fillna_datetime_columns(",
          "def test_ffill(",
          "def test_bfill(",
          "def test_frame_pad_backfill_limit(",
          "def test_frame_fillna_limit(",
          "def test_fillna_skip_certain_blocks(",
          "def test_fillna_positive_limit(",
          "def test_fillna_integer_limit(",
          "def test_fillna_inplace(",
          "def test_fillna_dict_series(",
          "def test_fillna_dataframe(",
          "def test_fillna_columns(",
          "def test_fillna_invalid_method(",
          "def test_fillna_invalid_value(",
          "def test_fillna_col_reordering(",
          "def test_fill_corner(",
          "def test_fillna_downcast_dict(",
          "def test_fillna_with_columns_and_limit(",
          "def test_fillna_datetime_inplace(",
          "def test_fillna_inplace_with_columns_limit_and_value(",
          "def test_inplace_dict_update_view(",
          "def test_single_block_df_with_horizontal_axis(",
          "def test_fillna_with_multi_index_frame(",
          "def test_fillna_nonconsolidated_frame(",
          "def test_fillna_nones_inplace(",
          "def test_pad_backfill_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_filter.py": [
          "def test_filter(",
          "def test_filter_regex_search(",
          "def test_filter_unicode(",
          "def test_filter_bytestring(",
          "def test_filter_corner(",
          "def test_filter_regex_non_string(",
          "def test_filter_keep_order(",
          "def test_filter_different_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_first_and_last.py": [
          "def test_first_subset(",
          "def test_first_last_raises(",
          "def test_last_subset(",
          "def test_first_with_first_day_last_of_month(",
          "def test_first_with_first_day_end_of_frq_n_greater_one(",
          "def test_empty_not_input("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_first_valid_index.py": [
          "def test_first_valid_index_single_nan(",
          "def test_first_valid_index_empty(",
          "def test_first_last_valid_frame(",
          "def test_first_last_valid(",
          "def test_first_last_valid_all_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_get_numeric_data.py": [
          "def test_get_numeric_data_preserve_dtype(",
          "def test_get_numeric_data(",
          "def test_get_numeric_data_mixed_dtype(",
          "def test_get_numeric_data_extension_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_head_tail.py": [
          "def test_head_tail_generic(",
          "def test_head_tail(",
          "def test_head_tail_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_infer_objects.py": [
          "def test_infer_objects("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_interpolate.py": [
          "def test_interpolate_complex(",
          "def test_interpolate_datetimelike_values(",
          "def test_interpolate_inplace(",
          "def test_interp_basic(",
          "def test_interp_basic_with_non_range_index(",
          "def test_interp_empty(",
          "def test_interp_bad_method(",
          "def test_interp_combo(",
          "def test_inerpolate_invalid_downcast(",
          "def test_interp_nan_idx(",
          "def test_interp_various(",
          "def test_interp_alt_scipy(",
          "def test_interp_rowwise(",
          "def test_interp_axis_names(",
          "def test_rowwise_alt(",
          "def test_interp_leading_nans(",
          "def test_interp_raise_on_only_mixed(",
          "def test_interp_raise_on_all_object_dtype(",
          "def test_interp_inplace(",
          "def test_interp_inplace_row(",
          "def test_interp_ignore_all_good(",
          "def test_interp_time_inplace_axis(",
          "def test_interp_string_axis(",
          "def test_interp_fillna_methods(",
          "def test_interpolate_empty_df("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isetitem.py": [
          "def test_isetitem_ea_df(",
          "def test_isetitem_ea_df_scalar_indexer(",
          "def test_isetitem_dimension_mismatch("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isin.py": [
          "def test_isin(",
          "def test_isin_empty(",
          "def test_isin_dict(",
          "def test_isin_with_string_scalar(",
          "def test_isin_df(",
          "def test_isin_tuples(",
          "def test_isin_df_dupe_values(",
          "def test_isin_dupe_self(",
          "def test_isin_against_series(",
          "def test_isin_multiIndex(",
          "def test_isin_empty_datetimelike(",
          "def test_isin_category_frame(",
          "def test_isin_read_only(",
          "def test_isin_not_lossy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_is_homogeneous_dtype.py": [
          "def test_is_homogeneous_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_iterrows.py": [
          "def test_no_overflow_of_freq_and_time_in_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_join.py": [
          "def test_join(",
          "def test_suffix_on_list_join(",
          "def test_join_invalid_validate(",
          "def test_join_on_single_col_dup_on_right(",
          "def test_join_on_single_col_dup_on_left(",
          "def test_join_on_single_col_dup_on_both(",
          "def test_join_on_multi_col_check_dup(",
          "def test_join_index(",
          "def test_join_index_more(",
          "def test_join_index_series(",
          "def test_join_overlap(",
          "def test_join_period_index(",
          "def test_join_left_sequence_non_unique_index(",
          "def test_join_list_series(",
          "def test_suppress_future_warning_with_sort_kw(",
          "def test_join(",
          "def test_join_segfault(",
          "def test_join_str_datetime(",
          "def test_join_multiindex_leftright(",
          "def test_join_multiindex_dates(",
          "def test_merge_join_different_levels_raises(",
          "def test_frame_join_tzaware("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_map.py": [
          "def test_map(",
          "def test_map_float_object_conversion(",
          "def test_map_keeps_dtype(",
          "def test_map_str(",
          "def test_map_datetimelike(",
          "def test_map_empty(",
          "def test_map_kwargs(",
          "def test_map_na_ignore(",
          "def test_map_box_timestamps(",
          "def test_map_box(",
          "def test_frame_map_dont_convert_datetime64(",
          "def test_map_function_runs_once(",
          "def test_map_type(",
          "def test_map_invalid_na_action(",
          "def test_applymap_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_matmul.py": [
          "def test_matmul(",
          "def test_matmul_message_shapes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_nlargest.py": [
          "def test_nlargest_n(",
          "def test_nlargest_error(",
          "def test_nlargest_all_dtypes(",
          "def test_nlargest_duplicates_on_starter_columns(",
          "def test_nlargest_n_identical_values(",
          "def test_nlargest_n_duplicate_index(",
          "def test_nlargest_duplicate_keep_all_ties(",
          "def test_nlargest_multiindex_column_lookup(",
          "def test_nlargest_nan(",
          "def test_nsmallest_nan_after_n_element("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pct_change.py": [
          "def test_pct_change_with_nas(",
          "def test_pct_change_numeric(",
          "def test_pct_change(",
          "def test_pct_change_shift_over_nas(",
          "def test_pct_change_periods_freq(",
          "def test_pct_change_with_duplicated_indices(",
          "def test_pct_change_none_beginning_no_warning("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pipe.py": [
          "def test_pipe(",
          "def test_pipe_tuple(",
          "def test_pipe_tuple_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pop.py": [
          "def test_pop(",
          "def test_pop_non_unique_cols(",
          "def test_mixed_depth_pop("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_quantile.py": [
          "def test_quantile_sparse(",
          "def test_quantile(",
          "def test_empty(",
          "def test_non_numeric_exclusion(",
          "def test_axis(",
          "def test_axis_numeric_only_true(",
          "def test_quantile_date_range(",
          "def test_quantile_axis_mixed(",
          "def test_quantile_axis_parameter(",
          "def test_quantile_interpolation(",
          "def test_quantile_interpolation_datetime(",
          "def test_quantile_interpolation_int(",
          "def test_quantile_multi(",
          "def test_quantile_multi_axis_1(",
          "def test_quantile_multi_empty(",
          "def test_quantile_datetime(",
          "def test_quantile_dt64_empty(",
          "def test_quantile_invalid(",
          "def test_quantile_box(",
          "def test_quantile_box_nat(",
          "def test_quantile_nan(",
          "def test_quantile_nat(",
          "def test_quantile_empty_no_rows_floats(",
          "def test_quantile_empty_no_rows_ints(",
          "def test_quantile_empty_no_rows_dt64(",
          "def test_quantile_empty_no_columns(",
          "def test_quantile_item_cache(",
          "def test_invalid_method(",
          "def test_table_invalid_interpolation(",
          "def test_quantile_ea(",
          "def test_quantile_ea_with_na(",
          "def test_quantile_ea_all_na(",
          "def test_quantile_ea_scalar(",
          "def test_empty_numeric(",
          "def test_empty_datelike(",
          "def test_datelike_numeric_only("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rank.py": [
          "def test_rank(",
          "def test_rank2(",
          "def test_rank_does_not_mutate(",
          "def test_rank_mixed_frame(",
          "def test_rank_na_option(",
          "def test_rank_axis(",
          "def test_rank_methods_frame(",
          "def test_rank_descending(",
          "def test_rank_2d_tie_methods(",
          "def test_rank_pct_true(",
          "def test_pct_max_many_rows(",
          "def test_rank_inf_and_nan(",
          "def test_df_series_inf_nan_consistency(",
          "def test_rank_both_inf(",
          "def test_rank_inf_nans_na_option(",
          "def test_rank_object_first(",
          "def test_rank_mixed_axis_zero("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex.py": [
          "def test_dti_set_index_reindex_datetimeindex(",
          "def test_dti_set_index_reindex_freq_with_tz(",
          "def test_set_reset_index_intervalindex(",
          "def test_setitem_reset_index_dtypes(",
          "def test_reindex_timestamp_with_fold(",
          "def test_reindex_tzaware_fill_value(",
          "def test_reindex_copies(",
          "def test_reindex_copies_ea(",
          "def test_reindex_date_fill_value(",
          "def test_reindex_with_multi_index(",
          "def test_reindex_methods(",
          "def test_reindex_methods_nearest_special(",
          "def test_reindex_nearest_tz(",
          "def test_reindex_nearest_tz_empty_frame(",
          "def test_reindex_frame_add_nat(",
          "def test_reindex_frame_tz_ffill_bfill(",
          "def test_reindex_limit(",
          "def test_reindex_level_verify_first_level(",
          "def test_reindex_level_verify_first_level_repeats(",
          "def test_reindex_level_verify_repeats(",
          "def test_reindex_level_verify(",
          "def test_non_monotonic_reindex_methods(",
          "def test_reindex_sparse(",
          "def test_reindex(",
          "def test_reindex_nan(",
          "def test_reindex_name_remains(",
          "def test_reindex_int(",
          "def test_reindex_columns(",
          "def test_reindex_columns_method(",
          "def test_reindex_axes(",
          "def test_reindex_fill_value(",
          "def test_reindex_uint_dtypes_fill_value(",
          "def test_reindex_single_column_ea_index_and_columns(",
          "def test_reindex_dups(",
          "def test_reindex_with_duplicate_columns(",
          "def test_reindex_axis_style(",
          "def test_reindex_positional_raises(",
          "def test_reindex_axis_style_raises(",
          "def test_reindex_single_named_indexer(",
          "def test_reindex_api_equivalence(",
          "def test_reindex_boolean(",
          "def test_reindex_objects(",
          "def test_reindex_corner(",
          "def test_reindex_with_nans(",
          "def test_reindex_multi(",
          "def test_reindex_multi_categorical_time(",
          "def test_reindex_with_categoricalindex(",
          "def test_reindex_signature(",
          "def test_reindex_multiindex_ffill_added_rows(",
          "def test_reindex_empty_frame(",
          "def test_reindex_empty(",
          "def test_reindex_datetimelike_to_object(",
          "def test_reindex_not_category(",
          "def test_invalid_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex_like.py": [
          "def test_reindex_like(",
          "def test_reindex_like_methods(",
          "def test_reindex_like_subclass("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename.py": [
          "def test_rename_signature(",
          "def test_rename_mi(",
          "def test_rename(",
          "def test_rename_chainmap(",
          "def test_rename_multiindex(",
          "def test_rename_nocopy(",
          "def test_rename_inplace(",
          "def test_rename_bug(",
          "def test_rename_bug2(",
          "def test_rename_errors_raises(",
          "def test_rename_errors(",
          "def test_rename_objects(",
          "def test_rename_axis_style(",
          "def test_rename_mapper_multi(",
          "def test_rename_positional_named(",
          "def test_rename_axis_style_raises(",
          "def test_rename_positional_raises(",
          "def test_rename_no_mappings_raises(",
          "def test_rename_mapper_and_positional_arguments_raises(",
          "def test_rename_with_duplicate_columns(",
          "def test_rename_boolean_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename_axis.py": [
          "def test_rename_axis_inplace(",
          "def test_rename_axis_raises(",
          "def test_rename_axis_mapper(",
          "def test_rename_axis_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reorder_levels.py": [
          "def test_reorder_levels(",
          "def test_reorder_levels_swaplevel_equivalence("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_replace.py": [
          "def test_replace_inplace(",
          "def test_regex_replace_list_obj(",
          "def test_regex_replace_list_mixed(",
          "def test_regex_replace_list_mixed_inplace(",
          "def test_regex_replace_dict_mixed(",
          "def test_regex_replace_dict_nested(",
          "def test_regex_replace_dict_nested_non_first_character(",
          "def test_regex_replace_dict_nested_gh4115(",
          "def test_regex_replace_list_to_scalar(",
          "def test_regex_replace_str_to_numeric(",
          "def test_regex_replace_regex_list_to_numeric(",
          "def test_regex_replace_series_of_regexes(",
          "def test_regex_replace_numeric_to_object_conversion(",
          "def test_joint_simple_replace_and_regex_replace(",
          "def test_replace_regex_metachar(",
          "def test_regex_replace_string_types(",
          "def test_replace(",
          "def test_replace_list(",
          "def test_replace_with_empty_list(",
          "def test_replace_series_dict(",
          "def test_replace_convert(",
          "def test_replace_mixed(",
          "def test_replace_mixed_int_block_upcasting(",
          "def test_replace_mixed_int_block_splitting(",
          "def test_replace_mixed2(",
          "def test_replace_mixed3(",
          "def test_replace_nullable_int_with_string_doesnt_cast(",
          "def test_replace_with_nullable_column(",
          "def test_replace_simple_nested_dict(",
          "def test_replace_simple_nested_dict_with_nonexistent_value(",
          "def test_replace_NA_with_None(",
          "def test_replace_NAT_with_None(",
          "def test_replace_with_None_keeps_categorical(",
          "def test_replace_value_is_none(",
          "def test_replace_for_new_dtypes(",
          "def test_replace_dtypes(",
          "def test_replace_input_formats_listlike(",
          "def test_replace_input_formats_scalar(",
          "def test_replace_limit(",
          "def test_replace_dict_no_regex(",
          "def test_replace_series_no_regex(",
          "def test_replace_dict_tuple_list_ordering_remains_the_same(",
          "def test_replace_doesnt_replace_without_regex(",
          "def test_replace_bool_with_string(",
          "def test_replace_pure_bool_with_string_no_op(",
          "def test_replace_bool_with_bool(",
          "def test_replace_with_dict_with_bool_keys(",
          "def test_replace_dict_strings_vs_ints(",
          "def test_replace_truthy(",
          "def test_nested_dict_overlapping_keys_replace_int(",
          "def test_nested_dict_overlapping_keys_replace_str(",
          "def test_replace_swapping_bug(",
          "def test_replace_period(",
          "def test_replace_datetime(",
          "def test_replace_datetimetz(",
          "def test_replace_with_empty_dictlike(",
          "def test_replace_method(",
          "def test_categorical_replace_with_dict(",
          "def test_replace_commutative(",
          "def test_replace_replacer_dtype(",
          "def test_replace_after_convert_dtypes(",
          "def test_replace_invalid_to_replace(",
          "def test_replace_no_replacement_dtypes(",
          "def test_replace_with_duplicate_columns(",
          "def test_replace_ea_ignore_float(",
          "def test_replace_value_category_type(",
          "def test_replace_dict_category_type(",
          "def test_replace_with_compiled_regex(",
          "def test_replace_intervals(",
          "def test_replace_unicode(",
          "def test_replace_bytes(",
          "def test_replace_list_with_mixed_type(",
          "def test_replace_value_none_dtype_numeric(",
          "def test_replace_with_nil_na(",
          "def test_regex_replace_scalar(",
          "def test_replace_regex_dtype_frame(",
          "def test_replace_with_value_also_being_replaced(",
          "def test_replace_categorical_no_replacement(",
          "def test_replace_object_splitting("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reset_index.py": [
          "def test_reset_index_empty_rangeindex(",
          "def test_set_reset(",
          "def test_set_index_reset_index_dt64tz(",
          "def test_reset_index_tz(",
          "def test_frame_reset_index_tzaware_index(",
          "def test_reset_index_with_intervals(",
          "def test_reset_index(",
          "def test_reset_index_name(",
          "def test_reset_index_level(",
          "def test_reset_index_level_missing(",
          "def test_reset_index_right_dtype(",
          "def test_reset_index_multiindex_col(",
          "def test_reset_index_multiindex_nan(",
          "def test_reset_index_with_datetimeindex_cols(",
          "def test_reset_index_range(",
          "def test_reset_index_multiindex_columns(",
          "def test_reset_index_duplicate_columns_allow(",
          "def test_reset_index_duplicate_columns_default(",
          "def test_reset_index_allow_duplicates_check(",
          "def test_reset_index_datetime(",
          "def test_reset_index_period(",
          "def test_reset_index_delevel_infer_dtype(",
          "def test_reset_index_with_drop(",
          "def test_reset_index_nat_multiindex(",
          "def test_rest_index_multiindex_categorical_with_missing_values(",
          "def test_reset_index_dtypes_on_empty_frame_with_multiindex(",
          "def test_reset_index_empty_frame_with_datetime64_multiindex(",
          "def test_reset_index_empty_frame_with_datetime64_multiindex_from_groupby(",
          "def test_reset_index_multiindex_nat(",
          "def test_reset_index_interval_columns_object_cast(",
          "def test_reset_index_rename(",
          "def test_reset_index_rename_multiindex(",
          "def test_errorreset_index_rename(",
          "def test_reset_index_false_index_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_round.py": [
          "def test_round(",
          "def test_round_numpy(",
          "def test_round_numpy_with_nan(",
          "def test_round_mixed_type(",
          "def test_round_with_duplicate_columns(",
          "def test_round_builtin(",
          "def test_round_nonunique_categorical(",
          "def test_round_interval_category_columns(",
          "def test_round_empty_not_input("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sample.py": [
          "def test_sample(",
          "def test_sample_lengths(",
          "def test_sample_invalid_random_state(",
          "def test_sample_wont_accept_n_and_frac(",
          "def test_sample_requires_positive_n_frac(",
          "def test_sample_requires_integer_n(",
          "def test_sample_invalid_weight_lengths(",
          "def test_sample_negative_weights(",
          "def test_sample_inf_weights(",
          "def test_sample_zero_weights(",
          "def test_sample_missing_weights(",
          "def test_sample_none_weights(",
          "def test_sample_random_state(",
          "def test_sample_generator(",
          "def test_sample_upsampling_without_replacement(",
          "def test_sample(",
          "def test_sample_axis1(",
          "def test_sample_aligns_weights_with_frame(",
          "def test_sample_is_copy(",
          "def test_sample_does_not_modify_weights(",
          "def test_sample_ignore_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_select_dtypes.py": [
          "def test_select_dtypes_include_using_list_like(",
          "def test_select_dtypes_exclude_using_list_like(",
          "def test_select_dtypes_exclude_include_using_list_like(",
          "def test_select_dtypes_exclude_include_int(",
          "def test_select_dtypes_include_using_scalars(",
          "def test_select_dtypes_exclude_using_scalars(",
          "def test_select_dtypes_include_exclude_using_scalars(",
          "def test_select_dtypes_include_exclude_mixed_scalars_lists(",
          "def test_select_dtypes_duplicate_columns(",
          "def test_select_dtypes_not_an_attr_but_still_valid_dtype(",
          "def test_select_dtypes_empty(",
          "def test_select_dtypes_bad_datetime64(",
          "def test_select_dtypes_datetime_with_tz(",
          "def test_select_dtypes_str_raises(",
          "def test_select_dtypes_bad_arg_raises(",
          "def test_select_dtypes_typecodes(",
          "def test_select_dtypes_numeric(",
          "def test_select_dtypes_numeric_nullable_string(",
          "def test_select_dtypes_float_dtype(",
          "def test_np_bool_ea_boolean_include_number(",
          "def test_select_dtypes_no_view("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_set_axis.py": [
          "def test_set_axis(",
          "def test_set_axis_copy(",
          "def test_set_axis_unnamed_kwarg_warns(",
          "def test_set_axis_invalid_axis_name(",
          "def test_set_axis_setattr_index_not_collection(",
          "def test_set_axis_setattr_index_wrong_length("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_set_index.py": [
          "def test_set_index_multiindex(",
          "def test_set_index_empty_column(",
          "def test_set_index_empty_dataframe(",
          "def test_set_index_multiindexcolumns(",
          "def test_set_index_timezone(",
          "def test_set_index_cast_datetimeindex(",
          "def test_set_index_dst(",
          "def test_set_index(",
          "def test_set_index_names(",
          "def test_set_index_drop_inplace(",
          "def test_set_index_append(",
          "def test_set_index_append_to_multiindex(",
          "def test_set_index_after_mutation(",
          "def test_set_index_pass_single_array(",
          "def test_set_index_pass_arrays(",
          "def test_set_index_pass_arrays_duplicate(",
          "def test_set_index_pass_multiindex(",
          "def test_construction_with_categorical_index(",
          "def test_set_index_preserve_categorical_dtype(",
          "def test_set_index_datetime(",
          "def test_set_index_period(",
          "def test_set_index_verify_integrity(",
          "def test_set_index_raise_keys(",
          "def test_set_index_raise_on_type(",
          "def test_set_index_raise_on_len(",
          "def test_set_index_custom_label_type(",
          "def test_set_index_custom_label_hashable_iterable(",
          "def test_set_index_custom_label_type_raises(",
          "def test_set_index_periodindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_shift.py": [
          "def test_shift_axis1_with_valid_fill_value_one_array(",
          "def test_shift_deprecate_freq_and_fill_value(",
          "def test_shift_non_writable_array(",
          "def test_shift_mismatched_freq(",
          "def test_shift_always_copy(",
          "def test_shift_object_non_scalar_fill(",
          "def test_shift_int(",
          "def test_shift_32bit_take(",
          "def test_shift_preserve_freqstr(",
          "def test_shift_dst(",
          "def test_shift_dst_beyond(",
          "def test_shift_by_zero(",
          "def test_shift(",
          "def test_shift_by_offset(",
          "def test_shift_with_periodindex(",
          "def test_shift_other_axis(",
          "def test_shift_named_axis(",
          "def test_shift_other_axis_with_freq(",
          "def test_shift_bool(",
          "def test_shift_categorical1(",
          "def test_shift_categorical(",
          "def test_shift_categorical_fill_value(",
          "def test_shift_fill_value(",
          "def test_shift_empty(",
          "def test_shift_duplicate_columns(",
          "def test_shift_axis1_multiple_blocks(",
          "def test_shift_axis1_multiple_blocks_with_int_fill(",
          "def test_period_index_frame_shift_with_freq(",
          "def test_datetime_frame_shift_with_freq(",
          "def test_period_index_frame_shift_with_freq_error(",
          "def test_datetime_frame_shift_with_freq_error(",
          "def test_shift_dt64values_int_fill_deprecated(",
          "def test_shift_dt64values_axis1_invalid_fill(",
          "def test_shift_axis1_categorical_columns(",
          "def test_shift_axis1_many_periods(",
          "def test_shift_with_offsets_freq(",
          "def test_shift_with_iterable_basic_functionality(",
          "def test_shift_with_iterable_series(",
          "def test_shift_with_iterable_freq_and_fill_value(",
          "def test_shift_with_iterable_check_other_arguments("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_size.py": [
          "def test_size("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_index.py": [
          "def test_sort_index_and_reconstruction_doc_example(",
          "def test_sort_index_non_existent_label_multiindex(",
          "def test_sort_index_reorder_on_ops(",
          "def test_sort_index_nan_multiindex(",
          "def test_sort_index_nan(",
          "def test_sort_index_multi_index(",
          "def test_sort_index_inplace(",
          "def test_sort_index_different_sortorder(",
          "def test_sort_index_level(",
          "def test_sort_index_categorical_index(",
          "def test_sort_index(",
          "def test_sort_index_multiindex(",
          "def test_sort_index_intervalindex(",
          "def test_sort_index_ignore_index(",
          "def test_respect_ignore_index(",
          "def test_sort_index_ignore_index_multi_index(",
          "def test_sort_index_categorical_multiindex(",
          "def test_sort_index_and_reconstruction(",
          "def test_sort_index_level2(",
          "def test_sort_index_level_large_cardinality(",
          "def test_sort_index_level_by_name(",
          "def test_sort_index_level_mixed(",
          "def test_sort_index_preserve_levels(",
          "def test_sort_index_multilevel_repr_8017(",
          "def test_sort_index_with_categories(",
          "def test_sort_index_ascending_bad_value_raises(",
          "def test_sort_index_use_inf_as_na(",
          "def test_sort_index_ascending_tuple(",
          "def test_sort_multi_index_key(",
          "def test_sort_index_key(",
          "def test_sort_index_key_int(",
          "def test_sort_multi_index_key_str(",
          "def test_changes_length_raises(",
          "def test_sort_index_multiindex_sparse_column(",
          "def test_sort_index_na_position(",
          "def test_sort_index_multiindex_sort_remaining("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_values.py": [
          "def test_sort_values_sparse_no_warning(",
          "def test_sort_values(",
          "def test_sort_values_by_empty_list(",
          "def test_sort_values_inplace(",
          "def test_sort_values_multicolumn(",
          "def test_sort_values_multicolumn_uint64(",
          "def test_sort_values_nan(",
          "def test_sort_values_stable_descending_sort(",
          "def test_sort_values_stable_multicolumn_sort(",
          "def test_sort_values_stable_categorial(",
          "def test_sort_values_datetimes(",
          "def test_sort_values_frame_column_inplace_sort_exception(",
          "def test_sort_values_nat_values_in_int_column(",
          "def test_sort_nat(",
          "def test_sort_values_na_position_with_categories(",
          "def test_sort_values_nat(",
          "def test_sort_values_na_position_with_categories_raises(",
          "def test_sort_values_ignore_index(",
          "def test_sort_values_nat_na_position_default(",
          "def test_sort_values_item_cache(",
          "def test_sort_values_reshaping(",
          "def test_sort_values_no_by_inplace(",
          "def test_sort_values_no_op_reset_index(",
          "def test_sort_values_inplace_key(",
          "def test_sort_values_key(",
          "def test_sort_values_by_key(",
          "def test_sort_values_by_key_by_name(",
          "def test_sort_values_key_string(",
          "def test_sort_values_key_empty(",
          "def test_changes_length_raises(",
          "def test_sort_values_key_axes(",
          "def test_sort_values_key_dict_axis(",
          "def test_sort_values_key_casts_to_categorical(",
          "def test_sort_index_level_and_column_label(",
          "def test_sort_column_level_and_index_label(",
          "def test_sort_values_validate_ascending_for_value_error(",
          "def test_sort_values_validate_ascending_functional("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_swapaxes.py": [
          "def test_swapaxes(",
          "def test_swapaxes_noop(",
          "def test_swapaxes_invalid_axis(",
          "def test_round_empty_not_input("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_swaplevel.py": [
          "def test_swaplevel("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_csv.py": [
          "def test_to_csv_from_csv1(",
          "def test_to_csv_from_csv2(",
          "def test_to_csv_from_csv3(",
          "def test_to_csv_from_csv4(",
          "def test_to_csv_from_csv5(",
          "def test_to_csv_cols_reordering(",
          "def test_to_csv_new_dupe_cols(",
          "def test_to_csv_dtnat(",
          "def test_to_csv_nrows(",
          "def test_to_csv_idx_types(",
          "def test_to_csv_idx_ncols(",
          "def test_to_csv_dup_cols(",
          "def test_to_csv_empty(",
          "def test_to_csv_chunksize(",
          "def test_to_csv_params(",
          "def test_to_csv_from_csv_w_some_infs(",
          "def test_to_csv_from_csv_w_all_infs(",
          "def test_to_csv_no_index(",
          "def test_to_csv_with_mix_columns(",
          "def test_to_csv_headers(",
          "def test_to_csv_multiindex(",
          "def test_to_csv_interval_index(",
          "def test_to_csv_float32_nanrep(",
          "def test_to_csv_withcommas(",
          "def test_to_csv_mixed(",
          "def test_to_csv_dups_cols(",
          "def test_to_csv_chunking(",
          "def test_to_csv_wide_frame_formatting(",
          "def test_to_csv_bug(",
          "def test_to_csv_unicode(",
          "def test_to_csv_unicode_index_col(",
          "def test_to_csv_stringio(",
          "def test_to_csv_float_format(",
          "def test_to_csv_float_format_over_decimal(",
          "def test_to_csv_unicodewriter_quoting(",
          "def test_to_csv_quote_none(",
          "def test_to_csv_index_no_leading_comma(",
          "def test_to_csv_lineterminators(",
          "def test_to_csv_from_csv_categorical(",
          "def test_to_csv_path_is_none(",
          "def test_to_csv_compression(",
          "def test_to_csv_date_format(",
          "def test_to_csv_with_dst_transitions(",
          "def test_to_csv_with_dst_transitions_with_pickle(",
          "def test_to_csv_quoting(",
          "def test_period_index_date_overflow(",
          "def test_multi_index_header(",
          "def test_to_csv_single_level_multi_index(",
          "def test_gz_lineend(",
          "def test_to_csv_numpy_16_bug(",
          "def test_to_csv_na_quoting(",
          "def test_to_csv_categorical_and_ea(",
          "def test_to_csv_categorical_and_interval("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_dict.py": [
          "def test_to_dict_timestamp(",
          "def test_to_dict_index_not_unique_with_index_orient(",
          "def test_to_dict_invalid_orient(",
          "def test_to_dict_short_orient_raises(",
          "def test_to_dict(",
          "def test_to_dict_errors(",
          "def test_to_dict_not_unique_warning(",
          "def test_to_dict_box_scalars(",
          "def test_to_dict_tz(",
          "def test_to_dict_index_dtypes(",
          "def test_to_dict_numeric_names(",
          "def test_to_dict_wide(",
          "def test_to_dict_orient_dtype(",
          "def test_to_dict_scalar_constructor_orient_dtype(",
          "def test_to_dict_mixed_numeric_frame(",
          "def test_to_dict_orient_tight(",
          "def test_to_dict_returns_native_types(",
          "def test_to_dict_index_false_error(",
          "def test_to_dict_index_false(",
          "def test_to_dict_na_to_none(",
          "def test_to_dict_masked_native_python("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_dict_of_blocks.py": [
          "def test_copy_blocks(",
          "def test_no_copy_blocks(",
          "def test_to_dict_of_blocks_item_cache(",
          "def test_set_change_dtype_slice("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_numpy.py": [
          "def test_to_numpy(",
          "def test_to_numpy_dtype(",
          "def test_to_numpy_copy(",
          "def test_to_numpy_mixed_dtype_to_str("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_period.py": [
          "def test_to_period(",
          "def test_to_period_without_freq(",
          "def test_to_period_columns(",
          "def test_to_period_invalid_axis(",
          "def test_to_period_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_records.py": [
          "def test_to_records_timeseries(",
          "def test_to_records_dt64(",
          "def test_to_records_dt64tz_column(",
          "def test_to_records_with_multindex(",
          "def test_to_records_with_Mapping_type(",
          "def test_to_records_floats(",
          "def test_to_records_index_name(",
          "def test_to_records_with_unicode_index(",
          "def test_to_records_index_dtype(",
          "def test_to_records_with_unicode_column_names(",
          "def test_to_records_with_categorical(",
          "def test_to_records_dtype(",
          "def test_to_records_dtype_mi(",
          "def test_to_records_dict_like(",
          "def test_to_records_datetimeindex_with_tz("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_timestamp.py": [
          "def test_to_timestamp(",
          "def test_to_timestamp_columns(",
          "def test_to_timestamp_invalid_axis(",
          "def test_to_timestamp_hourly(",
          "def test_to_timestamp_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_transpose.py": [
          "def test_transpose_td64_intervals(",
          "def test_transpose_empty_preserves_datetimeindex(",
          "def test_transpose_tzaware_1col_single_tz(",
          "def test_transpose_tzaware_2col_single_tz(",
          "def test_transpose_tzaware_2col_mixed_tz(",
          "def test_transpose_preserves_dtindex_equality_with_dst(",
          "def test_transpose_object_to_tzaware_mixed_tz(",
          "def test_transpose_uint64(",
          "def test_transpose_float(",
          "def test_transpose_get_view(",
          "def test_transpose_get_view_dt64tzget_view(",
          "def test_transpose_not_inferring_dt(",
          "def test_transpose_not_inferring_dt_mixed_blocks("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_truncate.py": [
          "def test_truncate(",
          "def test_truncate_nonsortedindex(",
          "def test_sort_values_nonsortedindex(",
          "def test_truncate_nonsortedindex_axis1(",
          "def test_truncate_decreasing_index(",
          "def test_truncate_multiindex(",
          "def test_truncate_index_only_one_unique_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_tz_convert.py": [
          "def test_tz_convert(",
          "def test_tz_convert_axis1(",
          "def test_tz_convert_naive(",
          "def test_tz_convert_and_localize(",
          "def test_tz_convert_copy_inplace_mutate("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_tz_localize.py": [
          "def test_tz_localize(",
          "def test_tz_localize_axis1(",
          "def test_tz_localize_naive(",
          "def test_tz_localize_copy_inplace_mutate("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_update.py": [
          "def test_update_nan(",
          "def test_update(",
          "def test_update_dtypes(",
          "def test_update_nooverwrite(",
          "def test_update_filtered(",
          "def test_update_raise_bad_parameter(",
          "def test_update_raise_on_overlap(",
          "def test_update_from_non_df(",
          "def test_update_datetime_tz(",
          "def test_update_with_different_dtype(",
          "def test_update_modify_view(",
          "def test_update_dt_column_with_NaT_create_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_values.py": [
          "def test_values(",
          "def test_more_values(",
          "def test_values_mixed_dtypes(",
          "def test_values_duplicates(",
          "def test_values_with_duplicate_columns(",
          "def test_values_casts_datetimelike_to_object(",
          "def test_frame_values_with_tz(",
          "def test_interleave_with_tzaware(",
          "def test_values_interleave_non_unique_cols(",
          "def test_values_numeric_cols(",
          "def test_values_lcd(",
          "def test_private_values_dt64tz(",
          "def test_private_values_dt64tz_multicol(",
          "def test_private_values_dt64_multiblock("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_value_counts.py": [
          "def test_data_frame_value_counts_unsorted(",
          "def test_data_frame_value_counts_ascending(",
          "def test_data_frame_value_counts_default(",
          "def test_data_frame_value_counts_normalize(",
          "def test_data_frame_value_counts_single_col_default(",
          "def test_data_frame_value_counts_empty(",
          "def test_data_frame_value_counts_empty_normalize(",
          "def test_data_frame_value_counts_dropna_true(",
          "def test_data_frame_value_counts_dropna_false(",
          "def test_data_frame_value_counts_subset(",
          "def test_value_counts_categorical_future_warning("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_duplicate_labels.py": [
          "def test_construction_ok(",
          "def test_preserved_series(",
          "def test_align(",
          "def test_preserved_frame(",
          "def test_to_frame(",
          "def test_binops(",
          "def test_preserve_getitem(",
          "def test_ndframe_getitem_caching_issue(",
          "def test_concat(",
          "def test_merge(",
          "def test_groupby(",
          "def test_window(",
          "def test_set_flags_with_duplicates(",
          "def test_setting_allows_duplicate_labels_raises(",
          "def test_series_raises(",
          "def test_getitem_raises(",
          "def test_concat_raises(",
          "def test_merge_raises(",
          "def test_raises_basic(",
          "def test_format_duplicate_labels_message(",
          "def test_format_duplicate_labels_message_multi(",
          "def test_dataframe_insert_raises(",
          "def test_inplace_raises(",
          "def test_pickle("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_finalize.py": [
          "def test_finalize_called(",
          "def test_finalize_first(",
          "def test_finalize_last(",
          "def test_finalize_called_eval_numexpr(",
          "def test_binops(",
          "def test_string_method(",
          "def test_datetime_method(",
          "def test_datetime_property(",
          "def test_timedelta_property(",
          "def test_timedelta_methods(",
          "def test_categorical_accessor(",
          "def test_groupby_finalize(",
          "def test_groupby_finalize_not_implemented(",
          "def test_finalize_frame_series_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_frame.py": [
          "def test_set_axis_name(",
          "def test_set_axis_name_mi(",
          "def test_nonzero_single_element(",
          "def test_metadata_propagation_indiv_groupby(",
          "def test_metadata_propagation_indiv_resample(",
          "def test_metadata_propagation_indiv(",
          "def test_set_attribute(",
          "def test_deepcopy_empty(",
          "def test_validate_bool_args(",
          "def test_unexpected_keyword("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_generic.py": [
          "def test_rename(",
          "def test_get_numeric_data(",
          "def test_nonzero(",
          "def test_frame_or_series_compound_dtypes(",
          "def test_metadata_propagation(",
          "def test_size_compat(",
          "def test_split_compat(",
          "def test_stat_unexpected_keyword(",
          "def test_api_compat(",
          "def test_stat_non_defaults_args(",
          "def test_truncate_out_of_bounds(",
          "def test_copy_and_deepcopy(",
          "def test_data_deprecated(",
          "def test_squeeze_series_noop(",
          "def test_squeeze_frame_noop(",
          "def test_squeeze_frame_reindex(",
          "def test_squeeze_0_len_dim(",
          "def test_squeeze_axis(",
          "def test_squeeze_axis_len_3(",
          "def test_numpy_squeeze(",
          "def test_transpose_series(",
          "def test_transpose_frame(",
          "def test_numpy_transpose(",
          "def test_take_series(",
          "def test_take_frame(",
          "def test_take_invalid_kwargs(",
          "def test_axis_classmethods(",
          "def test_flags_identity(",
          "def test_bool_dep("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_label_or_level_utils.py": [
          "def test_is_level_or_label_reference_df_simple(",
          "def test_is_level_reference_df_ambig(",
          "def test_is_level_reference_series_simple_axis0(",
          "def test_is_level_reference_series_axis1_error(",
          "def test_check_label_or_level_ambiguity_df(",
          "def test_check_label_or_level_ambiguity_series(",
          "def test_check_label_or_level_ambiguity_series_axis1_error(",
          "def test_get_label_or_level_values_df_simple(",
          "def test_get_label_or_level_values_df_ambig(",
          "def test_get_label_or_level_values_df_duplabels(",
          "def test_get_label_or_level_values_series_axis0(",
          "def test_get_label_or_level_values_series_axis1_error(",
          "def test_drop_labels_or_levels_df(",
          "def test_drop_labels_or_levels_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_series.py": [
          "def test_set_axis_name_mi(",
          "def test_set_axis_name_raises(",
          "def test_get_bool_data_preserve_dtype(",
          "def test_nonzero_single_element(",
          "def test_nonzero_single_element_raise_1(",
          "def test_nonzero_single_element_raise_2(",
          "def test_nonzero_multiple_element_raise(",
          "def test_nonbool_single_element_raise(",
          "def test_metadata_propagation_indiv_resample(",
          "def test_metadata_propagation_indiv("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_to_xarray.py": [
          "def test_to_xarray_index_types(",
          "def test_to_xarray_empty(",
          "def test_to_xarray_with_multiindex(",
          "def test_to_xarray_index_types(",
          "def test_to_xarray_empty(",
          "def test_to_xarray_with_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\conftest.py": [
          "def slice_test_df(",
          "def slice_test_grouped("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_any_all.py": [
          "def test_groupby_bool_aggs(",
          "def test_any(",
          "def test_bool_aggs_dup_column_labels(",
          "def test_masked_kleene_logic(",
          "def test_masked_mixed_types(",
          "def test_masked_bool_aggs_skipna(",
          "def test_object_type_missing_vals(",
          "def test_object_NA_raises_with_skipna_false(",
          "def test_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_api.py": [
          "def test_tab_completion(",
          "def test_all_methods_categorized(",
          "def test_frame_consistency(",
          "def test_series_consistency("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply.py": [
          "def test_apply_func_that_appends_group_to_list_without_copy(",
          "def test_apply_issues(",
          "def test_apply_trivial(",
          "def test_apply_trivial_fail(",
          "def test_group_apply_once_per_group(",
          "def test_group_apply_once_per_group2(",
          "def test_apply_fast_slow_identical(",
          "def test_groupby_apply_identity_maybecopy_index_identical(",
          "def test_apply_with_mixed_dtype(",
          "def test_groupby_as_index_apply(",
          "def test_apply_concat_preserve_names(",
          "def test_apply_series_to_frame(",
          "def test_apply_series_yield_constant(",
          "def test_apply_frame_yield_constant(",
          "def test_apply_frame_to_series(",
          "def test_apply_frame_not_as_index_column_name(",
          "def test_apply_frame_concat_series(",
          "def test_apply_transform(",
          "def test_apply_multikey_corner(",
          "def test_apply_chunk_view(",
          "def test_apply_no_name_column_conflict(",
          "def test_apply_typecast_fail(",
          "def test_apply_multiindex_fail(",
          "def test_apply_corner(",
          "def test_apply_without_copy(",
          "def test_apply_with_duplicated_non_sorted_axis(",
          "def test_apply_reindex_values(",
          "def test_apply_corner_cases(",
          "def test_apply_numeric_coercion_when_datetime(",
          "def test_apply_aggregating_timedelta_and_datetime(",
          "def test_apply_groupby_datetimeindex(",
          "def test_time_field_bug(",
          "def test_gb_apply_list_of_unequal_len_arrays(",
          "def test_groupby_apply_all_none(",
          "def test_func(",
          "def test_groupby_apply_none_first(",
          "def test_func(",
          "def test_groupby_apply_return_empty_chunk(",
          "def test_apply_with_mixed_types(",
          "def test_func_returns_object(",
          "def test_apply_datetime_issue(",
          "def test_apply_series_return_dataframe_groups(",
          "def test_apply_multi_level_name(",
          "def test_groupby_apply_datetime_result_dtypes(",
          "def test_apply_index_has_complex_internals(",
          "def test_apply_function_returns_non_pandas_non_scalar(",
          "def test_apply_function_returns_numpy_array(",
          "def test_apply_function_index_return(",
          "def test_apply_function_with_indexing_return_column(",
          "def test_apply_result_type(",
          "def test_result_order_group_keys_false(",
          "def test_apply_with_timezones_aware(",
          "def test_apply_is_unchanged_when_other_methods_are_called_first(",
          "def test_apply_with_date_in_multiindex_does_not_convert_to_timestamp(",
          "def test_apply_by_cols_equals_apply_by_rows_transposed(",
          "def test_apply_dropna_with_indexed_same(",
          "def test_apply_as_index_constant_lambda(",
          "def test_sort_index_groups(",
          "def test_positional_slice_groups_datetimelike(",
          "def test_groupby_apply_shape_cache_safety(",
          "def test_groupby_apply_to_series_name(",
          "def test_apply_na(",
          "def test_apply_empty_string_nan_coerce_bug(",
          "def test_apply_index_key_error_bug(",
          "def test_apply_nonmonotonic_float_index(",
          "def test_apply_str_with_args(",
          "def test_result_name_when_one_group(",
          "def test_empty_df(",
          "def test_apply_inconsistent_output(",
          "def test_apply_array_output_multi_getitem("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply_mutate.py": [
          "def test_group_by_copy(",
          "def test_mutate_groups(",
          "def test_no_mutate_but_looks_like(",
          "def test_apply_function_with_indexing(",
          "def test_apply_mutate_columns_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_bin_groupby.py": [
          "def test_mgr_locs_updated(",
          "def test_generate_bins("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_categorical.py": [
          "def test_apply_use_categorical_name(",
          "def test_basic(",
          "def test_level_get_group(",
          "def test_sorting_with_different_categoricals(",
          "def test_apply(",
          "def test_observed(",
          "def test_observed_codes_remap(",
          "def test_observed_perf(",
          "def test_observed_groups(",
          "def test_unobserved_in_index(",
          "def test_observed_groups_with_nan(",
          "def test_observed_nth(",
          "def test_dataframe_categorical_with_nan(",
          "def test_dataframe_categorical_ordered_observed_sort(",
          "def test_datetime(",
          "def test_categorical_index(",
          "def test_describe_categorical_columns(",
          "def test_unstack_categorical(",
          "def test_bins_unequal_len(",
          "def test_categorical_series(",
          "def test_as_index(",
          "def test_preserve_categories(",
          "def test_preserve_categorical_dtype(",
          "def test_preserve_on_ordered_ops(",
          "def test_categorical_no_compress(",
          "def test_groupby_empty_with_category(",
          "def test_sort(",
          "def test_sort2(",
          "def test_sort_datetimelike(",
          "def test_empty_sum(",
          "def test_empty_prod(",
          "def test_groupby_multiindex_categorical_datetime(",
          "def test_groupby_agg_observed_true_single_column(",
          "def test_shift(",
          "def test_seriesgroupby_observed_true(",
          "def test_seriesgroupby_observed_false_or_none(",
          "def test_seriesgroupby_observed_apply_dict(",
          "def test_groupby_categorical_series_dataframe_consistent(",
          "def test_groupby_categorical_axis_1(",
          "def test_groupby_cat_preserves_structure(",
          "def test_get_nonexistent_category(",
          "def test_series_groupby_on_2_categoricals_unobserved(",
          "def test_series_groupby_on_2_categoricals_unobserved_zeroes_or_nans(",
          "def test_dataframe_groupby_on_2_categoricals_when_observed_is_true(",
          "def test_dataframe_groupby_on_2_categoricals_when_observed_is_false(",
          "def test_series_groupby_categorical_aggregation_getitem(",
          "def test_groupby_agg_categorical_columns(",
          "def test_groupby_agg_non_numeric(",
          "def test_groupby_first_returned_categorical_instead_of_dataframe(",
          "def test_read_only_category_no_sort(",
          "def test_sorted_missing_category_values(",
          "def test_agg_cython_category_not_implemented_fallback(",
          "def test_aggregate_categorical_with_isnan(",
          "def test_categorical_transform(",
          "def test_series_groupby_first_on_categorical_col_grouped_on_2_categoricals(",
          "def test_df_groupby_first_on_categorical_col_grouped_on_2_categoricals(",
          "def test_groupby_categorical_indices_unused_categories(",
          "def test_groupby_last_first_preserve_categoricaldtype(",
          "def test_groupby_categorical_observed_nunique(",
          "def test_groupby_categorical_aggregate_functions(",
          "def test_groupby_categorical_dropna(",
          "def test_category_order_reducer(",
          "def test_category_order_transformer(",
          "def test_category_order_head_tail(",
          "def test_category_order_apply(",
          "def test_many_categories(",
          "def test_groupby_default_depr(",
          "def test_agg_list("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_counting.py": [
          "def test_cumcount(",
          "def test_cumcount_empty(",
          "def test_cumcount_dupe_index(",
          "def test_cumcount_mi(",
          "def test_cumcount_groupby_not_col(",
          "def test_ngroup(",
          "def test_ngroup_distinct(",
          "def test_ngroup_one_group(",
          "def test_ngroup_empty(",
          "def test_ngroup_series_matches_frame(",
          "def test_ngroup_dupe_index(",
          "def test_ngroup_mi(",
          "def test_ngroup_groupby_not_col(",
          "def test_ngroup_descending(",
          "def test_ngroup_matches_cumcount(",
          "def test_ngroup_cumcount_pair(",
          "def test_ngroup_respects_groupby_order(",
          "def test_count_with_datetimelike(",
          "def test_count_with_only_nans_in_first_group(",
          "def test_count_groupby_column_with_nan_in_groupby_column(",
          "def test_groupby_count_dateparseerror(",
          "def test_groupby_timedelta_cython_count(",
          "def test_count(",
          "def test_count_non_nulls(",
          "def test_count_object(",
          "def test_count_cross_type(",
          "def test_lower_int_prec_count(",
          "def test_count_uses_size_on_exception(",
          "def test_count_arrow_string_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_filters.py": [
          "def test_filter_series(",
          "def test_filter_single_column_df(",
          "def test_filter_multi_column_df(",
          "def test_filter_mixed_df(",
          "def test_filter_out_all_groups(",
          "def test_filter_out_no_groups(",
          "def test_filter_out_all_groups_in_df(",
          "def test_filter_condition_raises(",
          "def test_filter_with_axis_in_groupby(",
          "def test_filter_bad_shapes(",
          "def test_filter_nan_is_false(",
          "def test_filter_pdna_is_false(",
          "def test_filter_against_workaround(",
          "def test_filter_using_len(",
          "def test_filter_maintains_ordering(",
          "def test_filter_multiple_timestamp(",
          "def test_filter_and_transform_with_non_unique_int_index(",
          "def test_filter_and_transform_with_multiple_non_unique_int_index(",
          "def test_filter_and_transform_with_non_unique_float_index(",
          "def test_filter_and_transform_with_non_unique_timestamp_index(",
          "def test_filter_and_transform_with_non_unique_string_index(",
          "def test_filter_has_access_to_grouped_cols(",
          "def test_filter_enforces_scalarness(",
          "def test_filter_non_bool_raises(",
          "def test_filter_dropna_with_empty_groups(",
          "def test_filter_consistent_result_before_after_agg_func("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_function.py": [
          "def test_intercept_builtin_sum(",
          "def test_builtins_apply(",
          "def test_averages(",
          "def test_extrema(",
          "def test_first_last(",
          "def test_sum_cumsum(",
          "def test_prod_cumprod(",
          "def test_cummin_cummax(",
          "def test_describe(",
          "def test_cython_api2(",
          "def test_cython_median(",
          "def test_median_empty_bins(",
          "def test_groupby_non_arithmetic_agg_types(",
          "def test_groupby_non_arithmetic_agg_int_like_precision(",
          "def test_idxmin_idxmax_returns_int_types(",
          "def test_idxmin_idxmax_axis1(",
          "def test_axis1_numeric_only(",
          "def test_groupby_cumprod(",
          "def test_groupby_cumprod_overflow(",
          "def test_groupby_cumprod_nan_influences_other_columns(",
          "def test_ops_general(",
          "def test_max_nan_bug(",
          "def test_nlargest(",
          "def test_nlargest_mi_grouper(",
          "def test_nsmallest(",
          "def test_nlargest_and_smallest_noop(",
          "def test_numpy_compat(",
          "def test_cummin(",
          "def test_cummin_max_all_nan_column(",
          "def test_cummax(",
          "def test_cummax_i8_at_implementation_bound(",
          "def test_cummin_max_skipna(",
          "def test_cummin_max_skipna_multiple_cols(",
          "def test_nullable_int_not_cast_as_float(",
          "def test_is_monotonic_increasing(",
          "def test_is_monotonic_decreasing(",
          "def test_apply_describe_bug(",
          "def test_series_describe_multikey(",
          "def test_series_describe_single(",
          "def test_series_describe_as_index(",
          "def test_series_index_name(",
          "def test_frame_describe_multikey(",
          "def test_frame_describe_tupleindex(",
          "def test_frame_describe_unstacked_format(",
          "def test_describe_with_duplicate_output_column_names(",
          "def test_describe_duplicate_columns(",
          "def test_groupby_mean_no_overflow(",
          "def test_apply_to_nullable_integer_returns_float(",
          "def test_groupby_sum_mincount_boolean(",
          "def test_groupby_sum_below_mincount_nullable_integer(",
          "def test_mean_on_timedelta(",
          "def test_groupby_sum_timedelta_with_nat(",
          "def test_numeric_only(",
          "def test_deprecate_numeric_only_series(",
          "def test_groupby_empty_dataset(",
          "def test_corrwith_with_1_axis(",
          "def test_multiindex_group_all_columns_when_empty(",
          "def test_duplicate_columns(",
          "def test_regression_allowlist_methods("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby.py": [
          "def test_repr(",
          "def test_groupby_std_datetimelike(",
          "def test_basic_aggregations(",
          "def test_groupby_nonobject_dtype(",
          "def test_inconsistent_return_type(",
          "def test_pass_args_kwargs(",
          "def test_pass_args_kwargs_duplicate_columns(",
          "def test_len(",
          "def test_basic_regression(",
          "def test_with_na_groups(",
          "def test_indices_concatenation_order(",
          "def test_attr_wrapper(",
          "def test_frame_groupby(",
          "def test_frame_groupby_columns(",
          "def test_frame_set_name_single(",
          "def test_multi_func(",
          "def test_multi_key_multiple_functions(",
          "def test_frame_multi_key_function_list(",
          "def test_frame_multi_key_function_list_partial_failure(",
          "def test_groupby_multiple_columns(",
          "def test_as_index_select_column(",
          "def test_obj_arg_get_group_deprecated(",
          "def test_groupby_as_index_select_column_sum_empty_df(",
          "def test_groupby_as_index_agg(",
          "def test_ops_not_as_index(",
          "def test_as_index_series_return_frame(",
          "def test_as_index_series_column_slice_raises(",
          "def test_groupby_as_index_cython(",
          "def test_groupby_as_index_series_scalar(",
          "def test_groupby_as_index_corner(",
          "def test_groupby_multiple_key(",
          "def test_groupby_multi_corner(",
          "def test_raises_on_nuisance(",
          "def test_keep_nuisance_agg(",
          "def test_omit_nuisance_agg(",
          "def test_raise_on_nuisance_python_single(",
          "def test_raise_on_nuisance_python_multiple(",
          "def test_empty_groups_corner(",
          "def test_nonsense_func(",
          "def test_wrap_aggregated_output_multindex(",
          "def test_groupby_level_apply(",
          "def test_groupby_level_mapper(",
          "def test_groupby_level_nonmulti(",
          "def test_groupby_complex(",
          "def test_groupby_complex_numbers(",
          "def test_groupby_series_indexed_differently(",
          "def test_groupby_with_hier_columns(",
          "def test_grouping_ndarray(",
          "def test_groupby_wrong_multi_labels(",
          "def test_groupby_series_with_name(",
          "def test_seriesgroupby_name_attr(",
          "def test_consistency_name(",
          "def test_groupby_name_propagation(",
          "def test_groupby_nonstring_columns(",
          "def test_groupby_mixed_type_columns(",
          "def test_cython_grouper_series_bug_noncontig(",
          "def test_series_grouper_noncontig_index(",
          "def test_convert_objects_leave_decimal_alone(",
          "def test_groupby_dtype_inference_empty(",
          "def test_groupby_unit64_float_conversion(",
          "def test_groupby_list_infer_array_like(",
          "def test_groupby_keys_same_size_as_index(",
          "def test_groupby_one_row(",
          "def test_groupby_nat_exclude(",
          "def test_groupby_two_group_keys_all_nan(",
          "def test_groupby_2d_malformed(",
          "def test_int32_overflow(",
          "def test_groupby_sort_multi(",
          "def test_dont_clobber_name_column(",
          "def test_skip_group_keys(",
          "def test_no_nonsense_name(",
          "def test_multifunc_sum_bug(",
          "def test_handle_dict_return_value(",
          "def test_set_group_name(",
          "def test_group_name_available_in_inference_pass(",
          "def test_no_dummy_key_names(",
          "def test_groupby_sort_multiindex_series(",
          "def test_groupby_reindex_inside_function(",
          "def test_groupby_multiindex_missing_pair(",
          "def test_groupby_multiindex_not_lexsorted(",
          "def test_index_label_overlaps_location(",
          "def test_transform_doesnt_clobber_ints(",
          "def test_groupby_preserves_sort(",
          "def test_sort(",
          "def test_pivot_table_values_key_error(",
          "def test_empty_groupby(",
          "def test_empty_groupby_apply_nonunique_columns(",
          "def test_tuple_as_grouping(",
          "def test_tuple_correct_keyerror(",
          "def test_groupby_agg_ohlc_non_first(",
          "def test_groupby_multiindex_nat(",
          "def test_groupby_empty_list_raises(",
          "def test_groupby_multiindex_series_keys_len_equal_group_axis(",
          "def test_groupby_groups_in_BaseGrouper(",
          "def test_groupby_axis_1(",
          "def test_shift_bfill_ffill_tz(",
          "def test_groupby_only_none_group(",
          "def test_groupby_duplicate_index(",
          "def test_group_on_empty_multiindex(",
          "def test_dup_labels_output_shape(",
          "def test_groupby_crash_on_nunique(",
          "def test_groupby_list_level(",
          "def test_groups_repr_truncates(",
          "def test_group_on_two_row_multiindex_returns_one_tuple_key(",
          "def test_subsetting_columns_keeps_attrs(",
          "def test_subsetting_columns_axis_1(",
          "def test_groupby_column_index_name_lost(",
          "def test_groupby_duplicate_columns(",
          "def test_groupby_series_with_tuple_name(",
          "def test_groupby_numerical_stability_sum_mean(",
          "def test_groupby_numerical_stability_cumsum(",
          "def test_groupby_cumsum_skipna_false(",
          "def test_groupby_cumsum_timedelta64(",
          "def test_groupby_mean_duplicate_index(",
          "def test_groupby_all_nan_groups_drop(",
          "def test_groupby_empty_multi_column(",
          "def test_groupby_aggregation_non_numeric_dtype(",
          "def test_groupby_aggregation_multi_non_numeric_dtype(",
          "def test_groupby_aggregation_numeric_with_non_numeric_dtype(",
          "def test_groupby_filtered_df_std(",
          "def test_datetime_categorical_multikey_groupby_indices(",
          "def test_rolling_wrong_param_min_period(",
          "def test_by_column_values_with_same_starting_value(",
          "def test_groupby_none_in_first_mi_level(",
          "def test_groupby_none_column_name(",
          "def test_single_element_list_grouping(",
          "def test_groupby_string_dtype(",
          "def test_single_element_listlike_level_grouping_deprecation(",
          "def test_groupby_avoid_casting_to_float(",
          "def test_groupby_sum_support_mask(",
          "def test_groupby_overflow(",
          "def test_groupby_cumsum_mask(",
          "def test_groupby_index_name_in_index_content(",
          "def test_sum_of_booleans(",
          "def test_groupby_method_drop_na(",
          "def test_groupby_reduce_period(",
          "def test_obj_with_exclusions_duplicate_columns(",
          "def test_groupby_numeric_only_std_no_result(",
          "def test_grouping_with_categorical_interval_columns(",
          "def test_groupby_sum_on_nan_should_return_nan(",
          "def test_groupby_selection_with_methods(",
          "def test_groupby_selection_other_methods(",
          "def test_groupby_with_Time_Grouper(",
          "def test_groupby_series_with_datetimeindex_month_name(",
          "def test_get_group_axis_1("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_dropna.py": [
          "def test_groupby_dropna_multi_index_dataframe_nan_in_one_group(",
          "def test_groupby_dropna_multi_index_dataframe_nan_in_two_groups(",
          "def test_groupby_dropna_normal_index_dataframe(",
          "def test_groupby_dropna_series_level(",
          "def test_groupby_dropna_series_by(",
          "def test_grouper_dropna_propagation(",
          "def test_groupby_dataframe_slice_then_transform(",
          "def test_groupby_dropna_multi_index_dataframe_agg(",
          "def test_groupby_dropna_datetime_like_data(",
          "def test_groupby_apply_with_dropna_for_multi_index(",
          "def test_groupby_dropna_with_multiindex_input(",
          "def test_groupby_nan_included(",
          "def test_groupby_drop_nan_with_multi_index(",
          "def test_no_sort_keep_na(",
          "def test_null_is_null_for_dtype(",
          "def test_categorical_reducers(",
          "def test_categorical_transformers(",
          "def test_categorical_head_tail(",
          "def test_categorical_agg(",
          "def test_categorical_transform("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_shift_diff.py": [
          "def test_group_shift_with_null_key(",
          "def test_group_shift_with_fill_value(",
          "def test_group_shift_lose_timezone(",
          "def test_group_diff_real_series(",
          "def test_group_diff_real_frame(",
          "def test_group_diff_datetimelike(",
          "def test_group_diff_bool(",
          "def test_group_diff_object_raises(",
          "def test_empty_shift_with_fill(",
          "def test_multindex_empty_shift_with_fill(",
          "def test_shift_periods_freq(",
          "def test_shift_deprecate_freq_and_fill_value(",
          "def test_shift_disallow_suffix_if_periods_is_int(",
          "def test_group_shift_with_multiple_periods(",
          "def test_group_shift_with_multiple_periods_and_freq(",
          "def test_group_shift_with_multiple_periods_and_fill_value(",
          "def test_group_shift_with_multiple_periods_and_both_fill_and_freq_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_subclass.py": [
          "def test_groupby_preserves_subclass(",
          "def test_groupby_preserves_metadata(",
          "def test_groupby_resample_preserves_subclass("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_grouping.py": [
          "def test_select_bad_cols(",
          "def test_groupby_duplicated_column_errormsg(",
          "def test_column_select_via_attr(",
          "def test_getitem_list_of_columns(",
          "def test_getitem_numeric_column_names(",
          "def test_getitem_single_tuple_of_columns_raises(",
          "def test_getitem_single_column(",
          "def test_indices_grouped_by_tuple_with_lambda(",
          "def test_grouper_index_types(",
          "def test_grouper_multilevel_freq(",
          "def test_grouper_creation_bug(",
          "def test_grouper_column_and_index(",
          "def test_groupby_levels_and_columns(",
          "def test_groupby_categorical_index_and_columns(",
          "def test_grouper_getting_correct_binner(",
          "def test_grouper_iter(",
          "def test_empty_groups(",
          "def test_groupby_grouper(",
          "def test_groupby_dict_mapping(",
          "def test_groupby_series_named_with_tuple(",
          "def test_groupby_grouper_f_sanity_checked(",
          "def test_groupby_with_datetime_key(",
          "def test_grouping_error_on_multidim_input(",
          "def test_multiindex_passthru(",
          "def test_multiindex_negative_level(",
          "def test_multifunc_select_col_integer_cols(",
          "def test_multiindex_columns_empty_level(",
          "def test_groupby_multiindex_tuple(",
          "def test_groupby_multiindex_partial_indexing_equivalence(",
          "def test_groupby_level(",
          "def test_groupby_level_index_names(",
          "def test_groupby_level_with_nas(",
          "def test_groupby_args(",
          "def test_level_preserve_order(",
          "def test_grouping_labels(",
          "def test_list_grouper_with_nat(",
          "def test_evaluate_with_empty_groups(",
          "def test_groupby_empty(",
          "def test_groupby_level_index_value_all_na(",
          "def test_groupby_multiindex_level_empty(",
          "def test_get_group(",
          "def test_get_group_empty_bins(",
          "def test_get_group_grouped_by_tuple(",
          "def test_get_group_grouped_by_tuple_with_lambda(",
          "def test_groupby_with_empty(",
          "def test_groupby_with_single_column(",
          "def test_gb_key_len_equal_axis_len(",
          "def test_groups(",
          "def test_grouping_is_iterable(",
          "def test_multi_iter(",
          "def test_multi_iter_frame(",
          "def test_dictify(",
          "def test_groupby_with_small_elem(",
          "def test_grouping_string_repr(",
          "def test_grouping_by_key_is_in_axis(",
          "def test_grouper_groups("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_indexing.py": [
          "def test_int(",
          "def test_slice(",
          "def test_list(",
          "def test_ints(",
          "def test_slices(",
          "def test_mix(",
          "def test_as_index(",
          "def test_doc_examples(",
          "def test_multiindex(",
          "def test_against_head_and_tail(",
          "def test_against_df_iloc(",
          "def test_series(",
          "def test_step(",
          "def test_column_axis(",
          "def test_columns_on_iter(",
          "def test_groupby_duplicated_columns(",
          "def test_groupby_get_nonexisting_groups("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_index_as_string.py": [
          "def test_grouper_index_level_as_string(",
          "def test_grouper_index_level_as_string_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_libgroupby.py": [
          "def test_group_var_generic_1d(",
          "def test_group_var_generic_1d_flat_labels(",
          "def test_group_var_generic_2d_all_finite(",
          "def test_group_var_generic_2d_some_nan(",
          "def test_group_var_constant(",
          "def test_group_var_large_inputs(",
          "def test_group_ohlc(",
          "def test_cython_group_transform_cumsum(",
          "def test_cython_group_transform_cumprod(",
          "def test_cython_group_transform_algos(",
          "def test_cython_group_mean_datetimelike(",
          "def test_cython_group_mean_wrong_min_count(",
          "def test_cython_group_mean_not_datetimelike_but_has_NaT_values(",
          "def test_cython_group_mean_Inf_at_begining_and_end(",
          "def test_cython_group_sum_Inf_at_begining_and_end("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_min_max.py": [
          "def test_max_min_non_numeric(",
          "def test_max_min_object_multiple_columns(",
          "def test_min_date_with_nans(",
          "def test_max_inat(",
          "def test_max_inat_not_all_na(",
          "def test_groupby_aggregate_period_column(",
          "def test_groupby_aggregate_period_frame(",
          "def test_aggregate_numeric_object_dtype(",
          "def test_aggregate_categorical_lost_index(",
          "def test_groupby_min_max_nullable(",
          "def test_min_max_nullable_uint64_empty_group(",
          "def test_groupby_min_max_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_missing.py": [
          "def test_groupby_column_index_name_lost_fill_funcs(",
          "def test_groupby_fill_duplicate_column_names(",
          "def test_ffill_missing_arguments(",
          "def test_fillna_with_string_dtype(",
          "def test_fill_consistency(",
          "def test_ffill_handles_nan_groups(",
          "def test_min_count(",
          "def test_indices_with_missing("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_nth.py": [
          "def test_first_last_nth(",
          "def test_first_last_with_na_object(",
          "def test_nth_with_na_object(",
          "def test_first_last_with_None(",
          "def test_first_last_with_None_expanded(",
          "def test_first_last_nth_dtypes(",
          "def test_first_last_nth_nan_dtype(",
          "def test_first_strings_timestamps(",
          "def test_nth(",
          "def test_nth_multi_grouper(",
          "def test_first_last_tz(",
          "def test_first_last_tz_multi_column(",
          "def test_first_last_extension_array_keeps_dtype(",
          "def test_nth_multi_index_as_expected(",
          "def test_groupby_head_tail(",
          "def test_groupby_head_tail_axis_1(",
          "def test_group_selection_cache(",
          "def test_nth_empty(",
          "def test_nth_column_order(",
          "def test_nth_nan_in_grouper(",
          "def test_nth_nan_in_grouper_series(",
          "def test_first_categorical_and_datetime_data_nat(",
          "def test_first_multi_key_groupby_categorical(",
          "def test_groupby_last_first_nth_with_none(",
          "def test_slice(",
          "def test_nth_indexed(",
          "def test_invalid_argument(",
          "def test_negative_step(",
          "def test_np_ints(",
          "def test_groupby_nth_with_column_axis(",
          "def test_groupby_nth_interval(",
          "def test_nth_slices_with_column_axis(",
          "def test_head_tail_dropna_true(",
          "def test_head_tail_dropna_false(",
          "def test_nth_after_selection("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_numba.py": [
          "def test_cython_vs_numba_frame(",
          "def test_cython_vs_numba_getitem(",
          "def test_cython_vs_numba_series(",
          "def test_as_index_false_unsupported(",
          "def test_axis_1_unsupported("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_nunique.py": [
          "def test_series_groupby_nunique(",
          "def test_nunique(",
          "def test_nunique_with_object(",
          "def test_nunique_with_empty_series(",
          "def test_nunique_with_timegrouper(",
          "def test_nunique_with_NaT(",
          "def test_nunique_preserves_column_level_names(",
          "def test_nunique_transform_with_datetime(",
          "def test_empty_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_pipe.py": [
          "def test_pipe(",
          "def test_pipe_args("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_quantile.py": [
          "def test_quantile(",
          "def test_quantile_array(",
          "def test_quantile_array2(",
          "def test_quantile_array_no_sort(",
          "def test_quantile_array_multiple_levels(",
          "def test_groupby_quantile_with_arraylike_q_and_int_columns(",
          "def test_quantile_raises(",
          "def test_quantile_out_of_bounds_q_raises(",
          "def test_quantile_missing_group_values_no_segfaults(",
          "def test_quantile_missing_group_values_correct_results(",
          "def test_groupby_quantile_nullable_array(",
          "def test_groupby_quantile_raises_on_invalid_dtype(",
          "def test_groupby_quantile_NA_float(",
          "def test_groupby_quantile_NA_int(",
          "def test_groupby_quantile_all_na_group_masked(",
          "def test_groupby_quantile_all_na_group_masked_interp(",
          "def test_groupby_quantile_allNA_column(",
          "def test_groupby_timedelta_quantile(",
          "def test_columns_groupby_quantile(",
          "def test_timestamp_groupby_quantile(",
          "def test_groupby_quantile_dt64tz_period(",
          "def test_groupby_quantile_nonmulti_levels_order("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_raises.py": [
          "def test_groupby_raises_string(",
          "def test_groupby_raises_string_udf(",
          "def test_groupby_raises_string_np(",
          "def test_groupby_raises_datetime(",
          "def test_groupby_raises_datetime_udf(",
          "def test_groupby_raises_datetime_np(",
          "def test_groupby_raises_timedelta(",
          "def test_groupby_raises_category(",
          "def test_groupby_raises_category_udf(",
          "def test_groupby_raises_category_np(",
          "def test_groupby_raises_category_on_category(",
          "def test_subsetting_columns_axis_1_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_rank.py": [
          "def test_rank_unordered_categorical_typeerror(",
          "def test_rank_apply(",
          "def test_rank_args(",
          "def test_infs_n_nans(",
          "def test_rank_args_missing(",
          "def test_rank_resets_each_group(",
          "def test_rank_avg_even_vals(",
          "def test_rank_object_dtype(",
          "def test_rank_naoption_raises(",
          "def test_rank_empty_group(",
          "def test_rank_zero_div(",
          "def test_rank_min_int(",
          "def test_rank_pct_equal_values_on_group_transition(",
          "def test_rank_multiindex(",
          "def test_groupby_axis0_rank_axis1(",
          "def test_groupby_axis0_cummax_axis1(",
          "def test_non_unique_index(",
          "def test_rank_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_sample.py": [
          "def test_groupby_sample_balanced_groups_shape(",
          "def test_groupby_sample_unbalanced_groups_shape(",
          "def test_groupby_sample_index_value_spans_groups(",
          "def test_groupby_sample_n_and_frac_raises(",
          "def test_groupby_sample_frac_gt_one_without_replacement_raises(",
          "def test_groupby_sample_invalid_n_raises(",
          "def test_groupby_sample_oversample(",
          "def test_groupby_sample_without_n_or_frac(",
          "def test_groupby_sample_with_weights(",
          "def test_groupby_sample_with_selections(",
          "def test_groupby_sample_with_empty_inputs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_size.py": [
          "def test_size(",
          "def test_size_axis_1(",
          "def test_size_sort(",
          "def test_size_series_dataframe(",
          "def test_size_groupby_all_null(",
          "def test_size_period_index(",
          "def test_size_on_categorical(",
          "def test_size_series_masked_type_returns_Int64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_skew.py": [
          "def test_groupby_skew_equivalence("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_timegrouper.py": [
          "def test_groupby_with_timegrouper(",
          "def test_groupby_with_timegrouper_methods(",
          "def test_timegrouper_with_reg_groups(",
          "def test_timegrouper_with_reg_groups_freq(",
          "def test_timegrouper_get_group(",
          "def test_timegrouper_apply_return_type_series(",
          "def test_timegrouper_apply_return_type_value(",
          "def test_groupby_groups_datetimeindex(",
          "def test_groupby_groups_datetimeindex_tz(",
          "def test_frame_datetime64_handling_groupby(",
          "def test_groupby_multi_timezone(",
          "def test_groupby_groups_periods(",
          "def test_groupby_first_datetime64(",
          "def test_groupby_max_datetime64(",
          "def test_groupby_datetime64_32_bit(",
          "def test_groupby_with_timezone_selection(",
          "def test_timezone_info(",
          "def test_datetime_count(",
          "def test_first_last_max_min_on_time_data(",
          "def test_nunique_with_timegrouper_and_nat(",
          "def test_scalar_call_versus_list_call(",
          "def test_grouper_period_index(",
          "def test_groupby_apply_timegrouper_with_nat_dict_returns(",
          "def test_groupby_apply_timegrouper_with_nat_scalar_returns(",
          "def test_groupby_apply_timegrouper_with_nat_apply_squeeze(",
          "def test_groupby_agg_numba_timegrouper_with_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_value_counts.py": [
          "def tests_value_counts_index_names_category_column(",
          "def test_series_groupby_value_counts(",
          "def test_series_groupby_value_counts_with_grouper(",
          "def test_series_groupby_value_counts_empty(",
          "def test_series_groupby_value_counts_one_row(",
          "def test_series_groupby_value_counts_on_categorical(",
          "def test_series_groupby_value_counts_no_sort(",
          "def test_axis(",
          "def test_bad_subset(",
          "def test_basic(",
          "def test_against_frame_and_seriesgroupby(",
          "def test_compound(",
          "def test_data_frame_value_counts(",
          "def test_dropna_combinations(",
          "def test_data_frame_value_counts_dropna(",
          "def test_categorical_single_grouper_with_only_observed_categories(",
          "def test_categorical_single_grouper_observed_true(",
          "def test_categorical_single_grouper_observed_false(",
          "def test_categorical_multiple_groupers(",
          "def test_categorical_non_groupers(",
          "def test_mixed_groupings(",
          "def test_column_label_duplicates(",
          "def test_result_label_duplicates(",
          "def test_ambiguous_grouping(",
          "def test_subset_overlaps_gb_key_raises(",
          "def test_subset_doesnt_exist_in_frame(",
          "def test_subset(",
          "def test_subset_duplicate_columns(",
          "def test_value_counts_time_grouper("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_aggregate.py": [
          "def test_groupby_agg_no_extra_calls(",
          "def test_agg_regression1(",
          "def test_agg_must_agg(",
          "def test_agg_ser_multi_key(",
          "def test_groupby_aggregation_mixed_dtype(",
          "def test_groupby_aggregation_multi_level_column(",
          "def test_agg_apply_corner(",
          "def test_agg_grouping_is_list_tuple(",
          "def test_agg_python_multiindex(",
          "def test_aggregate_str_func(",
          "def test_std_masked_dtype(",
          "def test_agg_str_with_kwarg_axis_1_raises(",
          "def test_multiindex_groupby_mixed_cols_axis1(",
          "def test_groupby_mixed_cols_axis1(",
          "def test_aggregate_item_by_item(",
          "def test_wrap_agg_out(",
          "def test_agg_multiple_functions_maintain_order(",
          "def test_agg_multiple_functions_same_name(",
          "def test_agg_multiple_functions_same_name_with_ohlc_present(",
          "def test_multiple_functions_tuples_and_non_tuples(",
          "def test_more_flexible_frame_multi_function(",
          "def test_multi_function_flexible_mix(",
          "def test_groupby_agg_coercing_bools(",
          "def test_groupby_agg_dict_with_getitem(",
          "def test_groupby_agg_dict_dup_columns(",
          "def test_bool_agg_dtype(",
          "def test_callable_result_dtype_frame(",
          "def test_callable_result_dtype_series(",
          "def test_order_aggregate_multiple_funcs(",
          "def test_ohlc_ea_dtypes(",
          "def test_uint64_type_handling(",
          "def test_func_duplicates_raises(",
          "def test_agg_index_has_complex_internals(",
          "def test_agg_split_block(",
          "def test_agg_split_object_part_datetime(",
          "def test_series_named_agg(",
          "def test_no_args_raises(",
          "def test_series_named_agg_duplicates_no_raises(",
          "def test_mangled(",
          "def test_named_agg_nametuple(",
          "def test_agg_relabel(",
          "def test_agg_relabel_non_identifier(",
          "def test_duplicate_no_raises(",
          "def test_agg_relabel_with_level(",
          "def test_agg_relabel_other_raises(",
          "def test_missing_raises(",
          "def test_agg_namedtuple(",
          "def test_mangled(",
          "def test_agg_relabel_multiindex_column(",
          "def test_agg_relabel_multiindex_raises_not_exist(",
          "def test_agg_relabel_multiindex_duplicates(",
          "def test_groupby_aggregate_empty_key(",
          "def test_groupby_aggregate_empty_key_empty_return(",
          "def test_groupby_aggregate_empty_with_multiindex_frame(",
          "def test_grouby_agg_loses_results_with_as_index_false_relabel(",
          "def test_grouby_agg_loses_results_with_as_index_false_relabel_multiindex(",
          "def test_multiindex_custom_func(",
          "def test_lambda_named_agg(",
          "def test_aggregate_mixed_types(",
          "def test_aggregate_udf_na_extension_type(",
          "def test_basic(",
          "def test_mangle_series_groupby(",
          "def test_with_kwargs(",
          "def test_agg_with_one_lambda(",
          "def test_agg_multiple_lambda(",
          "def test_groupby_get_by_index(",
          "def test_groupby_single_agg_cat_cols(",
          "def test_groupby_combined_aggs_cat_cols(",
          "def test_nonagg_agg(",
          "def test_aggregate_datetime_objects(",
          "def test_groupby_index_object_dtype(",
          "def test_timeseries_groupby_agg(",
          "def test_groupby_agg_precision(",
          "def test_groupby_aggregate_directory(",
          "def test_group_mean_timedelta_nat(",
          "def test_group_mean_datetime64_nat(",
          "def test_groupby_complex(",
          "def test_groupby_complex_raises(",
          "def test_multi_axis_1_raises(",
          "def test_agg_of_mode_list(",
          "def test_dataframe_groupy_agg_list_like_func_with_args(",
          "def test_series_groupy_agg_list_like_func_with_args(",
          "def test_agg_groupings_selection(",
          "def test_agg_multiple_with_as_index_false_subset_to_a_single_column(",
          "def test_agg_with_as_index_false_with_list(",
          "def test_groupby_agg_extension_timedelta_cumsum_with_named_aggregation("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_cython.py": [
          "def test_cythonized_aggers(",
          "def test_cython_agg_boolean(",
          "def test_cython_agg_nothing_to_agg(",
          "def test_cython_agg_nothing_to_agg_with_dates(",
          "def test_cython_agg_frame_columns(",
          "def test_cython_agg_return_dict(",
          "def test_cython_fail_agg(",
          "def test__cython_agg_general(",
          "def test_cython_agg_empty_buckets(",
          "def test_cython_agg_empty_buckets_nanops(",
          "def test_cython_with_timestamp_and_nat(",
          "def test_read_only_buffer_source_agg(",
          "def test_cython_agg_nullable_int(",
          "def test_count_masked_returns_masked_dtype(",
          "def test_cython_agg_EA_known_dtypes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_numba.py": [
          "def test_correct_function_signature(",
          "def test_check_nopython_kwargs(",
          "def test_numba_vs_cython(",
          "def test_cache(",
          "def test_use_global_config(",
          "def test_multifunc_numba_vs_cython_frame(",
          "def test_multifunc_numba_udf_frame(",
          "def test_multifunc_numba_vs_cython_series(",
          "def test_multifunc_numba_kwarg_propagation(",
          "def test_args_not_cached(",
          "def test_index_data_correctly_passed(",
          "def test_engine_kwargs_not_cached(",
          "def test_multiindex_one_key(",
          "def test_multiindex_multi_key_not_supported(",
          "def test_multilabel_numba_vs_cython(",
          "def test_multilabel_udf_numba_vs_cython("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_other.py": [
          "def test_agg_partial_failure_raises(",
          "def test_agg_datetimes_mixed(",
          "def test_agg_period_index(",
          "def test_agg_dict_parameter_cast_result_dtypes(",
          "def test_agg_cast_results_dtypes(",
          "def test_aggregate_float64_no_int64(",
          "def test_aggregate_api_consistency(",
          "def test_agg_dict_renaming_deprecation(",
          "def test_agg_compat(",
          "def test_agg_nested_dicts(",
          "def test_agg_item_by_item_raise_typeerror(",
          "def test_series_agg_multikey(",
          "def test_series_agg_multi_pure_python(",
          "def test_agg_consistency(",
          "def test_agg_callables(",
          "def test_agg_over_numpy_arrays(",
          "def test_agg_tzaware_non_datetime_result(",
          "def test_agg_timezone_round_trip(",
          "def test_sum_uint64_overflow(",
          "def test_agg_structs_dataframe(",
          "def test_agg_structs_series(",
          "def test_agg_category_nansum(",
          "def test_agg_list_like_func(",
          "def test_agg_lambda_with_timezone(",
          "def test_groupby_agg_err_catching("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_numba.py": [
          "def test_correct_function_signature(",
          "def test_check_nopython_kwargs(",
          "def test_numba_vs_cython(",
          "def test_cache(",
          "def test_use_global_config(",
          "def test_string_cython_vs_numba(",
          "def test_args_not_cached(",
          "def test_index_data_correctly_passed(",
          "def test_engine_kwargs_not_cached(",
          "def test_multiindex_one_key(",
          "def test_multiindex_multi_key_not_supported(",
          "def test_multilabel_numba_vs_cython(",
          "def test_multilabel_udf_numba_vs_cython("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_transform.py": [
          "def test_transform(",
          "def test_transform_fast(",
          "def test_transform_broadcast(",
          "def test_transform_axis_1(",
          "def test_transform_axis_1_reducer(",
          "def test_transform_axis_ts(",
          "def test_transform_dtype(",
          "def test_transform_bug(",
          "def test_transform_numeric_to_boolean(",
          "def test_transform_datetime_to_timedelta(",
          "def test_transform_datetime_to_numeric(",
          "def test_transform_casting(",
          "def test_transform_multiple(",
          "def test_dispatch_transform(",
          "def test_transform_fillna_null(",
          "def test_transform_transformation_func(",
          "def test_transform_select_columns(",
          "def test_transform_nuisance_raises(",
          "def test_transform_function_aliases(",
          "def test_series_fast_transform_date(",
          "def test_transform_length(",
          "def test_transform_coercion(",
          "def test_groupby_transform_with_int(",
          "def test_groupby_transform_with_nan_group(",
          "def test_transform_mixed_type(",
          "def test_cython_transform_series(",
          "def test_groupby_cum_skipna(",
          "def test_cython_transform_frame(",
          "def test_cython_transform_frame_column(",
          "def test_transform_with_non_scalar_group(",
          "def test_transform_numeric_ret(",
          "def test_transform_ffill(",
          "def test_group_fill_methods(",
          "def test_pad_stable_sorting(",
          "def test_pct_change(",
          "def test_ffill_bfill_non_unique_multilevel(",
          "def test_any_all_np_func(",
          "def test_groupby_transform_rename(",
          "def test_groupby_transform_timezone_column(",
          "def test_groupby_transform_with_datetimes(",
          "def test_groupby_transform_dtype(",
          "def test_transform_absent_categories(",
          "def test_ffill_not_in_axis(",
          "def test_transform_invalid_name_raises(",
          "def test_transform_agg_by_name(",
          "def test_transform_lambda_with_datetimetz(",
          "def test_transform_fastpath_raises(",
          "def test_transform_lambda_indexing(",
          "def test_categorical_and_not_categorical_key(",
          "def test_string_rank_grouping(",
          "def test_transform_cumcount(",
          "def test_null_group_lambda_self(",
          "def test_null_group_str_reducer(",
          "def test_null_group_str_transformer(",
          "def test_null_group_str_reducer_series(",
          "def test_null_group_str_transformer_series(",
          "def test_transform_aligns(",
          "def test_as_index_no_change("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_any_index.py": [
          "def test_boolean_context_compat(",
          "def test_sort(",
          "def test_hash_error(",
          "def test_mutability(",
          "def test_map_identity_mapping(",
          "def test_wrong_number_names(",
          "def test_view_preserves_name(",
          "def test_ravel(",
          "def test_to_series(",
          "def test_to_series_with_arguments(",
          "def test_tolist_matches_list(",
          "def test_pickle_roundtrip(",
          "def test_pickle_preserves_name(",
          "def test_get_loc_listlike_raises_invalid_index_error(",
          "def test_getitem_ellipsis(",
          "def test_slice_keeps_name(",
          "def test_getitem_error(",
          "def test_str(",
          "def test_argmax_axis_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_base.py": [
          "def test_can_hold_identifiers(",
          "def test_new_axis(",
          "def test_constructor_regular(",
          "def test_constructor_casting(",
          "def test_constructor_copy(",
          "def test_constructor_from_index_dtlike(",
          "def test_constructor_from_series_dtlike(",
          "def test_constructor_from_series_freq(",
          "def test_constructor_from_frame_series_freq(",
          "def test_constructor_int_dtype_nan(",
          "def test_index_ctor_infer_nan_nat(",
          "def test_constructor_simple_new(",
          "def test_constructor_dtypes_datetime(",
          "def test_constructor_dtypes_timedelta(",
          "def test_constructor_empty(",
          "def test_constructor_empty_special(",
          "def test_view_with_args(",
          "def test_view_with_args_object_array_raises(",
          "def test_astype(",
          "def test_equals_object(",
          "def test_not_equals_object(",
          "def test_identical(",
          "def test_is_(",
          "def test_asof_numeric_vs_bool_raises(",
          "def test_booleanindex(",
          "def test_fancy(",
          "def test_empty_fancy(",
          "def test_empty_fancy_raises(",
          "def test_union_dt_as_obj(",
          "def test_map_with_tuples(",
          "def test_map_with_tuples_mi(",
          "def test_map_tseries_indices_return_index(",
          "def test_map_tseries_indices_accsr_return_index(",
          "def test_map_dictlike_simple(",
          "def test_map_dictlike(",
          "def test_map_with_non_function_missing_values(",
          "def test_map_na_exclusion(",
          "def test_map_defaultdict(",
          "def test_append_empty_preserve_name(",
          "def test_is_numeric(",
          "def test_is_object(",
          "def test_summary(",
          "def test_format_bug(",
          "def test_format_missing(",
          "def test_logical_compat(",
          "def test_drop_by_str_label(",
          "def test_drop_by_str_label_raises_missing_keys(",
          "def test_drop_by_str_label_errors_ignore(",
          "def test_drop_by_numeric_label_loc(",
          "def test_drop_by_numeric_label_raises_missing_keys(",
          "def test_drop_by_numeric_label_errors_ignore(",
          "def test_drop_tuple(",
          "def test_drop_with_duplicates_in_index(",
          "def test_is_monotonic_incomparable(",
          "def test_isin(",
          "def test_isin_nan_common_object(",
          "def test_isin_nan_common_float64(",
          "def test_isin_level_kwarg(",
          "def test_isin_level_kwarg_bad_level_raises(",
          "def test_isin_level_kwarg_bad_label_raises(",
          "def test_isin_empty(",
          "def test_boolean_cmp(",
          "def test_get_level_values(",
          "def test_slice_keep_name(",
          "def test_join_self(",
          "def test_str_attribute(",
          "def test_str_attribute_raises(",
          "def test_str_split(",
          "def test_str_bool_return(",
          "def test_str_bool_series_indexing(",
          "def test_tab_completion(",
          "def test_indexing_doesnt_change_class(",
          "def test_outer_join_sort(",
          "def test_take_fill_value(",
          "def test_take_fill_value_none_raises(",
          "def test_take_bad_bounds_raises(",
          "def test_reindex_preserves_name_if_target_is_list_or_ndarray(",
          "def test_reindex_preserves_type_if_target_is_empty_list_or_array(",
          "def test_reindex_doesnt_preserve_type_if_target_is_empty_index(",
          "def test_reindex_doesnt_preserve_type_if_target_is_empty_index_numeric(",
          "def test_reindex_no_type_preserve_target_empty_mi(",
          "def test_reindex_ignoring_level(",
          "def test_groupby(",
          "def test_equals_op_multiindex(",
          "def test_equals_op_multiindex_identify(",
          "def test_equals_op_mismatched_multiindex_raises(",
          "def test_equals_op_index_vs_mi_same_length(",
          "def test_dt_conversion_preserves_name(",
          "def test_cached_properties_not_settable(",
          "def test_tab_complete_warning(",
          "def test_contains_method_removed(",
          "def test_sortlevel(",
          "def test_sortlevel_na_position(",
          "def test_index_diff(",
          "def test_index_round(",
          "def test_argsort(",
          "def test_numpy_argsort(",
          "def test_copy_name(",
          "def test_copy_name2(",
          "def test_unique_na(",
          "def test_logical_compat(",
          "def test_dropna(",
          "def test_dropna_dt_like(",
          "def test_dropna_invalid_how_raises(",
          "def test_is_monotonic_na(",
          "def test_int_name_format(",
          "def test_str_to_bytes_raises(",
          "def test_index_with_tuple_bool(",
          "def test_ensure_index_from_sequences(",
          "def test_ensure_index_mixed_closed_intervals(",
          "def test_ensure_index_uint64(",
          "def test_get_combined_index(",
          "def test_generated_op_names(",
          "def test_index_subclass_constructor_wrong_kwargs(",
          "def test_deprecated_fastpath(",
          "def test_shape_of_invalid_index(",
          "def test_validate_1d_input(",
          "def test_construct_from_memoryview(",
          "def test_nan_comparison_same_object("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_common.py": [
          "def test_to_frame(",
          "def test_droplevel(",
          "def test_constructor_non_hashable_name(",
          "def test_constructor_unwraps_index(",
          "def test_to_flat_index(",
          "def test_set_name_methods(",
          "def test_set_names_single_label_no_level(",
          "def test_copy_and_deepcopy(",
          "def test_copy_name(",
          "def test_copy_name2(",
          "def test_unique_level(",
          "def test_unique(",
          "def test_searchsorted_monotonic(",
          "def test_drop_duplicates(",
          "def test_drop_duplicates_no_duplicates(",
          "def test_drop_duplicates_inplace(",
          "def test_has_duplicates(",
          "def test_astype_preserves_name(",
          "def test_hasnans_isnans(",
          "def test_sort_values_invalid_na_position(",
          "def test_sort_values_with_missing(",
          "def test_ndarray_compat_properties("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_datetimelike.py": [
          "def test_isin(",
          "def test_argsort_matches_array(",
          "def test_can_hold_identifiers(",
          "def test_shift_identity(",
          "def test_shift_empty(",
          "def test_str(",
          "def test_view(",
          "def test_map_callable(",
          "def test_map_dictlike(",
          "def test_getitem_preserves_freq(",
          "def test_where_cast_str("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_engines.py": [
          "def test_not_contains_requires_timestamp(",
          "def test_not_contains_requires_timedelta(",
          "def test_is_monotonic(",
          "def test_is_unique(",
          "def test_get_loc(",
          "def test_is_monotonic(",
          "def test_is_unique(",
          "def test_get_loc("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_frozen.py": [
          "def test_no_mutable_funcs(",
          "def test_slicing_maintains_type(",
          "def test_string_methods_dont_fail(",
          "def test_tricky_container(",
          "def test_add(",
          "def test_iadd(",
          "def test_union(",
          "def test_difference(",
          "def test_difference_dupe(",
          "def test_tricky_container_to_bytes_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_indexing.py": [
          "def test_take_invalid_kwargs(",
          "def test_take(",
          "def test_take_indexer_type(",
          "def test_take_minus1_without_fill(",
          "def test_index_contains(",
          "def test_index_not_contains(",
          "def test_mixed_index_contains(",
          "def test_mixed_index_not_contains(",
          "def test_contains_with_float_index(",
          "def test_contains_requires_hashable_raises(",
          "def test_get_loc_non_hashable(",
          "def test_get_loc_non_scalar_hashable(",
          "def test_get_loc_generator(",
          "def test_get_loc_masked_duplicated_na(",
          "def test_get_indexer_base(",
          "def test_get_indexer_consistency(",
          "def test_get_indexer_masked_duplicated_na(",
          "def test_convert_almost_null_slice(",
          "def test_putmask_with_wrong_mask(",
          "def test_getitem_deprecated_float(",
          "def test_get_indexer_non_unique_multiple_nans(",
          "def test_get_indexer_non_unique_nans_in_object_dtype_target("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_index_new.py": [
          "def test_object_all_bools(",
          "def test_object_all_complex(",
          "def test_infer_nat(",
          "def test_construction_list_tuples_nan(",
          "def test_constructor_int_dtype_float(",
          "def test_constructor_dtypes_to_object(",
          "def test_constructor_categorical_to_object(",
          "def test_constructor_infer_periodindex(",
          "def test_from_list_of_periods(",
          "def test_constructor_infer_nat_dt_like(",
          "def test_constructor_mixed_nat_objs_infers_object(",
          "def test_constructor_datetime_and_datetime64(",
          "def test_constructor_object_dtype_with_ea_data(",
          "def test_constructor_range_values_mismatched_dtype(",
          "def test_constructor_categorical_values_mismatched_non_ea_dtype(",
          "def test_constructor_categorical_values_mismatched_dtype(",
          "def test_constructor_ea_values_mismatched_categorical_dtype(",
          "def test_constructor_period_values_mismatched_dtype(",
          "def test_constructor_timedelta64_values_mismatched_dtype(",
          "def test_constructor_interval_values_mismatched_dtype(",
          "def test_constructor_datetime64_values_mismatched_period_dtype(",
          "def test_constructor_int_dtype_nan_raises(",
          "def test_constructor_dtypes_to_int(",
          "def test_constructor_dtypes_to_float(",
          "def test_constructor_dtypes_to_categorical(",
          "def test_constructor_dtypes_to_datetime(",
          "def test_constructor_dtypes_to_timedelta(",
          "def test_constructor_from_series_dt64(",
          "def test_constructor_no_pandas_array(",
          "def test_constructor_ndarray_like(",
          "def test_constructor_overflow_int64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_numpy_compat.py": [
          "def test_numpy_ufuncs_out(",
          "def test_numpy_ufuncs_basic(",
          "def test_numpy_ufuncs_other(",
          "def test_numpy_ufuncs_reductions(",
          "def test_numpy_ufuncs_bitwise("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_old_base.py": [
          "def test_pickle_compat_construction(",
          "def test_shift(",
          "def test_constructor_name_unhashable(",
          "def test_create_index_existing_name(",
          "def test_numeric_compat(",
          "def test_logical_compat(",
          "def test_repr_roundtrip(",
          "def test_repr_max_seq_item_setting(",
          "def test_ensure_copied_data(",
          "def test_memory_usage(",
          "def test_argsort(",
          "def test_numpy_argsort(",
          "def test_repeat(",
          "def test_numpy_repeat(",
          "def test_where(",
          "def test_insert_base(",
          "def test_insert_out_of_bounds(",
          "def test_delete_base(",
          "def test_equals(",
          "def test_equals_op(",
          "def test_format(",
          "def test_format_empty(",
          "def test_fillna(",
          "def test_nulls(",
          "def test_empty(",
          "def test_join_self_unique(",
          "def test_map(",
          "def test_map_dictlike(",
          "def test_map_str(",
          "def test_astype_category(",
          "def test_is_unique(",
          "def test_engine_reference_cycle(",
          "def test_getitem_2d_deprecated(",
          "def test_copy_shares_cache(",
          "def test_shallow_copy_shares_cache(",
          "def test_index_groupby(",
          "def test_append_preserves_dtype(",
          "def test_inv(",
          "def test_is_boolean_is_deprecated(",
          "def test_is_floating_is_deprecated(",
          "def test_is_integer_is_deprecated(",
          "def test_holds_integer_deprecated(",
          "def test_is_numeric_is_deprecated(",
          "def test_is_categorical_is_deprecated(",
          "def test_is_interval_is_deprecated(",
          "def test_is_object_is_deprecated(",
          "def test_constructor_unwraps_index(",
          "def test_can_hold_identifiers(",
          "def test_view(",
          "def test_format(",
          "def test_insert_non_na(",
          "def test_insert_na(",
          "def test_arithmetic_explicit_conversions(",
          "def test_astype_to_complex(",
          "def test_cast_string("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_setops.py": [
          "def test_union_same_types(",
          "def test_union_different_types(",
          "def test_compatible_inconsistent_pairs(",
          "def test_union_dtypes(",
          "def test_intersection_duplicates(",
          "def test_set_ops_error_cases(",
          "def test_intersection_base(",
          "def test_union_base(",
          "def test_difference_base(",
          "def test_symmetric_difference(",
          "def test_corner_union(",
          "def test_union_unequal(",
          "def test_corner_intersect(",
          "def test_intersect_unequal(",
          "def test_intersection_name_retention_with_nameless(",
          "def test_difference_preserves_type_empty(",
          "def test_difference_name_retention_equals(",
          "def test_intersection_difference_match_empty(",
          "def test_setop_with_categorical(",
          "def test_intersection_duplicates_all_indexes(",
          "def test_union_duplicate_index_subsets_of_each_other(",
          "def test_union_with_duplicate_index_and_non_monotonic(",
          "def test_union_duplicate_index_different_dtypes(",
          "def test_union_same_value_duplicated_in_both(",
          "def test_union_nan_in_both(",
          "def test_union_rangeindex_sort_true(",
          "def test_union_with_duplicate_index_not_subset_and_non_monotonic(",
          "def test_union_int_categorical_with_nan(",
          "def test_intersect_str_dates(",
          "def test_intersection(",
          "def test_intersection_name_preservation(",
          "def test_intersection_name_preservation2(",
          "def test_chained_union(",
          "def test_union(",
          "def test_union_from_iterables(",
          "def test_union_identity(",
          "def test_difference_name_preservation(",
          "def test_difference_empty_arg(",
          "def test_difference_identity(",
          "def test_difference_sort(",
          "def test_difference_incomparable(",
          "def test_difference_incomparable_true(",
          "def test_symmetric_difference_mi(",
          "def test_symmetric_difference_missing(",
          "def test_symmetric_difference_non_index(",
          "def test_union_ea_dtypes(",
          "def test_union_string_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_subclass.py": [
          "def test_insert_fallback_to_base_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_constructors.py": [
          "def test_constructor_corner(",
          "def test_construction_list_mixed_tuples(",
          "def test_constructor_cast(",
          "def test_construct_empty_tuples(",
          "def test_index_string_inference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_formats.py": [
          "def test_string_index_repr(",
          "def test_string_index_repr_with_unicode_option(",
          "def test_repr_summary(",
          "def test_summary_bug(",
          "def test_index_repr_bool_nan(",
          "def test_format_different_scalar_lengths("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_indexing.py": [
          "def test_get_slice_bounds_within(",
          "def test_get_slice_bounds_outside(",
          "def test_get_slice_bounds_invalid_side(",
          "def test_get_indexer_non_unique_dtype_mismatch(",
          "def test_get_indexer_non_unique_int_index(",
          "def test_get_loc_tuple_monotonic_above_size_cutoff(",
          "def test_get_loc_nan_object_dtype_nonmonotonic_nonunique(",
          "def test_getitem_boolean_ea_indexer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_pickle.py": [
          "def test_pickle_preserves_object_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_reshape.py": [
          "def test_repeat(",
          "def test_insert(",
          "def test_insert_missing(",
          "def test_insert_datetime_into_object(",
          "def test_delete(",
          "def test_delete_raises(",
          "def test_append_multiple("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_setops.py": [
          "def test_setops_sort_validation(",
          "def test_setops_preserve_object_dtype(",
          "def test_union_base(",
          "def test_union_different_type_base(",
          "def test_union_sort_other_incomparable(",
          "def test_union_sort_other_incomparable_true(",
          "def test_intersection_equal_sort_true(",
          "def test_intersection_base(",
          "def test_intersection_different_type_base(",
          "def test_intersection_nosort(",
          "def test_intersection_equal_sort(",
          "def test_intersection_str_dates(",
          "def test_intersection_non_monotonic_non_unique(",
          "def test_difference_base(",
          "def test_symmetric_difference(",
          "def test_tuple_union_bug(",
          "def test_union_name_preservation(",
          "def test_difference_object_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_where.py": [
          "def test_where_intlike_str_doesnt_cast_ints("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_append.py": [
          "def test_append(",
          "def test_append_empty(",
          "def test_append_mismatched_categories(",
          "def test_append_category_objects(",
          "def test_append_non_categories(",
          "def test_append_object(",
          "def test_append_to_another("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_astype.py": [
          "def test_astype(",
          "def test_astype_category(",
          "def test_categorical_date_roundtrip("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_category.py": [
          "def test_can_hold_identifiers(",
          "def test_insert(",
          "def test_insert_na_mismatched_dtype(",
          "def test_delete(",
          "def test_is_monotonic(",
          "def test_has_duplicates(",
          "def test_drop_duplicates(",
          "def test_unique(",
          "def test_repr_roundtrip(",
          "def test_isin(",
          "def test_identical(",
          "def test_ensure_copied_data(",
          "def test_frame_repr(",
          "def test_view_i8(",
          "def test_engine_type(",
          "def test_disallow_addsub_ops(",
          "def test_method_delegation(",
          "def test_remove_maintains_order("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_constructors.py": [
          "def test_construction_disallows_scalar(",
          "def test_construction(",
          "def test_construction_with_dtype(",
          "def test_construction_empty_with_bool_categories(",
          "def test_construction_with_categorical_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_equals.py": [
          "def test_equals_categorical(",
          "def test_equals_categorical_unordered(",
          "def test_equals_non_category(",
          "def test_equals_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_fillna.py": [
          "def test_fillna_categorical(",
          "def test_fillna_copies_with_no_nas(",
          "def test_fillna_validates_with_no_nas("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_formats.py": [
          "def test_format_different_scalar_lengths(",
          "def test_string_categorical_index_repr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_indexing.py": [
          "def test_take_fill_value(",
          "def test_take_fill_value_datetime(",
          "def test_take_invalid_kwargs(",
          "def test_get_loc(",
          "def test_get_loc_unique(",
          "def test_get_loc_monotonic_nonunique(",
          "def test_get_loc_nonmonotonic_nonunique(",
          "def test_get_loc_nan(",
          "def test_get_indexer_base(",
          "def test_get_indexer_requires_unique(",
          "def test_get_indexer_non_unique(",
          "def test_get_indexer_method(",
          "def test_get_indexer_array(",
          "def test_get_indexer_same_categories_same_order(",
          "def test_get_indexer_same_categories_different_order(",
          "def test_get_indexer_nans_in_index_and_target(",
          "def test_where(",
          "def test_where_non_categories(",
          "def test_contains(",
          "def test_contains_nan(",
          "def test_contains_na_dtype(",
          "def test_contains_interval(",
          "def test_contains_list("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_map.py": [
          "def test_map_str(",
          "def test_map(",
          "def test_map_with_categorical_series(",
          "def test_map_with_nan_ignore(",
          "def test_map_with_nan_none(",
          "def test_map_with_dict_or_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_reindex.py": [
          "def test_reindex_list_non_unique(",
          "def test_reindex_categorical_non_unique(",
          "def test_reindex_list_non_unique_unused_category(",
          "def test_reindex_categorical_non_unique_unused_category(",
          "def test_reindex_duplicate_target(",
          "def test_reindex_empty_index(",
          "def test_reindex_categorical_added_category("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_drop_duplicates.py": [
          "def test_drop_duplicates_metadata(",
          "def test_drop_duplicates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_equals.py": [
          "def test_not_equals_numeric(",
          "def test_equals(",
          "def test_not_equals_non_arraylike(",
          "def test_not_equals_strings(",
          "def test_not_equals_misc_strs(",
          "def test_equals2(",
          "def test_equals2(",
          "def test_not_equals_bday(",
          "def test_equals2("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_indexing.py": [
          "def test_get_indexer_non_unique_wrong_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_is_monotonic.py": [
          "def test_is_monotonic_with_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_nat.py": [
          "def test_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_sort_values.py": [
          "def test_argmin_argmax(",
          "def test_sort_values(",
          "def test_sort_values_with_freq_timedeltaindex(",
          "def test_sort_values_with_freq_datetimeindex(",
          "def test_sort_values_with_freq_periodindex(",
          "def test_sort_values_with_freq_periodindex2(",
          "def test_sort_values_without_freq_timedeltaindex(",
          "def test_sort_values_without_freq_datetimeindex(",
          "def test_sort_values_without_freq_periodindex(",
          "def test_sort_values_without_freq_periodindex_nat(",
          "def test_order_stability_compat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_value_counts.py": [
          "def test_value_counts_unique_datetimeindex(",
          "def test_value_counts_unique_timedeltaindex(",
          "def test_value_counts_unique_periodindex(",
          "def test_value_counts_unique_datetimeindex2(",
          "def test_value_counts_unique_timedeltaindex2(",
          "def test_value_counts_unique_periodindex2("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_asof.py": [
          "def test_asof_partial(",
          "def test_asof("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_constructors.py": [
          "def test_closed_deprecated(",
          "def test_normalize_deprecated(",
          "def test_from_dt64_unsupported_unit(",
          "def test_explicit_tz_none(",
          "def test_freq_validation_with_nat(",
          "def test_shallow_copy_inherits_array_freq(",
          "def test_categorical_preserves_tz(",
          "def test_dti_with_period_data_raises(",
          "def test_dti_with_timedelta64_data_raises(",
          "def test_constructor_from_sparse_array(",
          "def test_construction_caching(",
          "def test_construction_with_alt(",
          "def test_construction_with_alt_tz_localize(",
          "def test_construction_index_with_mixed_timezones(",
          "def test_construction_index_with_mixed_timezones_with_NaT(",
          "def test_construction_dti_with_mixed_timezones(",
          "def test_construction_base_constructor(",
          "def test_construction_outofbounds(",
          "def test_construction_with_ndarray(",
          "def test_integer_values_and_tz_interpreted_as_utc(",
          "def test_constructor_coverage(",
          "def test_constructor_datetime64_tzformat(",
          "def test_constructor_dtype(",
          "def test_constructor_dtype_tz_mismatch_raises(",
          "def test_constructor_invalid_dtype_raises(",
          "def test_constructor_name(",
          "def test_000constructor_resolution(",
          "def test_disallow_setting_tz(",
          "def test_constructor_start_end_with_tz(",
          "def test_constructor_with_non_normalized_pytz(",
          "def test_constructor_timestamp_near_dst(",
          "def test_constructor_with_int_tz(",
          "def test_construction_int_rountrip(",
          "def test_construction_from_replaced_timestamps_with_dst(",
          "def test_construction_with_tz_and_tz_aware_dti(",
          "def test_construction_with_nat_and_tzlocal(",
          "def test_constructor_with_ambiguous_keyword_arg(",
          "def test_constructor_with_nonexistent_keyword_arg(",
          "def test_constructor_no_precision_raises(",
          "def test_constructor_wrong_precision_raises(",
          "def test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan(",
          "def test_dti_constructor_preserve_dti_freq(",
          "def test_explicit_none_freq(",
          "def test_dti_constructor_years_only(",
          "def test_dti_constructor_small_int(",
          "def test_ctor_str_intraday(",
          "def test_is_(",
          "def test_index_cast_datetime64_other_units(",
          "def test_constructor_int64_nocopy(",
          "def test_from_freq_recreate_from_data(",
          "def test_datetimeindex_constructor_misc(",
          "def test_pass_datetimeindex_to_index(",
          "def test_date_range_tuple_freq_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_datetime.py": [
          "def test_sub_datetime_preserves_freq(",
          "def test_sub_datetime_preserves_freq_across_dst(",
          "def test_time_overflow_for_32bit_machines(",
          "def test_nat(",
          "def test_week_of_month_frequency(",
          "def test_append_nondatetimeindex(",
          "def test_iteration_preserves_tz(",
          "def test_iteration_over_chunksize(",
          "def test_misc_coverage(",
          "def test_groupby_function_tuple_1677(",
          "def test_ns_index(",
          "def test_asarray_tz_naive(",
          "def test_asarray_tz_aware("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_datetimelike.py": [
          "def test_format("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_date_range.py": [
          "def test_date_range_timestamp_equiv(",
          "def test_date_range_timestamp_equiv_dateutil(",
          "def test_date_range_timestamp_equiv_explicit_pytz(",
          "def test_date_range_timestamp_equiv_explicit_dateutil(",
          "def test_date_range_timestamp_equiv_from_datetime_instance(",
          "def test_date_range_timestamp_equiv_preserve_frequency(",
          "def test_date_range_edges(",
          "def test_date_range_near_implementation_bound(",
          "def test_date_range_nat(",
          "def test_date_range_multiplication_overflow(",
          "def test_date_range_unsigned_overflow_handling(",
          "def test_date_range_int64_overflow_non_recoverable(",
          "def test_date_range_int64_overflow_stride_endpoint_different_signs(",
          "def test_date_range_out_of_bounds(",
          "def test_date_range_gen_error(",
          "def test_begin_year_alias(",
          "def test_end_year_alias(",
          "def test_business_end_year_alias(",
          "def test_date_range_negative_freq(",
          "def test_date_range_bms_bug(",
          "def test_date_range_normalize(",
          "def test_date_range_fy5252(",
          "def test_date_range_ambiguous_arguments(",
          "def test_date_range_convenience_periods(",
          "def test_date_range_index_comparison(",
          "def test_date_range_linspacing_tz(",
          "def test_date_range_businesshour(",
          "def test_date_range_timedelta(",
          "def test_range_misspecified(",
          "def test_compat_replace(",
          "def test_catch_infinite_loop(",
          "def test_wom_len(",
          "def test_construct_over_dst(",
          "def test_construct_with_different_start_end_string_format(",
          "def test_error_with_zero_monthends(",
          "def test_range_bug(",
          "def test_range_tz_pytz(",
          "def test_range_tz_dst_straddle_pytz(",
          "def test_range_tz_dateutil(",
          "def test_range_closed(",
          "def test_range_closed_with_tz_aware_start_end(",
          "def test_range_with_tz_closed_with_tz_aware_start_end(",
          "def test_range_closed_boundary(",
          "def test_years_only(",
          "def test_freq_divides_end_in_nanos(",
          "def test_cached_range_bug(",
          "def test_timezone_comparison_bug(",
          "def test_timezone_comparison_assert(",
          "def test_negative_non_tick_frequency_descending_dates(",
          "def test_range_where_start_equal_end(",
          "def test_freq_dateoffset_with_relateivedelta_nanos(",
          "def test_hongkong_tz_convert(",
          "def test_date_range_span_dst_transition(",
          "def test_date_range_timezone_str_argument(",
          "def test_date_range_with_fixedoffset_noname(",
          "def test_date_range_with_tz(",
          "def test_generate(",
          "def test_generate_cday(",
          "def test_1(",
          "def test_2(",
          "def test_3(",
          "def test_precision_finer_than_offset(",
          "def test_mismatching_tz_raises_err(",
          "def test_constructor(",
          "def test_misc(",
          "def test_date_parse_failure(",
          "def test_daterange_bug_456(",
          "def test_bdays_and_open_boundaries(",
          "def test_bday_near_overflow(",
          "def test_bday_overflow_error(",
          "def test_constructor(",
          "def test_misc(",
          "def test_daterange_bug_456(",
          "def test_cdaterange(",
          "def test_cdaterange_weekmask(",
          "def test_cdaterange_holidays(",
          "def test_cdaterange_weekmask_and_holidays(",
          "def test_all_custom_freq(",
          "def test_range_with_millisecond_resolution(",
          "def test_range_with_timezone_and_custombusinessday(",
          "def test_date_range_with_custom_holidays(",
          "def test_date_range_reso_validation(",
          "def test_date_range_freq_higher_than_reso(",
          "def test_date_range_freq_matches_reso(",
          "def test_date_range_freq_lower_than_endpoints(",
          "def test_date_range_non_nano("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_delete.py": [
          "def test_delete(",
          "def test_delete_slice("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_formats.py": [
          "def test_format_native_types(",
          "def test_dti_repr_short(",
          "def test_dti_repr_time_midnight(",
          "def test_dti_representation(",
          "def test_dti_representation_to_series(",
          "def test_dti_summary(",
          "def test_dti_business_repr(",
          "def test_dti_business_summary(",
          "def test_dti_business_summary_pytz(",
          "def test_dti_business_summary_dateutil(",
          "def test_dti_custom_business_repr(",
          "def test_dti_custom_business_summary(",
          "def test_dti_custom_business_summary_pytz(",
          "def test_dti_custom_business_summary_dateutil(",
          "def test_format_with_name_time_info(",
          "def test_format_datetime_with_time("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_freq_attr.py": [
          "def test_freq_setter_errors(",
          "def test_freq_setter(",
          "def test_freq_view_safe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_indexing.py": [
          "def test_getitem_slice_keeps_name(",
          "def test_getitem(",
          "def test_dti_business_getitem(",
          "def test_dti_business_getitem_matplotlib_hackaround(",
          "def test_getitem_int_list(",
          "def test_where_doesnt_retain_freq(",
          "def test_where_other(",
          "def test_where_invalid_dtypes(",
          "def test_where_mismatched_nat(",
          "def test_where_tz(",
          "def test_take_nan_first_datetime(",
          "def test_take(",
          "def test_take_invalid_kwargs(",
          "def test_take2(",
          "def test_take_fill_value(",
          "def test_take_fill_value_with_timezone(",
          "def test_get_loc_key_unit_mismatch(",
          "def test_get_loc_key_unit_mismatch_not_castable(",
          "def test_get_loc_time_obj(",
          "def test_get_loc_time_obj2(",
          "def test_get_loc_time_nat(",
          "def test_get_loc_nat(",
          "def test_get_loc_timedelta_invalid_key(",
          "def test_get_loc_reasonable_key_error(",
          "def test_get_loc_year_str(",
          "def test_dti_contains_with_duplicates(",
          "def test_contains_nonunique(",
          "def test_get_indexer_date_objs(",
          "def test_get_indexer(",
          "def test_get_indexer_mixed_dtypes(",
          "def test_get_indexer_out_of_bounds_date(",
          "def test_get_indexer_pad_requires_monotonicity(",
          "def test_maybe_cast_slice_bounds_empty(",
          "def test_maybe_cast_slice_duplicate_monotonic(",
          "def test_get_slice_bounds_datetime_within(",
          "def test_get_slice_bounds_datetime_outside(",
          "def test_slice_datetime_locs(",
          "def test_indexer_between_time(",
          "def test_indexer_between_time_non_nano("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_join.py": [
          "def test_does_not_convert_mixed_integer(",
          "def test_join_self(",
          "def test_join_with_period_index(",
          "def test_join_object_index(",
          "def test_join_utc_convert(",
          "def test_datetimeindex_union_join_empty(",
          "def test_join_nonunique(",
          "def test_outer_join(",
          "def test_naive_aware_conflicts(",
          "def test_join_preserves_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_map.py": [
          "def test_map(",
          "def test_map_fallthrough(",
          "def test_map_bug_1677(",
          "def test_index_map("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_misc.py": [
          "def test_no_millisecond_field(",
          "def test_datetimeindex_accessors(",
          "def test_datetimeindex_accessors2(",
          "def test_datetimeindex_accessors3(",
          "def test_datetimeindex_accessors4(",
          "def test_datetimeindex_accessors5(",
          "def test_datetimeindex_accessors6(",
          "def test_datetime_name_accessors(",
          "def test_nanosecond_field(",
          "def test_iter_readonly(",
          "def test_add_timedelta_preserves_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_npfuncs.py": [
          "def test_split_non_utc("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_ops.py": [
          "def test_resolution(",
          "def test_infer_freq(",
          "def test_comparison(",
          "def test_copy(",
          "def test_identical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_partial_slicing.py": [
          "def test_string_index_series_name_converted(",
          "def test_stringified_slice_with_tz(",
          "def test_return_type_doesnt_depend_on_monotonicity(",
          "def test_return_type_doesnt_depend_on_monotonicity_higher_reso(",
          "def test_monotone_DTI_indexing_bug(",
          "def test_slice_year(",
          "def test_slice_end_of_period_resolution(",
          "def test_slice_quarter(",
          "def test_slice_month(",
          "def test_partial_slice(",
          "def test_partial_slice_daily(",
          "def test_partial_slice_hourly(",
          "def test_partial_slice_minutely(",
          "def test_partial_slice_second_precision(",
          "def test_partial_slicing_dataframe(",
          "def test_partial_slicing_with_multiindex(",
          "def test_partial_slicing_with_multiindex_series(",
          "def test_partial_slice_requires_monotonicity(",
          "def test_loc_datetime_length_one(",
          "def test_getitem_with_datestring_with_UTC_offset(",
          "def test_slice_reduce_to_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_pickle.py": [
          "def test_pickle(",
          "def test_pickle_dont_infer_freq(",
          "def test_pickle_after_set_freq(",
          "def test_roundtrip_pickle_with_tz(",
          "def test_pickle_unpickle("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_reindex.py": [
          "def test_reindex_preserves_tz_if_target_is_empty_list_or_array(",
          "def test_reindex_with_same_tz_nearest("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_scalar_compat.py": [
          "def test_dti_time(",
          "def test_dti_date(",
          "def test_dti_date_out_of_range(",
          "def test_dti_timestamp_fields(",
          "def test_dti_timestamp_isocalendar_fields(",
          "def test_round_daily(",
          "def test_round_invalid(",
          "def test_round(",
          "def test_no_rounding_occurs(",
          "def test_ceil_floor_edge(",
          "def test_round_int64(",
          "def test_normalize(",
          "def test_normalize_nat(",
          "def test_1700(",
          "def test_2000(",
          "def test_hour(",
          "def test_minute(",
          "def test_second("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_setops.py": [
          "def test_union2(",
          "def test_union3(",
          "def test_union(",
          "def test_union_coverage(",
          "def test_union_bug_1730(",
          "def test_union_bug_1745(",
          "def test_union_bug_4564(",
          "def test_union_freq_both_none(",
          "def test_union_freq_infer(",
          "def test_union_dataframe_index(",
          "def test_union_with_DatetimeIndex(",
          "def test_intersection2(",
          "def test_intersection(",
          "def test_intersection_empty(",
          "def test_intersection_bug_1708(",
          "def test_difference(",
          "def test_difference_freq(",
          "def test_datetimeindex_diff(",
          "def test_setops_preserve_freq(",
          "def test_intersection_non_tick_no_fastpath(",
          "def test_union(",
          "def test_union_not_cacheable(",
          "def test_intersection(",
          "def test_intersection_bug(",
          "def test_intersection_list(",
          "def test_month_range_union_tz_pytz(",
          "def test_month_range_union_tz_dateutil(",
          "def test_intersection_duplicates(",
          "def test_union(",
          "def test_intersection_bug(",
          "def test_intersection_dst_transition("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_timezones.py": [
          "def test_tz_convert_nat(",
          "def test_dti_tz_convert_compat_timestamp(",
          "def test_dti_tz_convert_hour_overflow_dst(",
          "def test_dti_tz_convert_hour_overflow_dst_timestamps(",
          "def test_dti_tz_convert_trans_pos_plus_1__bug(",
          "def test_dti_tz_convert_dst(",
          "def test_tz_convert_roundtrip(",
          "def test_dti_tz_convert_tzlocal(",
          "def test_dti_tz_convert_utc_to_local_no_modify(",
          "def test_tz_convert_unsorted(",
          "def test_tz_localize_utc_copies(",
          "def test_dti_tz_localize_nonexistent_raise_coerce(",
          "def test_dti_tz_localize_ambiguous_infer(",
          "def test_dti_tz_localize_ambiguous_times(",
          "def test_dti_tz_localize_pass_dates_to_utc(",
          "def test_dti_tz_localize(",
          "def test_dti_tz_localize_utc_conversion(",
          "def test_dti_tz_localize_roundtrip(",
          "def test_dti_tz_localize_naive(",
          "def test_dti_tz_localize_tzlocal(",
          "def test_dti_tz_localize_ambiguous_nat(",
          "def test_dti_tz_localize_ambiguous_flags(",
          "def test_dti_construction_ambiguous_endpoint(",
          "def test_dti_construction_nonexistent_endpoint(",
          "def test_dti_tz_localize_bdate_range(",
          "def test_dti_tz_localize_nonexistent_shift(",
          "def test_dti_tz_localize_nonexistent_shift_invalid(",
          "def test_normalize_tz(",
          "def test_normalize_tz_local(",
          "def test_dti_constructor_static_tzinfo(",
          "def test_dti_constructor_with_fixed_tz(",
          "def test_dti_convert_datetime_list(",
          "def test_dti_construction_univalent(",
          "def test_dti_from_tzaware_datetime(",
          "def test_dti_tz_constructors(",
          "def test_date_accessor(",
          "def test_time_accessor(",
          "def test_timetz_accessor(",
          "def test_dti_drop_dont_lose_tz(",
          "def test_dti_tz_conversion_freq(",
          "def test_drop_dst_boundary(",
          "def test_date_range_localize(",
          "def test_timestamp_equality_different_timezones(",
          "def test_dti_intersection(",
          "def test_dti_equals_with_tz(",
          "def test_dti_tz_nat(",
          "def test_dti_astype_asobject_tzinfos(",
          "def test_dti_with_timezone_repr(",
          "def test_dti_take_dont_lose_meta(",
          "def test_utc_box_timestamp_and_localize(",
          "def test_dti_to_pydatetime(",
          "def test_dti_to_pydatetime_fizedtz(",
          "def test_with_tz(",
          "def test_field_access_localize(",
          "def test_dti_convert_tz_aware_datetime_datetime(",
          "def test_dti_setop_aware(",
          "def test_dti_union_mixed(",
          "def test_iteration_preserves_nanoseconds(",
          "def test_tz_localize_invalidates_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_unique.py": [
          "def test_unique(",
          "def test_index_unique(",
          "def test_index_unique2(",
          "def test_index_unique3(",
          "def test_is_unique_monotonic("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_astype.py": [
          "def test_astype(",
          "def test_astype_uint(",
          "def test_astype_with_tz(",
          "def test_astype_tzaware_to_tzaware(",
          "def test_astype_tznaive_to_tzaware(",
          "def test_astype_str_nat(",
          "def test_astype_str(",
          "def test_astype_str_tz_and_name(",
          "def test_astype_str_freq_and_name(",
          "def test_astype_str_freq_and_tz(",
          "def test_astype_datetime64(",
          "def test_astype_object(",
          "def test_astype_object_tz(",
          "def test_astype_object_with_nat(",
          "def test_astype_raises(",
          "def test_index_convert_to_datetime_array(",
          "def test_index_convert_to_datetime_array_explicit_pytz(",
          "def test_index_convert_to_datetime_array_dateutil(",
          "def test_integer_index_astype_datetime(",
          "def test_dti_astype_period(",
          "def test_astype_category(",
          "def test_astype_array_fallback("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_factorize.py": [
          "def test_factorize(",
          "def test_factorize_preserves_freq(",
          "def test_factorize_tz(",
          "def test_factorize_dst(",
          "def test_factorize_no_freq_non_nano("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_fillna.py": [
          "def test_fillna_datetime64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_insert.py": [
          "def test_insert_nat(",
          "def test_insert_invalid_na(",
          "def test_insert_empty_preserves_freq(",
          "def test_insert(",
          "def test_insert_mismatched_tzawareness(",
          "def test_insert_mismatched_tz(",
          "def test_insert_mismatched_types_raises(",
          "def test_insert_castable_str(",
          "def test_insert_non_castable_str("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_isocalendar.py": [
          "def test_isocalendar_returns_correct_values_close_to_new_year_with_tz("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_repeat.py": [
          "def test_repeat_range(",
          "def test_repeat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_shift.py": [
          "def test_dti_shift_tzaware(",
          "def test_dti_shift_freqs(",
          "def test_dti_shift_int(",
          "def test_dti_shift_no_freq(",
          "def test_dti_shift_localized(",
          "def test_dti_shift_across_dst(",
          "def test_dti_shift_near_midnight(",
          "def test_shift_periods(",
          "def test_shift_bday(",
          "def test_shift_bmonth(",
          "def test_shift_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_snap.py": [
          "def test_dti_snap("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_frame.py": [
          "def test_to_frame_datetime_tz(",
          "def test_to_frame_respects_none_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_period.py": [
          "def test_dti_to_period(",
          "def test_to_period_quarterly(",
          "def test_to_period_quarterlyish(",
          "def test_to_period_annualish(",
          "def test_to_period_monthish(",
          "def test_dti_to_period_2monthish(",
          "def test_to_period_infer(",
          "def test_period_dt64_round_trip(",
          "def test_to_period_millisecond(",
          "def test_to_period_microsecond(",
          "def test_to_period_tz(",
          "def test_to_period_tz_utc_offset_consistency(",
          "def test_to_period_nofreq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_series.py": [
          "def test_to_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_astype.py": [
          "def test_astype_idempotent(",
          "def test_astype_object(",
          "def test_astype_category(",
          "def test_astype_cannot_cast(",
          "def test_astype_invalid_dtype(",
          "def test_subtype_conversion(",
          "def test_subtype_integer(",
          "def test_subtype_integer_errors(",
          "def test_subtype_integer(",
          "def test_subtype_integer_with_non_integer_borders(",
          "def test_subtype_integer_errors(",
          "def test_subtype_datetimelike(",
          "def test_subtype_integer(",
          "def test_subtype_float(",
          "def test_subtype_datetimelike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_base.py": [
          "def test_take(",
          "def test_where(",
          "def test_getitem_2d_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_constructors.py": [
          "def test_constructor(",
          "def test_constructor_dtype(",
          "def test_constructor_pass_closed(",
          "def test_constructor_nan(",
          "def test_constructor_empty(",
          "def test_constructor_string(",
          "def test_constructor_categorical_valid(",
          "def test_generic_errors(",
          "def test_constructor_errors(",
          "def test_mixed_float_int(",
          "def test_constructor_errors(",
          "def test_length_one(",
          "def test_left_right_dont_share_data(",
          "def test_constructor_errors(",
          "def test_na_tuples(",
          "def test_generic_errors(",
          "def test_constructor_string(",
          "def test_constructor_errors(",
          "def test_override_inferred_closed(",
          "def test_index_object_dtype(",
          "def test_index_mixed_closed(",
          "def test_dtype_closed_mismatch("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_equals.py": [
          "def test_equals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_formats.py": [
          "def test_frame_repr(",
          "def test_repr_missing(",
          "def test_repr_floats(",
          "def test_to_native_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_indexing.py": [
          "def test_get_loc_interval(",
          "def test_get_loc_scalar(",
          "def test_get_loc_length_one_scalar(",
          "def test_get_loc_length_one_interval(",
          "def test_get_loc_datetimelike_nonoverlapping(",
          "def test_get_loc_datetimelike_overlapping(",
          "def test_get_loc_decreasing(",
          "def test_get_loc_non_scalar_errors(",
          "def test_get_indexer_with_nans(",
          "def test_get_indexer_with_interval(",
          "def test_get_indexer_with_int_and_float(",
          "def test_get_indexer_length_one(",
          "def test_get_indexer_length_one_interval(",
          "def test_get_indexer_categorical(",
          "def test_get_indexer_categorical_with_nans(",
          "def test_get_indexer_datetime(",
          "def test_get_indexer_errors(",
          "def test_get_indexer_non_unique_with_int_and_float(",
          "def test_get_indexer_non_monotonic(",
          "def test_get_indexer_with_nans(",
          "def test_get_index_non_unique_non_monotonic(",
          "def test_get_indexer_multiindex_with_intervals(",
          "def test_get_indexer_interval_index(",
          "def test_get_indexer_read_only(",
          "def test_slice_locs_with_interval(",
          "def test_slice_locs_with_ints_and_floats_succeeds(",
          "def test_slice_locs_with_ints_and_floats_errors(",
          "def test_putmask_dt64(",
          "def test_putmask_td64(",
          "def test_contains_dunder("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval.py": [
          "def test_properties(",
          "def test_length(",
          "def test_with_nans(",
          "def test_copy(",
          "def test_ensure_copied_data(",
          "def test_delete(",
          "def test_insert(",
          "def test_is_unique_interval(",
          "def test_monotonic(",
          "def test_is_monotonic_with_nans(",
          "def test_get_item(",
          "def test_maybe_convert_i8(",
          "def test_maybe_convert_i8_nat(",
          "def test_maybe_convert_i8_numeric(",
          "def test_maybe_convert_i8_numeric_identical(",
          "def test_maybe_convert_i8_errors(",
          "def test_contains_method(",
          "def test_dropna(",
          "def test_non_contiguous(",
          "def test_isin(",
          "def test_comparison(",
          "def test_missing_values(",
          "def test_sort_values(",
          "def test_datetime(",
          "def test_append(",
          "def test_is_non_overlapping_monotonic(",
          "def test_is_overlapping(",
          "def test_to_tuples(",
          "def test_to_tuples_na(",
          "def test_nbytes(",
          "def test_set_closed(",
          "def test_set_closed_errors(",
          "def test_is_all_dates(",
          "def test_dir(",
          "def test_searchsorted_different_argument_classes(",
          "def test_searchsorted_invalid_argument("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval_range.py": [
          "def test_constructor_numeric(",
          "def test_constructor_timestamp(",
          "def test_constructor_timedelta(",
          "def test_early_truncation(",
          "def test_no_invalid_float_truncation(",
          "def test_linspace_dst_transition(",
          "def test_float_subtype(",
          "def test_constructor_coverage(",
          "def test_errors(",
          "def test_float_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval_tree.py": [
          "def test_get_indexer(",
          "def test_get_indexer_overflow(",
          "def test_get_indexer_non_unique(",
          "def test_get_indexer_non_unique_overflow(",
          "def test_duplicates(",
          "def test_get_indexer_closed(",
          "def test_is_overlapping(",
          "def test_is_overlapping_endpoints(",
          "def test_is_overlapping_trivial(",
          "def test_construction_overflow(",
          "def test_inf_bound_infinite_recursion("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_join.py": [
          "def test_join_overlapping_in_mi_to_same_intervalindex(",
          "def test_join_overlapping_to_multiindex_with_same_interval(",
          "def test_join_overlapping_interval_to_another_intervalindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_pickle.py": [
          "def test_pickle_round_trip_closed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_setops.py": [
          "def test_union(",
          "def test_union_empty_result(",
          "def test_intersection(",
          "def test_intersection_empty_result(",
          "def test_intersection_duplicates(",
          "def test_difference(",
          "def test_symmetric_difference(",
          "def test_set_incompatible_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_analytics.py": [
          "def test_infer_objects(",
          "def test_shift(",
          "def test_groupby(",
          "def test_truncate_multiindex(",
          "def test_reorder_levels(",
          "def test_numpy_repeat(",
          "def test_append_mixed_dtypes(",
          "def test_iter(",
          "def test_sub(",
          "def test_map(",
          "def test_map_dictlike(",
          "def test_numpy_ufuncs(",
          "def test_numpy_type_funcs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_astype.py": [
          "def test_astype(",
          "def test_astype_category("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_compat.py": [
          "def test_numeric_compat(",
          "def test_logical_compat(",
          "def test_inplace_mutation_resets_values(",
          "def test_boxable_categorical_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_constructors.py": [
          "def test_constructor_single_level(",
          "def test_constructor_no_levels(",
          "def test_constructor_nonhashable_names(",
          "def test_constructor_mismatched_codes_levels(",
          "def test_na_levels(",
          "def test_copy_in_constructor(",
          "def test_from_arrays(",
          "def test_from_arrays_iterator(",
          "def test_from_arrays_tuples(",
          "def test_from_arrays_index_series_period_datetimetz_and_timedelta(",
          "def test_from_arrays_index_datetimelike_mixed(",
          "def test_from_arrays_index_series_categorical(",
          "def test_from_arrays_empty(",
          "def test_from_arrays_invalid_input(",
          "def test_from_arrays_different_lengths(",
          "def test_from_arrays_respects_none_names(",
          "def test_from_tuples(",
          "def test_from_tuples_iterator(",
          "def test_from_tuples_empty(",
          "def test_from_tuples_index_values(",
          "def test_tuples_with_name_string(",
          "def test_from_tuples_with_tuple_label(",
          "def test_from_product_empty_zero_levels(",
          "def test_from_product_empty_one_level(",
          "def test_from_product_empty_two_levels(",
          "def test_from_product_empty_three_levels(",
          "def test_from_product_invalid_input(",
          "def test_from_product_datetimeindex(",
          "def test_from_product_rangeindex(",
          "def test_from_product_index_series_categorical(",
          "def test_from_product(",
          "def test_from_product_iterator(",
          "def test_from_product_infer_names(",
          "def test_from_product_respects_none_names(",
          "def test_from_product_readonly(",
          "def test_create_index_existing_name(",
          "def test_from_frame(",
          "def test_from_frame_missing_values_multiIndex(",
          "def test_from_frame_error(",
          "def test_from_frame_dtype_fidelity(",
          "def test_from_frame_valid_names(",
          "def test_from_frame_invalid_names(",
          "def test_index_equal_empty_iterable(",
          "def test_raise_invalid_sortorder(",
          "def test_datetimeindex(",
          "def test_constructor_with_tz(",
          "def test_multiindex_inference_consistency(",
          "def test_dtype_representation("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_conversion.py": [
          "def test_to_numpy(",
          "def test_to_frame(",
          "def test_to_frame_dtype_fidelity(",
          "def test_to_frame_resulting_column_order(",
          "def test_to_frame_duplicate_labels(",
          "def test_to_flat_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_copy.py": [
          "def test_copy(",
          "def test_shallow_copy(",
          "def test_view(",
          "def test_copy_and_deepcopy(",
          "def test_copy_method(",
          "def test_copy_method_kwargs(",
          "def test_copy_deep_false_retains_id("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_drop.py": [
          "def test_drop(",
          "def test_droplevel_with_names(",
          "def test_droplevel_list(",
          "def test_drop_not_lexsorted(",
          "def test_drop_with_nan_in_index(",
          "def test_drop_with_non_monotonic_duplicates(",
          "def test_single_level_drop_partially_missing_elements(",
          "def test_droplevel_multiindex_one_level("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_duplicates.py": [
          "def test_unique(",
          "def test_unique_datetimelike(",
          "def test_unique_level(",
          "def test_duplicate_multiindex_codes(",
          "def test_duplicate_level_names(",
          "def test_duplicate_meta_data(",
          "def test_has_duplicates(",
          "def test_has_duplicates_from_tuples(",
          "def test_has_duplicates_overflow(",
          "def test_duplicated(",
          "def test_duplicated_hashtable_impl(",
          "def test_duplicated_with_nan(",
          "def test_duplicated_with_nan_multi_shape(",
          "def test_duplicated_drop_duplicates(",
          "def test_duplicated_series_complex_numbers(",
          "def test_midx_unique_ea_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_equivalence.py": [
          "def test_equals(",
          "def test_equals_op(",
          "def test_compare_tuple(",
          "def test_compare_tuple_strs(",
          "def test_equals_multi(",
          "def test_identical(",
          "def test_equals_operator(",
          "def test_equals_missing_values(",
          "def test_equals_missing_values_differently_sorted(",
          "def test_is_(",
          "def test_is_all_dates(",
          "def test_is_numeric(",
          "def test_multiindex_compare(",
          "def test_equals_ea_int_regular_int("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_formats.py": [
          "def test_format(",
          "def test_format_integer_names(",
          "def test_format_sparse_config(",
          "def test_format_sparse_display(",
          "def test_repr_with_unicode_data(",
          "def test_repr_roundtrip_raises(",
          "def test_unicode_string_with_unicode(",
          "def test_repr_max_seq_item_setting(",
          "def test_unicode_repr_issues(",
          "def test_repr_max_seq_items_equal_to_n(",
          "def test_repr(",
          "def test_rjust(",
          "def test_tuple_width("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_level_values.py": [
          "def test_get_level_values_box_datetime64(",
          "def test_get_level_values(",
          "def test_get_level_values_all_na(",
          "def test_get_level_values_int_with_na(",
          "def test_get_level_values_na(",
          "def test_get_level_values_when_periods(",
          "def test_values_loses_freq_of_underlying_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_set.py": [
          "def test_get_level_number_integer(",
          "def test_get_dtypes(",
          "def test_get_dtypes_no_level_name(",
          "def test_get_dtypes_duplicate_level_names(",
          "def test_get_level_number_out_of_bounds(",
          "def test_set_name_methods(",
          "def test_set_levels_codes_directly(",
          "def test_set_levels(",
          "def test_set_codes(",
          "def test_set_levels_codes_names_bad_input(",
          "def test_set_names_with_nlevel_1(",
          "def test_set_levels_categorical(",
          "def test_set_value_keeps_names(",
          "def test_set_levels_with_iterable(",
          "def test_set_empty_level(",
          "def test_set_levels_pos_args_removal(",
          "def test_set_levels_categorical_keep_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_indexing.py": [
          "def test_slice_locs_partial(",
          "def test_slice_locs(",
          "def test_slice_locs_with_type_mismatch(",
          "def test_slice_locs_not_sorted(",
          "def test_slice_locs_not_contained(",
          "def test_slice_locs_with_missing_value(",
          "def test_putmask_with_wrong_mask(",
          "def test_putmask_multiindex_other(",
          "def test_putmask_keep_dtype(",
          "def test_putmask_keep_dtype_shorter_value(",
          "def test_get_indexer(",
          "def test_get_indexer_nearest(",
          "def test_get_indexer_categorical_time(",
          "def test_get_indexer_with_missing_value(",
          "def test_get_indexer_methods(",
          "def test_get_indexer_three_or_more_levels(",
          "def test_get_indexer_crossing_levels(",
          "def test_get_indexer_kwarg_validation(",
          "def test_get_indexer_nan(",
          "def test_getitem(",
          "def test_getitem_group_select(",
          "def test_getitem_bool_index_all(",
          "def test_getitem_bool_index_single(",
          "def test_get_loc(",
          "def test_get_loc_duplicates(",
          "def test_get_loc_level(",
          "def test_get_loc_multiple_dtypes(",
          "def test_get_loc_implicit_cast(",
          "def test_get_loc_cast_bool(",
          "def test_get_loc_nan(",
          "def test_get_loc_missing_nan(",
          "def test_get_loc_with_values_including_missing_values(",
          "def test_get_loc_duplicates2(",
          "def test_get_loc_past_lexsort_depth(",
          "def test_multiindex_get_loc_list_raises(",
          "def test_get_loc_nested_tuple_raises_keyerror(",
          "def test_where(",
          "def test_where_array_like(",
          "def test_contains_top_level(",
          "def test_contains_with_nat(",
          "def test_contains(",
          "def test_contains_with_missing_value(",
          "def test_multiindex_contains_dropped(",
          "def test_contains_td64_level(",
          "def test_large_mi_contains(",
          "def test_timestamp_multiindex_indexer(",
          "def test_get_slice_bound_with_missing_value(",
          "def test_slice_indexer_with_missing_value(",
          "def test_pyint_engine(",
          "def test_get_locs_reordering(",
          "def test_get_indexer_for_multiindex_with_nans("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_integrity.py": [
          "def test_labels_dtypes(",
          "def test_values_boxed(",
          "def test_values_multiindex_datetimeindex(",
          "def test_values_multiindex_periodindex(",
          "def test_consistency(",
          "def test_hash_collisions(",
          "def test_dims(",
          "def test_take_invalid_kwargs(",
          "def test_isna_behavior(",
          "def test_large_multiindex_error(",
          "def test_mi_hashtable_populated_attribute_error(",
          "def test_can_hold_identifiers(",
          "def test_metadata_immutable(",
          "def test_level_setting_resets_attributes(",
          "def test_rangeindex_fallback_coercion_bug(",
          "def test_memory_usage(",
          "def test_nlevels("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_isin.py": [
          "def test_isin_nan(",
          "def test_isin_missing(",
          "def test_isin(",
          "def test_isin_level_kwarg(",
          "def test_isin_multi_index_with_missing_value(",
          "def test_isin_empty(",
          "def test_isin_generator("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_join.py": [
          "def test_join_level(",
          "def test_join_level_corner_case(",
          "def test_join_self(",
          "def test_join_multi(",
          "def test_join_self_unique(",
          "def test_join_multi_wrong_order(",
          "def test_join_multi_return_indexers(",
          "def test_join_overlapping_interval_level(",
          "def test_join_midx_ea(",
          "def test_join_midx_string(",
          "def test_join_multi_with_nan(",
          "def test_join_dtypes(",
          "def test_join_dtypes_all_nan(",
          "def test_join_index_levels("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_lexsort.py": [
          "def test_is_lexsorted(",
          "def test_lexsort_depth("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_missing.py": [
          "def test_fillna(",
          "def test_dropna(",
          "def test_nulls(",
          "def test_hasnans_isnans(",
          "def test_nan_stays_float(",
          "def test_tuples_have_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_monotonic.py": [
          "def test_is_monotonic_increasing_lexsorted(",
          "def test_is_monotonic_increasing(",
          "def test_is_monotonic_decreasing(",
          "def test_is_strictly_monotonic_increasing(",
          "def test_is_strictly_monotonic_decreasing(",
          "def test_is_monotonic_with_nans("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_names.py": [
          "def test_slice_keep_name(",
          "def test_index_name_retained(",
          "def test_changing_names(",
          "def test_take_preserve_name(",
          "def test_copy_names(",
          "def test_names(",
          "def test_duplicate_level_names_access_raises(",
          "def test_get_names_from_levels(",
          "def test_setting_names_from_levels_raises(",
          "def test_name_mi_with_dict_like_duplicate_names(",
          "def test_name_mi_with_dict_like(",
          "def test_index_name_with_dict_like_raising(",
          "def test_multiindex_name_and_level_raising("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_partial_indexing.py": [
          "def test_partial_string_matching_single_index(",
          "def test_get_loc_partial_timestamp_multiindex(",
          "def test_partial_string_timestamp_multiindex(",
          "def test_partial_string_timestamp_multiindex_str_key_raises(",
          "def test_partial_string_timestamp_multiindex_daily_resolution("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_pickle.py": [
          "def test_pickle_compat_construction("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reindex.py": [
          "def test_reindex(",
          "def test_reindex_level(",
          "def test_reindex_preserves_names_when_target_is_list_or_ndarray(",
          "def test_reindex_lvl_preserves_names_when_target_is_list_or_array(",
          "def test_reindex_lvl_preserves_type_if_target_is_empty_list_or_array(",
          "def test_reindex_base(",
          "def test_reindex_non_unique(",
          "def test_reindex_empty_with_level(",
          "def test_reindex_not_all_tuples(",
          "def test_reindex_limit_arg_with_multiindex(",
          "def test_reindex_with_none_in_nested_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reshape.py": [
          "def test_insert(",
          "def test_insert2(",
          "def test_append(",
          "def test_append_index(",
          "def test_append_names_match(",
          "def test_append_names_dont_match(",
          "def test_append_overlapping_interval_levels(",
          "def test_repeat(",
          "def test_insert_base(",
          "def test_delete_base("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_setops.py": [
          "def test_set_ops_error_cases(",
          "def test_intersection_base(",
          "def test_union_base(",
          "def test_difference_base(",
          "def test_symmetric_difference(",
          "def test_multiindex_symmetric_difference(",
          "def test_empty(",
          "def test_difference(",
          "def test_difference_sort_special(",
          "def test_difference_sort_special_true(",
          "def test_difference_sort_incomparable(",
          "def test_difference_sort_incomparable_true(",
          "def test_union(",
          "def test_union_with_regular_index(",
          "def test_intersection(",
          "def test_setop_with_categorical(",
          "def test_intersection_non_object(",
          "def test_intersect_equal_sort(",
          "def test_intersect_equal_sort_true(",
          "def test_union_sort_other_empty(",
          "def test_union_sort_other_empty_sort(",
          "def test_union_sort_other_incomparable(",
          "def test_union_sort_other_incomparable_sort(",
          "def test_union_non_object_dtype_raises(",
          "def test_union_empty_self_different_names(",
          "def test_union_multiindex_empty_rangeindex(",
          "def test_setops_sort_validation(",
          "def test_difference_keep_ea_dtypes(",
          "def test_symmetric_difference_keeping_ea_dtype(",
          "def test_intersect_with_duplicates(",
          "def test_maybe_match_names(",
          "def test_intersection_equal_different_names(",
          "def test_intersection_different_names(",
          "def test_intersection_with_missing_values_on_both_sides(",
          "def test_union_with_missing_values_on_both_sides(",
          "def test_union_nan_got_duplicated(",
          "def test_union_keep_ea_dtype(",
          "def test_union_with_duplicates_keep_ea_dtype(",
          "def test_union_duplicates(",
          "def test_union_keep_dtype_precision(",
          "def test_union_keep_ea_dtype_with_na(",
          "def test_intersection_lexsort_depth(",
          "def test_intersection_with_non_lex_sorted_categories(",
          "def test_intersection_keep_ea_dtypes(",
          "def test_union_with_na_when_constructing_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_sorting.py": [
          "def test_sortlevel(",
          "def test_sortlevel_not_sort_remaining(",
          "def test_sortlevel_deterministic(",
          "def test_sortlevel_na_position(",
          "def test_numpy_argsort(",
          "def test_unsortedindex(",
          "def test_unsortedindex_doc_examples(",
          "def test_reconstruct_sort(",
          "def test_reconstruct_remove_unused(",
          "def test_remove_unused_levels_large(",
          "def test_remove_unused_nan(",
          "def test_argsort(",
          "def test_remove_unused_levels_with_nan(",
          "def test_sort_values_nan(",
          "def test_sort_values_incomparable(",
          "def test_sort_values_with_na_na_position("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_take.py": [
          "def test_take(",
          "def test_take_invalid_kwargs(",
          "def test_take_fill_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_astype.py": [
          "def test_astype_float64_to_uint64(",
          "def test_astype_float64_to_object(",
          "def test_astype_float64_mixed_to_object(",
          "def test_astype_float64_to_int_dtype(",
          "def test_astype_float64_to_float_dtype(",
          "def test_astype_float_to_datetimelike(",
          "def test_cannot_cast_inf_to_int(",
          "def test_astype_from_object("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_indexing.py": [
          "def test_get_loc(",
          "def test_get_loc_raises_bad_label(",
          "def test_get_loc_float64(",
          "def test_get_loc_na(",
          "def test_get_loc_missing_nan(",
          "def test_get_loc_float_index_nan_with_method(",
          "def test_get_loc_numericindex_none_raises(",
          "def test_get_loc_overflows(",
          "def test_get_indexer(",
          "def test_get_indexer_methods(",
          "def test_get_indexer_invalid(",
          "def test_get_indexer_nearest(",
          "def test_get_indexer_nearest_listlike_tolerance(",
          "def test_get_indexer_nearest_error(",
          "def test_get_indexer_nearest_decreasing(",
          "def test_get_indexer_numeric_index_boolean_target(",
          "def test_get_indexer_with_method_numeric_vs_bool(",
          "def test_get_indexer_numeric_vs_bool(",
          "def test_get_indexer_float64(",
          "def test_get_indexer_nan(",
          "def test_get_indexer_int64(",
          "def test_get_indexer_uint64(",
          "def test_get_loc_masked(",
          "def test_get_loc_masked_na(",
          "def test_get_loc_masked_na_and_nan(",
          "def test_get_indexer_masked_na(",
          "def test_get_indexer_masked_na_boolean(",
          "def test_get_indexer_arrow_dictionary_target(",
          "def test_where(",
          "def test_where_uint64(",
          "def test_where_infers_type_instead_of_trying_to_convert_string_to_float(",
          "def test_take_preserve_name(",
          "def test_take_fill_value_float64(",
          "def test_take_fill_value_ints(",
          "def test_contains_none(",
          "def test_contains_float64_nans(",
          "def test_contains_float64_not_nans(",
          "def test_slice_locs(",
          "def test_slice_locs_float_locs(",
          "def test_slice_locs_dup_numeric(",
          "def test_slice_locs_na(",
          "def test_slice_locs_na_raises(",
          "def test_get_slice_bounds_within(",
          "def test_get_slice_bounds_outside("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_join.py": [
          "def test_join_non_unique(",
          "def test_join_inner(",
          "def test_join_left(",
          "def test_join_right(",
          "def test_join_non_int_index(",
          "def test_join_outer(",
          "def test_join_inner(",
          "def test_join_left(",
          "def test_join_right(",
          "def test_join_non_int_index(",
          "def test_join_outer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_numeric.py": [
          "def test_repr_roundtrip(",
          "def test_constructor_from_list_no_dtype(",
          "def test_constructor(",
          "def test_constructor_invalid(",
          "def test_constructor_coerce(",
          "def test_constructor_explicit(",
          "def test_type_coercion_fail(",
          "def test_equals_numeric(",
          "def test_equals_numeric_other_index_type(",
          "def test_lookups_datetimelike_values(",
          "def test_doesnt_contain_all_the_things(",
          "def test_nan_multiple_containment(",
          "def test_fillna_float64(",
          "def test_logical_compat(",
          "def test_is_monotonic(",
          "def test_is_strictly_monotonic(",
          "def test_logical_compat(",
          "def test_identical(",
          "def test_cant_or_shouldnt_cast(",
          "def test_view_index(",
          "def test_prevent_casting(",
          "def test_constructor_from_list_no_dtype(",
          "def test_constructor(",
          "def test_constructor_corner(",
          "def test_constructor_coercion_signed_to_unsigned(",
          "def test_constructor_np_signed(",
          "def test_constructor_np_unsigned(",
          "def test_coerce_list(",
          "def test_constructor(",
          "def test_uint_index_does_not_convert_to_float64(",
          "def test_float64_index_equals(",
          "def test_map_dtype_inference_unsigned_to_signed(",
          "def test_map_dtype_inference_overflows("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_setops.py": [
          "def test_union_non_numeric(",
          "def test_intersection(",
          "def test_int_float_union_dtype(",
          "def test_range_float_union_dtype(",
          "def test_range_uint64_union_dtype(",
          "def test_float64_index_difference(",
          "def test_intersection_uint64_outside_int64_range(",
          "def test_intersection_monotonic(",
          "def test_symmetric_difference(",
          "def test_union_sort_other_special(",
          "def test_union_sort_special_true("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_astype.py": [
          "def test_astype_str_from_bytes(",
          "def test_astype_invalid_nas_to_tdt64_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_indexing.py": [
          "def test_get_indexer_strings(",
          "def test_get_indexer_strings_raises(",
          "def test_get_indexer_with_NA_values(",
          "def test_get_indexer_non_unique_nas(",
          "def test_get_indexer_non_unique_np_nats(",
          "def test_slice_locs_negative_step(",
          "def test_slice_locs_dup("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_constructors.py": [
          "def test_construction_base_constructor(",
          "def test_base_constructor_with_period_dtype(",
          "def test_index_object_dtype(",
          "def test_constructor_use_start_freq(",
          "def test_constructor_field_arrays(",
          "def test_constructor_U(",
          "def test_constructor_nano(",
          "def test_constructor_arrays_negative_year(",
          "def test_constructor_invalid_quarters(",
          "def test_constructor_corner(",
          "def test_constructor_with_without_freq(",
          "def test_constructor_fromarraylike(",
          "def test_constructor_datetime64arr(",
          "def test_constructor_datetime64arr_ok(",
          "def test_constructor_dtype(",
          "def test_constructor_empty(",
          "def test_constructor_pi_nat(",
          "def test_constructor_incompat_freq(",
          "def test_constructor_mixed(",
          "def test_constructor_simple_new(",
          "def test_constructor_simple_new_empty(",
          "def test_constructor_floats(",
          "def test_constructor_nat(",
          "def test_constructor_year_and_quarter(",
          "def test_constructor_freq_mult(",
          "def test_constructor_freq_mult_dti_compat(",
          "def test_constructor_freq_combined(",
          "def test_constructor(",
          "def test_recreate_from_data(",
          "def test_map_with_string_constructor(",
          "def test_shallow_copy_empty(",
          "def test_shallow_copy_disallow_i8(",
          "def test_shallow_copy_requires_disallow_period_index(",
          "def test_constructor_cant_cast_period(",
          "def test_constructor_cast_object("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_formats.py": [
          "def test_to_native_types(",
          "def test_frame_repr(",
          "def test_representation(",
          "def test_representation_to_series(",
          "def test_summary("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_freq_attr.py": [
          "def test_freq_setter_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_indexing.py": [
          "def test_getitem_slice_keeps_name(",
          "def test_getitem(",
          "def test_getitem_index(",
          "def test_getitem_partial(",
          "def test_getitem_datetime(",
          "def test_getitem_nat(",
          "def test_getitem_list_periods(",
          "def test_getitem_seconds(",
          "def test_getitem_day(",
          "def test_get_loc_msg(",
          "def test_get_loc_nat(",
          "def test_get_loc(",
          "def test_get_loc_integer(",
          "def test_get_loc_invalid_string_raises_keyerror(",
          "def test_get_loc_mismatched_freq(",
          "def test_get_indexer(",
          "def test_get_indexer_mismatched_dtype(",
          "def test_get_indexer_mismatched_dtype_different_length(",
          "def test_get_indexer_mismatched_dtype_with_method(",
          "def test_get_indexer_non_unique(",
          "def test_get_indexer2(",
          "def test_where(",
          "def test_where_other(",
          "def test_where_invalid_dtypes(",
          "def test_where_mismatched_nat(",
          "def test_take(",
          "def test_take_misc(",
          "def test_take_fill_value(",
          "def test_get_value_datetime_hourly(",
          "def test_contains(",
          "def test_contains_freq_mismatch(",
          "def test_contains_nat(",
          "def test_asof_locs_mismatched_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_join.py": [
          "def test_join_outer_indexer(",
          "def test_joins(",
          "def test_join_self(",
          "def test_join_does_not_recur(",
          "def test_join_mismatched_freq_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_monotonic.py": [
          "def test_is_monotonic_increasing(",
          "def test_is_monotonic_decreasing("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_partial_slicing.py": [
          "def test_getitem_periodindex_duplicates_string_slice(",
          "def test_getitem_periodindex_quarter_string(",
          "def test_pindex_slice_index(",
          "def test_range_slice_day(",
          "def test_range_slice_seconds(",
          "def test_range_slice_outofbounds(",
          "def test_maybe_cast_slice_bound(",
          "def test_partial_slice_doesnt_require_monotonicity("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_period.py": [
          "def test_make_time_series(",
          "def test_view_asi8(",
          "def test_values(",
          "def test_period_index_length(",
          "def test_fields(",
          "def test_is_(",
          "def test_index_unique(",
          "def test_negative_ordinals(",
          "def test_pindex_fieldaccessor_nat(",
          "def test_pindex_multiples(",
          "def test_iteration(",
          "def test_with_multi_index(",
          "def test_map(",
          "def test_format_empty(",
          "def test_maybe_convert_timedelta(",
          "def test_dunder_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_period_range.py": [
          "def test_required_arguments(",
          "def test_construction_from_string(",
          "def test_construction_from_period(",
          "def test_errors("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_pickle.py": [
          "def test_pickle_round_trip(",
          "def test_pickle_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_resolution.py": [
          "def test_resolution("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_scalar_compat.py": [
          "def test_start_time(",
          "def test_end_time(",
          "def test_end_time_business_friday("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_searchsorted.py": [
          "def test_searchsorted(",
          "def test_searchsorted_different_argument_classes(",
          "def test_searchsorted_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_setops.py": [
          "def test_union(",
          "def test_union_misc(",
          "def test_intersection(",
          "def test_intersection_cases(",
          "def test_difference(",
          "def test_difference_freq(",
          "def test_intersection_equal_duplicates(",
          "def test_union_duplicates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_tools.py": [
          "def test_freq(",
          "def test_tolist("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_asfreq.py": [
          "def test_asfreq(",
          "def test_asfreq_nat(",
          "def test_asfreq_mult_pi(",
          "def test_asfreq_combined_pi(",
          "def test_astype_asfreq(",
          "def test_asfreq_with_different_n("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_astype.py": [
          "def test_astype_raises(",
          "def test_astype_conversion(",
          "def test_astype_uint(",
          "def test_astype_object(",
          "def test_astype_object2(",
          "def test_astype_category(",
          "def test_astype_array_fallback(",
          "def test_period_astype_to_timestamp("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_factorize.py": [
          "def test_factorize(",
          "def test_factorize_complex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_fillna.py": [
          "def test_fillna_period("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_insert.py": [
          "def test_insert("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_is_full.py": [
          "def test_is_full("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_repeat.py": [
          "def test_repeat_freqstr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_shift.py": [
          "def test_pi_shift_ndarray(",
          "def test_shift(",
          "def test_shift_corner_cases(",
          "def test_shift_nat(",
          "def test_shift_gh8083(",
          "def test_shift_periods("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_to_timestamp.py": [
          "def test_to_timestamp_non_contiguous(",
          "def test_to_timestamp_freq(",
          "def test_to_timestamp_pi_nat(",
          "def test_to_timestamp_preserve_name(",
          "def test_to_timestamp_quarterly_bug(",
          "def test_to_timestamp_pi_mult(",
          "def test_to_timestamp_pi_combined(",
          "def test_to_timestamp_1703("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_constructors.py": [
          "def test_constructor(",
          "def test_constructor_invalid_args(",
          "def test_constructor_additional_invalid_args(",
          "def test_constructor_invalid_args_wrong_type(",
          "def test_constructor_same(",
          "def test_constructor_range_object(",
          "def test_constructor_range(",
          "def test_constructor_name(",
          "def test_constructor_corner("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_indexing.py": [
          "def test_get_indexer(",
          "def test_get_indexer_pad(",
          "def test_get_indexer_backfill(",
          "def test_get_indexer_limit(",
          "def test_get_indexer_decreasing(",
          "def test_take_preserve_name(",
          "def test_take_fill_value(",
          "def test_take_raises_index_error(",
          "def test_take_accepts_empty_array(",
          "def test_take_accepts_non_int64_array(",
          "def test_take_when_index_has_step(",
          "def test_take_when_index_has_negative_step(",
          "def test_where_putmask_range_cast("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_join.py": [
          "def test_join_outer(",
          "def test_join_inner(",
          "def test_join_left(",
          "def test_join_right(",
          "def test_join_non_int_index(",
          "def test_join_non_unique(",
          "def test_join_self("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_range.py": [
          "def test_constructor_unwraps_index(",
          "def test_can_hold_identifiers(",
          "def test_too_many_names(",
          "def test_start_stop_step_attrs(",
          "def test_copy(",
          "def test_repr(",
          "def test_insert(",
          "def test_insert_edges_preserves_rangeindex(",
          "def test_insert_middle_preserves_rangeindex(",
          "def test_delete(",
          "def test_delete_preserves_rangeindex(",
          "def test_delete_preserves_rangeindex_middle(",
          "def test_delete_preserves_rangeindex_list_at_end(",
          "def test_delete_preserves_rangeindex_list_middle(",
          "def test_delete_all_preserves_rangeindex(",
          "def test_delete_not_preserving_rangeindex(",
          "def test_view(",
          "def test_dtype(",
          "def test_cache(",
          "def test_is_monotonic(",
          "def test_equals_range(",
          "def test_logical_compat(",
          "def test_identical(",
          "def test_nbytes(",
          "def test_cant_or_shouldnt_cast(",
          "def test_view_index(",
          "def test_prevent_casting(",
          "def test_repr_roundtrip(",
          "def test_slice_keep_name(",
          "def test_has_duplicates(",
          "def test_extended_gcd(",
          "def test_min_fitting_element(",
          "def test_slice_specialised(",
          "def test_len_specialised(",
          "def test_append(",
          "def test_engineless_lookup(",
          "def test_format_empty(",
          "def test_append_len_one(",
          "def test_isin_range(",
          "def test_sort_values_key(",
          "def test_range_index_rsub_by_const("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_setops.py": [
          "def test_intersection_mismatched_dtype(",
          "def test_intersection_empty(",
          "def test_intersection(",
          "def test_intersection_non_overlapping_gcd(",
          "def test_union_noncomparable(",
          "def test_union_sorted(",
          "def test_union_same_step_misaligned(",
          "def test_difference(",
          "def test_difference_sort(",
          "def test_difference_mismatched_step(",
          "def test_difference_interior_overlap_endpoints_preserved(",
          "def test_difference_endpoints_overlap_interior_preserved(",
          "def test_difference_interior_non_preserving(",
          "def test_symmetric_difference(",
          "def test_range_difference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_constructors.py": [
          "def test_closed_deprecated(",
          "def test_array_of_dt64_nat_raises(",
          "def test_unit_m_y_raises(",
          "def test_int64_nocopy(",
          "def test_infer_from_tdi(",
          "def test_infer_from_tdi_mismatch(",
          "def test_dt64_data_invalid(",
          "def test_float64_ns_rounded(",
          "def test_float64_unit_conversion(",
          "def test_construction_base_constructor(",
          "def test_constructor(",
          "def test_constructor_iso(",
          "def test_constructor_coverage(",
          "def test_constructor_name(",
          "def test_constructor_no_precision_raises(",
          "def test_constructor_wrong_precision_raises(",
          "def test_explicit_none_freq(",
          "def test_from_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_delete.py": [
          "def test_delete(",
          "def test_delete_slice(",
          "def test_delete_doesnt_infer_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_formats.py": [
          "def test_representation(",
          "def test_representation_to_series(",
          "def test_summary("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_freq_attr.py": [
          "def test_freq_setter(",
          "def test_with_freq_empty_requires_tick(",
          "def test_freq_setter_errors(",
          "def test_freq_view_safe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_indexing.py": [
          "def test_getitem_slice_keeps_name(",
          "def test_getitem(",
          "def test_timestamp_invalid_key(",
          "def test_get_loc_key_unit_mismatch(",
          "def test_get_loc_key_unit_mismatch_not_castable(",
          "def test_get_loc(",
          "def test_get_loc_nat(",
          "def test_get_indexer(",
          "def test_where_doesnt_retain_freq(",
          "def test_where_invalid_dtypes(",
          "def test_where_mismatched_nat(",
          "def test_take(",
          "def test_take_invalid_kwargs(",
          "def test_take_equiv_getitem(",
          "def test_take_fill_value(",
          "def test_maybe_cast_slice_bound_invalid_str(",
          "def test_slice_invalid_str_with_timedeltaindex(",
          "def test_contains_nonunique(",
          "def test_contains("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_join.py": [
          "def test_append_join_nondatetimeindex(",
          "def test_join_self(",
          "def test_does_not_convert_mixed_integer(",
          "def test_join_preserves_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_ops.py": [
          "def test_infer_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_pickle.py": [
          "def test_pickle_after_set_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_scalar_compat.py": [
          "def test_tdi_total_seconds(",
          "def test_tdi_total_seconds_all_nat(",
          "def test_tdi_round(",
          "def test_tdi_round_invalid(",
          "def test_round(",
          "def test_components("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_searchsorted.py": [
          "def test_searchsorted_different_argument_classes(",
          "def test_searchsorted_invalid_argument_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_setops.py": [
          "def test_union(",
          "def test_union_sort_false(",
          "def test_union_coverage(",
          "def test_union_bug_1730(",
          "def test_union_bug_1745(",
          "def test_union_bug_4564(",
          "def test_union_freq_infer(",
          "def test_intersection_bug_1708(",
          "def test_intersection_equal(",
          "def test_intersection_zero_length(",
          "def test_zero_length_input_index(",
          "def test_intersection(",
          "def test_intersection_non_monotonic(",
          "def test_difference_freq(",
          "def test_difference_sort("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta.py": [
          "def test_misc_coverage(",
          "def test_map(",
          "def test_pass_TimedeltaIndex_to_index(",
          "def test_fields(",
          "def test_freq_conversion_always_floating(",
          "def test_freq_conversion(",
          "def test_arithmetic_zero_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta_range.py": [
          "def test_timedelta_range_unit(",
          "def test_timedelta_range(",
          "def test_timedelta_units_T_L_deprecated(",
          "def test_linspace_behavior(",
          "def test_errors(",
          "def test_timedelta_range_freq_divide_end(",
          "def test_timedelta_range_infer_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_astype.py": [
          "def test_astype_object(",
          "def test_astype_object_with_nat(",
          "def test_astype(",
          "def test_astype_uint(",
          "def test_astype_timedelta64(",
          "def test_astype_raises(",
          "def test_astype_category(",
          "def test_astype_array_fallback("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_factorize.py": [
          "def test_factorize(",
          "def test_factorize_preserves_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_fillna.py": [
          "def test_fillna_timedelta("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_insert.py": [
          "def test_insert(",
          "def test_insert_nat(",
          "def test_insert_invalid_na(",
          "def test_insert_mismatched_types_raises(",
          "def test_insert_castable_str(",
          "def test_insert_non_castable_str(",
          "def test_insert_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_repeat.py": [
          "def test_repeat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_shift.py": [
          "def test_tdi_shift_empty(",
          "def test_tdi_shift_hours(",
          "def test_tdi_shift_minutes(",
          "def test_tdi_shift_int(",
          "def test_tdi_shift_nonstandard_freq(",
          "def test_shift_no_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\common.py": [
          "def check_indexing_smoketest_or_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_at.py": [
          "def test_at_timezone(",
          "def test_selection_methods_of_assigned_col(",
          "def test_at_setitem_item_cache_cleared(",
          "def test_at_setitem_mixed_index_assignment(",
          "def test_at_setitem_categorical_missing(",
          "def test_at_setitem_multiindex(",
          "def test_at_datetime_index(",
          "def test_at_setitem_expansion_series_dt64tz_value(",
          "def test_at_with_duplicate_axes_requires_scalar_lookup(",
          "def test_at_series_raises_key_error(",
          "def test_at_frame_raises_key_error(",
          "def test_at_series_raises_key_error2(",
          "def test_at_frame_raises_key_error2(",
          "def test_at_frame_multiple_columns(",
          "def test_at_getitem_mixed_index_no_fallback(",
          "def test_at_categorical_integers(",
          "def test_at_applied_for_rows("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_categorical.py": [
          "def test_loc_scalar(",
          "def test_loc_setitem_with_expansion_non_category(",
          "def test_loc_getitem_scalar_non_category(",
          "def test_slicing(",
          "def test_slicing_and_getting_ops(",
          "def test_slicing_doc_examples(",
          "def test_loc_getitem_listlike_labels(",
          "def test_loc_getitem_listlike_unused_category(",
          "def test_loc_getitem_label_unused_category(",
          "def test_loc_getitem_non_category(",
          "def test_loc_setitem_expansion_label_unused_category(",
          "def test_loc_listlike_dtypes(",
          "def test_loc_listlike_dtypes_duplicated_categories_and_codes(",
          "def test_loc_listlike_dtypes_unused_category(",
          "def test_loc_getitem_listlike_unused_category_raises_keyerror(",
          "def test_ix_categorical_index(",
          "def test_ix_categorical_index_non_unique(",
          "def test_loc_slice(",
          "def test_loc_and_at_with_categorical_index(",
          "def test_loc_getitem_with_non_string_categories(",
          "def test_getitem_categorical_with_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_chaining_and_caching.py": [
          "def test_slice_consolidate_invalidate_item_cache(",
          "def test_setitem_cache_updating(",
          "def test_setitem_cache_updating_slices(",
          "def test_altering_series_clears_parent_cache(",
          "def test_setitem_chained_setfault(",
          "def test_detect_chained_assignment(",
          "def test_detect_chained_assignment_raises(",
          "def test_detect_chained_assignment_fails(",
          "def test_detect_chained_assignment_doc_example(",
          "def test_detect_chained_assignment_object_dtype(",
          "def test_detect_chained_assignment_is_copy_pickle(",
          "def test_detect_chained_assignment_setting_entire_column(",
          "def test_detect_chained_assignment_implicit_take(",
          "def test_detect_chained_assignment_implicit_take2(",
          "def test_detect_chained_assignment_str(",
          "def test_detect_chained_assignment_is_copy(",
          "def test_detect_chained_assignment_sorting(",
          "def test_detect_chained_assignment_false_positives(",
          "def test_detect_chained_assignment_undefined_column(",
          "def test_detect_chained_assignment_changing_dtype(",
          "def test_setting_with_copy_bug(",
          "def test_setting_with_copy_bug_no_warning(",
          "def test_detect_chained_assignment_warnings_errors(",
          "def test_detect_chained_assignment_warning_stacklevel(",
          "def test_chained_getitem_with_lists(",
          "def test_cache_updating(",
          "def test_cache_updating2(",
          "def test_iloc_setitem_chained_assignment(",
          "def test_getitem_loc_assignment_slice_state("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_check_indexer.py": [
          "def test_valid_input(",
          "def test_boolean_na_returns_indexer(",
          "def test_bool_raise_length(",
          "def test_int_raise_missing_values(",
          "def test_raise_invalid_array_dtypes(",
          "def test_raise_nullable_string_dtype(",
          "def test_pass_through_non_array_likes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_coercion.py": [
          "def has_test(",
          "def test_setitem_series_no_coercion_from_values_list(",
          "def test_setitem_index_object(",
          "def test_setitem_index_int64(",
          "def test_setitem_index_float64(",
          "def test_setitem_series_period(",
          "def test_setitem_index_complex128(",
          "def test_setitem_index_bool(",
          "def test_setitem_index_datetime64(",
          "def test_setitem_index_datetime64tz(",
          "def test_setitem_index_timedelta64(",
          "def test_setitem_index_period(",
          "def test_insert_index_object(",
          "def test_insert_int_index(",
          "def test_insert_float_index(",
          "def test_insert_index_datetimes(",
          "def test_insert_index_timedelta64(",
          "def test_insert_index_period(",
          "def test_insert_index_complex128(",
          "def test_insert_index_bool(",
          "def _run_test(",
          "def test_where_object(",
          "def test_where_int64(",
          "def test_where_float64(",
          "def test_where_complex128(",
          "def test_where_series_bool(",
          "def test_where_datetime64(",
          "def test_where_index_complex128(",
          "def test_where_index_bool(",
          "def test_where_series_timedelta64(",
          "def test_where_series_period(",
          "def test_where_index_timedelta64(",
          "def test_where_index_period(",
          "def test_has_comprehensive_tests(",
          "def test_fillna_object(",
          "def test_fillna_float64(",
          "def test_fillna_complex128(",
          "def test_fillna_datetime(",
          "def test_fillna_datetime64tz(",
          "def test_fillna_interval(",
          "def test_fillna_series_int64(",
          "def test_fillna_index_int64(",
          "def test_fillna_series_bool(",
          "def test_fillna_index_bool(",
          "def test_fillna_series_timedelta64(",
          "def test_fillna_series_period(",
          "def test_fillna_index_timedelta64(",
          "def test_fillna_index_period(",
          "def test_replace_series(",
          "def test_replace_series_datetime_tz(",
          "def test_replace_series_datetime_datetime(",
          "def test_replace_series_period("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_datetime.py": [
          "def test_get_loc_naive_dti_aware_str_deprecated(",
          "def test_indexing_with_datetime_tz(",
          "def test_indexing_fast_xs(",
          "def test_consistency_with_tz_aware_scalar(",
          "def test_indexing_with_datetimeindex_tz(",
          "def test_nanosecond_getitem_setitem_with_tz(",
          "def test_getitem_str_slice_millisecond_resolution(",
          "def test_getitem_pyarrow_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_floats.py": [
          "def test_scalar_non_numeric(",
          "def test_scalar_non_numeric_series_fallback(",
          "def test_scalar_with_mixed(",
          "def test_scalar_integer(",
          "def test_scalar_integer_contains_float(",
          "def test_scalar_float(",
          "def test_slice_non_numeric(",
          "def test_slice_integer(",
          "def test_integer_positional_indexing(",
          "def test_slice_integer_frame_getitem(",
          "def test_float_slice_getitem_with_integer_index_raises(",
          "def test_slice_float(",
          "def test_floating_index_doc_example(",
          "def test_floating_misc(",
          "def test_floatindex_slicing_bug("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iat.py": [
          "def test_iat(",
          "def test_iat_duplicate_columns(",
          "def test_iat_getitem_series_with_period_index(",
          "def test_iat_setitem_item_cache_cleared("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iloc.py": [
          "def test_iloc_getitem_int_and_list_int(",
          "def test_iloc_setitem_fullcol_categorical(",
          "def test_iloc_setitem_ea_inplace(",
          "def test_is_scalar_access(",
          "def test_iloc_exceeds_bounds(",
          "def test_iloc_non_integer_raises(",
          "def test_iloc_getitem_invalid_scalar(",
          "def test_iloc_array_not_mutating_negative_indices(",
          "def test_iloc_getitem_neg_int_can_reach_first_index(",
          "def test_iloc_getitem_dups(",
          "def test_iloc_getitem_array(",
          "def test_iloc_getitem_bool(",
          "def test_iloc_getitem_bool_diff_len(",
          "def test_iloc_getitem_slice(",
          "def test_iloc_getitem_slice_dups(",
          "def test_iloc_setitem(",
          "def test_iloc_setitem_axis_argument(",
          "def test_iloc_setitem_list(",
          "def test_iloc_setitem_pandas_object(",
          "def test_iloc_setitem_dups(",
          "def test_iloc_setitem_frame_duplicate_columns_multiple_blocks(",
          "def test_iloc_getitem_frame(",
          "def test_iloc_getitem_labelled_frame(",
          "def test_iloc_getitem_doc_issue(",
          "def test_iloc_setitem_series(",
          "def test_iloc_setitem_list_of_lists(",
          "def test_iloc_setitem_with_scalar_index(",
          "def test_iloc_mask(",
          "def test_iloc_non_unique_indexing(",
          "def test_iloc_empty_list_indexer_is_ok(",
          "def test_identity_slice_returns_new_object(",
          "def test_indexing_zerodim_np_array(",
          "def test_series_indexing_zerodim_np_array(",
          "def test_iloc_setitem_categorical_updates_inplace(",
          "def test_iloc_with_boolean_operation(",
          "def test_iloc_getitem_singlerow_slice_categoricaldtype_gives_series(",
          "def test_iloc_getitem_categorical_values(",
          "def test_iloc_setitem_td64_values_cast_na(",
          "def test_setitem_mix_of_nan_and_interval(",
          "def test_iloc_setitem_empty_frame_raises_with_3d_ndarray(",
          "def test_iloc_getitem_read_only_values(",
          "def test_iloc_getitem_readonly_key(",
          "def test_iloc_assign_series_to_df_cell(",
          "def test_iloc_setitem_bool_indexer(",
          "def test_iloc_setitem_pure_position_based(",
          "def test_iloc_setitem_dictionary_value(",
          "def test_iloc_getitem_float_duplicates(",
          "def test_iloc_setitem_custom_object(",
          "def test_iloc_getitem_with_duplicates(",
          "def test_iloc_getitem_with_duplicates2(",
          "def test_iloc_interval(",
          "def test_loc_setitem_boolean_list(",
          "def test_iloc_getitem_slice_negative_step_ea_block(",
          "def test_iloc_setitem_2d_ndarray_into_ea_block(",
          "def test_iloc_getitem_int_single_ea_block_view(",
          "def test_iloc_setitem_multicolumn_to_datetime(",
          "def test_iloc_float_raises(",
          "def test_iloc_getitem_setitem_fancy_exceptions(",
          "def test_iloc_frame_indexer(",
          "def test_iloc_setitem_scalar_duplicate_columns(",
          "def test_iloc_setitem_list_duplicate_columns(",
          "def test_iloc_setitem_series_duplicate_columns(",
          "def test_iloc_setitem_dtypes_duplicate_columns(",
          "def test_frame_iloc_getitem_callable(",
          "def test_frame_iloc_setitem_callable(",
          "def test_iloc(",
          "def test_iloc_getitem_nonunique(",
          "def test_iloc_setitem_pure_position_based(",
          "def test_iloc_nullable_int64_size_1_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexers.py": [
          "def test_length_of_indexer(",
          "def test_is_scalar_indexer(",
          "def test_validate_indices_ok(",
          "def test_validate_indices_low(",
          "def test_validate_indices_high(",
          "def test_validate_indices_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexing.py": [
          "def test_setitem_ndarray_1d(",
          "def test_setitem_ndarray_1d_2(",
          "def test_getitem_ndarray_3d(",
          "def test_setitem_ndarray_3d(",
          "def test_getitem_ndarray_0d(",
          "def test_inf_upcast(",
          "def test_setitem_dtype_upcast(",
          "def test_setitem_dtype_upcast2(",
          "def test_setitem_dtype_upcast3(",
          "def test_dups_fancy_indexing(",
          "def test_dups_fancy_indexing_across_dtypes(",
          "def test_dups_fancy_indexing_not_in_order(",
          "def test_dups_fancy_indexing_only_missing_label(",
          "def test_dups_fancy_indexing_missing_label(",
          "def test_dups_fancy_indexing_non_unique(",
          "def test_dups_fancy_indexing2(",
          "def test_dups_fancy_indexing3(",
          "def test_duplicate_int_indexing(",
          "def test_indexing_mixed_frame_bug(",
          "def test_multitype_list_index_access(",
          "def test_set_index_nan(",
          "def test_multi_assign(",
          "def test_multi_assign_broadcasting_rhs(",
          "def test_setitem_list(",
          "def test_string_slice(",
          "def test_string_slice_empty(",
          "def test_astype_assignment(",
          "def test_astype_assignment_full_replacements(",
          "def test_index_type_coercion(",
          "def test_float_index_to_mixed(",
          "def test_float_index_non_scalar_assignment(",
          "def test_loc_setitem_fullindex_views(",
          "def test_rhs_alignment(",
          "def run_tests(",
          "def test_str_label_slicing_with_negative_step(",
          "def test_slice_with_zero_step_raises(",
          "def test_loc_setitem_indexing_assignment_dict_already_exists(",
          "def test_iloc_getitem_indexing_dtypes_on_empty(",
          "def test_loc_range_in_series_indexing(",
          "def test_partial_boolean_frame_indexing(",
          "def test_no_reference_cycle(",
          "def test_label_indexing_on_nan(",
          "def test_coercion_with_loc(",
          "def test_coercion_with_setitem_and_dataframe(",
          "def test_none_coercion_loc_and_dataframe(",
          "def test_none_coercion_mixed_dtypes(",
          "def test_setitem_dt64_string_scalar(",
          "def test_setitem_dt64_string_values(",
          "def test_setitem_td64_scalar(",
          "def test_setitem_td64_string_values(",
          "def test_extension_array_cross_section(",
          "def test_extension_array_cross_section_converts(",
          "def test_ser_tup_indexer_exceeds_dimensions(",
          "def test_ser_list_indexer_exceeds_dimensions(",
          "def test_scalar_setitem_with_nested_value(",
          "def test_scalar_setitem_series_with_nested_value(",
          "def test_scalar_setitem_with_nested_value_length1(",
          "def test_scalar_setitem_series_with_nested_value_length1(",
          "def test_object_dtype_series_set_series_element("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_loc.py": [
          "def test_not_change_nan_loc(",
          "def test_none_values_on_string_columns(",
          "def test_loc_getitem_int(",
          "def test_loc_getitem_label(",
          "def test_loc_getitem_label_out_of_range(",
          "def test_loc_getitem_label_list(",
          "def test_loc_getitem_label_list_with_missing(",
          "def test_loc_getitem_label_list_fails(",
          "def test_loc_getitem_label_array_like(",
          "def test_loc_getitem_bool(",
          "def test_loc_getitem_label_slice(",
          "def test_setitem_from_duplicate_axis(",
          "def test_column_types_consistent(",
          "def test_loc_getitem_single_boolean_arg(",
          "def test_loc_npstr(",
          "def test_contains_raise_error_if_period_index_is_in_multi_index(",
          "def test_loc_getitem_missing_unicode_key(",
          "def test_loc_getitem_dups(",
          "def test_loc_getitem_dups2(",
          "def test_loc_setitem_dups(",
          "def test_loc_setitem_slice(",
          "def test_loc_setitem_dtype(",
          "def test_getitem_label_list_with_missing(",
          "def test_loc_getitem_bool_diff_len(",
          "def test_loc_getitem_int_slice(",
          "def test_loc_to_fail(",
          "def test_loc_to_fail2(",
          "def test_loc_to_fail3(",
          "def test_loc_getitem_list_with_fail(",
          "def test_loc_index(",
          "def test_loc_general(",
          "def test_loc_setitem_consistency(",
          "def test_loc_setitem_consistency_dt64_to_str(",
          "def test_loc_setitem_consistency_dt64_to_float(",
          "def test_loc_setitem_consistency_single_row(",
          "def test_loc_setitem_consistency_empty(",
          "def test_loc_setitem_consistency_slice_column_len(",
          "def test_loc_assign_non_ns_datetime(",
          "def test_loc_modify_datetime(",
          "def test_loc_setitem_frame_with_reindex(",
          "def test_loc_setitem_frame_with_reindex_mixed(",
          "def test_loc_setitem_frame_with_inverted_slice(",
          "def test_loc_setitem_empty_frame(",
          "def test_loc_setitem_frame(",
          "def test_loc_setitem_frame_nan_int_coercion_invalid(",
          "def test_loc_setitem_frame_mixed_labels(",
          "def test_loc_setitem_frame_multiples(",
          "def test_loc_setitem_with_scalar_index(",
          "def test_loc_setitem_missing_columns(",
          "def test_loc_coercion(",
          "def test_loc_coercion2(",
          "def test_loc_coercion3(",
          "def test_setitem_new_key_tz(",
          "def test_loc_non_unique(",
          "def test_loc_non_unique_memory_error(",
          "def test_loc_name(",
          "def test_loc_empty_list_indexer_is_ok(",
          "def test_identity_slice_returns_new_object(",
          "def test_loc_copy_vs_view(",
          "def test_loc_uint64(",
          "def test_loc_uint64_disallow_negative(",
          "def test_loc_setitem_empty_append_expands_rows(",
          "def test_loc_setitem_empty_append_expands_rows_mixed_dtype(",
          "def test_loc_setitem_empty_append_single_value(",
          "def test_loc_setitem_empty_append_raises(",
          "def test_indexing_zerodim_np_array(",
          "def test_series_indexing_zerodim_np_array(",
          "def test_loc_reverse_assignment(",
          "def test_loc_setitem_str_to_small_float_conversion_type(",
          "def test_loc_getitem_time_object(",
          "def test_loc_getitem_range_from_spmatrix(",
          "def test_loc_getitem_listlike_all_retains_sparse(",
          "def test_loc_getitem_sparse_frame(",
          "def test_loc_getitem_sparse_series(",
          "def test_getitem_single_row_sparse_df(",
          "def test_loc_getitem_iterable(",
          "def test_loc_getitem_timedelta_0seconds(",
          "def test_loc_getitem_uint64_scalar(",
          "def test_loc_setitem_int_label_with_float_index(",
          "def test_loc_setitem_listlike_with_timedelta64index(",
          "def test_loc_setitem_categorical_values_partial_column_slice(",
          "def test_loc_setitem_single_row_categorical(",
          "def test_loc_setitem_datetime_coercion(",
          "def test_loc_setitem_datetimeindex_tz(",
          "def test_loc_setitem_time_key(",
          "def test_loc_setitem_unsorted_multiindex_columns(",
          "def test_loc_setitem_uint_drop(",
          "def test_loc_setitem_td64_non_nano(",
          "def test_loc_setitem_2d_to_1d_raises(",
          "def test_loc_getitem_interval_index(",
          "def test_loc_getitem_interval_index2(",
          "def test_loc_getitem_index_single_double_tuples(",
          "def test_loc_getitem_index_namedtuple(",
          "def test_loc_setitem_single_column_mixed(",
          "def test_loc_setitem_cast2(",
          "def test_loc_setitem_cast3(",
          "def test_loc_setitem_range_key(",
          "def test_loc_iloc_getitem_ellipsis(",
          "def test_loc_iloc_getitem_leading_ellipses(",
          "def test_loc_iloc_getitem_ellipses_only_one_ellipsis(",
          "def test_loc_getitem_multilevel_index_order(",
          "def test_loc_preserve_names(",
          "def test_loc_getitem_multiindex_nonunique_len_zero(",
          "def test_loc_getitem_access_none_value_in_multiindex(",
          "def test_loc_setitem_multiindex_slice(",
          "def test_loc_getitem_slice_datetime_objs_with_datetimeindex(",
          "def test_loc_getitem_datetime_string_with_datetimeindex(",
          "def test_loc_getitem_sorted_index_level_with_duplicates(",
          "def test_additional_element_to_categorical_series_loc(",
          "def test_additional_categorical_element_loc(",
          "def test_loc_set_nan_in_categorical_series(",
          "def test_loc_consistency_series_enlarge_set_into(",
          "def test_loc_getitem_preserves_index_level_category_dtype(",
          "def test_loc_multiindex_levels_contain_values_not_in_index_anymore(",
          "def test_loc_multiindex_null_slice_na_level(",
          "def test_loc_drops_level(",
          "def test_loc_setitem_with_expansion_large_dataframe(",
          "def test_loc_setitem_empty_series(",
          "def test_loc_setitem_empty_series_float(",
          "def test_loc_setitem_empty_series_str_idx(",
          "def test_loc_setitem_incremental_with_dst(",
          "def test_loc_setitem_datetime_keys_cast(",
          "def test_loc_setitem_categorical_column_retains_dtype(",
          "def test_loc_setitem_with_expansion_and_existing_dst(",
          "def test_setitem_with_expansion(",
          "def test_loc_setitem_with_expansion_inf_upcast_empty(",
          "def test_loc_setitem_with_expansion_nonunique_index(",
          "def test_loc_setitem_with_expansion_preserves_nullable_int(",
          "def test_frame_loc_getitem_callable(",
          "def test_frame_loc_getitem_callable_mixture(",
          "def test_frame_loc_getitem_callable_labels(",
          "def test_frame_loc_setitem_callable(",
          "def test_loc_getitem_partial_string_slicing_datetimeindex(",
          "def test_loc_getitem_partial_string_slicing_with_periodindex(",
          "def test_loc_getitem_partial_string_slicing_with_timedeltaindex(",
          "def test_loc_getitem_str_timedeltaindex(",
          "def test_loc_getitem_partial_slice_non_monotonicity(",
          "def test_loc_getitem_slicing_datetimes_frame(",
          "def test_loc_getitem_label_slice_across_dst(",
          "def test_loc_getitem_label_slice_period_timedelta(",
          "def test_loc_getitem_slice_floats_inexact(",
          "def test_loc_getitem_float_slice_floatindex(",
          "def test_loc_getitem_slice_label_td64obj(",
          "def test_loc_getitem_slice_unordered_dt_index(",
          "def test_loc_getitem_slice_labels_int_in_object_index(",
          "def test_loc_getitem_slice_columns_mixed_dtype(",
          "def test_loc_bool_incompatible_index_raises(",
          "def test_loc_bool_should_not_raise(",
          "def test_loc_bool_slice_raises(",
          "def test_loc_setitem_bool_mask_timedeltaindex(",
          "def test_loc_setitem_mask_with_datetimeindex_tz(",
          "def test_loc_setitem_mask_and_label_with_datetimeindex(",
          "def test_loc_setitem_mask_td64_series_value(",
          "def test_loc_setitem_boolean_and_column(",
          "def test_loc_setitem_ndframe_values_alignment(",
          "def test_loc_indexer_empty_broadcast(",
          "def test_loc_indexer_all_false_broadcast(",
          "def test_loc_indexer_length_one(",
          "def test_loc_getitem_list_of_labels_categoricalindex_with_na(",
          "def test_loc_getitem_series_label_list_missing_values(",
          "def test_loc_getitem_series_label_list_missing_integer_values(",
          "def test_loc_getitem_listlike_of_datetimelike_keys(",
          "def test_loc_named_index(",
          "def test_loc_getitem_label_list_integer_labels(",
          "def test_loc_setitem_float_intindex(",
          "def test_loc_axis_1_slice(",
          "def test_loc_set_dataframe_multiindex(",
          "def test_loc_mixed_int_float(",
          "def test_loc_with_positional_slice_raises(",
          "def test_loc_slice_disallows_positional(",
          "def test_loc_datetimelike_mismatched_dtypes(",
          "def test_loc_with_period_index_indexer(",
          "def test_loc_setitem_multiindex_timestamp(",
          "def test_loc_getitem_multiindex_tuple_level(",
          "def test_loc_getitem_nullable_index_with_duplicates(",
          "def test_loc_setitem_uint8_upcast(",
          "def test_loc_setitem_using_datetimelike_str_as_index(",
          "def test_loc_set_int_dtype(",
          "def test_loc_periodindex_3_levels(",
          "def test_loc_setitem_pyarrow_strings(",
          "def test_loc_uint64(",
          "def test_loc_getitem(",
          "def test_loc_getitem_not_monotonic(",
          "def test_loc_getitem_setitem_integer_slice_keyerrors(",
          "def test_loc_getitem_iterator(",
          "def test_loc_setitem_boolean(",
          "def test_loc_setitem_corner(",
          "def test_basic_setitem_with_labels(",
          "def test_loc_setitem_listlike_of_ints(",
          "def test_loc_setitem_dt64tz_values(",
          "def test_loc_iloc_setitem_with_listlike(",
          "def test_loc_series_getitem_too_many_dimensions(",
          "def test_loc_setitem(",
          "def test_loc_assign_dict_to_row(",
          "def test_loc_setitem_dict_timedelta_multiple_set(",
          "def test_loc_set_multiple_items_in_multiple_new_columns(",
          "def test_getitem_loc_str_periodindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_na_indexing.py": [
          "def test_series_mask_boolean(",
          "def test_na_treated_as_false("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_partial.py": [
          "def test_empty_frame_setitem_index_name_retained(",
          "def test_empty_frame_setitem_index_name_inherited(",
          "def test_loc_setitem_zerolen_series_columns_align(",
          "def test_loc_setitem_zerolen_list_length_must_match_columns(",
          "def test_partial_set_empty_frame(",
          "def test_partial_set_empty_frame2(",
          "def test_partial_set_empty_frame3(",
          "def test_partial_set_empty_frame4(",
          "def test_partial_set_empty_frame5(",
          "def test_partial_set_empty_frame_no_index(",
          "def test_partial_set_empty_frame_row(",
          "def test_partial_set_empty_frame_set_series(",
          "def test_partial_set_empty_frame_empty_copy_assignment(",
          "def test_partial_set_empty_frame_empty_consistencies(",
          "def test_partial_setting(",
          "def test_partial_setting_frame(",
          "def test_partial_setting2(",
          "def test_partial_setting_mixed_dtype(",
          "def test_series_partial_set(",
          "def test_series_partial_set_with_name(",
          "def test_setitem_with_expansion_numeric_into_datetimeindex(",
          "def test_partial_set_invalid(",
          "def test_loc_with_list_of_strings_representing_datetimes(",
          "def test_loc_with_list_of_strings_representing_datetimes_missing_value(",
          "def test_loc_with_list_of_strings_representing_datetimes_not_matched_type(",
          "def test_slice_irregular_datetime_index_with_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_scalar.py": [
          "def test_iat_set_ints(",
          "def test_iat_set_other(",
          "def test_at_set_ints_other(",
          "def test_float_index_at_iat(",
          "def test_at_iat_coercion(",
          "def test_iloc_iat_coercion_datelike(",
          "def test_imethods_with_dups(",
          "def test_frame_at_with_duplicate_axes(",
          "def test_at_getitem_dt64tz_values(",
          "def test_mixed_index_at_iat_loc_iloc_series(",
          "def test_mixed_index_at_iat_loc_iloc_dataframe(",
          "def test_iat_setter_incompatible_assignment(",
          "def test_iat_dont_wrap_object_datetimelike(",
          "def test_at_with_tuple_index_get(",
          "def test_at_with_tuple_index_set(",
          "def test_multiindex_at_get(",
          "def test_multiindex_at_set(",
          "def test_multiindex_at_get_one_level("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\interval\\test_interval.py": [
          "def test_getitem_with_scalar(",
          "def test_getitem_nonoverlapping_monotonic(",
          "def test_getitem_non_matching(",
          "def test_loc_getitem_large_series(",
          "def test_loc_getitem_frame(",
          "def test_getitem_interval_with_nans(",
          "def test_mi_intervalindex_slicing_with_scalar("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\interval\\test_interval_new.py": [
          "def test_loc_with_interval(",
          "def test_loc_with_scalar(",
          "def test_loc_with_slices(",
          "def test_slice_step_ne1(",
          "def test_slice_float_start_stop(",
          "def test_slice_interval_step(",
          "def test_loc_with_overlap(",
          "def test_non_unique(",
          "def test_non_unique_moar(",
          "def test_loc_getitem_missing_key_error_message(",
          "def test_repeating_interval_index_with_infs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_chaining_and_caching.py": [
          "def test_detect_chained_assignment(",
          "def test_cache_updating(",
          "def test_indexer_caching("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_datetime.py": [
          "def test_multiindex_period_datetime(",
          "def test_multiindex_datetime_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_getitem.py": [
          "def test_series_getitem_multiindex(",
          "def test_series_getitem_duplicates_multiindex(",
          "def test_series_getitem(",
          "def test_series_getitem_returns_scalar(",
          "def test_series_getitem_indexing_errors(",
          "def test_series_getitem_corner_generator(",
          "def test_getitem_simple(",
          "def test_frame_getitem_simple_key_error(",
          "def test_frame_getitem_multicolumn_empty_level(",
          "def test_frame_getitem_toplevel(",
          "def test_frame_mixed_depth_get(",
          "def test_frame_getitem_nan_multiindex(",
          "def test_frame_getitem_nan_cols_multiindex(",
          "def test_frame_mi_access(",
          "def test_frame_mi_access_returns_series(",
          "def test_frame_mi_access_returns_frame(",
          "def test_frame_mi_empty_slice(",
          "def test_loc_empty_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_iloc.py": [
          "def test_iloc_returns_series(",
          "def test_iloc_returns_dataframe(",
          "def test_iloc_returns_scalar(",
          "def test_iloc_getitem_multiple_items(",
          "def test_iloc_getitem_labels(",
          "def test_frame_getitem_slice(",
          "def test_frame_setitem_slice(",
          "def test_indexing_ambiguity_bug_1678(",
          "def test_iloc_integer_locations(",
          "def test_iloc_setitem_int_multiindex_series(",
          "def test_getitem_iloc("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_indexing_slow.py": [
          "def test_multiindex_get_loc("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_loc.py": [
          "def test_loc_setitem_frame_with_multiindex(",
          "def test_loc_getitem_general(",
          "def test_loc_getitem_multiindex_missing_label_raises(",
          "def test_loc_getitem_list_of_tuples_with_multiindex(",
          "def test_loc_getitem_series(",
          "def test_loc_getitem_array(",
          "def test_loc_multiindex_labels(",
          "def test_loc_multiindex_ints(",
          "def test_loc_multiindex_missing_label_raises(",
          "def test_loc_multiindex_list_missing_label(",
          "def test_loc_multiindex_too_many_dims_raises(",
          "def test_loc_multiindex_indexer_none(",
          "def test_loc_multiindex_incomplete(",
          "def test_get_loc_single_level(",
          "def test_loc_getitem_int_slice(",
          "def test_loc_getitem_nested_indexer(",
          "def test_multiindex_loc_one_dimensional_tuple(",
          "def test_multiindex_one_dimensional_tuple_columns(",
          "def test_multiindex_setitem_columns_enlarging(",
          "def test_sorted_multiindex_after_union(",
          "def test_loc_no_second_level_index(",
          "def test_loc_multi_index_key_error(",
          "def test_loc_getitem_duplicates_multiindex_missing_indexers(",
          "def test_loc_getitem_duplicates_multiindex_empty_indexer(",
          "def test_loc_getitem_duplicates_multiindex_non_scalar_type_object(",
          "def test_loc_getitem_tuple_plus_slice(",
          "def test_loc_getitem_int(",
          "def test_loc_getitem_int_raises_exception(",
          "def test_loc_getitem_lowerdim_corner(",
          "def test_loc_setitem_single_column_slice(",
          "def test_loc_nan_multiindex(",
          "def test_loc_period_string_indexing(",
          "def test_loc_datetime_mask_slicing(",
          "def test_loc_datetime_series_tuple_slicing(",
          "def test_loc_with_mi_indexer(",
          "def test_loc_mi_with_level1_named_0(",
          "def test_getitem_str_slice(",
          "def test_3levels_leading_period_index(",
          "def test_missing_keys_raises_keyerror(",
          "def test_missing_key_raises_keyerror2(",
          "def test_missing_key_combination(",
          "def test_getitem_loc_commutability(",
          "def test_loc_with_nan(",
          "def test_getitem_non_found_tuple(",
          "def test_get_loc_datetime_index(",
          "def test_loc_setitem_indexer_differently_ordered(",
          "def test_loc_getitem_index_differently_ordered_slice_none(",
          "def test_loc_getitem_index_differently_ordered_slice_none_duplicates(",
          "def test_loc_getitem_drops_levels_for_one_row_dataframe(",
          "def test_mi_columns_loc_list_label_order(",
          "def test_mi_partial_indexing_list_raises(",
          "def test_mi_indexing_list_nonexistent_raises(",
          "def test_mi_add_cell_missing_row_non_unique(",
          "def test_loc_get_scalar_casting_to_float(",
          "def test_loc_empty_single_selector_with_names(",
          "def test_loc_keyerror_rightmost_key_missing(",
          "def test_multindex_series_loc_with_tuple_label("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_multiindex.py": [
          "def test_multiindex_perf_warn(",
          "def test_indexing_over_hashtable_size_cutoff(",
          "def test_multi_nan_indexing(",
          "def test_exclusive_nat_column_indexing(",
          "def test_nested_tuples_duplicates(",
          "def test_multiindex_with_datatime_level_preserves_freq(",
          "def test_multiindex_complex(",
          "def test_rename_multiindex_with_duplicates(",
          "def test_series_align_multiindex_with_nan_overlap_only(",
          "def test_series_align_multiindex_with_nan(",
          "def test_nunique_smoke(",
          "def test_multiindex_repeated_keys(",
          "def test_multiindex_with_na_missing_key(",
          "def test_multiindex_dtype_preservation(",
          "def test_multiindex_from_tuples_with_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_partial.py": [
          "def test_getitem_partial_int(",
          "def test_series_slice_partial(",
          "def test_xs_partial(",
          "def test_getitem_partial(",
          "def test_fancy_slice_partial(",
          "def test_getitem_partial_column_select(",
          "def test_partial_set(",
          "def test_getitem_intkey_leading_level(",
          "def test_setitem_multiple_partial(",
          "def test_partial_getitem_loc_datetime(",
          "def test_loc_getitem_partial_both_axis("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_setitem.py": [
          "def test_setitem_multiindex(",
          "def test_setitem_multiindex2(",
          "def test_setitem_multiindex3(",
          "def test_multiindex_setitem(",
          "def test_multiindex_setitem2(",
          "def test_multiindex_assignment(",
          "def test_multiindex_assignment_single_dtype(",
          "def test_groupby_example(",
          "def test_series_setitem(",
          "def test_frame_getitem_setitem_boolean(",
          "def test_frame_getitem_setitem_multislice(",
          "def test_frame_setitem_multi_column(",
          "def test_frame_setitem_multi_column2(",
          "def test_loc_getitem_tuple_plus_columns(",
          "def test_loc_getitem_setitem_slice_integers(",
          "def test_setitem_change_dtype(",
          "def test_set_column_scalar_with_loc(",
          "def test_nonunique_assignment_1750(",
          "def test_astype_assignment_with_dups(",
          "def test_setitem_nonmonotonic(",
          "def test_setitem_new_column_mixed_depth(",
          "def test_setitem_new_column_all_na(",
          "def test_setitem_enlargement_keep_index_names(",
          "def test_frame_setitem_view_direct(",
          "def test_frame_setitem_copy_raises(",
          "def test_frame_setitem_copy_no_write(",
          "def test_frame_setitem_partial_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_slice.py": [
          "def test_per_axis_per_level_getitem(",
          "def test_multiindex_slicers_non_unique(",
          "def test_multiindex_slicers_datetimelike(",
          "def test_multiindex_slicers_edges(",
          "def test_per_axis_per_level_doc_examples(",
          "def test_loc_axis_arguments(",
          "def test_loc_axis_single_level_multi_col_indexing_multiindex_col_df(",
          "def test_loc_axis_single_level_single_col_indexing_multiindex_col_df(",
          "def test_loc_ax_single_level_indexer_simple_df(",
          "def test_per_axis_per_level_setitem(",
          "def test_multiindex_label_slicing_with_negative_step(",
          "def test_multiindex_slice_first_level(",
          "def test_int_series_slicing(",
          "def test_loc_slice_negative_stepsize("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_sorted.py": [
          "def test_getitem_multilevel_index_tuple_not_sorted(",
          "def test_getitem_slice_not_sorted(",
          "def test_frame_getitem_not_sorted2(",
          "def test_sort_values_key(",
          "def test_argsort_with_na(",
          "def test_sort_values_with_na(",
          "def test_frame_getitem_not_sorted(",
          "def test_series_getitem_not_sorted("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_impl.py": [
          "def test_categorical_dtype(",
          "def test_categorical_pyarrow(",
          "def test_empty_categorical_pyarrow(",
          "def test_large_string_pyarrow(",
          "def test_bitmasks_pyarrow(",
          "def test_dataframe(",
          "def test_missing_from_masked(",
          "def test_mixed_data(",
          "def test_mixed_missing(",
          "def test_string(",
          "def test_nonstring_object(",
          "def test_datetime(",
          "def test_categorical_to_numpy_dlpack(",
          "def test_empty_pyarrow(",
          "def test_multi_chunk_pyarrow(",
          "def test_datetimetzdtype(",
          "def test_interchange_from_non_pandas_tz_aware("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_spec_conformance.py": [
          "def test_only_one_dtype(",
          "def test_mixed_dtypes(",
          "def test_na_float(",
          "def test_noncategorical(",
          "def test_categorical(",
          "def test_dataframe(",
          "def test_df_get_chunks(",
          "def test_column_get_chunks(",
          "def test_get_columns(",
          "def test_buffer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_utils.py": [
          "def test_dtype_to_arrow_c_fmt(",
          "def test_dtype_to_arrow_c_fmt_arrowdtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_api.py": [
          "def test_internals_api(",
          "def test_namespace(",
          "def test_make_block_2d_with_dti("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py": [
          "def test_constructor(",
          "def test_pickle(",
          "def test_mgr_locs(",
          "def test_attrs(",
          "def test_copy(",
          "def test_delete(",
          "def test_delete_datetimelike(",
          "def test_split(",
          "def test_attrs(",
          "def test_duplicate_ref_loc_failure(",
          "def test_pickle(",
          "def test_non_unique_pickle(",
          "def test_categorical_block_pickle(",
          "def test_iget(",
          "def test_set(",
          "def test_set_change_dtype(",
          "def test_copy(",
          "def test_sparse(",
          "def test_sparse_mixed(",
          "def test_as_array_float(",
          "def test_as_array_int_bool(",
          "def test_as_array_datetime(",
          "def test_as_array_datetime_tz(",
          "def test_astype(",
          "def test_convert(",
          "def test_interleave(",
          "def test_interleave_dtype(",
          "def test_consolidate_ordering_issues(",
          "def test_reindex_items(",
          "def test_get_numeric_data(",
          "def test_get_bool_data(",
          "def test_unicode_repr_doesnt_raise(",
          "def test_equals(",
          "def test_equals_block_order_different_dtypes(",
          "def test_single_mgr_ctor(",
          "def test_validate_bool_args(",
          "def test_iset_split_block(",
          "def test_iset_split_block_values(",
          "def test_get_slice(",
          "def test_take(",
          "def test_reindex_axis(",
          "def test_reindex_indexer(",
          "def test_slice_len(",
          "def test_zero_step_raises(",
          "def test_slice_canonize_negative_stop(",
          "def test_unbounded_slice_raises(",
          "def test_not_slice_like_slices(",
          "def test_array_to_slice_conversion(",
          "def test_not_slice_like_arrays(",
          "def test_slice_iter(",
          "def test_slice_to_array_conversion(",
          "def test_blockplacement_add(",
          "def test_blockplacement_add_int(",
          "def test_blockplacement_add_int_raises(",
          "def test_datetime_block_can_hold_element(",
          "def test_interval_can_hold_element_emptylist(",
          "def test_interval_can_hold_element(",
          "def test_period_can_hold_element_emptylist(",
          "def test_period_can_hold_element(",
          "def test_should_store_categorical(",
          "def test_validate_ndim(",
          "def test_block_shape(",
          "def test_make_block_no_pandas_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_managers.py": [
          "def test_dataframe_creation(",
          "def test_series_creation("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_clipboard.py": [
          "def test_checked_call_with_bad_call(",
          "def test_checked_call_with_valid_call(",
          "def test_stringify_text(",
          "def test_mock_clipboard(",
          "def test_round_trip_frame(",
          "def test_round_trip_frame_sep(",
          "def test_round_trip_frame_string(",
          "def test_excel_sep_warning(",
          "def test_copy_delim_warning(",
          "def test_clipboard_copy_tabs_default(",
          "def test_clipboard_copy_strings(",
          "def test_read_clipboard_infer_excel(",
          "def test_infer_excel_with_nulls(",
          "def test_infer_excel_with_multiindex(",
          "def test_invalid_encoding(",
          "def test_round_trip_valid_encodings(",
          "def test_raw_roundtrip(",
          "def test_read_clipboard_dtype_backend(",
          "def test_invalid_dtype_backend("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_common.py": [
          "def test_expand_user(",
          "def test_expand_user_normal_path(",
          "def test_stringify_path_pathlib(",
          "def test_stringify_path_localpath(",
          "def test_stringify_path_fspath(",
          "def test_stringify_file_and_path_like(",
          "def test_infer_compression_from_path(",
          "def test_get_handle_with_path(",
          "def test_get_handle_with_buffer(",
          "def test_bytesiowrapper_returns_correct_bytes(",
          "def test_get_handle_pyarrow_compat(",
          "def test_iterator(",
          "def test_read_non_existent(",
          "def test_write_missing_parent_directory(",
          "def test_read_expands_user_home_dir(",
          "def test_read_fspath_all(",
          "def test_write_fspath_all(",
          "def test_write_fspath_hdf5(",
          "def test_constructor_bad_file(",
          "def test_next(",
          "def test_unknown_engine(",
          "def test_binary_mode(",
          "def test_warning_missing_utf_bom(",
          "def test_is_fsspec_url(",
          "def test_codecs_encoding(",
          "def test_codecs_get_writer_reader(",
          "def test_explicit_encoding(",
          "def test_encoding_errors(",
          "def test_bad_encdoing_errors(",
          "def test_errno_attribute(",
          "def test_fail_mmap(",
          "def test_close_on_error(",
          "def test_pickle_reader("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_compression.py": [
          "def test_compression_size(",
          "def test_compression_size_fh(",
          "def test_dataframe_compression_defaults_to_infer(",
          "def test_series_compression_defaults_to_infer(",
          "def test_compression_warning(",
          "def test_compression_binary(",
          "def test_gzip_reproducibility_file_name(",
          "def test_gzip_reproducibility_file_object(",
          "def test_with_missing_lzma(",
          "def test_with_missing_lzma_runtime(",
          "def test_gzip_compression_level(",
          "def test_xz_compression_level_read(",
          "def test_bzip_compression_level(",
          "def test_empty_archive_zip(",
          "def test_ambiguous_archive_zip(",
          "def test_ambiguous_archive_tar(",
          "def test_tar_gz_to_different_filename(",
          "def test_tar_no_error_on_close("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_feather.py": [
          "def test_error(",
          "def test_basic(",
          "def test_duplicate_columns(",
          "def test_read_columns(",
          "def test_read_columns_different_order(",
          "def test_unsupported_other(",
          "def test_rw_use_threads(",
          "def test_path_pathlib(",
          "def test_path_localpath(",
          "def test_passthrough_keywords(",
          "def test_http_path(",
          "def test_read_feather_dtype_backend(",
          "def test_int_columns_and_index(",
          "def test_invalid_dtype_backend(",
          "def test_string_inference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_fsspec.py": [
          "def test_read_csv(",
          "def test_reasonable_error(",
          "def test_to_csv(",
          "def test_to_excel(",
          "def test_to_csv_fsspec_object(",
          "def test_csv_options(",
          "def test_read_table_options(",
          "def test_excel_options(",
          "def test_to_parquet_new_file(",
          "def test_arrowparquet_options(",
          "def test_fastparquet_options(",
          "def test_from_s3_csv(",
          "def test_s3_protocols(",
          "def test_s3_parquet(",
          "def test_not_present_exception(",
          "def test_feather_options(",
          "def test_pickle_options(",
          "def test_json_options(",
          "def test_stata_options(",
          "def test_markdown_options(",
          "def test_non_fsspec_options("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_gcs.py": [
          "def test_to_read_gcs(",
          "def test_to_csv_compression_encoding_gcs(",
          "def test_to_parquet_gcs_new_file(",
          "def test_gcs_not_present_exception("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_html.py": [
          "def test_bs4_version_fails(",
          "def test_invalid_flavor(",
          "def test_same_ordering(",
          "def test_literal_html_deprecation(",
          "def test_to_html_compat(",
          "def test_dtype_backend(",
          "def test_banklist_url(",
          "def test_spam_url(",
          "def test_banklist(",
          "def test_spam(",
          "def test_spam_no_match(",
          "def test_banklist_no_match(",
          "def test_spam_header(",
          "def test_skiprows_int(",
          "def test_skiprows_range(",
          "def test_skiprows_list(",
          "def test_skiprows_set(",
          "def test_skiprows_slice(",
          "def test_skiprows_slice_short(",
          "def test_skiprows_slice_long(",
          "def test_skiprows_ndarray(",
          "def test_skiprows_invalid(",
          "def test_index(",
          "def test_header_and_index_no_types(",
          "def test_header_and_index_with_types(",
          "def test_infer_types(",
          "def test_string_io(",
          "def test_string(",
          "def test_file_like(",
          "def test_bad_url_protocol(",
          "def test_invalid_url(",
          "def test_file_url(",
          "def test_invalid_table_attrs(",
          "def test_multiindex_header(",
          "def test_multiindex_index(",
          "def test_multiindex_header_index(",
          "def test_multiindex_header_skiprows_tuples(",
          "def test_multiindex_header_skiprows(",
          "def test_multiindex_header_index_skiprows(",
          "def test_regex_idempotency(",
          "def test_negative_skiprows(",
          "def test_multiple_matches(",
          "def test_python_docs_table(",
          "def test_empty_tables(",
          "def test_multiple_tbody(",
          "def test_header_and_one_column(",
          "def test_thead_without_tr(",
          "def test_tfoot_read(",
          "def test_parse_header_of_non_string_column(",
          "def test_banklist_header(",
          "def test_gold_canyon(",
          "def test_different_number_of_cols(",
          "def test_colspan_rowspan_1(",
          "def test_colspan_rowspan_copy_values(",
          "def test_colspan_rowspan_both_not_1(",
          "def test_rowspan_at_end_of_row(",
          "def test_rowspan_only_rows(",
          "def test_header_inferred_from_rows_with_only_th(",
          "def test_parse_dates_list(",
          "def test_parse_dates_combine(",
          "def test_wikipedia_states_table(",
          "def test_wikipedia_states_multiindex(",
          "def test_parser_error_on_empty_header_row(",
          "def test_decimal_rows(",
          "def test_bool_header_arg(",
          "def test_converters(",
          "def test_na_values(",
          "def test_keep_default_na(",
          "def test_preserve_empty_rows(",
          "def test_ignore_empty_rows_when_inferring_header(",
          "def test_multiple_header_rows(",
          "def test_works_on_valid_markup(",
          "def test_fallback_success(",
          "def test_to_html_timestamp(",
          "def test_to_html_borderless(",
          "def test_displayed_only(",
          "def test_displayed_only_with_many_elements(",
          "def test_encode(",
          "def test_parse_failure_unseekable(",
          "def test_parse_failure_rewinds(",
          "def test_importcheck_thread_safety(",
          "def test_parse_path_object(",
          "def test_parse_br_as_space(",
          "def test_extract_links(",
          "def test_extract_links_bad(",
          "def test_extract_links_all_no_header(",
          "def test_invalid_dtype_backend(",
          "def test_style_tag("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_orc.py": [
          "def test_orc_reader_empty(",
          "def test_orc_reader_basic(",
          "def test_orc_reader_decimal(",
          "def test_orc_reader_date_low(",
          "def test_orc_reader_date_high(",
          "def test_orc_reader_snappy_compressed(",
          "def test_orc_roundtrip_file(",
          "def test_orc_roundtrip_bytesio(",
          "def test_orc_writer_dtypes_not_supported(",
          "def test_orc_dtype_backend_pyarrow(",
          "def test_orc_dtype_backend_numpy_nullable(",
          "def test_orc_uri_path(",
          "def test_to_orc_non_default_index(",
          "def test_invalid_dtype_backend(",
          "def test_string_inference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_parquet.py": [
          "def test_invalid_engine(",
          "def test_options_py(",
          "def test_options_fp(",
          "def test_options_auto(",
          "def test_options_get_engine(",
          "def test_get_engine_auto_error_message(",
          "def test_cross_engine_pa_fp(",
          "def test_cross_engine_fp_pa(",
          "def test_parquet_read_from_url(",
          "def test_error(",
          "def test_columns_dtypes(",
          "def test_compression(",
          "def test_read_columns(",
          "def test_read_filters(",
          "def test_write_index(",
          "def test_write_multiindex(",
          "def test_multiindex_with_columns(",
          "def test_write_ignoring_index(",
          "def test_write_column_multiindex(",
          "def test_write_column_multiindex_nonstring(",
          "def test_write_column_multiindex_string(",
          "def test_write_column_index_string(",
          "def test_write_column_index_nonstring(",
          "def test_dtype_backend(",
          "def test_read_empty_array(",
          "def test_basic(",
          "def test_basic_subset_columns(",
          "def test_to_bytes_without_path_or_buf_provided(",
          "def test_duplicate_columns(",
          "def test_timedelta(",
          "def test_unsupported(",
          "def test_unsupported_float16(",
          "def test_unsupported_float16_cleanup(",
          "def test_categorical(",
          "def test_s3_roundtrip_explicit_fs(",
          "def test_s3_roundtrip(",
          "def test_s3_roundtrip_for_dir(",
          "def test_read_file_like_obj_support(",
          "def test_expand_user(",
          "def test_partition_cols_supported(",
          "def test_partition_cols_string(",
          "def test_partition_cols_pathlib(",
          "def test_empty_dataframe(",
          "def test_write_with_schema(",
          "def test_additional_extension_arrays(",
          "def test_pyarrow_backed_string_array(",
          "def test_additional_extension_types(",
          "def test_timestamp_nanoseconds(",
          "def test_timezone_aware_index(",
          "def test_filter_row_groups(",
          "def test_read_parquet_manager(",
          "def test_read_dtype_backend_pyarrow_config(",
          "def test_read_dtype_backend_pyarrow_config_index(",
          "def test_columns_dtypes_not_invalid(",
          "def test_empty_columns(",
          "def test_df_attrs_persistence(",
          "def test_string_inference(",
          "def test_roundtrip_decimal(",
          "def test_infer_string_large_string_type(",
          "def test_basic(",
          "def test_columns_dtypes_invalid(",
          "def test_duplicate_columns(",
          "def test_bool_with_none(",
          "def test_unsupported(",
          "def test_categorical(",
          "def test_filter_row_groups(",
          "def test_s3_roundtrip(",
          "def test_partition_cols_supported(",
          "def test_partition_cols_string(",
          "def test_partition_on_supported(",
          "def test_error_on_using_partition_cols_and_partition_on(",
          "def test_empty_dataframe(",
          "def test_timezone_aware_index(",
          "def test_use_nullable_dtypes_not_supported(",
          "def test_close_file_handle_on_read_error(",
          "def test_bytes_file_name(",
          "def test_filesystem_notimplemented(",
          "def test_invalid_filesystem(",
          "def test_unsupported_pa_filesystem_storage_options(",
          "def test_invalid_dtype_backend(",
          "def test_empty_columns("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_pickle.py": [
          "def test_flatten_buffer(",
          "def test_pickles(",
          "def test_round_trip_current(",
          "def test_pickle_path_pathlib(",
          "def test_pickle_path_localpath(",
          "def test_write_explicit(",
          "def test_write_explicit_bad(",
          "def test_write_infer(",
          "def test_read_explicit(",
          "def test_read_infer(",
          "def test_read(",
          "def test_unicode_decode_error(",
          "def test_pickle_buffer_roundtrip(",
          "def test_pickle_generalurl_read(",
          "def test_pickle_fsspec_roundtrip(",
          "def test_read_pickle_with_subclass(",
          "def test_pickle_binary_object_compression(",
          "def test_pickle_dataframe_with_multilevel_index(",
          "def _test_roundtrip(",
          "def test_pickle_timeseries_periodindex(",
          "def test_pickle_preserve_name(",
          "def test_pickle_datetimes(",
          "def test_pickle_strings(",
          "def test_pickle_preserves_block_ndim(",
          "def test_pickle_big_dataframe_compression(",
          "def test_pickle_frame_v124_unpickle_130("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_s3.py": [
          "def test_streaming_s3_objects(",
          "def test_read_without_creds_from_pub_bucket(",
          "def test_read_with_creds_from_pub_bucket("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_spss.py": [
          "def test_spss_labelled_num(",
          "def test_spss_labelled_num_na(",
          "def test_spss_labelled_str(",
          "def test_spss_umlauts(",
          "def test_spss_usecols(",
          "def test_spss_umlauts_dtype_backend(",
          "def test_invalid_dtype_backend("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py": [
          "def test_frame1(",
          "def test_frame3(",
          "def test_dataframe_to_sql(",
          "def test_dataframe_to_sql_arrow_dtypes(",
          "def test_dataframe_to_sql_arrow_dtypes_missing(",
          "def test_to_sql(",
          "def test_to_sql_exist(",
          "def test_to_sql_exist_fail(",
          "def test_read_iris_query(",
          "def test_read_iris_query_chunksize(",
          "def test_read_iris_query_expression_with_parameter(",
          "def test_read_iris_query_string_with_parameter(",
          "def test_read_iris_table(",
          "def test_read_iris_table_chunksize(",
          "def test_to_sql_callable(",
          "def test_default_type_conversion(",
          "def test_read_procedure(",
          "def test_copy_from_callable_insertion_method(",
          "def test_insertion_method_on_conflict_do_nothing(",
          "def test_insertion_method_on_conflict_update(",
          "def test_read_view_postgres(",
          "def test_read_view_sqlite(",
          "def test_execute_typeerror(",
          "def test_execute_deprecated(",
          "def _transaction_test(",
          "def load_test_data_and_sql(",
          "def test_read_sql_view(",
          "def test_read_sql_with_chunksize_no_result(",
          "def test_to_sql(",
          "def test_to_sql_fail(",
          "def test_to_sql_replace(",
          "def test_to_sql_append(",
          "def test_to_sql_type_mapping(",
          "def test_to_sql_series(",
          "def test_roundtrip(",
          "def test_roundtrip_chunksize(",
          "def test_execute_sql(",
          "def test_date_parsing(",
          "def test_custom_dateparsing_error(",
          "def test_date_and_index(",
          "def test_timedelta(",
          "def test_complex_raises(",
          "def test_to_sql_index_label(",
          "def test_to_sql_index_label_multiindex(",
          "def test_multiindex_roundtrip(",
          "def test_dtype_argument(",
          "def test_integer_col_names(",
          "def test_get_schema(",
          "def test_get_schema_with_schema(",
          "def test_get_schema_dtypes(",
          "def test_get_schema_keys(",
          "def test_chunksize_read(",
          "def test_categorical(",
          "def test_unicode_column_name(",
          "def test_escaped_table_name(",
          "def test_read_sql_duplicate_columns(",
          "def test_read_table_columns(",
          "def test_read_table_index_col(",
          "def test_read_sql_delegate(",
          "def test_not_reflect_all_tables(",
          "def test_warning_case_insensitive_table_name(",
          "def test_sqlalchemy_type_mapping(",
          "def test_sqlalchemy_integer_mapping(",
          "def test_sqlalchemy_integer_overload_mapping(",
          "def test_database_uri_string(",
          "def test_pg8000_sqlalchemy_passthrough_error(",
          "def test_query_by_text_obj(",
          "def test_query_by_select_obj(",
          "def test_column_with_percentage(",
          "def test_sql_open_close(",
          "def test_con_string_import_error(",
          "def test_con_unknown_dbapi2_class_does_not_error_without_sql_alchemy_installed(",
          "def test_read_sql_delegate(",
          "def test_get_schema2(",
          "def test_sqlite_type_mapping(",
          "def test_read_sql_parameter(",
          "def test_read_sql_named_parameter(",
          "def test_to_sql_empty(",
          "def test_create_table(",
          "def test_drop_table(",
          "def test_roundtrip(",
          "def test_execute_sql(",
          "def test_read_table(",
          "def test_read_table_columns(",
          "def test_read_table_absent_raises(",
          "def test_default_type_conversion(",
          "def test_bigint(",
          "def test_default_date_load(",
          "def test_datetime_with_timezone(",
          "def test_datetime_with_timezone_roundtrip(",
          "def test_out_of_bounds_datetime(",
          "def test_naive_datetimeindex_roundtrip(",
          "def test_date_parsing(",
          "def test_datetime(",
          "def test_datetime_NaT(",
          "def test_datetime_date(",
          "def test_datetime_time(",
          "def test_mixed_dtype_insert(",
          "def test_nan_numeric(",
          "def test_nan_fullcolumn(",
          "def test_nan_string(",
          "def test_to_sql_save_index(",
          "def test_transactions(",
          "def test_get_schema_create_table(",
          "def test_dtype(",
          "def test_notna_dtype(",
          "def test_double_precision(",
          "def test_connectable_issue_example(",
          "def test_select(",
          "def test_append(",
          "def test_connectable(",
          "def test_to_sql_with_negative_npinf(",
          "def test_temporary_table(",
          "def test_invalid_engine(",
          "def test_options_sqlalchemy(",
          "def test_options_auto(",
          "def test_options_get_engine(",
          "def test_get_engine_auto_error_message(",
          "def test_read_sql_dtype_backend(",
          "def test_read_sql_dtype_backend_table(",
          "def test_read_sql_invalid_dtype_backend_table(",
          "def test_chunksize_empty_dtypes(",
          "def test_read_sql_dtype(",
          "def test_keyword_deprecation(",
          "def test_default_type_conversion(",
          "def test_default_date_load(",
          "def test_bigint_warning(",
          "def test_valueerror_exception(",
          "def test_row_object_is_named_tuple(",
          "def test_read_sql_dtype_backend_table(",
          "def test_read_sql_string_inference(",
          "def test_roundtripping_datetimes(",
          "def test_default_type_conversion(",
          "def test_schema_support(",
          "def test_self_join_date_columns(",
          "def test_read_sql_parameter(",
          "def test_read_sql_named_parameter(",
          "def test_to_sql_empty(",
          "def test_create_and_drop_table(",
          "def test_roundtrip(",
          "def test_execute_sql(",
          "def test_datetime_date(",
          "def test_datetime_time(",
          "def test_to_sql_save_index(",
          "def test_transactions(",
          "def test_dtype(",
          "def test_notna_dtype(",
          "def test_illegal_names(",
          "def test_basic(",
          "def test_write_row_by_row(",
          "def test_execute(",
          "def test_schema(",
          "def test_execute_fail(",
          "def test_execute_closed_connection(",
          "def test_keyword_as_column_names(",
          "def test_onecolumn_of_integer(",
          "def test_if_exists("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_stata.py": [
          "def test_read_empty_dta(",
          "def test_read_empty_dta_with_dtypes(",
          "def test_read_index_col_none(",
          "def test_read_dta1(",
          "def test_read_dta2(",
          "def test_read_dta3(",
          "def test_read_dta4(",
          "def test_read_dta12(",
          "def test_read_dta18(",
          "def test_read_write_dta5(",
          "def test_write_dta6(",
          "def test_read_write_dta10(",
          "def test_stata_doc_examples(",
          "def test_write_preserves_original(",
          "def test_encoding(",
          "def test_read_write_dta11(",
          "def test_read_write_dta12(",
          "def test_read_write_dta13(",
          "def test_read_write_reread_dta14(",
          "def test_read_write_reread_dta15(",
          "def test_timestamp_and_label(",
          "def test_invalid_timestamp(",
          "def test_numeric_column_names(",
          "def test_nan_to_missing_value(",
          "def test_no_index(",
          "def test_string_no_dates(",
          "def test_large_value_conversion(",
          "def test_dates_invalid_column(",
          "def test_105(",
          "def test_value_labels_old_format(",
          "def test_date_export_formats(",
          "def test_write_missing_strings(",
          "def test_bool_uint(",
          "def test_variable_labels(",
          "def test_minimal_size_col(",
          "def test_excessively_long_string(",
          "def test_missing_value_generator(",
          "def test_missing_value_conversion(",
          "def test_big_dates(",
          "def test_dtype_conversion(",
          "def test_drop_column(",
          "def test_categorical_writing(",
          "def test_categorical_warnings_and_errors(",
          "def test_categorical_with_stata_missing_values(",
          "def test_categorical_order(",
          "def test_categorical_sorting(",
          "def test_categorical_ordering(",
          "def test_read_chunks_117(",
          "def test_iterator(",
          "def test_read_chunks_115(",
          "def test_read_chunks_columns(",
          "def test_write_variable_labels(",
          "def test_invalid_variable_labels(",
          "def test_invalid_variable_label_encoding(",
          "def test_write_variable_label_errors(",
          "def test_default_date_conversion(",
          "def test_unsupported_type(",
          "def test_unsupported_datetype(",
          "def test_repeated_column_labels(",
          "def test_stata_111(",
          "def test_out_of_range_double(",
          "def test_out_of_range_float(",
          "def test_inf(",
          "def test_path_pathlib(",
          "def test_pickle_path_localpath(",
          "def test_value_labels_iterator(",
          "def test_set_index(",
          "def test_date_parsing_ignores_format_details(",
          "def test_writer_117(",
          "def test_convert_strl_name_swap(",
          "def test_invalid_date_conversion(",
          "def test_nonfile_writing(",
          "def test_gzip_writing(",
          "def test_unicode_dta_118(",
          "def test_mixed_string_strl(",
          "def test_all_none_exception(",
          "def test_invalid_file_not_written(",
          "def test_strl_latin1(",
          "def test_encoding_latin1_118(",
          "def test_stata_119(",
          "def test_utf8_writer(",
          "def test_writer_118_exceptions(",
          "def test_backward_compat(",
          "def test_direct_read(",
          "def test_statareader_warns_when_used_without_context(",
          "def test_compression(",
          "def test_compression_dict(",
          "def test_chunked_categorical(",
          "def test_chunked_categorical_partial(",
          "def test_iterator_errors(",
          "def test_iterator_value_labels(",
          "def test_precision_loss(",
          "def test_compression_roundtrip(",
          "def test_stata_compression(",
          "def test_non_categorical_value_labels(",
          "def test_non_categorical_value_label_name_conversion(",
          "def test_non_categorical_value_label_convert_categoricals_error(",
          "def test_nullable_support(",
          "def test_empty_frame("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_user_agent.py": [
          "def test_server_and_default_headers(",
          "def test_server_and_custom_headers(",
          "def test_server_and_all_custom_headers(",
          "def test_to_parquet_to_disk_with_storage_options("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odf.py": [
          "def test_read_invalid_types_raises(",
          "def test_read_writer_table(",
          "def test_read_newlines_between_xml_elements_table("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odswriter.py": [
          "def test_write_append_mode_raises(",
          "def test_engine_kwargs(",
          "def test_book_and_sheets_consistent("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_openpyxl.py": [
          "def test_to_excel_styleconverter(",
          "def test_write_cells_merge_styled(",
          "def test_engine_kwargs_write(",
          "def test_engine_kwargs_append_invalid(",
          "def test_engine_kwargs_append_data_only(",
          "def test_write_append_mode(",
          "def test_if_sheet_exists_append_modes(",
          "def test_append_overlay_startrow_startcol(",
          "def test_if_sheet_exists_raises(",
          "def test_to_excel_with_openpyxl_engine(",
          "def test_read_workbook(",
          "def test_read_with_bad_dimension(",
          "def test_append_mode_file(",
          "def test_read_with_empty_trailing_rows(",
          "def test_read_empty_with_blank_row(",
          "def test_book_and_sheets_consistent(",
          "def test_ints_spelled_with_decimals(",
          "def test_read_multiindex_header_no_index_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_readers.py": [
          "def test_engine_used(",
          "def test_engine_kwargs(",
          "def test_usecols_int(",
          "def test_usecols_list(",
          "def test_usecols_str(",
          "def test_usecols_diff_positional_int_columns_order(",
          "def test_usecols_diff_positional_str_columns_order(",
          "def test_read_excel_without_slicing(",
          "def test_usecols_excel_range_str(",
          "def test_usecols_excel_range_str_invalid(",
          "def test_index_col_label_error(",
          "def test_index_col_str(",
          "def test_index_col_empty(",
          "def test_index_col_with_unnamed(",
          "def test_usecols_pass_non_existent_column(",
          "def test_usecols_wrong_type(",
          "def test_excel_stop_iterator(",
          "def test_excel_cell_error_na(",
          "def test_excel_table(",
          "def test_reader_special_dtypes(",
          "def test_reader_converters(",
          "def test_reader_dtype(",
          "def test_reader_dtype_str(",
          "def test_dtype_backend(",
          "def test_dtype_backend_and_dtype(",
          "def test_dtype_backend_string(",
          "def test_dtype_mangle_dup_cols(",
          "def test_reader_spaces(",
          "def test_read_excel_ods_nested_xml(",
          "def test_reading_all_sheets(",
          "def test_reading_multiple_specific_sheets(",
          "def test_reading_all_sheets_with_blank(",
          "def test_read_excel_blank(",
          "def test_read_excel_blank_with_header(",
          "def test_exception_message_includes_sheet_name(",
          "def test_date_conversion_overflow(",
          "def test_sheet_name(",
          "def test_excel_read_buffer(",
          "def test_bad_engine_raises(",
          "def test_bad_sheetname_raises(",
          "def test_missing_file_raises(",
          "def test_corrupt_bytes_raises(",
          "def test_read_from_http_url(",
          "def test_read_from_s3_url(",
          "def test_read_from_s3_object(",
          "def test_read_from_file_url(",
          "def test_read_from_pathlib_path(",
          "def test_read_from_py_localpath(",
          "def test_close_from_py_localpath(",
          "def test_reader_seconds(",
          "def test_read_excel_multiindex(",
          "def test_read_excel_multiindex_blank_after_name(",
          "def test_read_excel_multiindex_header_only(",
          "def test_excel_old_index_format(",
          "def test_read_excel_bool_header_arg(",
          "def test_read_excel_skiprows(",
          "def test_read_excel_skiprows_callable_not_in(",
          "def test_read_excel_nrows(",
          "def test_read_excel_nrows_greater_than_nrows_in_file(",
          "def test_read_excel_nrows_non_integer_parameter(",
          "def test_read_excel_nrows_params(",
          "def test_deprecated_kwargs(",
          "def test_no_header_with_list_index_col(",
          "def test_one_col_noskip_blank_line(",
          "def test_multiheader_two_blank_lines(",
          "def test_trailing_blanks(",
          "def test_ignore_chartsheets_by_str(",
          "def test_ignore_chartsheets_by_int(",
          "def test_euro_decimal_format(",
          "def test_deprecate_bytes_input(",
          "def test_engine_used(",
          "def test_excel_passes_na(",
          "def test_excel_passes_na_filter(",
          "def test_excel_table_sheet_by_index(",
          "def test_sheet_name(",
          "def test_bad_sheetname_raises(",
          "def test_excel_read_buffer(",
          "def test_reader_closes_file(",
          "def test_conflicting_excel_engines(",
          "def test_excel_read_binary(",
          "def test_excel_read_binary_via_read_excel(",
          "def test_read_excel_header_index_out_of_range(",
          "def test_header_with_index_col(",
          "def test_read_datetime_multiindex(",
          "def test_engine_invalid_option(",
          "def test_ignore_chartsheets(",
          "def test_corrupt_files_closed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_style.py": [
          "def test_styler_to_excel_unstyled(",
          "def test_styler_to_excel_basic(",
          "def test_styler_to_excel_basic_indexes(",
          "def test_styler_to_excel_border_style(",
          "def test_styler_custom_converter(",
          "def test_styler_to_s3("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_writers.py": [
          "def test_read_one_empty_col_no_header(",
          "def test_read_one_empty_col_with_header(",
          "def test_set_column_names_in_parameter(",
          "def test_creating_and_reading_multiple_sheets(",
          "def test_read_excel_multiindex_empty_level(",
          "def test_excel_multindex_roundtrip(",
          "def test_read_excel_parse_dates(",
          "def test_multiindex_interval_datetimes(",
          "def test_excel_sheet_size(",
          "def test_excel_sheet_by_name_raise(",
          "def test_excel_writer_context_manager(",
          "def test_roundtrip(",
          "def test_mixed(",
          "def test_ts_frame(",
          "def test_basics_with_nan(",
          "def test_int_types(",
          "def test_float_types(",
          "def test_bool_types(",
          "def test_inf_roundtrip(",
          "def test_sheets(",
          "def test_colaliases(",
          "def test_roundtrip_indexlabels(",
          "def test_excel_roundtrip_indexname(",
          "def test_excel_roundtrip_datetime(",
          "def test_excel_date_datetime_format(",
          "def test_to_excel_interval_no_labels(",
          "def test_to_excel_interval_labels(",
          "def test_to_excel_timedelta(",
          "def test_to_excel_periodindex(",
          "def test_to_excel_multiindex(",
          "def test_to_excel_multiindex_nan_label(",
          "def test_to_excel_multiindex_cols(",
          "def test_to_excel_multiindex_dates(",
          "def test_to_excel_multiindex_no_write_index(",
          "def test_to_excel_empty_multiindex(",
          "def test_to_excel_float_format(",
          "def test_to_excel_output_encoding(",
          "def test_to_excel_unicode_filename(",
          "def test_excel_010_hemstring(",
          "def test_duplicated_columns(",
          "def test_swapped_columns(",
          "def test_invalid_columns(",
          "def test_write_subset_columns(",
          "def test_comment_arg(",
          "def test_comment_default(",
          "def test_comment_used(",
          "def test_comment_empty_line(",
          "def test_datetimes(",
          "def test_bytes_io(",
          "def test_engine_kwargs(",
          "def test_write_lists_dict(",
          "def test_render_as_column_name(",
          "def test_true_and_false_value_options(",
          "def test_freeze_panes(",
          "def test_path_path_lib(",
          "def test_path_local_path(",
          "def test_merged_cell_custom_objects(",
          "def test_raise_when_saving_timezones(",
          "def test_excel_duplicate_columns_with_names(",
          "def test_if_sheet_exists_raises(",
          "def test_excel_writer_empty_frame(",
          "def test_to_excel_empty_frame(",
          "def test_ExcelWriter_dispatch(",
          "def test_ExcelWriter_dispatch_raises(",
          "def test_register_writer(",
          "def test_excelfile_fspath(",
          "def test_excelwriter_fspath(",
          "def test_subclass_attr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_xlrd.py": [
          "def test_read_xlrd_book(",
          "def test_read_xlsx_fails(",
          "def test_read_old_xls_files("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_xlsxwriter.py": [
          "def test_column_format(",
          "def test_write_append_mode_raises(",
          "def test_engine_kwargs(",
          "def test_book_and_sheets_consistent("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_console.py": [
          "def test_detect_console_encoding_from_stdout_stdin(",
          "def test_detect_console_encoding_fallback_to_locale(",
          "def test_detect_console_encoding_fallback_to_default("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_css.py": [
          "def test_css_parse_normalisation(",
          "def test_css_parse_invalid(",
          "def test_css_side_shorthands(",
          "def test_css_border_shorthand_sides(",
          "def test_css_border_shorthands(",
          "def test_css_precedence(",
          "def test_css_none_absent(",
          "def test_css_absolute_font_size(",
          "def test_css_relative_font_size("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_eng_formatting.py": [
          "def test_eng_float_formatter(",
          "def test_exponents_with_eng_prefix(",
          "def test_exponents_without_eng_prefix(",
          "def test_rounding(",
          "def test_nan(",
          "def test_inf("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_format.py": [
          "def test_eng_float_formatter(",
          "def test_show_counts(",
          "def test_repr_truncation(",
          "def test_max_colwidth_negative_int_raises(",
          "def test_repr_chop_threshold(",
          "def test_repr_chop_threshold_column_below(",
          "def test_repr_obeys_max_seq_limit(",
          "def test_repr_set(",
          "def test_repr_is_valid_construction_code(",
          "def test_repr_should_return_str(",
          "def test_repr_no_backslash(",
          "def test_expand_frame_repr(",
          "def test_repr_non_interactive(",
          "def test_repr_truncates_terminal_size(",
          "def test_repr_truncates_terminal_size_full(",
          "def test_repr_truncation_column_size(",
          "def test_repr_max_columns_max_rows(",
          "def test_repr_min_rows(",
          "def test_str_max_colwidth(",
          "def test_auto_detect(",
          "def test_to_string_repr_unicode(",
          "def test_east_asian_unicode_false(",
          "def test_east_asian_unicode_true(",
          "def test_to_string_buffer_all_unicode(",
          "def test_to_string_with_col_space(",
          "def test_to_string_with_column_specific_col_space_raises(",
          "def test_to_string_with_column_specific_col_space(",
          "def test_to_string_truncate_indices(",
          "def test_to_string_truncate_multilevel(",
          "def test_truncate_with_different_dtypes(",
          "def test_truncate_with_different_dtypes_multiindex(",
          "def test_datetimelike_frame(",
          "def test_datetimeindex_highprecision(",
          "def test_nonunicode_nonascii_alignment(",
          "def test_unicode_problem_decoding_as_ascii(",
          "def test_string_repr_encoding(",
          "def test_repr_corner(",
          "def test_frame_info_encoding(",
          "def test_wide_repr(",
          "def test_wide_repr_wide_columns(",
          "def test_wide_repr_named(",
          "def test_wide_repr_multiindex(",
          "def test_wide_repr_multiindex_cols(",
          "def test_wide_repr_unicode(",
          "def test_wide_repr_wide_long_columns(",
          "def test_long_series(",
          "def test_index_with_nan(",
          "def test_to_string(",
          "def test_to_string_no_header(",
          "def test_to_string_specified_header(",
          "def test_to_string_no_index(",
          "def test_to_string_line_width_no_index(",
          "def test_to_string_line_width_no_header(",
          "def test_to_string_line_width_no_index_no_header(",
          "def test_to_string_line_width_with_both_index_and_header(",
          "def test_to_string_float_formatting(",
          "def test_to_string_float_format_no_fixed_width(",
          "def test_to_string_small_float_values(",
          "def test_to_string_float_index(",
          "def test_to_string_complex_float_formatting(",
          "def test_to_string_ascii_error(",
          "def test_to_string_int_formatting(",
          "def test_to_string_index_formatter(",
          "def test_to_string_left_justify_cols(",
          "def test_to_string_format_na(",
          "def test_to_string_format_inf(",
          "def test_to_string_decimal(",
          "def test_to_string_line_width(",
          "def test_to_string_header_false(",
          "def test_show_dimensions(",
          "def test_repr_html(",
          "def test_repr_html_mathjax(",
          "def test_repr_html_wide(",
          "def test_repr_html_wide_multiindex_cols(",
          "def test_repr_html_long(",
          "def test_repr_html_float(",
          "def test_repr_html_long_multiindex(",
          "def test_repr_html_long_and_wide(",
          "def test_info_repr(",
          "def test_info_repr_max_cols(",
          "def test_info_repr_html(",
          "def test_fake_qtconsole_repr_html(",
          "def test_pprint_pathological_object(",
          "def test_float_trim_zeros(",
          "def test_repr_str_float_truncation(",
          "def test_repr_float_format_in_object_col(",
          "def test_dict_entries(",
          "def test_categorical_columns(",
          "def test_period(",
          "def test_max_rows_fitted(",
          "def test_no_extra_space(",
          "def test_repr_unicode(",
          "def test_to_string(",
          "def test_freq_name_separation(",
          "def test_to_string_mixed(",
          "def test_to_string_float_na_spacing(",
          "def test_to_string_without_index(",
          "def test_unicode_name_in_footer(",
          "def test_east_asian_unicode_series(",
          "def test_float_trim_zeros(",
          "def test_datetimeindex(",
          "def test_datetimeindex_highprecision(",
          "def test_timedelta64(",
          "def test_mixed_datetime64(",
          "def test_period(",
          "def test_max_multi_index_display(",
          "def test_consistent_format(",
          "def test_format_explicit(",
          "def test_ncols(",
          "def test_max_rows_eq_one(",
          "def test_truncate_ndots(",
          "def test_show_dimensions(",
          "def test_repr_min_rows(",
          "def test_to_string_name(",
          "def test_to_string_dtype(",
          "def test_to_string_length(",
          "def test_to_string_na_rep(",
          "def test_to_string_float_format(",
          "def test_to_string_header(",
          "def test_to_string_multindex_header(",
          "def test_to_string_empty_col(",
          "def test_1d_array(",
          "def test_2d_array(",
          "def test_3d_array(",
          "def test_2d_extension_type(",
          "def test_misc(",
          "def test_format(",
          "def test_output_display_precision_trailing_zeroes(",
          "def test_set_option_precision(",
          "def test_output_significant_digits(",
          "def test_too_long(",
          "def test_none(",
          "def test_sub_day(",
          "def test_long(",
          "def test_all(",
          "def test_days(",
          "def test_days_neg(",
          "def test_subdays(",
          "def test_subdays_neg(",
          "def test_zero(",
          "def test_mixed(",
          "def test_dates(",
          "def test_date_nanos(",
          "def test_dates_display(",
          "def test_datetime64formatter_yearmonth(",
          "def test_datetime64formatter_hoursecond(",
          "def test_datetime64formatter_tz_ms(",
          "def test_repr(",
          "def test_str(",
          "def test_period_format_and_strftime_default(",
          "def test_period_custom(",
          "def test_period_tz(",
          "def test_period_non_ascii_fmt(",
          "def test_period_custom_locale_directive(",
          "def test_datetime(",
          "def test_date(",
          "def test_date_tz(",
          "def test_date_explicit_date_format(",
          "def test_dates(",
          "def test_mixed(",
          "def test_no_tz(",
          "def test_tz_pytz(",
          "def test_tz_dateutil(",
          "def test_nat_representations(",
          "def test_format_percentiles(",
          "def test_error_format_percentiles(",
          "def test_format_percentiles_integer_idx(",
          "def test_repr_html_ipython_config(",
          "def test_filepath_or_buffer_arg(",
          "def test_filepath_or_buffer_bad_arg_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_info.py": [
          "def test_info_empty(",
          "def test_info_categorical_column_smoke_test(",
          "def test_info_smoke_test(",
          "def test_info_default_verbose_selection(",
          "def test_info_verbose_check_header_separator_body(",
          "def test_info_verbose_with_counts_spacing(",
          "def test_info_memory(",
          "def test_info_wide(",
          "def test_info_duplicate_columns_shows_correct_dtypes(",
          "def test_info_shows_column_dtypes(",
          "def test_info_max_cols(",
          "def test_info_memory_usage(",
          "def test_info_memory_usage_deep_not_pypy(",
          "def test_info_memory_usage_deep_pypy(",
          "def test_usage_via_getsizeof(",
          "def test_info_memory_usage_qualified(",
          "def test_info_memory_usage_bug_on_multiindex(",
          "def test_info_categorical(",
          "def test_info_int_columns(",
          "def test_memory_usage_empty_no_warning(",
          "def test_info_compute_numba("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_printing.py": [
          "def test_adjoin(",
          "def test_repr_binary_type(",
          "def test_adjoin(",
          "def test_adjoin_unicode(",
          "def test_justify(",
          "def test_east_asian_len(",
          "def test_ambiguous_width(",
          "def test_publishes(",
          "def test_publishes_not_implemented(",
          "def test_config_on(",
          "def test_config_default_off(",
          "def test_enable_data_resource_formatter(",
          "def test_multiindex_long_element(",
          "def test_ser_df_with_complex_nans("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_series_info.py": [
          "def test_info_categorical_column_just_works(",
          "def test_info_categorical(",
          "def test_info_series(",
          "def test_info_memory(",
          "def test_info_wide(",
          "def test_info_shows_dtypes(",
          "def test_info_memory_usage_deep_not_pypy(",
          "def test_info_memory_usage_deep_pypy(",
          "def test_info_memory_usage_qualified(",
          "def test_info_memory_usage_bug_on_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_csv.py": [
          "def test_to_csv_with_single_column(",
          "def test_to_csv_default_encoding(",
          "def test_to_csv_quotechar(",
          "def test_to_csv_doublequote(",
          "def test_to_csv_escapechar(",
          "def test_csv_to_string(",
          "def test_to_csv_decimal(",
          "def test_to_csv_float_format(",
          "def test_to_csv_na_rep(",
          "def test_to_csv_na_rep_nullable_string(",
          "def test_to_csv_date_format(",
          "def test_to_csv_different_datetime_formats(",
          "def test_to_csv_date_format_in_categorical(",
          "def test_to_csv_float_ea_float_format(",
          "def test_to_csv_float_ea_no_float_format(",
          "def test_to_csv_multi_index(",
          "def test_to_csv_single_level_multi_index(",
          "def test_to_csv_string_array_ascii(",
          "def test_to_csv_string_array_utf8(",
          "def test_to_csv_string_with_lf(",
          "def test_to_csv_string_with_crlf(",
          "def test_to_csv_stdout_file(",
          "def test_to_csv_write_to_open_file(",
          "def test_to_csv_write_to_open_file_with_newline_py3(",
          "def test_to_csv_compression(",
          "def test_to_csv_compression_dict(",
          "def test_to_csv_compression_dict_no_method_raises(",
          "def test_to_csv_zip_arguments(",
          "def test_to_csv_zip_infer_name(",
          "def test_to_csv_na_rep_long_string(",
          "def test_to_csv_timedelta_precision(",
          "def test_na_rep_truncated(",
          "def test_to_csv_errors(",
          "def test_to_csv_binary_handle(",
          "def test_to_csv_encoding_binary_handle(",
          "def test_to_csv_iterative_compression_name(",
          "def test_to_csv_iterative_compression_buffer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_excel.py": [
          "def test_css_to_excel(",
          "def test_css_to_excel_multiple(",
          "def test_css_to_excel_inherited(",
          "def test_css_to_excel_good_colors(",
          "def test_css_to_excel_bad_colors(",
          "def tests_css_named_colors_valid(",
          "def test_css_named_colors_from_mpl_present(",
          "def test_css_excel_cell_precedence(",
          "def test_css_excel_cell_cache("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_html.py": [
          "def test_to_html_with_col_space(",
          "def test_to_html_with_column_specific_col_space_raises(",
          "def test_to_html_with_column_specific_col_space(",
          "def test_to_html_with_empty_string_label(",
          "def test_to_html_unicode(",
          "def test_to_html_encoding(",
          "def test_to_html_decimal(",
          "def test_to_html_escaped(",
          "def test_to_html_multiindex_index_false(",
          "def test_to_html_multiindex_sparsify(",
          "def test_to_html_multiindex_odd_even_truncate(",
          "def test_to_html_formatters(",
          "def test_to_html_regression_GH6098(",
          "def test_to_html_truncate(",
          "def test_html_invalid_formatters_arg_raises(",
          "def test_to_html_truncate_formatter(",
          "def test_to_html_truncate_multi_index(",
          "def test_to_html_border(",
          "def test_to_html(",
          "def test_to_html_empty_dataframe(",
          "def test_to_html_filename(",
          "def test_to_html_with_no_bold(",
          "def test_to_html_columns_arg(",
          "def test_to_html_multiindex(",
          "def test_to_html_justify(",
          "def test_to_html_invalid_justify(",
          "def test_to_html_flat_index_without_name(",
          "def test_to_html_flat_index_with_name(",
          "def test_to_html_multiindex_without_names(",
          "def test_to_html_multiindex_with_names(",
          "def test_to_html_with_classes(",
          "def test_to_html_no_index_max_rows(",
          "def test_to_html_multiindex_max_cols(",
          "def test_to_html_multi_indexes_index_false(",
          "def test_to_html_basic_alignment(",
          "def test_to_html_alignment_with_truncation(",
          "def test_to_html_truncation_index_false_max_rows(",
          "def test_to_html_truncation_index_false_max_cols(",
          "def test_to_html_notebook_has_style(",
          "def test_to_html_with_index_names_false(",
          "def test_to_html_with_id(",
          "def test_to_html_float_format_no_fixed_width(",
          "def test_to_html_render_links(",
          "def test_ignore_display_max_colwidth(",
          "def test_to_html_invalid_classes_type(",
          "def test_to_html_round_column_headers(",
          "def test_to_html_with_col_space_units(",
          "def test_html_repr_min_rows_default(",
          "def test_html_repr_min_rows(",
          "def test_to_html_multilevel(",
          "def test_to_html_na_rep_and_float_format(",
          "def test_to_html_na_rep_non_scalar_data(",
          "def test_to_html_float_format_object_col(",
          "def test_to_html_multiindex_col_with_colspace(",
          "def test_to_html_tuple_col_with_colspace(",
          "def test_to_html_empty_complex_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_latex.py": [
          "def test_to_latex_to_file(",
          "def test_to_latex_to_file_utf8_with_encoding(",
          "def test_to_latex_to_file_utf8_without_encoding(",
          "def test_to_latex_tabular_with_index(",
          "def test_to_latex_tabular_without_index(",
          "def test_to_latex_bad_column_format(",
          "def test_to_latex_column_format_just_works(",
          "def test_to_latex_column_format(",
          "def test_to_latex_float_format_object_col(",
          "def test_to_latex_empty_tabular(",
          "def test_to_latex_series(",
          "def test_to_latex_midrule_location(",
          "def test_to_latex_empty_longtable(",
          "def test_to_latex_longtable_with_index(",
          "def test_to_latex_longtable_without_index(",
          "def test_to_latex_longtable_continued_on_next_page(",
          "def test_to_latex_no_header_with_index(",
          "def test_to_latex_no_header_without_index(",
          "def test_to_latex_specified_header_with_index(",
          "def test_to_latex_specified_header_without_index(",
          "def test_to_latex_number_of_items_in_header_missmatch_raises(",
          "def test_to_latex_decimal(",
          "def test_to_latex_bold_rows(",
          "def test_to_latex_no_bold_rows(",
          "def test_to_latex_caption_only(",
          "def test_to_latex_label_only(",
          "def test_to_latex_caption_and_label(",
          "def test_to_latex_caption_and_shortcaption(",
          "def test_to_latex_caption_and_shortcaption_list_is_ok(",
          "def test_to_latex_caption_shortcaption_and_label(",
          "def test_to_latex_bad_caption_raises(",
          "def test_to_latex_two_chars_caption(",
          "def test_to_latex_longtable_caption_only(",
          "def test_to_latex_longtable_label_only(",
          "def test_to_latex_longtable_caption_and_label(",
          "def test_to_latex_longtable_caption_shortcaption_and_label(",
          "def test_to_latex_escape_false(",
          "def test_to_latex_escape_default(",
          "def test_to_latex_special_escape(",
          "def test_to_latex_escape_special_chars(",
          "def test_to_latex_specified_header_special_chars_without_escape(",
          "def test_to_latex_position(",
          "def test_to_latex_longtable_position(",
          "def test_to_latex_with_formatters(",
          "def test_to_latex_float_format_no_fixed_width_3decimals(",
          "def test_to_latex_float_format_no_fixed_width_integer(",
          "def test_to_latex_na_rep_and_float_format(",
          "def test_to_latex_multindex_header(",
          "def test_to_latex_multiindex_empty_name(",
          "def test_to_latex_multiindex_column_tabular(",
          "def test_to_latex_multiindex_small_tabular(",
          "def test_to_latex_multiindex_tabular(",
          "def test_to_latex_multicolumn_tabular(",
          "def test_to_latex_index_has_name_tabular(",
          "def test_to_latex_groupby_tabular(",
          "def test_to_latex_multiindex_dupe_level(",
          "def test_to_latex_multicolumn_default(",
          "def test_to_latex_multicolumn_false(",
          "def test_to_latex_multirow_true(",
          "def test_to_latex_multicolumnrow_with_multicol_format(",
          "def test_to_latex_multiindex_names(",
          "def test_to_latex_multiindex_nans(",
          "def test_to_latex_non_string_index(",
          "def test_to_latex_multiindex_multirow("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_markdown.py": [
          "def test_simple(",
          "def test_empty_frame(",
          "def test_other_tablefmt(",
          "def test_other_headers(",
          "def test_series(",
          "def test_no_buf(",
          "def test_index(",
          "def test_showindex_disallowed_in_kwargs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_string.py": [
          "def test_repr_embedded_ndarray(",
          "def test_repr_tuples(",
          "def test_to_string_truncate(",
          "def test_format_remove_leading_space_series(",
          "def test_format_remove_leading_space_dataframe(",
          "def test_truncation_no_index(",
          "def test_to_string_unicode_columns(",
          "def test_to_string_utf8_columns(",
          "def test_to_string_unicode_two(",
          "def test_to_string_unicode_three(",
          "def test_to_string_with_formatters(",
          "def test_to_string_with_datetime64_monthformatter(",
          "def test_to_string_with_datetime64_hourformatter(",
          "def test_to_string_with_formatters_unicode(",
          "def test_to_string_complex_number_trims_zeros(",
          "def test_nullable_float_to_string(",
          "def test_nullable_int_to_string(",
          "def test_to_string_na_rep_and_float_format(",
          "def test_to_string_max_rows_zero(",
          "def test_to_string_string_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_bar.py": [
          "def test_align_positive_cases(",
          "def test_align_negative_cases(",
          "def test_align_mixed_cases(",
          "def test_align_axis(",
          "def test_vmin_vmax_clipping(",
          "def test_vmin_vmax_widening(",
          "def test_numerics(",
          "def test_colors_mixed(",
          "def test_bar_align_height(",
          "def test_bar_value_error_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_exceptions.py": [
          "def test_concat_bad_columns(",
          "def test_concat_bad_type(",
          "def test_concat_bad_index_levels("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_format.py": [
          "def test_display_format(",
          "def test_display_format_index(",
          "def test_format_dict(",
          "def test_format_index_dict(",
          "def test_format_string(",
          "def test_format_callable(",
          "def test_format_with_na_rep(",
          "def test_format_index_with_na_rep(",
          "def test_format_non_numeric_na(",
          "def test_format_clear(",
          "def test_format_escape_html(",
          "def test_format_escape_latex_math(",
          "def test_format_escape_na_rep(",
          "def test_format_escape_floats(",
          "def test_format_raises(",
          "def test_format_with_precision(",
          "def test_format_index_level(",
          "def test_format_subset(",
          "def test_format_thousands(",
          "def test_format_decimal(",
          "def test_str_escape_error(",
          "def test_long_int_formatting(",
          "def test_format_options(",
          "def test_precision_zero(",
          "def test_formatter_options_validator(",
          "def test_formatter_options_raises(",
          "def test_1level_multiindex(",
          "def test_boolean_format(",
          "def test_relabel_raise_length(",
          "def test_relabel_index(",
          "def test_relabel_columns(",
          "def test_relabel_roundtrip("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_highlight.py": [
          "def test_highlight_null(",
          "def test_highlight_null_subset(",
          "def test_highlight_minmax_basic(",
          "def test_highlight_minmax_ext(",
          "def test_highlight_minmax_nulls(",
          "def test_highlight_between(",
          "def test_highlight_between_raises(",
          "def test_highlight_between_raises2(",
          "def test_highlight_between_inclusive(",
          "def test_highlight_quantile(",
          "def test_all_highlight_dtypes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py": [
          "def test_html_template_extends_options(",
          "def test_exclude_styles(",
          "def test_w3_html_format(",
          "def test_colspan_w3(",
          "def test_rowspan_w3(",
          "def test_styles(",
          "def test_doctype(",
          "def test_doctype_encoding(",
          "def test_bold_headers_arg(",
          "def test_caption_arg(",
          "def test_block_names(",
          "def test_from_custom_template_table(",
          "def test_from_custom_template_style(",
          "def test_caption_as_sequence(",
          "def test_sticky_basic(",
          "def test_sticky_mi(",
          "def test_sticky_levels(",
          "def test_sticky_raises(",
          "def test_sparse_options(",
          "def test_map_header_cell_ids(",
          "def test_maximums(",
          "def test_replaced_css_class_names(",
          "def test_include_css_style_rules_only_for_visible_cells(",
          "def test_include_css_style_rules_only_for_visible_index_labels(",
          "def test_include_css_style_rules_only_for_visible_column_labels(",
          "def test_hiding_index_columns_multiindex_alignment(",
          "def test_hiding_index_columns_multiindex_trimming(",
          "def test_rendered_links(",
          "def test_multiple_rendered_links(",
          "def test_concat(",
          "def test_concat_recursion(",
          "def test_concat_chain(",
          "def test_concat_combined(",
          "def test_to_html_na_rep_non_scalar_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_matplotlib.py": [
          "def test_function_gradient(",
          "def test_background_gradient_color(",
          "def test_background_gradient_axis(",
          "def test_text_color_threshold(",
          "def test_background_gradient_vmin_vmax(",
          "def test_background_gradient_int64(",
          "def test_background_gradient_gmap_array(",
          "def test_background_gradient_gmap_array_raises(",
          "def test_background_gradient_gmap_dataframe_align(",
          "def test_background_gradient_gmap_series_align(",
          "def test_background_gradient_gmap_wrong_dataframe(",
          "def test_background_gradient_gmap_wrong_series(",
          "def test_background_gradient_nullable_dtypes(",
          "def test_bar_colormap(",
          "def test_bar_color_raises(",
          "def test_pass_colormap_instance("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_non_unique.py": [
          "def test_format_non_unique(",
          "def test_apply_map_non_unique_raises(",
          "def test_table_styles_dict_non_unique_index(",
          "def test_table_styles_dict_non_unique_columns(",
          "def test_tooltips_non_unique_raises(",
          "def test_set_td_classes_non_unique_raises(",
          "def test_hide_columns_non_unique(",
          "def test_latex_non_unique("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_style.py": [
          "def test_mi_styler_sparsify_columns(",
          "def test_mi_styler_sparsify_index(",
          "def test_mi_styler_sparsify_options(",
          "def test_trimming_maximum(",
          "def test_render_trimming_rows(",
          "def test_render_trimming_cols(",
          "def test_render_trimming_mi(",
          "def test_render_empty_mi(",
          "def test_copy(",
          "def test_inherited_copy(",
          "def test_clear(",
          "def test_export(",
          "def test_hide_raises(",
          "def test_hide_index_level(",
          "def test_hide_columns_level(",
          "def test_apply_map_header(",
          "def test_apply_map_header_mi(",
          "def test_apply_map_header_raises(",
          "def test_init_non_pandas(",
          "def test_init_series(",
          "def test_repr_html_ok(",
          "def test_repr_html_mathjax(",
          "def test_update_ctx(",
          "def test_update_ctx_flatten_multi_and_trailing_semi(",
          "def test_render(",
          "def test_multiple_render(",
          "def test_render_empty_dfs(",
          "def test_render_double(",
          "def test_set_properties(",
          "def test_set_properties_subset(",
          "def test_empty_index_name_doesnt_display(",
          "def test_index_name(",
          "def test_numeric_columns(",
          "def test_apply_axis(",
          "def test_apply_series_return(",
          "def test_apply_dataframe_return(",
          "def test_apply_subset(",
          "def test_map_subset(",
          "def test_map_subset_multiindex(",
          "def test_map_subset_multiindex_code(",
          "def test_subset_for_boolean_cols(",
          "def test_empty(",
          "def test_duplicate(",
          "def test_init_with_na_rep(",
          "def test_caption(",
          "def test_uuid(",
          "def test_unique_id(",
          "def test_table_styles(",
          "def test_table_styles_multiple(",
          "def test_table_styles_dict_multiple_selectors(",
          "def test_maybe_convert_css_to_tuples(",
          "def test_maybe_convert_css_to_tuples_err(",
          "def test_table_attributes(",
          "def test_apply_none(",
          "def test_trim(",
          "def test_export(",
          "def test_bad_apply_shape(",
          "def test_apply_bad_return(",
          "def test_apply_bad_labels(",
          "def test_get_level_lengths(",
          "def test_get_level_lengths_un_sorted(",
          "def test_mi_sparse_index_names(",
          "def test_mi_sparse_column_names(",
          "def test_hide_column_headers(",
          "def test_hide_single_index(",
          "def test_hide_multiindex(",
          "def test_hide_columns_single_level(",
          "def test_hide_columns_index_mult_levels(",
          "def test_pipe(",
          "def test_no_cell_ids(",
          "def test_set_data_classes(",
          "def test_set_data_classes_reindex(",
          "def test_chaining_table_styles(",
          "def test_column_and_row_styling(",
          "def test_uuid_len(",
          "def test_uuid_len_raises(",
          "def test_non_reducing_slice(",
          "def test_list_slice(",
          "def test_non_reducing_slice_on_multiindex(",
          "def test_non_reducing_multi_slice_on_multiindex(",
          "def test_hidden_index_names(",
          "def test_hidden_column_names(",
          "def test_caption_raises(",
          "def test_hiding_headers_over_index_no_sparsify(",
          "def test_hiding_headers_over_columns_no_sparsify(",
          "def test_get_level_lengths_mi_hidden(",
          "def test_row_trimming_hide_index(",
          "def test_row_trimming_hide_index_mi(",
          "def test_col_trimming_hide_columns(",
          "def test_no_empty_apply(",
          "def test_output_buffer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_tooltip.py": [
          "def test_tooltip_render(",
          "def test_tooltip_ignored(",
          "def test_tooltip_css_class("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_to_latex.py": [
          "def test_minimal_latex_tabular(",
          "def test_tabular_hrules(",
          "def test_tabular_custom_hrules(",
          "def test_column_format(",
          "def test_siunitx_cols(",
          "def test_position(",
          "def test_label(",
          "def test_position_float_raises(",
          "def test_kwargs_combinations(",
          "def test_custom_table_styles(",
          "def test_cell_styling(",
          "def test_multiindex_columns(",
          "def test_multiindex_row(",
          "def test_multirow_naive(",
          "def test_multiindex_row_and_col(",
          "def test_multicol_naive(",
          "def test_multi_options(",
          "def test_multiindex_columns_hidden(",
          "def test_sparse_options(",
          "def test_hidden_index(",
          "def test_comprehensive(",
          "def test_environment_option(",
          "def test_parse_latex_table_styles(",
          "def test_parse_latex_cell_styles_basic(",
          "def test_parse_latex_cell_styles_braces(",
          "def test_parse_latex_header_span(",
          "def test_parse_latex_table_wrapping(",
          "def test_short_caption(",
          "def test_parse_latex_css_conversion(",
          "def test_parse_latex_css_convert_minimal(",
          "def test_parse_latex_css_conversion_option(",
          "def test_styler_object_after_render(",
          "def test_longtable_comprehensive(",
          "def test_longtable_minimal(",
          "def test_longtable_multiindex_columns(",
          "def test_longtable_caption_label(",
          "def test_apply_map_header_render_mi(",
          "def test_repr_option(",
          "def test_bool_options(",
          "def test_siunitx_basic_headers(",
          "def test_css_convert_apply_index(",
          "def test_hide_index_latex(",
          "def test_latex_hiding_index_columns_multiindex_alignment(",
          "def test_rendered_links(",
          "def test_apply_index_hidden_levels(",
          "def test_clines_validation(",
          "def test_clines_index(",
          "def test_clines_multiindex(",
          "def test_col_format_len(",
          "def test_concat(",
          "def test_concat_recursion(",
          "def test_concat_chain(",
          "def test_empty_clines("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_to_string.py": [
          "def test_basic_string(",
          "def test_string_delimiter(",
          "def test_concat(",
          "def test_concat_recursion(",
          "def test_concat_chain("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_compression.py": [
          "def test_compression_roundtrip(",
          "def test_read_zipped_json(",
          "def test_with_s3_url(",
          "def test_lines_with_compression(",
          "def test_chunksize_with_compression(",
          "def test_write_unsupported_compression_type(",
          "def test_read_unsupported_compression_type(",
          "def test_to_json_compression(",
          "def test_to_json_compression_mode("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_deprecated_kwargs.py": [
          "def test_good_kwargs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_json_table_schema.py": [
          "def test_build_table_schema(",
          "def test_series(",
          "def test_series_unnamed(",
          "def test_multiindex(",
          "def test_as_json_table_type_int_data(",
          "def test_as_json_table_type_float_data(",
          "def test_as_json_table_type_bool_data(",
          "def test_as_json_table_type_date_data(",
          "def test_as_json_table_type_string_data(",
          "def test_as_json_table_type_categorical_data(",
          "def test_as_json_table_type_int_dtypes(",
          "def test_as_json_table_type_float_dtypes(",
          "def test_as_json_table_type_bool_dtypes(",
          "def test_as_json_table_type_date_dtypes(",
          "def test_as_json_table_type_timedelta_dtypes(",
          "def test_as_json_table_type_string_dtypes(",
          "def test_as_json_table_type_categorical_dtypes(",
          "def test_build_series(",
          "def test_read_json_from_to_json_results(",
          "def test_to_json(",
          "def test_to_json_float_index(",
          "def test_to_json_period_index(",
          "def test_to_json_categorical_index(",
          "def test_date_format_raises(",
          "def test_convert_pandas_type_to_json_field_int(",
          "def test_convert_pandas_type_to_json_field_float(",
          "def test_convert_pandas_type_to_json_field_datetime(",
          "def test_convert_pandas_type_to_json_period_range(",
          "def test_convert_pandas_type_to_json_field_categorical(",
          "def test_convert_json_field_to_pandas_type(",
          "def test_convert_json_field_to_pandas_type_raises(",
          "def test_categorical(",
          "def test_set_names_unset(",
          "def test_warns_non_roundtrippable_names(",
          "def test_timestamp_in_columns(",
          "def test_overlapping_names(",
          "def test_mi_falsey_name(",
          "def test_read_json_table_orient(",
          "def test_read_json_table_orient_raises(",
          "def test_read_json_table_period_orient(",
          "def test_read_json_table_timezones_orient(",
          "def test_comprehensive(",
          "def test_multiindex(",
          "def test_empty_frame_roundtrip(",
          "def test_read_json_orient_table_old_schema_version("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_json_table_schema_ext_dtype.py": [
          "def test_build_table_schema(",
          "def test_as_json_table_type_ext_date_array_dtype(",
          "def test_as_json_table_type_ext_date_dtype(",
          "def test_as_json_table_type_ext_decimal_array_dtype(",
          "def test_as_json_table_type_ext_decimal_dtype(",
          "def test_as_json_table_type_ext_string_array_dtype(",
          "def test_as_json_table_type_ext_string_dtype(",
          "def test_as_json_table_type_ext_integer_array_dtype(",
          "def test_as_json_table_type_ext_integer_dtype(",
          "def test_build_date_series(",
          "def test_build_decimal_series(",
          "def test_build_string_series(",
          "def test_build_int64_series(",
          "def test_to_json(",
          "def test_json_ext_dtype_reading_roundtrip(",
          "def test_json_ext_dtype_reading("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_normalize.py": [
          "def max_level_test_input_data(",
          "def test_simple_records(",
          "def test_simple_normalize(",
          "def test_fields_list_type_normalize(",
          "def test_empty_array(",
          "def test_accepted_input(",
          "def test_simple_normalize_with_separator(",
          "def test_normalize_with_multichar_separator(",
          "def test_value_array_record_prefix(",
          "def test_nested_object_record_path(",
          "def test_more_deeply_nested(",
          "def test_shallow_nested(",
          "def test_nested_meta_path_with_nested_record_path(",
          "def test_meta_name_conflict(",
          "def test_meta_parameter_not_modified(",
          "def test_record_prefix(",
          "def test_non_ascii_key(",
          "def test_missing_field(",
          "def test_max_level_with_records_path(",
          "def test_nested_flattening_consistent(",
          "def test_nonetype_record_path(",
          "def test_non_list_record_path_errors(",
          "def test_meta_non_iterable(",
          "def test_generator(",
          "def test_top_column_with_leading_underscore(",
          "def test_flat_stays_flat(",
          "def test_one_level_deep_flattens(",
          "def test_nested_flattens(",
          "def test_json_normalize_errors(",
          "def test_missing_meta(",
          "def test_missing_nested_meta(",
          "def test_missing_meta_multilevel_record_path_errors_raise(",
          "def test_missing_meta_multilevel_record_path_errors_ignore(",
          "def test_donot_drop_nonevalues(",
          "def test_nonetype_top_level_bottom_level(",
          "def test_nonetype_multiple_levels(",
          "def test_with_max_level(",
          "def test_with_large_max_level(",
          "def test_series_non_zero_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_pandas.py": [
          "def test_literal_json_deprecation(",
          "def test_frame_double_encoded_labels(",
          "def test_frame_non_unique_index(",
          "def test_frame_non_unique_index_raises(",
          "def test_frame_non_unique_columns(",
          "def test_frame_non_unique_columns_raises(",
          "def test_frame_default_orient(",
          "def test_roundtrip_simple(",
          "def test_roundtrip_intframe(",
          "def test_roundtrip_str_axes(",
          "def test_roundtrip_categorical(",
          "def test_roundtrip_empty(",
          "def test_roundtrip_timestamp(",
          "def test_roundtrip_mixed(",
          "def test_roundtrip_multiindex(",
          "def test_frame_from_json_bad_data_raises(",
          "def test_frame_from_json_missing_data(",
          "def test_frame_read_json_dtype_missing_value(",
          "def test_frame_infinity(",
          "def test_frame_to_json_float_precision(",
          "def test_frame_to_json_except(",
          "def test_frame_empty(",
          "def test_frame_empty_to_json(",
          "def test_frame_empty_mixedtype(",
          "def test_frame_mixedtype_orient(",
          "def test_v12_compat(",
          "def test_blocks_compat_GH9037(",
          "def test_frame_nonprintable_bytes(",
          "def test_label_overflow(",
          "def test_series_non_unique_index(",
          "def test_series_default_orient(",
          "def test_series_roundtrip_simple(",
          "def test_series_roundtrip_object(",
          "def test_series_roundtrip_empty(",
          "def test_series_roundtrip_timeseries(",
          "def test_series_roundtrip_numeric(",
          "def test_series_to_json_except(",
          "def test_series_from_json_precise_float(",
          "def test_series_with_dtype(",
          "def test_series_with_dtype_datetime(",
          "def test_frame_from_json_precise_float(",
          "def test_typ(",
          "def test_reconstruction_index(",
          "def test_path(",
          "def test_axis_dates(",
          "def test_convert_dates(",
          "def test_date_index_and_values(",
          "def test_convert_dates_infer(",
          "def test_date_format_frame(",
          "def test_date_format_frame_raises(",
          "def test_date_format_series(",
          "def test_date_format_series_raises(",
          "def test_date_unit(",
          "def test_iso_non_nano_datetimes(",
          "def test_weird_nested_json(",
          "def test_doc_example(",
          "def test_round_trip_exception(",
          "def test_url(",
          "def test_timedelta(",
          "def test_timedelta2(",
          "def test_mixed_timedelta_datetime(",
          "def test_timedelta_to_json(",
          "def test_default_handler(",
          "def test_default_handler_indirect(",
          "def test_default_handler_numpy_unsupported_dtype(",
          "def test_default_handler_raises(",
          "def test_categorical(",
          "def test_datetime_tz(",
          "def test_sparse(",
          "def test_tz_is_utc(",
          "def test_tz_is_naive(",
          "def test_tz_range_is_utc(",
          "def test_tz_range_is_naive(",
          "def test_read_inline_jsonl(",
          "def test_read_s3_jsonl(",
          "def test_read_local_jsonl(",
          "def test_read_jsonl_unicode_chars(",
          "def test_to_json_large_numbers(",
          "def test_read_json_large_numbers(",
          "def test_read_json_large_numbers2(",
          "def test_to_jsonl(",
          "def test_latin_encoding(",
          "def test_data_frame_size_after_to_json(",
          "def test_from_json_to_json_table_index_and_columns(",
          "def test_from_json_to_json_table_dtypes(",
          "def test_to_json_from_json_columns_dtypes(",
          "def test_read_json_table_dtype_raises(",
          "def test_read_json_table_empty_axes_dtype(",
          "def test_read_json_table_convert_axes_raises(",
          "def test_index_false_to_json_split(",
          "def test_index_false_to_json_table(",
          "def test_index_false_error_to_json(",
          "def test_index_true_error_to_json(",
          "def test_index_false_from_json_to_json(",
          "def test_read_timezone_information(",
          "def test_read_json_with_url_value(",
          "def test_read_json_with_very_long_file_path(",
          "def test_timedelta_as_label(",
          "def test_tuple_labels(",
          "def test_to_json_indent(",
          "def test_json_indent_all_orients(",
          "def test_json_negative_indent_raises(",
          "def test_emca_262_nan_inf_support(",
          "def test_frame_int_overflow(",
          "def test_json_multiindex(",
          "def test_to_s3(",
          "def test_json_pandas_nulls(",
          "def test_readjson_bool_series(",
          "def test_to_json_multiindex_escape(",
          "def test_to_json_series_of_objects(",
          "def test_complex_data_tojson(",
          "def test_json_uint64(",
          "def test_read_json_dtype_backend(",
          "def test_read_json_nullable_series(",
          "def test_invalid_dtype_backend(",
          "def test_invalid_engine(",
          "def test_pyarrow_engine_lines_false(",
          "def test_json_roundtrip_string_inference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_readlines.py": [
          "def test_read_jsonl(",
          "def test_read_jsonl_engine_pyarrow(",
          "def test_read_datetime(",
          "def test_read_jsonl_unicode_chars(",
          "def test_to_jsonl(",
          "def test_to_jsonl_count_new_lines(",
          "def test_readjson_chunks(",
          "def test_readjson_chunksize_requires_lines(",
          "def test_readjson_chunks_series(",
          "def test_readjson_each_chunk(",
          "def test_readjson_chunks_from_file(",
          "def test_readjson_chunks_closes(",
          "def test_readjson_invalid_chunksize(",
          "def test_readjson_chunks_multiple_empty_lines(",
          "def test_readjson_unicode(",
          "def test_readjson_nrows(",
          "def test_readjson_nrows_chunks(",
          "def test_readjson_nrows_requires_lines(",
          "def test_readjson_lines_chunks_fileurl(",
          "def test_chunksize_is_incremental(",
          "def test_to_json_append_orient(",
          "def test_to_json_append_lines(",
          "def test_to_json_append_mode(",
          "def test_to_json_append_output_consistent_columns(",
          "def test_to_json_append_output_inconsistent_columns(",
          "def test_to_json_append_output_different_columns(",
          "def test_to_json_append_output_different_columns_reordered("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_ujson.py": [
          "def test_encode_decimal(",
          "def test_encode_string_conversion(",
          "def test_double_long_numbers(",
          "def test_encode_non_c_locale(",
          "def test_decimal_decode_test_precise(",
          "def test_encode_double_tiny_exponential(",
          "def test_encode_dict_with_unicode_keys(",
          "def test_encode_double_conversion(",
          "def test_encode_with_decimal(",
          "def test_encode_array_of_nested_arrays(",
          "def test_encode_array_of_doubles(",
          "def test_double_precision(",
          "def test_invalid_double_precision(",
          "def test_encode_string_conversion2(",
          "def test_encode_unicode_conversion(",
          "def test_encode_control_escaping(",
          "def test_encode_unicode_surrogate_pair(",
          "def test_encode_unicode_4bytes_utf8(",
          "def test_encode_unicode_4bytes_utf8highest(",
          "def test_encode_unicode_error(",
          "def test_encode_array_in_array(",
          "def test_encode_num_conversion(",
          "def test_encode_list_conversion(",
          "def test_encode_dict_conversion(",
          "def test_encode_builtin_values_conversion(",
          "def test_encode_datetime_conversion(",
          "def test_encode_date_conversion(",
          "def test_encode_time_conversion_basic(",
          "def test_encode_time_conversion_pytz(",
          "def test_encode_time_conversion_dateutil(",
          "def test_encode_as_null(",
          "def test_datetime_units(",
          "def test_encode_to_utf8(",
          "def test_decode_from_unicode(",
          "def test_encode_recursion_max(",
          "def test_decode_jibberish(",
          "def test_decode_broken_json(",
          "def test_decode_depth_too_big(",
          "def test_decode_bad_string(",
          "def test_decode_broken_json_leak(",
          "def test_decode_invalid_dict(",
          "def test_decode_numeric_int(",
          "def test_encode_null_character(",
          "def test_decode_null_character(",
          "def test_encode_list_long_conversion(",
          "def test_encode_long_conversion(",
          "def test_dumps_ints_larger_than_maxsize(",
          "def test_decode_numeric_int_exp(",
          "def test_loads_non_str_bytes_raises(",
          "def test_decode_number_with_32bit_sign_bit(",
          "def test_encode_big_escape(",
          "def test_decode_big_escape(",
          "def test_to_dict(",
          "def test_default_handler(",
          "def test_encode_object(",
          "def test_ujson__name__(",
          "def test_bool(",
          "def test_bool_array(",
          "def test_int(",
          "def test_int_array(",
          "def test_int_max(",
          "def test_float(",
          "def test_float_array(",
          "def test_float_max(",
          "def test_array_basic(",
          "def test_array_reshaped(",
          "def test_array_list(",
          "def test_array_float(",
          "def test_0d_array(",
          "def test_dataframe(",
          "def test_dataframe_nested(",
          "def test_series(",
          "def test_series_nested(",
          "def test_index(",
          "def test_datetime_index(",
          "def test_decode_invalid_array(",
          "def test_decode_array(",
          "def test_decode_extreme_numbers(",
          "def test_decode_too_extreme_numbers(",
          "def test_decode_with_trailing_whitespaces(",
          "def test_decode_with_trailing_non_whitespaces(",
          "def test_decode_array_with_big_int(",
          "def test_decode_floating_point(",
          "def test_encode_big_set(",
          "def test_encode_empty_set(",
          "def test_encode_set(",
          "def test_encode_timedelta_iso(",
          "def test_encode_periodindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_comment.py": [
          "def test_comment(",
          "def test_line_comment(",
          "def test_comment_skiprows(",
          "def test_comment_header(",
          "def test_comment_skiprows_header(",
          "def test_custom_comment_char(",
          "def test_comment_first_line(",
          "def test_comment_char_in_default_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_compression.py": [
          "def test_zip(",
          "def test_zip_error_multiple_files(",
          "def test_zip_error_no_files(",
          "def test_zip_error_invalid_zip(",
          "def test_compression(",
          "def test_infer_compression(",
          "def test_compression_utf_encoding(",
          "def test_invalid_compression(",
          "def test_compression_tar_archive(",
          "def test_ignore_compression_extension(",
          "def test_writes_tar_gz("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_concatenate_chunks.py": [
          "def test_concatenate_chunks_pyarrow(",
          "def test_concatenate_chunks_pyarrow_strings("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_converters.py": [
          "def test_converters_type_must_be_dict(",
          "def test_converters(",
          "def test_converters_no_implicit_conv(",
          "def test_converters_euro_decimal_format(",
          "def test_converters_corner_with_nans(",
          "def test_converter_index_col_bug(",
          "def test_converter_identity_object(",
          "def test_converter_multi_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_c_parser_only.py": [
          "def test_buffer_overflow(",
          "def test_delim_whitespace_custom_terminator(",
          "def test_dtype_and_names_error(",
          "def test_unsupported_dtype(",
          "def test_precise_conversion(",
          "def test_usecols_dtypes(",
          "def test_disable_bool_parsing(",
          "def test_custom_lineterminator(",
          "def test_parse_ragged_csv(",
          "def test_tokenize_CR_with_quoting(",
          "def test_grow_boundary_at_cap(",
          "def test_empty_header_read(",
          "def test_parse_trim_buffers(",
          "def test_internal_null_byte(",
          "def test_read_nrows_large(",
          "def test_float_precision_round_trip_with_text(",
          "def test_large_difference_in_columns(",
          "def test_data_after_quote(",
          "def test_comment_whitespace_delimited(",
          "def test_file_like_no_next(",
          "def test_buffer_rd_bytes_bad_unicode(",
          "def test_read_tarfile(",
          "def test_bytes_exceed_2gb(",
          "def test_chunk_whitespace_on_boundary(",
          "def test_file_handles_mmap(",
          "def test_file_binary_mode(",
          "def test_unix_style_breaks(",
          "def test_1000_sep_with_decimal(",
          "def test_float_precision_options("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_dialect.py": [
          "def test_dialect(",
          "def test_dialect_str(",
          "def test_invalid_dialect(",
          "def test_dialect_conflict_except_delimiter(",
          "def test_dialect_conflict_delimiter("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_encoding.py": [
          "def test_bytes_io_input(",
          "def test_read_csv_unicode(",
          "def test_utf16_bom_skiprows(",
          "def test_utf16_example(",
          "def test_unicode_encoding(",
          "def test_utf8_bom(",
          "def test_read_csv_utf_aliases(",
          "def test_binary_mode_file_buffers(",
          "def test_encoding_temp_file(",
          "def test_encoding_named_temp_file(",
          "def test_parse_encoded_special_characters(",
          "def test_encoding_memory_map(",
          "def test_chunk_splits_multibyte_char(",
          "def test_readcsv_memmap_utf8(",
          "def test_not_readable("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_header.py": [
          "def test_read_with_bad_header(",
          "def test_negative_header(",
          "def test_negative_multi_index_header(",
          "def test_bool_header_arg(",
          "def test_header_with_index_col(",
          "def test_header_not_first_line(",
          "def test_header_multi_index(",
          "def test_header_multi_index_invalid(",
          "def test_header_multi_index_common_format1(",
          "def test_header_multi_index_common_format2(",
          "def test_header_multi_index_common_format3(",
          "def test_header_multi_index_common_format_malformed1(",
          "def test_header_multi_index_common_format_malformed2(",
          "def test_header_multi_index_common_format_malformed3(",
          "def test_header_multi_index_blank_line(",
          "def test_header_names_backward_compat(",
          "def test_read_only_header_no_rows(",
          "def test_no_header(",
          "def test_non_int_header(",
          "def test_singleton_header(",
          "def test_mangles_multi_index(",
          "def test_multi_index_unnamed(",
          "def test_names_longer_than_header_but_equal_with_data_rows(",
          "def test_read_csv_multiindex_columns(",
          "def test_read_csv_multi_header_length_check(",
          "def test_header_none_and_implicit_index(",
          "def test_header_none_and_implicit_index_in_second_row(",
          "def test_header_none_and_on_bad_lines_skip(",
          "def test_header_missing_rows(",
          "def test_header_multiple_whitespaces(",
          "def test_header_delim_whitespace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_index_col.py": [
          "def test_index_col_named(",
          "def test_index_col_named2(",
          "def test_index_col_is_true(",
          "def test_infer_index_col(",
          "def test_index_col_empty_data(",
          "def test_empty_with_index_col_false(",
          "def test_multi_index_naming(",
          "def test_multi_index_naming_not_all_at_beginning(",
          "def test_no_multi_index_level_names_empty(",
          "def test_header_with_index_col(",
          "def test_index_col_large_csv(",
          "def test_index_col_multiindex_columns_no_data(",
          "def test_index_col_header_no_data(",
          "def test_multiindex_columns_no_data(",
          "def test_multiindex_columns_index_col_with_data(",
          "def test_infer_types_boolean_sum(",
          "def test_specify_dtype_for_index_col(",
          "def test_multiindex_columns_not_leading_index_col("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_mangle_dupes.py": [
          "def test_basic(",
          "def test_basic_names(",
          "def test_basic_names_raise(",
          "def test_thorough_mangle_columns(",
          "def test_thorough_mangle_names(",
          "def test_mangled_unnamed_placeholders(",
          "def test_mangle_dupe_cols_already_exists(",
          "def test_mangle_dupe_cols_already_exists_unnamed_col(",
          "def test_mangle_cols_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_multi_thread.py": [
          "def test_multi_thread_string_io_read_csv(",
          "def test_multi_thread_path_multipart_read_csv("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_na_values.py": [
          "def test_string_nas(",
          "def test_detect_string_na(",
          "def test_non_string_na_values(",
          "def test_default_na_values(",
          "def test_custom_na_values(",
          "def test_bool_na_values(",
          "def test_na_value_dict(",
          "def test_na_value_dict_multi_index(",
          "def test_na_values_keep_default(",
          "def test_no_na_values_no_keep_default(",
          "def test_no_keep_default_na_dict_na_values(",
          "def test_no_keep_default_na_dict_na_scalar_values(",
          "def test_no_keep_default_na_dict_na_values_diff_reprs(",
          "def test_na_values_na_filter_override(",
          "def test_na_trailing_columns(",
          "def test_na_values_scalar(",
          "def test_na_values_dict_aliasing(",
          "def test_na_values_dict_col_index(",
          "def test_na_values_uint64(",
          "def test_empty_na_values_no_default_with_index(",
          "def test_no_na_filter_on_index(",
          "def test_inf_na_values_with_int_index(",
          "def test_na_values_with_dtype_str_and_na_filter(",
          "def test_cast_NA_to_bool_raises_error(",
          "def test_str_nan_dropped(",
          "def test_nan_multi_index(",
          "def test_bool_and_nan_to_bool(",
          "def test_bool_and_nan_to_int(",
          "def test_bool_and_nan_to_float("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_network.py": [
          "def test_compressed_urls(",
          "def test_url_encoding_csv(",
          "def test_parse_public_s3_bucket(",
          "def test_parse_private_s3_bucket(",
          "def test_parse_public_s3n_bucket(",
          "def test_parse_public_s3a_bucket(",
          "def test_parse_public_s3_bucket_nrows(",
          "def test_parse_public_s3_bucket_chunked(",
          "def test_parse_public_s3_bucket_chunked_python(",
          "def test_parse_public_s3_bucket_python(",
          "def test_infer_s3_compression(",
          "def test_parse_public_s3_bucket_nrows_python(",
          "def test_read_s3_fails(",
          "def test_read_s3_fails_private(",
          "def test_write_s3_csv_fails(",
          "def test_write_s3_parquet_fails(",
          "def test_read_csv_handles_boto_s3_object(",
          "def test_read_csv_chunked_download(",
          "def test_read_s3_with_hash_in_key(",
          "def test_read_feather_s3_file_path("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_parse_dates.py": [
          "def test_read_csv_with_custom_date_parser(",
          "def test_read_csv_with_custom_date_parser_parse_dates_false(",
          "def test_separator_date_conflict(",
          "def test_multiple_date_col_custom(",
          "def test_concat_date_col_fail(",
          "def test_multiple_date_col(",
          "def test_date_col_as_index_col(",
          "def test_multiple_date_cols_int_cast(",
          "def test_multiple_date_col_timestamp_parse(",
          "def test_multiple_date_cols_with_header(",
          "def test_multiple_date_col_name_collision(",
          "def test_date_parser_int_bug(",
          "def test_nat_parse(",
          "def test_csv_custom_parser(",
          "def test_parse_dates_implicit_first_col(",
          "def test_parse_dates_string(",
          "def test_yy_format_with_year_first(",
          "def test_parse_dates_column_list(",
          "def test_multi_index_parse_dates(",
          "def test_parse_dates_custom_euro_format(",
          "def test_parse_tz_aware(",
          "def test_multiple_date_cols_index(",
          "def test_multiple_date_cols_chunked(",
          "def test_multiple_date_col_named_index_compat(",
          "def test_multiple_date_col_multiple_index_compat(",
          "def test_read_with_parse_dates_scalar_non_bool(",
          "def test_read_with_parse_dates_invalid_type(",
          "def test_bad_date_parse(",
          "def test_bad_date_parse_with_warning(",
          "def test_parse_dates_empty_string(",
          "def test_parse_dates_infer_datetime_format_warning(",
          "def test_parse_dates_date_parser_and_date_format(",
          "def test_parse_dates_no_convert_thousands(",
          "def test_parse_date_time_multi_level_column_name(",
          "def test_parse_date_time(",
          "def test_parse_date_fields(",
          "def test_parse_date_all_fields(",
          "def test_datetime_fractional_seconds(",
          "def test_generic(",
          "def test_date_parser_resolution_if_not_ns(",
          "def test_parse_date_column_with_empty_string(",
          "def test_parse_date_float(",
          "def test_parse_timezone(",
          "def test_invalid_parse_delimited_date(",
          "def test_parse_delimited_date_swap_no_warning(",
          "def test_parse_delimited_date_swap_with_warning(",
          "def test_parse_multiple_delimited_dates_with_swap_warnings(",
          "def test_hypothesis_delimited_date(",
          "def test_missing_parse_dates_column_raises(",
          "def test_date_parser_and_names(",
          "def test_date_parser_multiindex_columns(",
          "def test_date_parser_multiindex_columns_combine_cols(",
          "def test_date_parser_usecols_thousands(",
          "def test_parse_dates_and_keep_orgin_column(",
          "def test_dayfirst_warnings(",
          "def test_dayfirst_warnings_no_leading_zero(",
          "def test_infer_first_column_as_index(",
          "def test_replace_nans_before_parsing_dates(",
          "def test_parse_dates_and_string_dtype(",
          "def test_parse_dot_separated_dates(",
          "def test_parse_dates_dict_format(",
          "def test_parse_dates_dict_format_two_columns(",
          "def test_parse_dates_dict_format_index(",
          "def test_parse_dates_arrow_engine(",
          "def test_from_csv_with_mixed_offsets("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_python_parser_only.py": [
          "def test_default_separator(",
          "def test_invalid_skipfooter_non_int(",
          "def test_invalid_skipfooter_negative(",
          "def test_sniff_delimiter(",
          "def test_sniff_delimiter_comment(",
          "def test_sniff_delimiter_encoding(",
          "def test_single_line(",
          "def test_skipfooter(",
          "def test_decompression_regex_sep(",
          "def test_read_csv_buglet_4x_multi_index(",
          "def test_read_csv_buglet_4x_multi_index2(",
          "def test_skipfooter_with_decimal(",
          "def test_encoding_non_utf8_multichar_sep(",
          "def test_multi_char_sep_quotes(",
          "def test_none_delimiter(",
          "def test_skipfooter_bad_row(",
          "def test_malformed_skipfooter(",
          "def test_python_engine_file_no_next(",
          "def test_on_bad_lines_callable(",
          "def test_on_bad_lines_callable_write_to_external_list(",
          "def test_on_bad_lines_callable_iterator_true(",
          "def test_on_bad_lines_callable_dont_swallow_errors(",
          "def test_on_bad_lines_callable_not_expected_length(",
          "def test_on_bad_lines_callable_returns_none(",
          "def test_on_bad_lines_index_col_inferred(",
          "def test_index_col_false_and_header_none(",
          "def test_header_int_do_not_infer_multiindex_names_on_different_line(",
          "def test_no_thousand_convert_with_dot_for_non_numeric_cols(",
          "def test_no_thousand_convert_for_non_numeric_cols("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_quoting.py": [
          "def test_bad_quote_char(",
          "def test_bad_quoting(",
          "def test_quote_char_basic(",
          "def test_quote_char_various(",
          "def test_null_quote_char(",
          "def test_quoting_various(",
          "def test_double_quote(",
          "def test_quotechar_unicode(",
          "def test_unbalanced_quoting("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_read_fwf.py": [
          "def test_basic(",
          "def test_colspecs(",
          "def test_widths(",
          "def test_non_space_filler(",
          "def test_over_specified(",
          "def test_under_specified(",
          "def test_read_csv_compat(",
          "def test_bytes_io_input(",
          "def test_fwf_colspecs_is_list_or_tuple(",
          "def test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples(",
          "def test_fwf_colspecs_none(",
          "def test_fwf_colspecs_infer_nrows(",
          "def test_fwf_regression(",
          "def test_fwf_for_uint8(",
          "def test_fwf_comment(",
          "def test_fwf_skip_blank_lines(",
          "def test_fwf_thousands(",
          "def test_bool_header_arg(",
          "def test_full_file(",
          "def test_full_file_with_missing(",
          "def test_full_file_with_spaces(",
          "def test_full_file_with_spaces_and_missing(",
          "def test_messed_up_data(",
          "def test_multiple_delimiters(",
          "def test_variable_width_unicode(",
          "def test_dtype(",
          "def test_skiprows_inference(",
          "def test_skiprows_by_index_inference(",
          "def test_skiprows_inference_empty(",
          "def test_whitespace_preservation(",
          "def test_default_delimiter(",
          "def test_fwf_compression(",
          "def test_binary_mode(",
          "def test_encoding_mmap(",
          "def test_len_colspecs_len_names(",
          "def test_len_colspecs_len_names_with_index_col(",
          "def test_colspecs_with_comment(",
          "def test_skip_rows_and_n_rows(",
          "def test_skiprows_with_iterator(",
          "def test_names_and_infer_colspecs(",
          "def test_widths_and_usecols(",
          "def test_dtype_backend(",
          "def test_invalid_dtype_backend(",
          "def test_url_urlopen("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_skiprows.py": [
          "def test_skip_rows_bug(",
          "def test_deep_skip_rows(",
          "def test_skip_rows_blank(",
          "def test_skip_row_with_newline(",
          "def test_skip_row_with_quote(",
          "def test_skip_row_with_newline_and_quote(",
          "def test_skiprows_lineterminator(",
          "def test_skiprows_infield_quote(",
          "def test_skip_rows_callable(",
          "def test_skip_rows_callable_not_in(",
          "def test_skip_rows_skip_all(",
          "def test_skip_rows_bad_callable(",
          "def test_skip_rows_and_n_rows("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_textreader.py": [
          "def test_file_handle(",
          "def test_file_handle_mmap(",
          "def test_StringIO(",
          "def test_string_factorize(",
          "def test_skipinitialspace(",
          "def test_parse_booleans(",
          "def test_delimit_whitespace(",
          "def test_embedded_newline(",
          "def test_euro_decimal(",
          "def test_integer_thousands(",
          "def test_integer_thousands_alt(",
          "def test_skip_bad_lines(",
          "def test_header_not_enough_lines(",
          "def test_escapechar(",
          "def test_eof_has_eol(",
          "def test_na_substitution(",
          "def test_numpy_string_dtype(",
          "def test_pass_dtype(",
          "def test_usecols(",
          "def test_cr_delimited(",
          "def test_empty_field_eof(",
          "def test_empty_csv_input("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_unsupported.py": [
          "def test_mangle_dupe_cols_false(",
          "def test_c_engine(",
          "def test_python_engine(",
          "def test_python_engine_file_no_iter(",
          "def test_pyarrow_engine(",
          "def test_on_bad_lines_callable_python_only(",
          "def test_close_file_handle_on_invalid_usecols(",
          "def test_invalid_file_inputs(",
          "def test_invalid_dtype_backend("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_upcast.py": [
          "def test_maybe_upcast(",
          "def test_maybe_upcast_no_na(",
          "def test_maybe_upcaste_bool(",
          "def test_maybe_upcaste_bool_no_nan(",
          "def test_maybe_upcaste_all_nan(",
          "def test_maybe_upcast_object("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_chunksize.py": [
          "def test_read_chunksize_with_index(",
          "def test_read_chunksize_bad(",
          "def test_read_chunksize_and_nrows(",
          "def test_read_chunksize_and_nrows_changing_size(",
          "def test_get_chunk_passed_chunksize(",
          "def test_read_chunksize_compat(",
          "def test_read_chunksize_jagged_names(",
          "def test_chunk_begins_with_newline_whitespace(",
          "def test_chunks_have_consistent_numerical_type(",
          "def test_warn_if_chunks_have_mismatched_type(",
          "def test_empty_with_nrows_chunksize(",
          "def test_read_csv_memory_growth_chunksize(",
          "def test_chunksize_with_usecols_second_block_shorter(",
          "def test_chunksize_second_block_shorter("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_common_basic.py": [
          "def test_override_set_noconvert_columns(",
          "def test_read_csv_local(",
          "def test_1000_sep(",
          "def test_unnamed_columns(",
          "def test_csv_mixed_type(",
          "def test_read_csv_low_memory_no_rows_with_index(",
          "def test_read_csv_dataframe(",
          "def test_read_nrows(",
          "def test_read_nrows_bad(",
          "def test_nrows_skipfooter_errors(",
          "def test_missing_trailing_delimiters(",
          "def test_skip_initial_space(",
          "def test_trailing_delimiters(",
          "def test_escapechar(",
          "def test_ignore_leading_whitespace(",
          "def test_uneven_lines_with_usecols(",
          "def test_read_empty_with_usecols(",
          "def test_trailing_spaces(",
          "def test_raise_on_sep_with_delim_whitespace(",
          "def test_read_filepath_or_buffer(",
          "def test_single_char_leading_whitespace(",
          "def test_empty_lines(",
          "def test_whitespace_lines(",
          "def test_whitespace_regex_separator(",
          "def test_sub_character(",
          "def test_filename_with_special_chars(",
          "def test_read_table_same_signature_as_read_csv(",
          "def test_read_table_equivalency_to_read_csv(",
          "def test_read_csv_and_table_sys_setprofile(",
          "def test_first_row_bom(",
          "def test_first_row_bom_unquoted(",
          "def test_blank_lines_between_header_and_data_rows(",
          "def test_no_header_two_extra_columns(",
          "def test_read_csv_names_not_accepting_sets(",
          "def test_read_table_delim_whitespace_default_sep(",
          "def test_read_csv_delim_whitespace_non_default_sep(",
          "def test_read_csv_delimiter_and_sep_no_default(",
          "def test_read_csv_line_break_as_separator(",
          "def test_read_table_delim_whitespace_non_default_sep(",
          "def test_dict_keys_as_names(",
          "def test_encoding_surrogatepass(",
          "def test_malformed_second_line(",
          "def test_short_single_line(",
          "def test_short_multi_line(",
          "def test_read_seek("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_data_list.py": [
          "def test_read_data_list(",
          "def test_reader_list(",
          "def test_reader_list_skiprows(",
          "def test_read_csv_parse_simple_list("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_decimal.py": [
          "def test_1000_sep_with_decimal(",
          "def test_euro_decimal_format("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_file_buffer_url.py": [
          "def test_url(",
          "def test_local_file(",
          "def test_path_path_lib(",
          "def test_path_local_path(",
          "def test_nonexistent_path(",
          "def test_no_permission(",
          "def test_eof_states(",
          "def test_temporary_file(",
          "def test_internal_eof_byte(",
          "def test_internal_eof_byte_to_file(",
          "def test_file_handle_string_io(",
          "def test_file_handles_with_open(",
          "def test_invalid_file_buffer_class(",
          "def test_invalid_file_buffer_mock(",
          "def test_valid_file_buffer_seems_invalid(",
          "def test_read_csv_file_handle(",
          "def test_memory_map_compression(",
          "def test_context_manager(",
          "def test_context_manageri_user_provided(",
          "def test_file_descriptor_leak(",
          "def test_memory_map("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_float.py": [
          "def test_float_parser(",
          "def test_scientific_no_exponent(",
          "def test_very_negative_exponent(",
          "def test_too_many_exponent_digits("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_index.py": [
          "def test_pass_names_with_index(",
          "def test_multi_index_no_level_names(",
          "def test_multi_index_no_level_names_implicit(",
          "def test_multi_index_blank_df(",
          "def test_no_unnamed_index(",
          "def test_read_duplicate_index_explicit(",
          "def test_read_duplicate_index_implicit(",
          "def test_read_csv_no_index_name(",
          "def test_empty_with_index(",
          "def test_empty_with_multi_index(",
          "def test_empty_with_reversed_multi_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_inf.py": [
          "def test_inf_parsing(",
          "def test_infinity_parsing(",
          "def test_read_csv_with_use_inf_as_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_ints.py": [
          "def test_int_conversion(",
          "def test_parse_bool(",
          "def test_parse_integers_above_fp_precision(",
          "def test_integer_overflow_bug(",
          "def test_int64_min_issues(",
          "def test_int64_overflow(",
          "def test_int64_uint64_range(",
          "def test_outside_int64_uint64_range(",
          "def test_numeric_range_too_wide(",
          "def test_integer_precision("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_iterator.py": [
          "def test_iterator(",
          "def test_iterator2(",
          "def test_iterator_stop_on_chunksize(",
          "def test_iterator_skipfooter_errors(",
          "def test_iteration_open_handle("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_read_errors.py": [
          "def test_empty_decimal_marker(",
          "def test_bad_stream_exception(",
          "def test_malformed(",
          "def test_malformed_chunks(",
          "def test_catch_too_many_names(",
          "def test_raise_on_no_columns(",
          "def test_unexpected_keyword_parameter_exception(",
          "def test_suppress_error_output(",
          "def test_error_bad_lines(",
          "def test_warn_bad_lines(",
          "def test_read_csv_wrong_num_columns(",
          "def test_null_byte_char(",
          "def test_open_file(",
          "def test_invalid_on_bad_line(",
          "def test_bad_header_uniform_error(",
          "def test_on_bad_lines_warn_correct_formatting("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_verbose.py": [
          "def test_verbose_read(",
          "def test_verbose_read2("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_categorical.py": [
          "def test_categorical_dtype(",
          "def test_categorical_dtype_single(",
          "def test_categorical_dtype_unsorted(",
          "def test_categorical_dtype_missing(",
          "def test_categorical_dtype_high_cardinality_numeric(",
          "def test_categorical_dtype_utf16(",
          "def test_categorical_dtype_chunksize_infer_categories(",
          "def test_categorical_dtype_chunksize_explicit_categories(",
          "def test_categorical_dtype_latin1(",
          "def test_categorical_category_dtype(",
          "def test_categorical_category_dtype_unsorted(",
          "def test_categorical_coerces_numeric(",
          "def test_categorical_coerces_datetime(",
          "def test_categorical_coerces_timestamp(",
          "def test_categorical_coerces_timedelta(",
          "def test_categorical_dtype_coerces_boolean(",
          "def test_categorical_unexpected_categories("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_dtypes_basic.py": [
          "def test_dtype_all_columns(",
          "def test_dtype_per_column(",
          "def test_invalid_dtype_per_column(",
          "def test_raise_on_passed_int_dtype_with_nas(",
          "def test_dtype_with_converters(",
          "def test_numeric_dtype(",
          "def test_boolean_dtype(",
          "def test_delimiter_with_usecols_and_parse_dates(",
          "def test_decimal_and_exponential(",
          "def test_1000_sep_decimal_float_precision(",
          "def test_skip_whitespace(",
          "def test_true_values_cast_to_bool(",
          "def test_dtype_mangle_dup_cols(",
          "def test_dtype_mangle_dup_cols_single_dtype(",
          "def test_dtype_multi_index(",
          "def test_nullable_int_dtype(",
          "def test_dtypes_defaultdict(",
          "def test_dtypes_defaultdict_mangle_dup_cols(",
          "def test_dtypes_defaultdict_invalid(",
          "def test_dtype_backend(",
          "def test_dtype_backend_and_dtype(",
          "def test_dtype_backend_string(",
          "def test_dtype_backend_ea_dtype_specified(",
          "def test_dtype_backend_pyarrow(",
          "def test_ea_int_avoid_overflow(",
          "def test_string_inference(",
          "def test_dtypes_with_usecols("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_empty.py": [
          "def test_dtype_all_columns_empty(",
          "def test_empty_pass_dtype(",
          "def test_empty_with_index_pass_dtype(",
          "def test_empty_with_multi_index_pass_dtype(",
          "def test_empty_with_mangled_column_pass_dtype_by_names(",
          "def test_empty_with_mangled_column_pass_dtype_by_indexes(",
          "def test_empty_with_dup_column_pass_dtype_by_indexes(",
          "def test_empty_with_dup_column_pass_dtype_by_indexes_raises(",
          "def test_empty_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_parse_dates.py": [
          "def test_usecols_with_parse_dates(",
          "def test_usecols_with_parse_dates2(",
          "def test_usecols_with_parse_dates3(",
          "def test_usecols_with_parse_dates4(",
          "def test_usecols_with_parse_dates_and_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_strings.py": [
          "def test_usecols_with_unicode_strings(",
          "def test_usecols_with_single_byte_unicode_strings(",
          "def test_usecols_with_mixed_encoding_strings(",
          "def test_usecols_with_multi_byte_characters("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_usecols_basic.py": [
          "def test_raise_on_mixed_dtype_usecols(",
          "def test_usecols(",
          "def test_usecols_with_names(",
          "def test_usecols_relative_to_names(",
          "def test_usecols_relative_to_names2(",
          "def test_usecols_name_length_conflict(",
          "def test_usecols_single_string(",
          "def test_usecols_index_col_false(",
          "def test_usecols_index_col_conflict(",
          "def test_usecols_index_col_conflict2(",
          "def test_usecols_implicit_index_col(",
          "def test_usecols_index_col_middle(",
          "def test_usecols_index_col_end(",
          "def test_usecols_regex_sep(",
          "def test_usecols_with_whitespace(",
          "def test_usecols_with_integer_like_header(",
          "def test_empty_usecols(",
          "def test_np_array_usecols(",
          "def test_callable_usecols(",
          "def test_incomplete_first_row(",
          "def test_uneven_length_cols(",
          "def test_raises_on_usecols_names_mismatch(",
          "def test_usecols_subset_names_mismatch_orig_columns(",
          "def test_usecols_indices_out_of_bounds(",
          "def test_usecols_additional_columns(",
          "def test_usecols_additional_columns_integer_columns(",
          "def test_usecols_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_append.py": [
          "def test_append(",
          "def test_append_series(",
          "def test_append_some_nans(",
          "def test_append_all_nans(",
          "def test_append_frame_column_oriented(",
          "def test_append_with_different_block_ordering(",
          "def test_append_with_strings(",
          "def test_append_with_empty_string(",
          "def test_append_with_data_columns(",
          "def test_append_hierarchical(",
          "def test_append_misc(",
          "def test_append_misc_chunksize(",
          "def test_append_misc_empty_frame(",
          "def test_append_raise(",
          "def test_append_with_timedelta(",
          "def test_append_to_multiple(",
          "def test_append_to_multiple_dropna(",
          "def test_append_to_multiple_dropna_false(",
          "def test_append_to_multiple_min_itemsize("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_categorical.py": [
          "def test_categorical(",
          "def test_categorical_conversion(",
          "def test_categorical_nan_only_columns(",
          "def test_convert_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_compat.py": [
          "def test_read_complete(",
          "def test_read_with_start(",
          "def test_read_with_stop(",
          "def test_read_with_startstop("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_complex.py": [
          "def test_complex_fixed(",
          "def test_complex_table(",
          "def test_complex_mixed_fixed(",
          "def test_complex_mixed_table(",
          "def test_complex_across_dimensions_fixed(",
          "def test_complex_across_dimensions(",
          "def test_complex_indexing_error(",
          "def test_complex_series_error(",
          "def test_complex_append("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_errors.py": [
          "def test_pass_spec_to_storer(",
          "def test_table_index_incompatible_dtypes(",
          "def test_unimplemented_dtypes_table_columns(",
          "def test_invalid_terms(",
          "def test_append_with_diff_col_name_types_raises_value_error(",
          "def test_invalid_complib(",
          "def test_to_hdf_multiindex_extension_dtype(",
          "def test_unsuppored_hdf_file_error(",
          "def test_read_hdf_errors(",
          "def test_read_hdf_generic_buffer_errors(",
          "def test_maybe_adjust_name_bad_version_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_file_handling.py": [
          "def test_mode(",
          "def test_default_mode(",
          "def test_reopen_handle(",
          "def test_open_args(",
          "def test_flush(",
          "def test_complibs_default_settings(",
          "def test_complibs_default_settings_override(",
          "def test_complibs(",
          "def test_encoding(",
          "def test_latin_encoding(",
          "def test_multiple_open_close(",
          "def test_fspath("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_keys.py": [
          "def test_keys(",
          "def test_non_pandas_keys(",
          "def test_keys_illegal_include_keyword_value(",
          "def test_keys_ignore_hdf_softlink("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_put.py": [
          "def test_format_type(",
          "def test_format_kwarg_in_constructor(",
          "def test_api_default_format(",
          "def test_put(",
          "def test_put_string_index(",
          "def test_put_compression(",
          "def test_put_compression_blosc(",
          "def test_put_mixed_type(",
          "def test_store_index_types(",
          "def test_column_multiindex(",
          "def test_store_multiindex(",
          "def test_store_periodindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_pytables_missing.py": [
          "def test_pytables_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_read.py": [
          "def test_read_missing_key_close_store(",
          "def test_read_index_error_close_store(",
          "def test_read_missing_key_opened_store(",
          "def test_read_column(",
          "def test_pytables_native_read(",
          "def test_pytables_native2_read(",
          "def test_legacy_table_fixed_format_read_py2(",
          "def test_legacy_table_fixed_format_read_datetime_py2(",
          "def test_legacy_table_read_py2(",
          "def test_read_hdf_open_store(",
          "def test_read_hdf_index_not_view(",
          "def test_read_hdf_iterator(",
          "def test_read_nokey(",
          "def test_read_nokey_table(",
          "def test_read_nokey_empty(",
          "def test_read_from_pathlib_path(",
          "def test_read_from_py_localpath(",
          "def test_read_hdf_series_mode_r(",
          "def test_read_py2_hdf_file_in_py3(",
          "def test_read_infer_string("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_retain_attributes.py": [
          "def test_retain_index_attributes(",
          "def test_retain_index_attributes2("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_round_trip.py": [
          "def test_conv_read_write(",
          "def test_long_strings(",
          "def test_api(",
          "def test_api_append(",
          "def test_api_2(",
          "def test_api_invalid(",
          "def test_get(",
          "def test_put_integer(",
          "def test_table_values_dtypes_roundtrip(",
          "def test_series(",
          "def test_float_index(",
          "def test_tuple_index(",
          "def test_index_types(",
          "def test_timeseries_preepoch(",
          "def test_frame(",
          "def test_empty_series_frame(",
          "def test_empty_series(",
          "def test_can_serialize_dates(",
          "def test_store_hierarchical(",
          "def test_store_mixed(",
          "def test_unicode_index(",
          "def test_unicode_longer_encoded(",
          "def test_store_datetime_mixed(",
          "def test_round_trip_equals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_select.py": [
          "def test_select_columns_in_where(",
          "def test_select_with_dups(",
          "def test_select(",
          "def test_select_dtypes(",
          "def test_select_with_many_inputs(",
          "def test_select_iterator(",
          "def test_select_iterator_complete_8014(",
          "def test_select_iterator_non_complete_8014(",
          "def test_select_iterator_many_empty_frames(",
          "def test_frame_select(",
          "def test_frame_select_complex(",
          "def test_frame_select_complex2(",
          "def test_invalid_filtering(",
          "def test_string_select(",
          "def test_select_as_multiple(",
          "def test_nan_selection_bug_4858(",
          "def test_query_with_nested_special_character(",
          "def test_query_long_float_literal(",
          "def test_query_compare_column_type(",
          "def test_select_empty_where(",
          "def test_select_large_integer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_store.py": [
          "def test_context(",
          "def test_no_track_times(",
          "def test_iter_empty(",
          "def test_repr(",
          "def test_contains(",
          "def test_versioning(",
          "def test_walk(",
          "def test_getattr(",
          "def test_store_dropna(",
          "def test_to_hdf_with_min_itemsize(",
          "def test_to_hdf_errors(",
          "def test_create_table_index(",
          "def test_create_table_index_data_columns_argument(",
          "def test_mi_data_columns(",
          "def test_table_mixed_dtypes(",
          "def test_calendar_roundtrip_issue(",
          "def test_remove(",
          "def test_same_name_scoping(",
          "def test_store_index_name(",
          "def test_store_index_name_numpy_str(",
          "def test_store_series_name(",
          "def test_overwrite_node(",
          "def test_coordinates(",
          "def test_start_stop_table(",
          "def test_start_stop_multiple(",
          "def test_start_stop_fixed(",
          "def test_select_filter_corner(",
          "def test_path_pathlib(",
          "def test_contiguous_mixed_data_table(",
          "def test_path_pathlib_hdfstore(",
          "def test_pickle_path_localpath(",
          "def test_path_localpath_hdfstore(",
          "def test_copy(",
          "def test_duplicate_column_name(",
          "def test_preserve_timedeltaindex_type(",
          "def test_columns_multiindex_modified(",
          "def test_to_hdf_with_object_column_names(",
          "def test_hdfstore_strides(",
          "def test_store_bool_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_subclass.py": [
          "def test_supported_for_subclass_dataframe(",
          "def test_supported_for_subclass_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_timezones.py": [
          "def test_append_with_timezones(",
          "def test_append_with_timezones_as_index(",
          "def test_roundtrip_tz_aware_index(",
          "def test_store_index_name_with_tz(",
          "def test_tseries_select_index_column(",
          "def test_timezones_fixed_format_frame_non_empty(",
          "def test_timezones_fixed_format_empty(",
          "def test_timezones_fixed_format_series_nonempty(",
          "def test_fixed_offset_tz(",
          "def test_store_timezone(",
          "def test_legacy_datetimetz_object(",
          "def test_dst_transitions(",
          "def test_read_with_where_tz_aware_index(",
          "def test_py2_created_with_datetimez("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_time_series.py": [
          "def test_store_datetime_fractional_secs(",
          "def test_tseries_indices_series(",
          "def test_tseries_indices_frame("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_byteswap.py": [
          "def test_int_byteswap(",
          "def test_float_byteswap(",
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas.py": [
          "def test_sas_buffer_format(",
          "def test_sas_read_no_format_or_extension(",
          "def test_sas_archive("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas7bdat.py": [
          "def data_test_ix(",
          "def test_from_file(",
          "def test_from_buffer(",
          "def test_from_iterator(",
          "def test_path_pathlib(",
          "def test_path_localpath(",
          "def test_iterator_loop(",
          "def test_iterator_read_too_much(",
          "def test_encoding_options(",
          "def test_encoding_infer(",
          "def test_productsales(",
          "def test_12659(",
          "def test_airline(",
          "def test_date_time(",
          "def test_compact_numerical_values(",
          "def test_many_columns(",
          "def test_inconsistent_number_of_rows(",
          "def test_zero_variables(",
          "def test_zero_rows(",
          "def test_corrupt_read(",
          "def test_max_sas_date(",
          "def test_max_sas_date_iterator(",
          "def test_null_date(",
          "def test_meta2_page(",
          "def test_rle_rdc_exceptions(",
          "def test_0x40_control_byte(",
          "def test_0x00_control_byte("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_xport.py": [
          "def test1_basic(",
          "def test1_index(",
          "def test1_incremental(",
          "def test2(",
          "def test2_binary(",
          "def test_multiple_types(",
          "def test_truncated_float_support(",
          "def test_cport_header_found_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_to_xml.py": [
          "def test_file_output_str_read(",
          "def test_file_output_bytes_read(",
          "def test_str_output(",
          "def test_wrong_file_path(",
          "def test_index_false(",
          "def test_index_false_rename_row_root(",
          "def test_index_false_with_offset_input_index(",
          "def test_na_elem_output(",
          "def test_na_empty_str_elem_option(",
          "def test_na_empty_elem_option(",
          "def test_attrs_cols_nan_output(",
          "def test_attrs_cols_prefix(",
          "def test_attrs_unknown_column(",
          "def test_attrs_wrong_type(",
          "def test_elems_cols_nan_output(",
          "def test_elems_unknown_column(",
          "def test_elems_wrong_type(",
          "def test_elems_and_attrs_cols(",
          "def test_hierarchical_columns(",
          "def test_hierarchical_attrs_columns(",
          "def test_multi_index(",
          "def test_multi_index_attrs_cols(",
          "def test_default_namespace(",
          "def test_unused_namespaces(",
          "def test_namespace_prefix(",
          "def test_missing_prefix_in_nmsp(",
          "def test_namespace_prefix_and_default(",
          "def test_encoding_option_str(",
          "def test_correct_encoding_file(",
          "def test_wrong_encoding_option_lxml(",
          "def test_misspelled_encoding(",
          "def test_xml_declaration_pretty_print(",
          "def test_no_pretty_print_with_decl(",
          "def test_no_pretty_print_no_decl(",
          "def test_default_parser_no_lxml(",
          "def test_unknown_parser(",
          "def test_stylesheet_file_like(",
          "def test_stylesheet_io(",
          "def test_stylesheet_buffered_reader(",
          "def test_stylesheet_wrong_path(",
          "def test_empty_string_stylesheet(",
          "def test_incorrect_xsl_syntax(",
          "def test_incorrect_xsl_eval(",
          "def test_incorrect_xsl_apply(",
          "def test_stylesheet_with_etree(",
          "def test_style_to_csv(",
          "def test_style_to_string(",
          "def test_style_to_json(",
          "def test_compression_output(",
          "def test_filename_and_suffix_comp(",
          "def test_ea_dtypes(",
          "def test_unsuported_compression(",
          "def test_s3_permission_output("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml.py": [
          "def test_literal_xml_deprecation(",
          "def test_parser_consistency_file(",
          "def test_parser_consistency_url(",
          "def test_file_like(",
          "def test_file_io(",
          "def test_file_buffered_reader_string(",
          "def test_file_buffered_reader_no_xml_declaration(",
          "def test_string_charset(",
          "def test_file_charset(",
          "def test_file_handle_close(",
          "def test_empty_string_lxml(",
          "def test_empty_string_etree(",
          "def test_wrong_file_path(",
          "def test_url(",
          "def test_wrong_url(",
          "def test_whitespace(",
          "def test_empty_xpath_lxml(",
          "def test_bad_xpath_etree(",
          "def test_bad_xpath_lxml(",
          "def test_default_namespace(",
          "def test_prefix_namespace(",
          "def test_consistency_default_namespace(",
          "def test_consistency_prefix_namespace(",
          "def test_missing_prefix_with_default_namespace(",
          "def test_missing_prefix_definition_etree(",
          "def test_missing_prefix_definition_lxml(",
          "def test_none_namespace_prefix(",
          "def test_file_elems_and_attrs(",
          "def test_file_only_attrs(",
          "def test_file_only_elems(",
          "def test_elem_and_attrs_only(",
          "def test_empty_attrs_only(",
          "def test_empty_elems_only(",
          "def test_attribute_centric_xml(",
          "def test_names_option_output(",
          "def test_repeat_names(",
          "def test_repeat_values_new_names(",
          "def test_repeat_elements(",
          "def test_names_option_wrong_length(",
          "def test_names_option_wrong_type(",
          "def test_wrong_encoding(",
          "def test_utf16_encoding(",
          "def test_unknown_encoding(",
          "def test_ascii_encoding(",
          "def test_parser_consistency_with_encoding(",
          "def test_wrong_encoding_for_lxml(",
          "def test_none_encoding_etree(",
          "def test_default_parser_no_lxml(",
          "def test_wrong_parser(",
          "def test_stylesheet_file(",
          "def test_stylesheet_file_like(",
          "def test_stylesheet_io(",
          "def test_stylesheet_buffered_reader(",
          "def test_style_charset(",
          "def test_not_stylesheet(",
          "def test_incorrect_xsl_syntax(",
          "def test_incorrect_xsl_eval(",
          "def test_incorrect_xsl_apply(",
          "def test_wrong_stylesheet(",
          "def test_stylesheet_file_close(",
          "def test_stylesheet_with_etree(",
          "def test_empty_stylesheet(",
          "def test_file_like_iterparse(",
          "def test_file_io_iterparse(",
          "def test_url_path_error(",
          "def test_compression_error(",
          "def test_wrong_dict_type(",
          "def test_wrong_dict_value(",
          "def test_bad_xml(",
          "def test_comment(",
          "def test_dtd(",
          "def test_processing_instruction(",
          "def test_no_result(",
          "def test_empty_data(",
          "def test_online_stylesheet(",
          "def test_compression_read(",
          "def test_wrong_compression(",
          "def test_unsuported_compression(",
          "def test_s3_parser_consistency(",
          "def test_read_xml_nullable_dtypes(",
          "def test_invalid_dtype_backend("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml_dtypes.py": [
          "def test_dtype_single_str(",
          "def test_dtypes_all_str(",
          "def test_dtypes_with_names(",
          "def test_dtype_nullable_int(",
          "def test_dtype_float(",
          "def test_wrong_dtype(",
          "def test_both_dtype_converters(",
          "def test_converters_str(",
          "def test_converters_date(",
          "def test_wrong_converters_type(",
          "def test_callable_func_converters(",
          "def test_callable_str_converters(",
          "def test_parse_dates_column_name(",
          "def test_parse_dates_column_index(",
          "def test_parse_dates_true(",
          "def test_parse_dates_dictionary(",
          "def test_day_first_parse_dates(",
          "def test_wrong_parse_dates_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_hashtable.py": [
          "def test_get_set_contains_len(",
          "def test_get_set_contains_len_mask(",
          "def test_map_keys_to_values(",
          "def test_map_locations(",
          "def test_map_locations_mask(",
          "def test_lookup(",
          "def test_lookup_wrong(",
          "def test_lookup_mask(",
          "def test_unique(",
          "def test_tracemalloc_works(",
          "def test_tracemalloc_for_empty(",
          "def test_get_state(",
          "def test_no_reallocation(",
          "def test_string_hashtable_set_item_signature(",
          "def test_lookup_nan(",
          "def test_add_signed_zeros(",
          "def test_add_different_nans(",
          "def test_lookup_overflow(",
          "def test_vector_resize(",
          "def test_hashtable_large_sizehint(",
          "def test_nan_float(",
          "def test_nan_complex_both(",
          "def test_nan_complex_real(",
          "def test_nan_complex_imag(",
          "def test_nan_in_tuple(",
          "def test_nan_in_nested_tuple(",
          "def test_hash_equal_tuple_with_nans(",
          "def test_get_labels_groupby_for_Int64(",
          "def test_tracemalloc_works_for_StringHashTable(",
          "def test_tracemalloc_for_empty_StringHashTable(",
          "def test_no_reallocation_StringHashTable(",
          "def test_get_set_contains_len(",
          "def test_map_locations(",
          "def test_unique(",
          "def test_unique_for_nan_objects_floats(",
          "def test_unique_for_nan_objects_complex(",
          "def test_unique_for_nan_objects_tuple(",
          "def test_value_count(",
          "def test_value_count_stable(",
          "def test_duplicated_first(",
          "def test_ismember_yes(",
          "def test_ismember_no(",
          "def test_mode(",
          "def test_mode_stable(",
          "def test_modes_with_nans(",
          "def test_unique_label_indices_intp(",
          "def test_unique_label_indices(",
          "def test_value_count(",
          "def test_duplicated_first(",
          "def test_ismember_yes(",
          "def test_ismember_no(",
          "def test_mode(",
          "def test_ismember_tuple_with_nans(",
          "def test_float_complex_int_are_equal_as_objects("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_join.py": [
          "def test_outer_join_indexer(",
          "def test_cython_left_outer_join(",
          "def test_cython_right_outer_join(",
          "def test_cython_inner_join(",
          "def test_left_join_indexer_unique(",
          "def test_left_outer_join_bug(",
          "def test_inner_join_indexer(",
          "def test_outer_join_indexer(",
          "def test_left_join_indexer(",
          "def test_left_join_indexer2(",
          "def test_outer_join_indexer2(",
          "def test_inner_join_indexer2("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_lib.py": [
          "def test_max_len_string_array(",
          "def test_fast_unique_multiple_list_gen_sort(",
          "def test_fast_multiget_timedelta_resos(",
          "def test_maybe_indices_to_slice_left_edge(",
          "def test_maybe_indices_to_slice_left_edge_not_slice_end_steps(",
          "def test_maybe_indices_to_slice_left_edge_not_slice(",
          "def test_maybe_indices_to_slice_right_edge(",
          "def test_maybe_indices_to_slice_right_edge_not_slice(",
          "def test_maybe_indices_to_slice_right_edge_cases(",
          "def test_maybe_indices_to_slice_both_edges(",
          "def test_maybe_indices_to_slice_both_edges_not_slice(",
          "def test_maybe_indices_to_slice_middle(",
          "def test_maybe_indices_to_slice_middle_not_slice(",
          "def test_maybe_booleans_to_slice(",
          "def test_get_reverse_indexer(",
          "def test_is_range_indexer(",
          "def test_is_range_indexer_big_n(",
          "def test_is_range_indexer_not_equal(",
          "def test_is_range_indexer_not_equal_shape(",
          "def test_cache_readonly_preserve_docstrings(",
          "def test_no_default_pickle("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_backend.py": [
          "def test_backend_is_not_module(",
          "def test_backend_is_correct(",
          "def test_backend_can_be_set_in_plot_call(",
          "def test_register_entrypoint(",
          "def test_setting_backend_without_plot_raises(",
          "def test_no_matplotlib_ok(",
          "def test_extra_kinds_ok("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_boxplot_method.py": [
          "def test_stacked_boxplot_set_axis(",
          "def test_boxplot_legacy1(",
          "def test_boxplot_legacy1_series(",
          "def test_boxplot_legacy2(",
          "def test_boxplot_legacy2_with_ax(",
          "def test_boxplot_legacy2_with_ax_return_type(",
          "def test_boxplot_legacy2_with_multi_col(",
          "def test_boxplot_legacy2_by_none(",
          "def test_boxplot_return_type_none(",
          "def test_boxplot_return_type_legacy(",
          "def test_boxplot_return_type_legacy_return_type(",
          "def test_boxplot_axis_limits(",
          "def test_boxplot_axis_limits_two_rows(",
          "def test_boxplot_empty_column(",
          "def test_figsize(",
          "def test_fontsize(",
          "def test_boxplot_numeric_data(",
          "def test_color_kwd(",
          "def test_colors_in_theme(",
          "def test_color_kwd_errors(",
          "def test_specified_props_kwd(",
          "def test_plot_xlabel_ylabel(",
          "def test_boxplot_xlabel_ylabel(",
          "def test_boxplot_group_xlabel_ylabel(",
          "def test_boxplot_group_no_xlabel_ylabel(",
          "def test_boxplot_legacy1(",
          "def test_boxplot_legacy1_return_type(",
          "def test_boxplot_legacy2(",
          "def test_boxplot_legacy2_return_type(",
          "def test_boxplot_legacy3(",
          "def test_grouped_plot_fignums(",
          "def test_grouped_plot_fignums_excluded_col(",
          "def test_grouped_box_return_type(",
          "def test_grouped_box_return_type_groupby(",
          "def test_grouped_box_return_type_arg(",
          "def test_grouped_box_return_type_arg_duplcate_cats(",
          "def test_grouped_box_layout_too_small(",
          "def test_grouped_box_layout_needs_by(",
          "def test_grouped_box_layout_positive_layout(",
          "def test_grouped_box_layout_positive_layout_axes(",
          "def test_grouped_box_layout_visible(",
          "def test_grouped_box_layout_shape(",
          "def test_grouped_box_layout_works(",
          "def test_grouped_box_layout_axes_shape_rows(",
          "def test_grouped_box_layout_axes_shape_cols_groupby(",
          "def test_grouped_box_multiple_axes(",
          "def test_grouped_box_multiple_axes_on_fig(",
          "def test_grouped_box_multiple_axes_ax_error(",
          "def test_fontsize(",
          "def test_groupby_boxplot_subplots_false(",
          "def test_groupby_boxplot_object(",
          "def test_boxplot_multiindex_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_common.py": [
          "def test__check_ticks_props(",
          "def test__gen_two_subplots_with_ax(",
          "def test_colorbar_layout("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_converter.py": [
          "def test_registry_mpl_resets(",
          "def test_timtetonum_accepts_unicode(",
          "def test_dont_register_by_default(",
          "def test_registering_no_warning(",
          "def test_pandas_plots_register(",
          "def test_matplotlib_formatters(",
          "def test_option_no_warning(",
          "def test_registry_resets(",
          "def test_convert_accepts_unicode(",
          "def test_conversion(",
          "def test_conversion_float(",
          "def test_conversion_outofbounds_datetime(",
          "def test_time_formatter(",
          "def test_dateindex_conversion(",
          "def test_resolution(",
          "def test_convert_nested(",
          "def test_convert_accepts_unicode(",
          "def test_conversion(",
          "def test_integer_passthrough(",
          "def test_convert_nested(",
          "def test_format_timedelta_ticks(",
          "def test_call_w_different_view_intervals(",
          "def test_quarterly_finder("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_datetimelike.py": [
          "def test_ts_plot_with_tz(",
          "def test_fontsize_set_correctly(",
          "def test_frame_inferred(",
          "def test_frame_inferred_n_gt_1(",
          "def test_is_error_nozeroindex(",
          "def test_nonnumeric_exclude(",
          "def test_nonnumeric_exclude_error(",
          "def test_tsplot_period(",
          "def test_tsplot_datetime(",
          "def test_tsplot(",
          "def test_both_style_and_color(",
          "def test_high_freq(",
          "def test_get_datevalue(",
          "def test_ts_plot_format_coord(",
          "def test_line_plot_period_series(",
          "def test_line_plot_period_mlt_series(",
          "def test_line_plot_datetime_series(",
          "def test_line_plot_period_frame(",
          "def test_line_plot_period_mlt_frame(",
          "def test_line_plot_datetime_frame(",
          "def test_line_plot_inferred_freq(",
          "def test_fake_inferred_business(",
          "def test_plot_offset_freq(",
          "def test_plot_offset_freq_business(",
          "def test_plot_multiple_inferred_freq(",
          "def test_uhf(",
          "def test_irreg_hf(",
          "def test_irreg_hf_object(",
          "def test_irregular_datetime64_repr_bug(",
          "def test_business_freq(",
          "def test_business_freq_convert(",
          "def test_freq_with_no_period_alias(",
          "def test_nonzero_base(",
          "def test_dataframe(",
          "def test_axis_limits(",
          "def test_get_finder(",
          "def test_finder_daily(",
          "def test_finder_quarterly(",
          "def test_finder_monthly(",
          "def test_finder_monthly_long(",
          "def test_finder_annual(",
          "def test_finder_minutely(",
          "def test_finder_hourly(",
          "def test_gaps(",
          "def test_gaps_irregular(",
          "def test_gaps_non_ts(",
          "def test_gap_upsample(",
          "def test_secondary_y(",
          "def test_secondary_y_yaxis(",
          "def test_secondary_both(",
          "def test_secondary_y_ts(",
          "def test_secondary_y_ts_yaxis(",
          "def test_secondary_y_ts_visible(",
          "def test_secondary_kde(",
          "def test_secondary_bar(",
          "def test_secondary_frame(",
          "def test_secondary_bar_frame(",
          "def test_mixed_freq_regular_first(",
          "def test_mixed_freq_irregular_first(",
          "def test_mixed_freq_regular_first_df(",
          "def test_mixed_freq_irregular_first_df(",
          "def test_mixed_freq_hf_first(",
          "def test_mixed_freq_alignment(",
          "def test_mixed_freq_lf_first(",
          "def test_mixed_freq_lf_first_hourly(",
          "def test_mixed_freq_irreg_period(",
          "def test_mixed_freq_shared_ax(",
          "def test_mixed_freq_shared_ax_twin_x(",
          "def test_mixed_freq_shared_ax_twin_x_irregular_first(",
          "def test_nat_handling(",
          "def test_to_weekly_resampling(",
          "def test_from_weekly_resampling(",
          "def test_from_resampling_area_line_mixed(",
          "def test_from_resampling_area_line_mixed_high_to_low(",
          "def test_mixed_freq_second_millisecond(",
          "def test_mixed_freq_second_millisecond_low_to_high(",
          "def test_irreg_dtypes(",
          "def test_irreg_dtypes_dt64(",
          "def test_time(",
          "def test_time_change_xlim(",
          "def test_time_musec(",
          "def test_secondary_upsample(",
          "def test_secondary_legend(",
          "def test_secondary_legend_right(",
          "def test_secondary_legend_bar(",
          "def test_secondary_legend_bar_right(",
          "def test_secondary_legend_multi_col(",
          "def test_secondary_legend_nonts(",
          "def test_secondary_legend_nonts_multi_col(",
          "def test_format_date_axis(",
          "def test_ax_plot(",
          "def test_mpl_nopandas(",
          "def test_irregular_ts_shared_ax_xlim(",
          "def test_secondary_y_non_ts_xlim(",
          "def test_secondary_y_regular_ts_xlim(",
          "def test_secondary_y_mixed_freq_ts_xlim(",
          "def test_secondary_y_irregular_ts_xlim(",
          "def test_plot_outofbounds_datetime(",
          "def test_format_timedelta_ticks_narrow(",
          "def test_format_timedelta_ticks_wide(",
          "def test_timedelta_plot(",
          "def test_timedelta_long_period(",
          "def test_timedelta_short_period(",
          "def test_hist(",
          "def test_overlapping_datetime(",
          "def test_add_matplotlib_datetime64(",
          "def test_matplotlib_scatter_datetime64(",
          "def test_check_xticks_rot(",
          "def test_check_xticks_rot_irregular(",
          "def test_check_xticks_rot_use_idx(",
          "def test_check_xticks_rot_sharex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_groupby.py": [
          "def test_series_groupby_plotting_nominally_works(",
          "def test_series_groupby_plotting_nominally_works_hist(",
          "def test_series_groupby_plotting_nominally_works_alpha(",
          "def test_plotting_with_float_index_works(",
          "def test_plotting_with_float_index_works_apply(",
          "def test_hist_single_row(",
          "def test_hist_single_row_single_bycol(",
          "def test_plot_submethod_works(",
          "def test_plot_submethod_works_line(",
          "def test_plot_kwargs(",
          "def test_plot_kwargs_scatter(",
          "def test_groupby_hist_frame_with_legend(",
          "def test_groupby_hist_frame_with_legend_raises(",
          "def test_groupby_hist_series_with_legend(",
          "def test_groupby_hist_series_with_legend_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_hist_method.py": [
          "def test_hist_legacy_kwargs(",
          "def test_hist_legacy_kwargs_warning(",
          "def test_hist_legacy_ax(",
          "def test_hist_legacy_ax_and_fig(",
          "def test_hist_legacy_fig(",
          "def test_hist_legacy_multi_ax(",
          "def test_hist_legacy_by_fig_error(",
          "def test_hist_bins_legacy(",
          "def test_hist_layout(",
          "def test_hist_layout_with_by(",
          "def test_hist_layout_with_by_shape(",
          "def test_hist_no_overlap(",
          "def test_hist_by_no_extra_plots(",
          "def test_plot_fails_when_ax_differs_from_figure(",
          "def test_histtype_argument(",
          "def test_hist_with_legend(",
          "def test_hist_with_legend_raises(",
          "def test_hist_kwargs(",
          "def test_hist_kwargs_horizontal(",
          "def test_hist_kwargs_align(",
          "def test_hist_kde(",
          "def test_hist_kde_plot_works(",
          "def test_hist_kde_density_works(",
          "def test_hist_kde_logy(",
          "def test_hist_kde_color_bins(",
          "def test_hist_kde_color(",
          "def test_hist_df_legacy(",
          "def test_hist_df_legacy_layout(",
          "def test_hist_df_legacy_layout2(",
          "def test_hist_df_legacy_layout3(",
          "def test_hist_df_legacy_layout_kwargs(",
          "def test_hist_df_legacy_layout_labelsize_rot(",
          "def test_hist_df_legacy_rectangles(",
          "def test_hist_df_legacy_scale(",
          "def test_hist_df_legacy_external_error(",
          "def test_hist_non_numerical_or_datetime_raises(",
          "def test_hist_layout(",
          "def test_hist_layout_error(",
          "def test_tight_layout(",
          "def test_hist_subplot_xrot(",
          "def test_hist_column_order_unchanged(",
          "def test_histtype_argument(",
          "def test_hist_with_legend(",
          "def test_hist_with_legend_raises(",
          "def test_hist_df_kwargs(",
          "def test_hist_df_with_nonnumerics(",
          "def test_hist_df_with_nonnumerics_no_bins(",
          "def test_hist_secondary_legend(",
          "def test_hist_secondary_secondary(",
          "def test_hist_secondary_primary(",
          "def test_hist_with_nans_and_weights(",
          "def test_grouped_hist_legacy(",
          "def test_grouped_hist_legacy_axes_shape_no_col(",
          "def test_grouped_hist_legacy_single_key(",
          "def test_grouped_hist_legacy_grouped_hist_kwargs(",
          "def test_grouped_hist_legacy_grouped_hist(",
          "def test_grouped_hist_legacy_external_err(",
          "def test_grouped_hist_legacy_figsize_err(",
          "def test_grouped_hist_legacy2(",
          "def test_grouped_hist_layout_error(",
          "def test_grouped_hist_layout_warning(",
          "def test_grouped_hist_layout_figsize(",
          "def test_grouped_hist_layout_by_warning(",
          "def test_grouped_hist_layout_axes(",
          "def test_grouped_hist_multiple_axes(",
          "def test_grouped_hist_multiple_axes_no_cols(",
          "def test_grouped_hist_multiple_axes_error(",
          "def test_axis_share_x(",
          "def test_axis_share_y(",
          "def test_axis_share_xy(",
          "def test_histtype_argument("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_misc.py": [
          "def test_import_error_message(",
          "def test_get_accessor_args(",
          "def test_autocorrelation_plot(",
          "def test_lag_plot(",
          "def test_bootstrap_plot(",
          "def test_scatter_matrix_axis(",
          "def test_scatter_matrix_axis_smaller(",
          "def test_andrews_curves_no_warning(",
          "def test_andrews_curves_linecolors(",
          "def test_andrews_curves_cmap(",
          "def test_andrews_curves_handle(",
          "def test_parallel_coordinates_colors(",
          "def test_parallel_coordinates_cmap(",
          "def test_parallel_coordinates_line_diff(",
          "def test_parallel_coordinates_handles(",
          "def test_parallel_coordinates_with_sorted_labels(",
          "def test_radviz_no_warning(",
          "def test_radviz_color(",
          "def test_radviz_color_cmap(",
          "def test_radviz_colors_handles(",
          "def test_subplot_titles(",
          "def test_subplot_titles_too_much(",
          "def test_subplot_titles_too_little(",
          "def test_subplot_titles_subplots_false(",
          "def test_subplot_titles_numeric_square_layout(",
          "def test_get_standard_colors_random_seed(",
          "def test_get_standard_colors_consistency(",
          "def test_get_standard_colors_default_num_colors(",
          "def test_plot_single_color(",
          "def test_get_standard_colors_no_appending(",
          "def test_dictionary_color(",
          "def test_bar_plot(",
          "def test_barh_plot_labels_mixed_integer_string(",
          "def test_has_externally_shared_axis_x_axis(",
          "def test_has_externally_shared_axis_y_axis(",
          "def test_has_externally_shared_axis_invalid_compare_axis(",
          "def test_externally_shared_axes(",
          "def test_plot_bar_axis_units_timestamp_conversion(",
          "def test_bar_plt_xaxis_intervalrange("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_series.py": [
          "def test_plot(",
          "def test_plot_tick_props(",
          "def test_plot_scales(",
          "def test_plot_ts_bar(",
          "def test_plot_ts_area_stacked(",
          "def test_plot_iseries(",
          "def test_plot_series_kinds(",
          "def test_plot_series_barh(",
          "def test_plot_series_bar_ax(",
          "def test_plot_6951(",
          "def test_plot_figsize_and_title(",
          "def test_dont_modify_rcParams(",
          "def test_ts_line_lim(",
          "def test_ts_area_lim(",
          "def test_ts_area_lim_xcompat(",
          "def test_ts_tz_area_lim_xcompat(",
          "def test_ts_tz_area_lim_xcompat_secondary_y(",
          "def test_area_sharey_dont_overwrite(",
          "def test_label(",
          "def test_label_none(",
          "def test_label_ser_name(",
          "def test_label_ser_name_override(",
          "def test_label_ser_name_override_dont_draw(",
          "def test_boolean(",
          "def test_line_area_nan_series(",
          "def test_line_use_index_false(",
          "def test_line_use_index_false_diff_var(",
          "def test_bar_log(",
          "def test_bar_log_kind_bar(",
          "def test_bar_ignore_index(",
          "def test_bar_user_colors(",
          "def test_rotation_default(",
          "def test_rotation_30(",
          "def test_irregular_datetime(",
          "def test_unsorted_index_xlim(",
          "def test_pie_series(",
          "def test_pie_series_no_label(",
          "def test_pie_series_less_colors_than_elements(",
          "def test_pie_series_labels_and_colors(",
          "def test_pie_series_autopct_and_fontsize(",
          "def test_pie_series_negative_raises(",
          "def test_pie_series_nan(",
          "def test_pie_nan(",
          "def test_df_series_secondary_legend(",
          "def test_df_series_secondary_legend_with_axes(",
          "def test_df_series_secondary_legend_both(",
          "def test_df_series_secondary_legend_both_with_axis(",
          "def test_df_series_secondary_legend_both_with_axis_2(",
          "def test_secondary_logy(",
          "def test_plot_fails_with_dupe_color_and_style(",
          "def test_kde_kwargs(",
          "def test_density_kwargs(",
          "def test_kde_kwargs_check_axes(",
          "def test_kde_missing_vals(",
          "def test_boxplot_series(",
          "def test_kind_kwarg(",
          "def test_kind_attr(",
          "def test_invalid_plot_data(",
          "def test_valid_object_plot(",
          "def test_partially_invalid_plot_data(",
          "def test_invalid_kind(",
          "def test_dup_datetime_index_plot(",
          "def test_errorbar_asymmetrical(",
          "def test_errorbar_plot(",
          "def test_errorbar_plot_yerr_0(",
          "def test_errorbar_plot_ts(",
          "def test_errorbar_plot_invalid_yerr_shape(",
          "def test_errorbar_plot_invalid_yerr(",
          "def test_table_true(",
          "def test_table_self(",
          "def test_series_grid_settings(",
          "def test_standard_colors(",
          "def test_standard_colors_all(",
          "def test_series_plot_color_kwargs(",
          "def test_time_series_plot_color_kwargs(",
          "def test_time_series_plot_color_with_empty_kwargs(",
          "def test_xticklabels(",
          "def test_xtick_barPlot(",
          "def test_custom_business_day_freq(",
          "def test_plot_accessor_updates_on_inplace(",
          "def test_plot_xlim_for_series(",
          "def test_plot_no_rows(",
          "def test_plot_no_numeric_data(",
          "def test_plot_order(",
          "def test_style_single_ok(",
          "def test_xlabel_ylabel_series(",
          "def test_timedelta_index(",
          "def test_series_none_color("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_style.py": [
          "def test_default_colors_named_from_prop_cycle(",
          "def test_default_colors_named_from_prop_cycle_string(",
          "def test_default_colors_named_undefined_prop_cycle(",
          "def test_user_input_color_sequence(",
          "def test_user_input_color_string(",
          "def test_user_input_color_floats(",
          "def test_user_input_named_color_string(",
          "def test_empty_color_raises(",
          "def test_bad_color_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame.py": [
          "def test_plot(",
          "def test_plot_subplots(",
          "def test_plot_subplots_negative_layout(",
          "def test_plot_subplots_use_index(",
          "def test_plot_invalid_arg(",
          "def test_plot_tick_props(",
          "def test_plot_other_args(",
          "def test_plot_visible_ax(",
          "def test_plot_title(",
          "def test_plot_multiindex(",
          "def test_plot_multiindex_unicode(",
          "def test_plot_single_column_bar(",
          "def test_plot_passed_ax(",
          "def test_nullable_int_plot(",
          "def test_integer_array_plot_series(",
          "def test_integer_array_plot_df(",
          "def test_nonnumeric_exclude(",
          "def test_implicit_label(",
          "def test_donot_overwrite_index_name(",
          "def test_plot_xy(",
          "def test_plot_xy_int_cols(",
          "def test_plot_xy_figsize_and_title(",
          "def test_logscales(",
          "def test_invalid_logscale(",
          "def test_xcompat(",
          "def test_xcompat_plot_params(",
          "def test_xcompat_plot_params_x_compat(",
          "def test_xcompat_plot_params_context_manager(",
          "def test_xcompat_plot_period(",
          "def test_period_compat(",
          "def test_unsorted_index(",
          "def test_unsorted_index_lims(",
          "def test_unsorted_index_lims_x_y(",
          "def test_negative_log(",
          "def test_line_area_stacked(",
          "def test_line_area_stacked_sep_df(",
          "def test_line_area_stacked_mixed(",
          "def test_line_area_stacked_positive_idx(",
          "def test_line_area_nan_df(",
          "def test_line_area_nan_df_stacked(",
          "def test_line_area_nan_df_stacked_area(",
          "def test_line_lim(",
          "def test_line_lim_subplots(",
          "def test_area_lim(",
          "def test_area_sharey_dont_overwrite(",
          "def test_bar_linewidth(",
          "def test_bar_linewidth_subplots(",
          "def test_bar_barwidth(",
          "def test_barh_barwidth_subplots(",
          "def test_bar_bottom_left_bottom(",
          "def test_bar_bottom_left_left(",
          "def test_bar_bottom_left_subplots(",
          "def test_bar_nan(",
          "def test_bar_nan_stacked(",
          "def test_bar_categorical(",
          "def test_plot_scatter(",
          "def test_plot_scatter_error(",
          "def test_plot_scatter_shape(",
          "def test_raise_error_on_datetime_time_data(",
          "def test_scatterplot_datetime_data(",
          "def test_scatterplot_object_data(",
          "def test_scatterplot_color_by_categorical(",
          "def test_plot_scatter_with_categorical_data(",
          "def test_plot_scatter_with_c(",
          "def test_plot_scatter_with_c_props(",
          "def test_plot_scatter_with_c_array(",
          "def test_plot_scatter_with_s(",
          "def test_plot_scatter_with_norm(",
          "def test_plot_scatter_without_norm(",
          "def test_plot_bar(",
          "def test_plot_bar_int_col(",
          "def test_plot_bar_ticks(",
          "def test_plot_barh_ticks(",
          "def test_boxplot(",
          "def test_boxplot_series(",
          "def test_boxplot_series_positions(",
          "def test_boxplot_vertical(",
          "def test_boxplot_vertical_subplots(",
          "def test_boxplot_vertical_positions(",
          "def test_boxplot_return_type_invalid(",
          "def test_boxplot_return_type_invalid_type(",
          "def test_kde_df(",
          "def test_kde_df_rot(",
          "def test_kde_df_subplots(",
          "def test_kde_df_logy(",
          "def test_kde_missing_vals(",
          "def test_hist_df(",
          "def test_hist_df_series(",
          "def test_hist_df_series_cumulative_density(",
          "def test_hist_df_series_cumulative(",
          "def test_hist_df_orientation(",
          "def test_hist_weights(",
          "def test_hist_df_coord(",
          "def test_plot_int_columns(",
          "def test_style_by_column(",
          "def test_line_label_none(",
          "def test_specified_props_kwd_plot_box(",
          "def test_unordered_ts(",
          "def test_kind_both_ways(",
          "def test_kind_both_ways_x_y(",
          "def test_all_invalid_plot_data(",
          "def test_partially_invalid_plot_data_numeric(",
          "def test_invalid_kind(",
          "def test_invalid_xy_args(",
          "def test_bad_label(",
          "def test_invalid_xy_args_dup_cols(",
          "def test_y_listlike(",
          "def test_xy_args_integer(",
          "def test_hexbin_basic(",
          "def test_hexbin_basic_subplots(",
          "def test_hexbin_with_c(",
          "def test_hexbin_cmap(",
          "def test_pie_df_err(",
          "def test_pie_df(",
          "def test_pie_df_subplots(",
          "def test_pie_df_labels_colors(",
          "def test_pie_df_nan(",
          "def test_errorbar_plot(",
          "def test_errorbar_plot_bar(",
          "def test_errorbar_plot_yerr_array(",
          "def test_errorbar_plot_column_name(",
          "def test_errorbar_plot_external_valueerror(",
          "def test_errorbar_plot_external_typeerror(",
          "def test_errorbar_plot_different_yerr(",
          "def test_errorbar_plot_different_yerr_xerr(",
          "def test_errorbar_plot_different_yerr_xerr_subplots(",
          "def test_errorbar_plot_iterator(",
          "def test_errorbar_with_integer_column_names(",
          "def test_errorbar_with_partial_columns_kind(",
          "def test_errorbar_with_partial_columns_dti(",
          "def test_errorbar_with_partial_columns_box(",
          "def test_errorbar_timeseries(",
          "def test_errorbar_asymmetrical(",
          "def test_table(",
          "def test_errorbar_scatter(",
          "def test_errorbar_scatter_color(",
          "def test_scatter_unknown_colormap(",
          "def test_sharex_and_ax(",
          "def test_sharex_false_and_ax(",
          "def test_sharey_and_ax(",
          "def test_sharey_and_ax_tight(",
          "def test_memory_leak(",
          "def test_df_gridspec_patterns_vert_horiz(",
          "def test_df_gridspec_patterns_boxed(",
          "def test_df_grid_settings(",
          "def test_plain_axes(",
          "def test_plain_axes_df(",
          "def test_plain_axes_make_axes_locatable(",
          "def test_plain_axes_make_inset_axes(",
          "def test_secondary_axis_font_size(",
          "def test_x_string_values_ticks(",
          "def test_x_multiindex_values_ticks(",
          "def test_xlim_plot_line(",
          "def test_xlim_plot_line_correctly_in_mixed_plot_type(",
          "def test_plot_no_rows(",
          "def test_plot_no_numeric_data(",
          "def test_group_subplot(",
          "def test_group_subplot_series_notimplemented(",
          "def test_group_subplot_multiindex_notimplemented(",
          "def test_group_subplot_nonunique_cols_notimplemented(",
          "def test_group_subplot_bad_input(",
          "def test_group_subplot_invalid_column_name(",
          "def test_group_subplot_duplicated_column(",
          "def test_group_subplot_invalid_kind(",
          "def test_xlabel_ylabel_dataframe_single_plot(",
          "def test_xlabel_ylabel_dataframe_plane_plot(",
          "def test_secondary_y("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_color.py": [
          "def test_mpl2_color_cycle_str(",
          "def test_color_single_series_list(",
          "def test_rgb_tuple_color(",
          "def test_color_empty_string(",
          "def test_color_and_style_arguments(",
          "def test_color_and_marker(",
          "def test_bar_colors(",
          "def test_bar_colors_custom(",
          "def test_bar_colors_cmap(",
          "def test_bar_colors_single_col(",
          "def test_bar_colors_green(",
          "def test_bar_user_colors(",
          "def test_if_scatterplot_colorbar_affects_xaxis_visibility(",
          "def test_if_hexbin_xaxis_label_is_visible(",
          "def test_if_scatterplot_colorbars_are_next_to_parent_axes(",
          "def test_scatter_with_c_column_name_with_colors(",
          "def test_scatter_colors(",
          "def test_scatter_colors_not_raising_warnings(",
          "def test_scatter_colors_default(",
          "def test_scatter_colors_white(",
          "def test_scatter_colorbar_different_cmap(",
          "def test_line_colors(",
          "def test_line_colors_cmap(",
          "def test_line_colors_single_col(",
          "def test_line_colors_single_color(",
          "def test_line_colors_hex(",
          "def test_dont_modify_colors(",
          "def test_line_colors_and_styles_subplots(",
          "def test_line_colors_and_styles_subplots_single_color_str(",
          "def test_line_colors_and_styles_subplots_custom_colors(",
          "def test_line_colors_and_styles_subplots_colormap_hex(",
          "def test_line_colors_and_styles_subplots_colormap_subplot(",
          "def test_line_colors_and_styles_subplots_single_col(",
          "def test_line_colors_and_styles_subplots_single_char(",
          "def test_line_colors_and_styles_subplots_list_styles(",
          "def test_area_colors(",
          "def test_area_colors_poly(",
          "def test_area_colors_stacked_false(",
          "def test_hist_colors(",
          "def test_hist_colors_single_custom(",
          "def test_hist_colors_cmap(",
          "def test_hist_colors_single_col(",
          "def test_hist_colors_single_color(",
          "def test_kde_colors(",
          "def test_kde_colors_cmap(",
          "def test_kde_colors_and_styles_subplots(",
          "def test_kde_colors_and_styles_subplots_single_col_str(",
          "def test_kde_colors_and_styles_subplots_custom_color(",
          "def test_kde_colors_and_styles_subplots_cmap(",
          "def test_kde_colors_and_styles_subplots_single_col(",
          "def test_kde_colors_and_styles_subplots_single_char(",
          "def test_kde_colors_and_styles_subplots_list(",
          "def test_boxplot_colors(",
          "def test_boxplot_colors_dict_colors(",
          "def test_boxplot_colors_default_color(",
          "def test_boxplot_colors_cmap(",
          "def test_boxplot_colors_single(",
          "def test_boxplot_colors_tuple(",
          "def test_boxplot_colors_invalid(",
          "def test_default_color_cycle(",
          "def test_no_color_bar(",
          "def test_mixing_cmap_and_colormap_raises(",
          "def test_passed_bar_colors(",
          "def test_rcParams_bar_colors(",
          "def test_colors_of_columns_with_same_name(",
          "def test_invalid_colormap(",
          "def test_dataframe_none_color("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_groupby.py": [
          "def test_groupby_boxplot_sharey(",
          "def test_groupby_boxplot_sharex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_legend.py": [
          "def test_mixed_yerr(",
          "def test_legend_false(",
          "def test_df_legend_labels(",
          "def test_df_legend_labels_secondary_y(",
          "def test_df_legend_labels_time_series(",
          "def test_df_legend_labels_time_series_scatter(",
          "def test_df_legend_labels_time_series_no_mutate(",
          "def test_missing_marker_multi_plots_on_same_ax(",
          "def test_legend_name(",
          "def test_no_legend(",
          "def test_missing_markers_legend(",
          "def test_missing_markers_legend_using_style("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_subplots.py": [
          "def test_subplots(",
          "def test_subplots_no_share_x(",
          "def test_subplots_no_legend(",
          "def test_subplots_timeseries(",
          "def test_subplots_timeseries_rot(",
          "def test_subplots_timeseries_y_axis(",
          "def test_subplots_timeseries_y_text_error(",
          "def test_subplots_timeseries_y_axis_not_supported(",
          "def test_subplots_layout_multi_column(",
          "def test_subplots_layout_multi_column_error(",
          "def test_subplots_layout_single_column(",
          "def test_subplots_warnings(",
          "def test_subplots_multiple_axes(",
          "def test_subplots_multiple_axes_error(",
          "def test_subplots_multiple_axes_2_dim(",
          "def test_subplots_multiple_axes_single_col(",
          "def test_subplots_ts_share_axes(",
          "def test_subplots_sharex_axes_existing_axes(",
          "def test_subplots_dup_columns(",
          "def test_subplots_dup_columns_secondary_y(",
          "def test_subplots_dup_columns_secondary_y_no_subplot(",
          "def test_bar_log_no_subplots(",
          "def test_bar_log_subplots(",
          "def test_boxplot_subplots_return_type_default(",
          "def test_boxplot_subplots_return_type(",
          "def test_df_subplots_patterns_minorticks(",
          "def test_df_subplots_patterns_minorticks_1st_ax_hidden(",
          "def test_df_subplots_patterns_minorticks_not_shared(",
          "def test_subplots_sharex_false(",
          "def test_subplots_constrained_layout(",
          "def test_xlabel_ylabel_dataframe_subplots(",
          "def test_bar_align_multiple_columns(",
          "def test_bar_align_single_column(",
          "def test_bar_barwidth_position(",
          "def test_bar_barwidth_position_int(",
          "def test_bar_barwidth_position_int_width_1("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_hist_box_by.py": [
          "def test_hist_plot_by_argument(",
          "def test_hist_plot_by_0(",
          "def test_hist_plot_empty_list_string_tuple_by(",
          "def test_hist_plot_layout_with_by(",
          "def test_hist_plot_invalid_layout_with_by_raises(",
          "def test_axis_share_x_with_by(",
          "def test_axis_share_y_with_by(",
          "def test_figure_shape_hist_with_by(",
          "def test_box_plot_by_argument(",
          "def test_box_plot_by_0(",
          "def test_box_plot_with_none_empty_list_by(",
          "def test_box_plot_layout_with_by(",
          "def test_box_plot_invalid_layout_with_by_raises(",
          "def test_figure_shape_hist_with_by("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_reductions.py": [
          "def test_ops(",
          "def test_nanminmax(",
          "def test_nanargminmax(",
          "def test_nanops_empty_object(",
          "def test_argminmax(",
          "def test_same_tz_min_max_axis_1(",
          "def test_numpy_reduction_with_tz_aware_dtype(",
          "def test_nan_int_timedelta_sum(",
          "def test_max_min_range(",
          "def test_minmax_timedelta64(",
          "def test_minmax_timedelta_empty_or_na(",
          "def test_numpy_minmax_timedelta64(",
          "def test_timedelta_ops(",
          "def test_invalid_td64_reductions(",
          "def test_minmax_tz(",
          "def test_minmax_nat_datetime64(",
          "def test_numpy_minmax_integer(",
          "def test_numpy_minmax_range(",
          "def test_numpy_minmax_datetime64(",
          "def test_minmax_period(",
          "def test_minmax_period_empty_nat(",
          "def test_numpy_minmax_period(",
          "def test_min_max_categorical(",
          "def test_sum_inf(",
          "def test_empty(",
          "def test_ops_consistency_on_empty_nullable(",
          "def test_ops_consistency_on_empty(",
          "def test_nansum_buglet(",
          "def test_sum_overflow_int(",
          "def test_sum_overflow_float(",
          "def test_mean_masked_overflow(",
          "def test_var_masked_array(",
          "def test_empty_timeseries_reductions_return_nat(",
          "def test_numpy_argmin(",
          "def test_numpy_argmax(",
          "def test_idxmin_dt64index(",
          "def test_idxmin(",
          "def test_idxmax(",
          "def test_all_any(",
          "def test_numpy_all_any(",
          "def test_all_any_skipna(",
          "def test_all_any_bool_only(",
          "def test_any_all_object_dtype(",
          "def test_any_all_object_dtype_missing(",
          "def test_any_all_nullable_kleene_logic(",
          "def test_any_axis1_bool_only(",
          "def test_any_all_datetimelike(",
          "def test_any_all_pyarrow_string(",
          "def test_timedelta64_analytics(",
          "def test_assert_idxminmax_empty_raises(",
          "def test_idxminmax_object_dtype(",
          "def test_idxminmax_object_frame(",
          "def test_idxminmax_object_tuples(",
          "def test_idxminmax_object_decimals(",
          "def test_argminmax_object_ints(",
          "def test_idxminmax_with_inf(",
          "def test_sum_uint64(",
          "def test_minmax_nat_series(",
          "def test_minmax_nat_dataframe(",
          "def test_min_max(",
          "def test_min_max_series(",
          "def test_min_max_unordered_raises(",
          "def test_min_max_ordered(",
          "def test_min_max_ordered_with_nan_only(",
          "def test_min_max_skipna(",
          "def test_mode_empty(",
          "def test_mode_numerical(",
          "def test_mode_numerical_nan(",
          "def test_mode_str_obj(",
          "def test_mode_mixeddtype(",
          "def test_mode_datetime(",
          "def test_mode_timedelta(",
          "def test_mode_category(",
          "def test_mode_intoverflow(",
          "def test_mode_sortwarning(",
          "def test_mode_boolean_with_na(",
          "def test_single_mode_value_complex(",
          "def test_multimode_complex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_stat_reductions.py": [
          "def test_dt64_mean(",
          "def test_period_mean(",
          "def test_td64_mean(",
          "def test_sum(",
          "def test_mean(",
          "def test_median(",
          "def test_prod(",
          "def test_min(",
          "def test_max(",
          "def test_var_std(",
          "def test_sem(",
          "def test_skew(",
          "def test_kurt(",
          "def test_kurt_corner("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_base.py": [
          "def test_asfreq(",
          "def test_asfreq_fill_value(",
          "def test_resample_interpolate(",
          "def test_raises_on_non_datetimelike_index(",
          "def test_resample_empty_series(",
          "def test_resample_nat_index_series(",
          "def test_resample_count_empty_series(",
          "def test_resample_empty_dataframe(",
          "def test_resample_count_empty_dataframe(",
          "def test_resample_size_empty_dataframe(",
          "def test_resample_empty_dtypes(",
          "def test_apply_to_empty_series(",
          "def test_resampler_is_iterable(",
          "def test_resample_quantile("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_datetime_index.py": [
          "def test_custom_grouper(",
          "def test_custom_grouper_df(",
          "def test_resample_basic(",
          "def test_resample_integerarray(",
          "def test_resample_basic_grouper(",
          "def test_resample_string_kwargs(",
          "def test_resample_how(",
          "def test_resample_how_ohlc(",
          "def test_resample_how_callables(",
          "def test_resample_rounding(",
          "def test_resample_basic_from_daily(",
          "def test_resample_upsampling_picked_but_not_correct(",
          "def test_resample_frame_basic_cy_funcs(",
          "def test_resample_frame_basic_M_A(",
          "def test_resample_frame_basic_kind(",
          "def test_resample_upsample(",
          "def test_resample_how_method(",
          "def test_resample_extra_index_point(",
          "def test_upsample_with_limit(",
          "def test_nearest_upsample_with_limit(",
          "def test_resample_ohlc(",
          "def test_resample_ohlc_result(",
          "def test_resample_ohlc_result_odd_period(",
          "def test_resample_ohlc_dataframe(",
          "def test_resample_dup_index(",
          "def test_resample_reresample(",
          "def test_resample_timestamp_to_period(",
          "def test_ohlc_5min(",
          "def test_downsample_non_unique(",
          "def test_asfreq_non_unique(",
          "def test_resample_axis1(",
          "def test_resample_anchored_ticks(",
          "def test_resample_single_group(",
          "def test_resample_single_group_std(",
          "def test_resample_offset(",
          "def test_resample_origin(",
          "def test_resample_bad_origin(",
          "def test_resample_bad_offset(",
          "def test_resample_monthstart_origin(",
          "def test_resample_origin_prime_freq(",
          "def test_resample_origin_with_tz(",
          "def test_resample_origin_epoch_with_tz_day_vs_24h(",
          "def test_resample_origin_with_day_freq_on_dst(",
          "def test_resample_daily_anchored(",
          "def test_resample_to_period_monthly_buglet(",
          "def test_period_with_agg(",
          "def test_resample_segfault(",
          "def test_resample_dtype_preservation(",
          "def test_resample_dtype_coercion(",
          "def test_weekly_resample_buglet(",
          "def test_monthly_resample_error(",
          "def test_nanosecond_resample_error(",
          "def test_resample_anchored_intraday(",
          "def test_resample_anchored_monthstart(",
          "def test_resample_anchored_multiday(",
          "def test_corner_cases(",
          "def test_corner_cases_period(",
          "def test_corner_cases_date(",
          "def test_anchored_lowercase_buglet(",
          "def test_upsample_apply_functions(",
          "def test_resample_not_monotonic(",
          "def test_resample_median_bug_1688(",
          "def test_how_lambda_functions(",
          "def test_resample_unequal_times(",
          "def test_resample_consistency(",
          "def test_resample_timegrouper(",
          "def test_resample_nunique(",
          "def test_resample_nunique_preserves_column_level_names(",
          "def test_resample_nunique_with_date_gap(",
          "def test_resample_group_info(",
          "def test_resample_size(",
          "def test_resample_across_dst(",
          "def test_groupby_with_dst_time_change(",
          "def test_resample_dst_anchor(",
          "def test_downsample_across_dst(",
          "def test_downsample_across_dst_weekly(",
          "def test_downsample_across_dst_weekly_2(",
          "def test_downsample_dst_at_midnight(",
          "def test_resample_with_nat(",
          "def test_resample_datetime_values(",
          "def test_resample_apply_with_additional_args(",
          "def test_resample_equivalent_offsets(",
          "def test_get_timestamp_range_edges(",
          "def test_resample_apply_product(",
          "def test_resample_calendar_day_with_dst(",
          "def test_resample_aggregate_functions_min_count(",
          "def test_resample_unsigned_int(",
          "def test_long_rule_non_nano(",
          "def test_resample_empty_series_with_tz("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_period_index.py": [
          "def test_asfreq(",
          "def test_asfreq_fill_value(",
          "def test_selection(",
          "def test_annual_upsample_cases(",
          "def test_basic_downsample(",
          "def test_not_subperiod(",
          "def test_basic_upsample(",
          "def test_upsample_with_limit(",
          "def test_annual_upsample(",
          "def test_quarterly_upsample(",
          "def test_monthly_upsample(",
          "def test_resample_basic(",
          "def test_resample_count(",
          "def test_resample_same_freq(",
          "def test_resample_incompat_freq(",
          "def test_with_local_timezone_pytz(",
          "def test_resample_with_pytz(",
          "def test_with_local_timezone_dateutil(",
          "def test_resample_nonexistent_time_bin_edge(",
          "def test_resample_ambiguous_time_bin_edge(",
          "def test_fill_method_and_how_upsample(",
          "def test_weekly_upsample(",
          "def test_resample_to_timestamps(",
          "def test_resample_to_quarterly(",
          "def test_resample_to_quarterly_start_end(",
          "def test_resample_fill_missing(",
          "def test_cant_fill_missing_dups(",
          "def test_resample_5minute(",
          "def test_upsample_daily_business_daily(",
          "def test_resample_irregular_sparse(",
          "def test_resample_weekly_all_na(",
          "def test_resample_tz_localized(",
          "def test_closed_left_corner(",
          "def test_quarterly_resampling(",
          "def test_resample_weekly_bug_1726(",
          "def test_resample_with_dst_time_change(",
          "def test_resample_bms_2752(",
          "def test_monthly_convention_span(",
          "def test_default_right_closed_label(",
          "def test_default_left_closed_label(",
          "def test_all_values_single_bin(",
          "def test_evenly_divisible_with_no_extra_bins(",
          "def test_upsampling_ohlc(",
          "def test_resample_with_nat(",
          "def test_resample_with_only_nat(",
          "def test_resample_with_offset(",
          "def test_get_period_range_edges(",
          "def test_sum_min_count("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resampler_grouper.py": [
          "def test_frame(",
          "def test_tab_complete_ipython6_warning(",
          "def test_deferred_with_groupby(",
          "def test_getitem(",
          "def test_getitem_multiple(",
          "def test_groupby_resample_on_api_with_getitem(",
          "def test_groupby_with_origin(",
          "def test_nearest(",
          "def test_methods(",
          "def test_methods_nunique(",
          "def test_methods_std_var(",
          "def test_apply(",
          "def test_apply_with_mutated_index(",
          "def test_apply_columns_multilevel(",
          "def test_apply_non_naive_index(",
          "def test_resample_groupby_with_label(",
          "def test_consistency_with_window(",
          "def test_median_duplicate_columns(",
          "def test_apply_to_one_column_of_df(",
          "def test_resample_groupby_agg(",
          "def test_resample_groupby_agg_listlike(",
          "def test_empty(",
          "def test_resample_groupby_agg_object_dtype_all_nan(",
          "def test_groupby_resample_with_list_of_keys(",
          "def test_resample_no_index(",
          "def test_resample_no_columns(",
          "def test_groupby_resample_size_all_index_same(",
          "def test_groupby_resample_on_index_with_list_of_keys(",
          "def test_groupby_resample_on_index_with_list_of_keys_multi_columns(",
          "def test_groupby_resample_on_index_with_list_of_keys_missing_column(",
          "def test_groupby_resample_kind("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resample_api.py": [
          "def _test_series(",
          "def test_frame(",
          "def test_str(",
          "def test_api(",
          "def test_groupby_resample_api(",
          "def test_groupby_resample_on_api(",
          "def test_resample_group_keys(",
          "def test_pipe(",
          "def test_getitem(",
          "def test_select_bad_cols(",
          "def test_attribute_access(",
          "def test_api_compat_before_use(",
          "def tests_raises_on_nuisance(",
          "def test_downsample_but_actually_upsampling(",
          "def test_combined_up_downsampling_of_irregular(",
          "def test_transform_series(",
          "def test_transform_frame(",
          "def test_fillna(",
          "def test_apply_without_aggregation(",
          "def test_apply_without_aggregation2(",
          "def test_agg_consistency(",
          "def test_agg_consistency_int_str_column_mix(",
          "def test_agg(",
          "def test_agg_misc(",
          "def test_multi_agg_axis_1_raises(",
          "def test_agg_nested_dicts(",
          "def test_try_aggregate_non_existing_column(",
          "def test_agg_list_like_func_with_args(",
          "def test_selection_api_validation(",
          "def test_agg_with_datetime_index_list_agg_func(",
          "def test_resample_agg_readonly(",
          "def test_end_and_end_day_origin(",
          "def test_frame_downsample_method(",
          "def test_series_downsample_method(",
          "def test_args_kwargs_depr(",
          "def test_df_axis_param_depr(",
          "def test_series_axis_param_depr(",
          "def test_resample_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_timedelta.py": [
          "def test_asfreq_bug(",
          "def test_resample_with_nat(",
          "def test_resample_as_freq_with_subperiod(",
          "def test_resample_with_timedeltas(",
          "def test_resample_single_period_timedelta(",
          "def test_resample_timedelta_idempotency(",
          "def test_resample_offset_with_timedeltaindex(",
          "def test_resample_categorical_data_with_timedeltaindex(",
          "def test_resample_timedelta_values(",
          "def test_resample_timedelta_edge_case(",
          "def test_resample_with_timedelta_yields_no_empty_groups(",
          "def test_resample_quantile_timedelta(",
          "def test_resample_closed_right("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_time_grouper.py": [
          "def test_series(",
          "def test_apply(",
          "def test_count(",
          "def test_numpy_reduction(",
          "def test_apply_iteration(",
          "def test_fails_on_no_datetime_index(",
          "def test_aaa_group_order(",
          "def test_aggregate_normal(",
          "def test_aggregate_nth(",
          "def test_resample_entirely_nat_window(",
          "def test_aggregate_with_nat(",
          "def test_aggregate_with_nat_size(",
          "def test_repr(",
          "def test_upsample_sum(",
          "def test_groupby_resample_interpolate("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_crosstab.py": [
          "def test_crosstab_single(",
          "def test_crosstab_multiple(",
          "def test_crosstab_ndarray(",
          "def test_crosstab_non_aligned(",
          "def test_crosstab_margins(",
          "def test_crosstab_margins_set_margin_name(",
          "def test_crosstab_pass_values(",
          "def test_crosstab_dropna(",
          "def test_crosstab_no_overlap(",
          "def test_margin_dropna(",
          "def test_margin_dropna2(",
          "def test_margin_dropna3(",
          "def test_margin_dropna4(",
          "def test_margin_dropna5(",
          "def test_margin_dropna6(",
          "def test_crosstab_normalize(",
          "def test_crosstab_normalize_arrays(",
          "def test_crosstab_with_empties(",
          "def test_crosstab_errors(",
          "def test_crosstab_with_categorial_columns(",
          "def test_crosstab_with_numpy_size(",
          "def test_crosstab_duplicate_names(",
          "def test_crosstab_tuple_name(",
          "def test_crosstab_both_tuple_names(",
          "def test_crosstab_unsorted_order(",
          "def test_crosstab_normalize_multiple_columns(",
          "def test_margin_normalize(",
          "def test_margin_normalize_multiple_columns(",
          "def test_margin_support_Float(",
          "def test_margin_with_ordered_categorical_column(",
          "def test_categoricals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_cut.py": [
          "def test_simple(",
          "def test_bins(",
          "def test_right(",
          "def test_no_right(",
          "def test_bins_from_interval_index(",
          "def test_bins_from_interval_index_doc_example(",
          "def test_bins_not_overlapping_from_interval_index(",
          "def test_bins_not_monotonic(",
          "def test_bins_monotonic_not_overflowing(",
          "def test_wrong_num_labels(",
          "def test_cut_corner(",
          "def test_cut_not_1d_arg(",
          "def test_int_bins_with_inf(",
          "def test_cut_out_of_range_more(",
          "def test_labels(",
          "def test_cut_pass_series_name_to_factor(",
          "def test_label_precision(",
          "def test_na_handling(",
          "def test_inf_handling(",
          "def test_cut_out_of_bounds(",
          "def test_cut_pass_labels(",
          "def test_cut_pass_labels_compat(",
          "def test_round_frac_just_works(",
          "def test_round_frac(",
          "def test_cut_return_intervals(",
          "def test_series_ret_bins(",
          "def test_cut_duplicates_bin(",
          "def test_single_bin(",
          "def test_cut_read_only(",
          "def test_datetime_bin(",
          "def test_datetime_cut(",
          "def test_datetime_tz_cut(",
          "def test_datetime_nan_error(",
          "def test_datetime_nan_mask(",
          "def test_datetime_cut_roundtrip(",
          "def test_timedelta_cut_roundtrip(",
          "def test_cut_bool_coercion_to_int(",
          "def test_cut_incorrect_labels(",
          "def test_cut_nullable_integer(",
          "def test_cut_non_unique_labels(",
          "def test_cut_unordered_labels(",
          "def test_cut_unordered_with_missing_labels_raises_error(",
          "def test_cut_unordered_with_series_labels(",
          "def test_cut_no_warnings(",
          "def test_cut_with_duplicated_index_lowest_included(",
          "def test_cut_with_nonexact_categorical_indices(",
          "def test_cut_with_timestamp_tuple_labels(",
          "def test_cut_bins_datetime_intervalindex(",
          "def test_cut_with_nullable_int64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_from_dummies.py": [
          "def test_error_wrong_data_type(",
          "def test_error_no_prefix_contains_unassigned(",
          "def test_error_no_prefix_wrong_default_category_type(",
          "def test_error_no_prefix_multi_assignment(",
          "def test_error_no_prefix_contains_nan(",
          "def test_error_contains_non_dummies(",
          "def test_error_with_prefix_multiple_seperators(",
          "def test_error_with_prefix_sep_wrong_type(",
          "def test_error_with_prefix_contains_unassigned(",
          "def test_error_with_prefix_default_category_wrong_type(",
          "def test_error_with_prefix_default_category_dict_not_complete(",
          "def test_error_with_prefix_contains_nan(",
          "def test_error_with_prefix_contains_non_dummies(",
          "def test_error_with_prefix_double_assignment(",
          "def test_roundtrip_series_to_dataframe(",
          "def test_roundtrip_single_column_dataframe(",
          "def test_roundtrip_with_prefixes(",
          "def test_no_prefix_string_cats_basic(",
          "def test_no_prefix_string_cats_basic_bool_values(",
          "def test_no_prefix_string_cats_basic_mixed_bool_values(",
          "def test_no_prefix_int_cats_basic(",
          "def test_no_prefix_float_cats_basic(",
          "def test_no_prefix_mixed_cats_basic(",
          "def test_no_prefix_string_cats_contains_get_dummies_NaN_column(",
          "def test_no_prefix_string_cats_default_category(",
          "def test_with_prefix_basic(",
          "def test_with_prefix_contains_get_dummies_NaN_column(",
          "def test_with_prefix_default_category(",
          "def test_ea_categories(",
          "def test_ea_categories_with_sep(",
          "def test_maintain_original_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_get_dummies.py": [
          "def test_get_dummies_raises_on_dtype_object(",
          "def test_get_dummies_basic(",
          "def test_get_dummies_basic_types(",
          "def test_get_dummies_just_na(",
          "def test_get_dummies_include_na(",
          "def test_get_dummies_unicode(",
          "def test_dataframe_dummies_all_obj(",
          "def test_dataframe_dummies_string_dtype(",
          "def test_dataframe_dummies_mix_default(",
          "def test_dataframe_dummies_prefix_list(",
          "def test_dataframe_dummies_prefix_str(",
          "def test_dataframe_dummies_subset(",
          "def test_dataframe_dummies_prefix_sep(",
          "def test_dataframe_dummies_prefix_bad_length(",
          "def test_dataframe_dummies_prefix_sep_bad_length(",
          "def test_dataframe_dummies_prefix_dict(",
          "def test_dataframe_dummies_with_na(",
          "def test_dataframe_dummies_with_categorical(",
          "def test_dataframe_dummies_unicode(",
          "def test_get_dummies_basic_drop_first(",
          "def test_get_dummies_basic_drop_first_one_level(",
          "def test_get_dummies_basic_drop_first_NA(",
          "def test_dataframe_dummies_drop_first(",
          "def test_dataframe_dummies_drop_first_with_categorical(",
          "def test_dataframe_dummies_drop_first_with_na(",
          "def test_get_dummies_int_int(",
          "def test_get_dummies_int_df(",
          "def test_dataframe_dummies_preserve_categorical_dtype(",
          "def test_get_dummies_dont_sparsify_all_columns(",
          "def test_get_dummies_duplicate_columns(",
          "def test_get_dummies_all_sparse(",
          "def test_get_dummies_with_string_values(",
          "def test_get_dummies_ea_dtype_series(",
          "def test_get_dummies_ea_dtype_dataframe("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_melt.py": [
          "def test_top_level_method(",
          "def test_method_signatures(",
          "def test_default_col_names(",
          "def test_value_vars(",
          "def test_value_vars_types(",
          "def test_vars_work_with_multiindex(",
          "def test_single_vars_work_with_multiindex(",
          "def test_tuple_vars_fail_with_multiindex(",
          "def test_custom_var_name(",
          "def test_custom_value_name(",
          "def test_custom_var_and_value_name(",
          "def test_col_level(",
          "def test_multiindex(",
          "def test_pandas_dtypes(",
          "def test_preserve_category(",
          "def test_melt_missing_columns_raises(",
          "def test_melt_mixed_int_str_id_vars(",
          "def test_melt_mixed_int_str_value_vars(",
          "def test_ignore_index(",
          "def test_ignore_multiindex(",
          "def test_ignore_index_name_and_type(",
          "def test_melt_with_duplicate_columns(",
          "def test_melt_ea_dtype(",
          "def test_melt_ea_columns(",
          "def test_pairs(",
          "def test_simple(",
          "def test_stubs(",
          "def test_separating_character(",
          "def test_escapable_characters(",
          "def test_unbalanced(",
          "def test_character_overlap(",
          "def test_invalid_separator(",
          "def test_num_string_disambiguation(",
          "def test_invalid_suffixtype(",
          "def test_multiple_id_columns(",
          "def test_non_unique_idvars(",
          "def test_cast_j_int(",
          "def test_identical_stubnames(",
          "def test_nonnumeric_suffix(",
          "def test_mixed_type_suffix(",
          "def test_float_suffix(",
          "def test_col_substring_of_stubname(",
          "def test_raise_of_column_name_value(",
          "def test_missing_stubname("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot.py": [
          "def test_pivot_table(",
          "def test_pivot_table_categorical_observed_equal(",
          "def test_pivot_table_nocols(",
          "def test_pivot_table_dropna(",
          "def test_pivot_table_categorical(",
          "def test_pivot_table_dropna_categoricals(",
          "def test_pivot_with_non_observable_dropna(",
          "def test_pivot_with_non_observable_dropna_multi_cat(",
          "def test_pivot_with_interval_index(",
          "def test_pivot_with_interval_index_margins(",
          "def test_pass_array(",
          "def test_pass_function(",
          "def test_pivot_table_multiple(",
          "def test_pivot_dtypes(",
          "def test_pivot_preserve_dtypes(",
          "def test_pivot_no_values(",
          "def test_pivot_multi_values(",
          "def test_pivot_multi_functions(",
          "def test_pivot_index_with_nan(",
          "def test_pivot_index_with_nan_dates(",
          "def test_pivot_with_tz(",
          "def test_pivot_tz_in_values(",
          "def test_pivot_periods(",
          "def test_pivot_periods_with_margins(",
          "def test_pivot_with_list_like_values(",
          "def test_pivot_with_list_like_values_nans(",
          "def test_pivot_columns_none_raise_error(",
          "def test_pivot_with_multiindex(",
          "def test_pivot_with_tuple_of_values(",
          "def test_margins(",
          "def test_no_col(",
          "def test_margin_with_only_columns_defined(",
          "def test_margins_dtype(",
          "def test_margins_dtype_len(",
          "def test_pivot_table_multiindex_only(",
          "def test_pivot_table_retains_tz(",
          "def test_pivot_integer_columns(",
          "def test_pivot_no_level_overlap(",
          "def test_pivot_columns_lexsorted(",
          "def test_pivot_complex_aggfunc(",
          "def test_margins_no_values_no_cols(",
          "def test_margins_no_values_two_rows(",
          "def test_margins_no_values_one_row_one_col(",
          "def test_margins_no_values_two_row_two_cols(",
          "def test_pivot_table_with_margins_set_margin_name(",
          "def test_pivot_timegrouper(",
          "def test_pivot_timegrouper_double(",
          "def test_pivot_datetime_tz(",
          "def test_pivot_dtaccessor(",
          "def test_daily(",
          "def test_monthly(",
          "def test_pivot_table_with_iterator_values(",
          "def test_pivot_table_margins_name_with_aggfunc_list(",
          "def test_categorical_margins(",
          "def test_categorical_margins_category(",
          "def test_margins_casted_to_float(",
          "def test_pivot_with_categorical(",
          "def test_categorical_aggfunc(",
          "def test_categorical_pivot_index_ordering(",
          "def test_pivot_table_not_series(",
          "def test_pivot_margins_name_unicode(",
          "def test_pivot_string_as_func(",
          "def test_pivot_string_func_vs_func(",
          "def test_pivot_number_of_levels_larger_than_int32(",
          "def test_pivot_table_aggfunc_dropna(",
          "def test_pivot_table_aggfunc_scalar_dropna(",
          "def test_pivot_table_empty_aggfunc(",
          "def test_pivot_table_no_column_raises(",
          "def test_pivot_table_multiindex_columns_doctest_case(",
          "def test_pivot_table_sort_false(",
          "def test_pivot_table_nullable_margins(",
          "def test_pivot_table_sort_false_with_multiple_values(",
          "def test_pivot_table_with_margins_and_numeric_columns(",
          "def test_pivot_ea_dtype_dropna(",
          "def test_pivot_table_datetime_warning(",
          "def test_pivot_table_with_mixed_nested_tuples(",
          "def test_pivot_table_aggfunc_nunique_with_different_values(",
          "def test_pivot(",
          "def test_pivot_duplicates(",
          "def test_pivot_empty(",
          "def test_pivot_integer_bug(",
          "def test_pivot_index_none(",
          "def test_pivot_index_list_values_none_immutable_args(",
          "def test_pivot_columns_not_given(",
          "def test_pivot_columns_is_none(",
          "def test_pivot_index_is_none(",
          "def test_pivot_values_is_none(",
          "def test_pivot_not_changing_index_name(",
          "def test_pivot_table_empty_dataframe_correct_index(",
          "def test_pivot_table_handles_explicit_datetime_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot_multilevel.py": [
          "def test_pivot_list_like_index(",
          "def test_pivot_list_like_columns(",
          "def test_pivot_multiindexed_rows_and_cols(",
          "def test_pivot_df_multiindex_index_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_qcut.py": [
          "def test_qcut(",
          "def test_qcut_bounds(",
          "def test_qcut_specify_quantiles(",
          "def test_qcut_all_bins_same(",
          "def test_qcut_include_lowest(",
          "def test_qcut_nas(",
          "def test_qcut_index(",
          "def test_qcut_binning_issues(",
          "def test_qcut_return_intervals(",
          "def test_qcut_incorrect_labels(",
          "def test_qcut_wrong_length_labels(",
          "def test_qcut_list_like_labels(",
          "def test_qcut_duplicates_bin(",
          "def test_single_quantile(",
          "def test_qcut_nat(",
          "def test_datetime_tz_qcut(",
          "def test_date_like_qcut_bins(",
          "def test_qcut_bool_coercion_to_int(",
          "def test_qcut_nullable_integer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_union_categoricals.py": [
          "def test_union_categorical(",
          "def test_union_categorical_ordered_appearance(",
          "def test_union_categorical_ordered_true(",
          "def test_union_categorical_match_types(",
          "def test_union_categorical_empty(",
          "def test_union_categoricals_nan(",
          "def test_union_categoricals_empty(",
          "def test_union_categorical_same_category(",
          "def test_union_categorical_same_category_str(",
          "def test_union_categorical_same_categories_different_order(",
          "def test_union_categoricals_ordered(",
          "def test_union_categoricals_ignore_order(",
          "def test_union_categoricals_sort(",
          "def test_union_categoricals_sort_false(",
          "def test_union_categoricals_sort_false_fastpath(",
          "def test_union_categoricals_sort_false_skipresort(",
          "def test_union_categoricals_sort_false_one_nan(",
          "def test_union_categoricals_sort_false_only_nan(",
          "def test_union_categoricals_sort_false_empty(",
          "def test_union_categoricals_sort_false_ordered_true(",
          "def test_union_categorical_unwrap("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_util.py": [
          "def test_simple(",
          "def test_datetimeindex(",
          "def test_tzaware_retained(",
          "def test_tzaware_retained_categorical(",
          "def test_empty(",
          "def test_empty_input(",
          "def test_invalid_input(",
          "def test_exceed_product_space("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append.py": [
          "def test_append(",
          "def test_append_empty(",
          "def test_append_overlap_raises(",
          "def test_append_new_columns(",
          "def test_append_length0_frame(",
          "def test_append_records(",
          "def test_append_sorts(",
          "def test_append_different_columns(",
          "def test_append_many(",
          "def test_append_preserve_index_name(",
          "def test_append_same_columns_type(",
          "def test_append_different_columns_types(",
          "def test_append_dtype_coerce(",
          "def test_append_missing_column_proper_upcast(",
          "def test_append_empty_frame_to_series_with_dateutil_tz(",
          "def test_append_empty_tz_frame_with_datetime64ns(",
          "def test_append_empty_frame_with_timedelta64ns_nat(",
          "def test_append_frame_with_timedelta64ns_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append_common.py": [
          "def test_dtypes(",
          "def test_concatlike_same_dtypes(",
          "def test_concatlike_dtypes_coercion(",
          "def test_concatlike_common_coerce_to_pandas_object(",
          "def test_concatlike_datetimetz(",
          "def test_concatlike_datetimetz_short(",
          "def test_concatlike_datetimetz_to_object(",
          "def test_concatlike_common_period(",
          "def test_concatlike_common_period_diff_freq_to_object(",
          "def test_concatlike_common_period_mixed_dt_to_object(",
          "def test_concat_categorical(",
          "def test_union_categorical_same_categories_different_order(",
          "def test_concat_categorical_coercion(",
          "def test_concat_categorical_3elem_coercion(",
          "def test_concat_categorical_multi_coercion(",
          "def test_concat_categorical_ordered(",
          "def test_concat_categorical_coercion_nan(",
          "def test_concat_categorical_empty(",
          "def test_categorical_concat_append("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_categorical.py": [
          "def test_categorical_concat(",
          "def test_categorical_concat_dtypes(",
          "def test_concat_categoricalindex(",
          "def test_categorical_concat_preserve(",
          "def test_categorical_index_preserver(",
          "def test_concat_categorical_tz(",
          "def test_concat_categorical_datetime(",
          "def test_concat_categorical_unchanged(",
          "def test_categorical_concat_gh7864(",
          "def test_categorical_index_upcast(",
          "def test_categorical_missing_from_one_frame(",
          "def test_concat_categorical_same_categories_different_order("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_concat.py": [
          "def test_append_concat(",
          "def test_concat_copy(",
          "def test_concat_with_group_keys(",
          "def test_concat_keys_specific_levels(",
          "def test_concat_mapping(",
          "def test_concat_keys_and_levels(",
          "def test_concat_keys_levels_no_overlap(",
          "def test_crossed_dtypes_weird_corner(",
          "def test_with_mixed_tuples(",
          "def test_concat_mixed_objs(",
          "def test_dtype_coercion(",
          "def test_concat_single_with_key(",
          "def test_concat_no_items_raises(",
          "def test_concat_exclude_none(",
          "def test_concat_keys_with_none(",
          "def test_concat_bug_1719(",
          "def test_concat_bug_2972(",
          "def test_concat_bug_3602(",
          "def test_concat_iterables(",
          "def test_concat_order(",
          "def test_concat_different_extension_dtypes_upcasts(",
          "def test_concat_ordered_dict(",
          "def test_concat_duplicate_indices_raise(",
          "def test_concat_no_unnecessary_upcast(",
          "def test_concat_will_upcast(",
          "def test_concat_empty_and_non_empty_frame_regression(",
          "def test_concat_sparse(",
          "def test_concat_dense_sparse(",
          "def test_duplicate_keys(",
          "def test_duplicate_keys_same_frame(",
          "def test_concat_preserves_subclass(",
          "def test_concat_frame_axis0_extension_dtypes(",
          "def test_concat_preserves_extension_int64_dtype(",
          "def test_concat_bool_types(",
          "def test_concat_repeated_keys(",
          "def test_concat_null_object_with_dti(",
          "def test_concat_multiindex_with_empty_rangeindex(",
          "def test_concat_drop_attrs(",
          "def test_concat_retain_attrs(",
          "def test_concat_ignore_empty_object_float(",
          "def test_concat_ignore_all_na_object_float(",
          "def test_concat_ignore_empty_from_reindex(",
          "def test_concat_mismatched_keys_length(",
          "def test_concat_multiindex_with_category(",
          "def test_concat_ea_upcast("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_dataframe.py": [
          "def test_concat_multiple_frames_dtypes(",
          "def test_concat_tuple_keys(",
          "def test_concat_named_keys(",
          "def test_concat_axis_parameter(",
          "def test_concat_numerical_names(",
          "def test_concat_astype_dup_col(",
          "def test_concat_dataframe_keys_bug(",
          "def test_concat_bool_with_int(",
          "def test_concat_duplicates_in_index_with_keys(",
          "def test_concat_copies(",
          "def test_outer_sort_columns(",
          "def test_inner_sort_columns(",
          "def test_sort_columns_one_df("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_datetimes.py": [
          "def test_concat_datetime64_block(",
          "def test_concat_datetime_datetime64_frame(",
          "def test_concat_datetime_timezone(",
          "def test_concat_datetimeindex_freq(",
          "def test_concat_multiindex_datetime_object_index(",
          "def test_concat_NaT_series(",
          "def test_concat_NaT_dataframes(",
          "def test_concat_NaT_dataframes_all_NaT_axis_0(",
          "def test_concat_NaT_dataframes_all_NaT_axis_1(",
          "def test_concat_NaT_series_dataframe_all_NaT(",
          "def test_concat_tz_series(",
          "def test_concat_tz_series_tzlocal(",
          "def test_concat_tz_series_with_datetimelike(",
          "def test_concat_tz_frame(",
          "def test_concat_multiple_tzs(",
          "def test_concat_multiindex_with_tz(",
          "def test_concat_tz_not_aligned(",
          "def test_concat_tz_NaT(",
          "def test_concat_tz_with_empty(",
          "def test_concat_period_series(",
          "def test_concat_period_multiple_freq_series(",
          "def test_concat_period_other_series(",
          "def test_concat_timedelta64_block(",
          "def test_concat_multiindex_datetime_nat(",
          "def test_concat_float_datetime64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_empty.py": [
          "def test_handle_empty_objects(",
          "def test_concat_empty_series(",
          "def test_concat_empty_series_timelike(",
          "def test_concat_empty_series_dtypes(",
          "def test_concat_empty_series_dtypes_match_roundtrips(",
          "def test_concat_empty_series_dtypes_roundtrips(",
          "def test_concat_empty_series_dtypes_triple(",
          "def test_concat_empty_series_dtype_category_with_array(",
          "def test_concat_empty_series_dtypes_sparse(",
          "def test_concat_empty_df_object_dtype(",
          "def test_concat_empty_dataframe_dtypes(",
          "def test_concat_inner_join_empty(",
          "def test_empty_dtype_coerce(",
          "def test_concat_empty_dataframe(",
          "def test_concat_empty_dataframe_different_dtypes(",
          "def test_concat_to_empty_ea("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_index.py": [
          "def test_concat_ignore_index(",
          "def test_concat_same_index_names(",
          "def test_concat_rename_index(",
          "def test_concat_copy_index_series(",
          "def test_concat_copy_index_frame(",
          "def test_default_index(",
          "def test_dups_index(",
          "def test_concat_multiindex_with_keys(",
          "def test_concat_multiindex_with_none_in_index_names(",
          "def test_concat_multiindex_rangeindex(",
          "def test_concat_multiindex_dfs_with_deepcopy(",
          "def test_concat_with_various_multiindex_dtypes(",
          "def test_concat_multiindex_(",
          "def test_concat_with_key_not_unique(",
          "def test_concat_with_duplicated_levels(",
          "def test_concat_with_levels_with_none_keys(",
          "def test_concat_range_index_result(",
          "def test_concat_index_keep_dtype(",
          "def test_concat_index_keep_dtype_ea_numeric(",
          "def test_concat_index_find_common(",
          "def test_concat_axis_1_sort_false_rangeindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_invalid.py": [
          "def test_concat_invalid(",
          "def test_concat_invalid_first_argument(",
          "def test_concat_generator_obj(",
          "def test_concat_textreader_obj("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_series.py": [
          "def test_concat_series(",
          "def test_concat_empty_and_non_empty_series_regression(",
          "def test_concat_series_axis1(",
          "def test_concat_series_axis1_preserves_series_names(",
          "def test_concat_series_axis1_with_reindex(",
          "def test_concat_series_axis1_names_applied(",
          "def test_concat_series_axis1_same_names_ignore_index(",
          "def test_concat_series_name_npscalar_tuple(",
          "def test_concat_series_partial_columns_names(",
          "def test_concat_series_length_one_reversed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_sort.py": [
          "def test_concat_sorts_columns(",
          "def test_concat_sorts_index(",
          "def test_concat_inner_sort(",
          "def test_concat_aligned_sort(",
          "def test_concat_aligned_sort_does_not_raise(",
          "def test_concat_frame_with_sort_false(",
          "def test_concat_sort_none_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_join.py": [
          "def get_test_data(",
          "def test_left_outer_join(",
          "def test_right_outer_join(",
          "def test_full_outer_join(",
          "def test_inner_join(",
          "def test_handle_overlap(",
          "def test_handle_overlap_arbitrary_key(",
          "def test_join_on(",
          "def test_join_on_fails_with_different_right_index(",
          "def test_join_on_fails_with_different_left_index(",
          "def test_join_on_fails_with_different_column_counts(",
          "def test_join_on_fails_with_wrong_object_type(",
          "def test_join_on_pass_vector(",
          "def test_join_with_len0(",
          "def test_join_on_inner(",
          "def test_join_on_singlekey_list(",
          "def test_join_on_series(",
          "def test_join_on_series_buglet(",
          "def test_join_index_mixed(",
          "def test_join_index_mixed_overlap(",
          "def test_join_empty_bug(",
          "def test_join_unconsolidated(",
          "def test_join_multiindex(",
          "def test_join_inner_multiindex(",
          "def test_join_hierarchical_mixed_raises(",
          "def test_join_float64_float32(",
          "def test_join_many_non_unique_index(",
          "def test_join_sort(",
          "def test_join_mixed_non_unique_index(",
          "def test_join_non_unique_period_index(",
          "def test_mixed_type_join_with_suffix(",
          "def test_join_many(",
          "def test_join_many_mixed(",
          "def test_join_dups(",
          "def test_join_multi_to_multi(",
          "def test_join_on_tz_aware_datetimeindex(",
          "def test_join_datetime_string(",
          "def test_join_with_categorical_index(",
          "def test_join_inner_multiindex_deterministic_order(",
          "def test_join_cross(",
          "def test_join_multiindex_one_level(",
          "def test_join_multiindex_not_alphabetical_categorical(",
          "def test_join_empty(",
          "def test_join_multiindex_categorical_output_index_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge.py": [
          "def get_test_data(",
          "def test_merge_inner_join_empty(",
          "def test_merge_common(",
          "def test_merge_non_string_columns(",
          "def test_merge_index_as_on_arg(",
          "def test_merge_index_singlekey_right_vs_left(",
          "def test_merge_index_singlekey_inner(",
          "def test_merge_misspecified(",
          "def test_index_and_on_parameters_confusion(",
          "def test_merge_overlap(",
          "def test_merge_different_column_key_names(",
          "def test_merge_copy(",
          "def test_merge_nocopy(",
          "def test_intelligently_handle_join_key(",
          "def test_merge_join_key_dtype_cast(",
          "def test_handle_join_key_pass_array(",
          "def test_no_overlap_more_informative_error(",
          "def test_merge_non_unique_indexes(",
          "def test_merge_non_unique_index_many_to_many(",
          "def test_left_merge_empty_dataframe(",
          "def test_merge_empty_dataframe(",
          "def test_merge_left_empty_right_empty(",
          "def test_merge_left_empty_right_notempty(",
          "def test_merge_left_notempty_right_empty(",
          "def test_merge_empty_frame(",
          "def test_merge_all_na_column(",
          "def test_merge_nosort(",
          "def test_merge_same_order_left_right(",
          "def test_merge_nan_right(",
          "def test_merge_nan_right2(",
          "def test_merge_type(",
          "def test_join_append_timedeltas(",
          "def test_join_append_timedeltas2(",
          "def test_other_datetime_unit(",
          "def test_other_timedelta_unit(",
          "def test_overlapping_columns_error_message(",
          "def test_merge_on_datetime64tz(",
          "def test_merge_datetime64tz_values(",
          "def test_merge_on_datetime64tz_empty(",
          "def test_merge_datetime64tz_with_dst_transition(",
          "def test_merge_non_unique_period_index(",
          "def test_merge_on_periods(",
          "def test_merge_period_values(",
          "def test_indicator(",
          "def test_merge_indicator_arg_validation(",
          "def test_merge_indicator_result_integrity(",
          "def test_merge_indicator_invalid(",
          "def test_merge_indicator_multiple_columns(",
          "def test_validation(",
          "def test_merge_two_empty_df_no_division_error(",
          "def test_merge_on_index_with_more_values(",
          "def test_merge_right_index_right(",
          "def test_merge_preserves_row_order(",
          "def test_merge_take_missing_values_from_index_of_other_dtype(",
          "def test_merge_readonly(",
          "def test_different(",
          "def test_join_multi_dtypes(",
          "def test_merge_on_ints_floats(",
          "def test_merge_key_dtype_cast(",
          "def test_merge_on_ints_floats_warning(",
          "def test_merge_incompat_infer_boolean_object(",
          "def test_merge_incompat_infer_boolean_object_with_missing(",
          "def test_merge_incompat_dtypes_are_ok(",
          "def test_merge_incompat_dtypes_error(",
          "def test_merge_EA_dtype(",
          "def test_merge_string_dtype(",
          "def test_merge_bool_dtype(",
          "def test_merge_ea_with_string(",
          "def test_merge_empty(",
          "def test_identical(",
          "def test_basic(",
          "def test_merge_categorical(",
          "def tests_merge_categorical_unordered_equal(",
          "def test_multiindex_merge_with_unordered_categoricalindex(",
          "def test_other_columns(",
          "def test_dtype_on_merged_different(",
          "def test_self_join_multiple_categories(",
          "def test_dtype_on_categorical_dates(",
          "def test_merging_with_bool_or_int_cateorical_column(",
          "def test_merge_on_int_array(",
          "def test_merge_on_indexes(",
          "def test_merge_index_types(",
          "def test_merge_series(",
          "def test_merge_series_multilevel(",
          "def test_merge_suffix(",
          "def test_merge_duplicate_suffix(",
          "def test_merge_suffix_error(",
          "def test_merge_suffix_raises(",
          "def test_merge_suffix_length_error(",
          "def test_merge_equal_cat_dtypes(",
          "def test_merge_equal_cat_dtypes2(",
          "def test_merge_on_cat_and_ext_array(",
          "def test_merge_multiindex_columns(",
          "def test_merge_datetime_upcast_dtype(",
          "def test_categorical_non_unique_monotonic(",
          "def test_merge_join_categorical_multiindex(",
          "def test_merge_join_cols_error_reporting_duplicates(",
          "def test_merge_join_cols_error_reporting_missing(",
          "def test_merge_join_cols_error_reporting_on_and_index(",
          "def test_merge_right_left_index(",
          "def test_merge_result_empty_index_and_on(",
          "def test_merge_suffixes_produce_dup_columns_raises(",
          "def test_merge_duplicate_columns_with_suffix_no_warning(",
          "def test_merge_duplicate_columns_with_suffix_causing_another_duplicate_raises(",
          "def test_merge_string_float_column_result(",
          "def test_mergeerror_on_left_index_mismatched_dtypes(",
          "def test_merge_on_left_categoricalindex(",
          "def test_merge_outer_with_NaN(",
          "def test_merge_different_index_names(",
          "def test_merge_ea(",
          "def test_merge_ea_and_non_ea(",
          "def test_merge_arrow_and_numpy_dtypes(",
          "def test_merge_datetime_different_resolution(",
          "def test_merge_multiindex_single_level(",
          "def test_merge_ea_int_and_float_numpy(",
          "def test_merge_arrow_string_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_asof.py": [
          "def test_examples1(",
          "def test_examples2(",
          "def test_examples3(",
          "def test_examples4(",
          "def test_basic(",
          "def test_basic_categorical(",
          "def test_basic_left_index(",
          "def test_basic_right_index(",
          "def test_basic_left_index_right_index(",
          "def test_multi_index_left(",
          "def test_multi_index_right(",
          "def test_on_and_index_left_on(",
          "def test_on_and_index_right_on(",
          "def test_basic_left_by_right_by(",
          "def test_missing_right_by(",
          "def test_multiby(",
          "def test_multiby_heterogeneous_types(",
          "def test_mismatched_index_dtype(",
          "def test_multiby_indexed(",
          "def test_basic2(",
          "def test_basic_no_by(",
          "def test_valid_join_keys(",
          "def test_with_duplicates(",
          "def test_with_duplicates_no_on(",
          "def test_valid_allow_exact_matches(",
          "def test_valid_tolerance(",
          "def test_non_sorted(",
          "def test_tolerance(",
          "def test_tolerance_forward(",
          "def test_tolerance_nearest(",
          "def test_tolerance_tz(",
          "def test_tolerance_float(",
          "def test_index_tolerance(",
          "def test_allow_exact_matches(",
          "def test_allow_exact_matches_forward(",
          "def test_allow_exact_matches_nearest(",
          "def test_allow_exact_matches_and_tolerance(",
          "def test_allow_exact_matches_and_tolerance2(",
          "def test_allow_exact_matches_and_tolerance3(",
          "def test_allow_exact_matches_and_tolerance_forward(",
          "def test_allow_exact_matches_and_tolerance_nearest(",
          "def test_forward_by(",
          "def test_nearest_by(",
          "def test_by_int(",
          "def test_on_float(",
          "def test_on_specialized_type(",
          "def test_on_specialized_type_by_int(",
          "def test_on_float_by_int(",
          "def test_merge_datatype_error_raises(",
          "def test_merge_datatype_categorical_error_raises(",
          "def test_merge_groupby_multiple_column_with_categorical_column(",
          "def test_merge_on_nans(",
          "def test_by_nullable(",
          "def test_merge_by_col_tz_aware(",
          "def test_by_mixed_tz_aware(",
          "def test_timedelta_tolerance_nearest(",
          "def test_int_type_tolerance(",
          "def test_merge_index_column_tz(",
          "def test_left_index_right_index_tolerance(",
          "def test_merge_asof_non_numerical_dtype(",
          "def test_merge_asof_non_numerical_dtype_object(",
          "def test_merge_asof_index_behavior(",
          "def test_merge_asof_numeric_column_in_index(",
          "def test_merge_asof_numeric_column_in_multiindex(",
          "def test_merge_asof_numeri_column_in_index_object_dtype(",
          "def test_merge_asof_array_as_on(",
          "def test_merge_asof_raise_for_duplicate_columns(",
          "def test_merge_asof_extension_dtype(",
          "def test_merge_asof_read_only_ndarray("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_cross.py": [
          "def test_merge_cross(",
          "def test_merge_cross_error_reporting(",
          "def test_merge_cross_mixed_dtypes(",
          "def test_merge_cross_more_than_one_column(",
          "def test_merge_cross_null_values(",
          "def test_join_cross_error_reporting(",
          "def test_merge_cross_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_index_as_string.py": [
          "def test_merge_indexes_and_columns_on(",
          "def test_merge_indexes_and_columns_lefton_righton(",
          "def test_join_indexes_and_columns_on("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_ordered.py": [
          "def test_basic(",
          "def test_ffill(",
          "def test_multigroup(",
          "def test_merge_type(",
          "def test_empty_sequence_concat(",
          "def test_empty_sequence_concat_ok(",
          "def test_doc_example(",
          "def test_list_type_by(",
          "def test_left_by_length_equals_to_right_shape0(",
          "def test_elements_not_in_by_but_in_df("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_multi.py": [
          "def test_merge_on_multikey(",
          "def test_left_join_multi_index(",
          "def test_merge_right_vs_left(",
          "def test_merge_multiple_cols_with_mixed_cols_index(",
          "def test_compress_group_combinations(",
          "def test_left_join_index_preserve_order(",
          "def test_left_join_index_multi_match_multiindex(",
          "def test_left_join_index_multi_match(",
          "def test_left_merge_na_buglet(",
          "def test_merge_na_keys(",
          "def test_merge_datetime_index(",
          "def test_merge_datetime_multi_index_empty_df(",
          "def test_join_multi_levels(",
          "def test_join_multi_levels_merge_equivalence(",
          "def test_join_multi_levels_outer(",
          "def test_join_multi_levels_invalid(",
          "def test_join_multi_levels2(",
          "def test_join_multi_multi(",
          "def test_join_multi_empty_frames(",
          "def test_merge_datetime_index(",
          "def test_single_common_level(",
          "def test_join_multi_wrong_order("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_nat.py": [
          "def test_nat_fields(",
          "def test_nat_vector_field_access(",
          "def test_identity(",
          "def test_round_nat(",
          "def test_nat_methods_raise(",
          "def test_nat_methods_nan(",
          "def test_nat_methods_nat(",
          "def test_nat_iso_format(",
          "def test_missing_public_nat_methods(",
          "def test_overlap_public_nat_methods(",
          "def test_nat_doc_strings(",
          "def test_nat_arithmetic_scalar(",
          "def test_nat_rfloordiv_timedelta(",
          "def test_nat_arithmetic_index(",
          "def test_nat_arithmetic_td64_vector(",
          "def test_nat_arithmetic_ndarray(",
          "def test_nat_pinned_docstrings(",
          "def test_to_numpy_alias(",
          "def test_nat_comparisons(",
          "def test_nat_comparisons_numpy(",
          "def test_nat_comparisons_invalid(",
          "def test_nat_comparisons_invalid_ndarray(",
          "def test_compare_date(",
          "def test_nat_addsub_tdlike_scalar(",
          "def test_pickle("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_na_scalar.py": [
          "def test_singleton(",
          "def test_repr(",
          "def test_format(",
          "def test_truthiness(",
          "def test_hashable(",
          "def test_arithmetic_ops(",
          "def test_comparison_ops(",
          "def test_pow_special(",
          "def test_rpow_special(",
          "def test_rpow_minus_one(",
          "def test_unary_ops(",
          "def test_logical_and(",
          "def test_logical_or(",
          "def test_logical_xor(",
          "def test_logical_not(",
          "def test_arithmetic_ndarray(",
          "def test_is_scalar(",
          "def test_isna(",
          "def test_series_isna(",
          "def test_ufunc(",
          "def test_ufunc_raises(",
          "def test_binary_input_not_dunder(",
          "def test_divmod_ufunc(",
          "def test_integer_hash_collision_dict(",
          "def test_integer_hash_collision_set(",
          "def test_pickle_roundtrip(",
          "def test_pickle_roundtrip_pandas(",
          "def test_pickle_roundtrip_containers("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_arithmetic.py": [
          "def test_time_interval_add_subtract_timedelta(",
          "def test_numeric_interval_add_timedelta_raises(",
          "def test_timedelta_add_timestamp_interval("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_interval.py": [
          "def test_properties(",
          "def test_repr(",
          "def test_contains(",
          "def test_equal(",
          "def test_comparison(",
          "def test_hash(",
          "def test_length(",
          "def test_length_timestamp(",
          "def test_is_empty(",
          "def test_construct_errors(",
          "def test_math_add(",
          "def test_math_sub(",
          "def test_math_mult(",
          "def test_math_div(",
          "def test_math_floordiv(",
          "def test_constructor_errors(",
          "def test_constructor_errors_tz(",
          "def test_equality_comparison_broadcasts_over_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_ops.py": [
          "def test_overlaps_self(",
          "def test_overlaps_nested(",
          "def test_overlaps_disjoint(",
          "def test_overlaps_endpoint(",
          "def test_overlaps_invalid_type(",
          "def test_contains_interval(",
          "def test_contains_infinite_length(",
          "def test_contains_zero_length(",
          "def test_contains_mixed_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_asfreq.py": [
          "def test_asfreq_near_zero(",
          "def test_asfreq_near_zero_weekly(",
          "def test_to_timestamp_out_of_bounds(",
          "def test_asfreq_corner(",
          "def test_conv_annual(",
          "def test_conv_quarterly(",
          "def test_conv_monthly(",
          "def test_conv_weekly(",
          "def test_conv_weekly_legacy(",
          "def test_conv_business(",
          "def test_conv_daily(",
          "def test_conv_hourly(",
          "def test_conv_minutely(",
          "def test_conv_secondly(",
          "def test_conv_microsecond(",
          "def test_asfreq_mult(",
          "def test_asfreq_combined(",
          "def test_asfreq_MS("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_period.py": [
          "def test_custom_business_day_freq_raises(",
          "def test_from_td64nat_raises(",
          "def test_construction(",
          "def test_construction_from_timestamp_nanos(",
          "def test_construction_bday(",
          "def test_construction_quarter(",
          "def test_construction_month(",
          "def test_period_constructor_offsets(",
          "def test_invalid_arguments(",
          "def test_constructor_corner(",
          "def test_constructor_infer_freq(",
          "def test_multiples(",
          "def test_period_cons_quarterly(",
          "def test_period_cons_annual(",
          "def test_period_cons_weekly(",
          "def test_parse_week_str_roundstrip(",
          "def test_period_from_ordinal(",
          "def test_construct_from_nat_string_and_freq(",
          "def test_period_cons_nat(",
          "def test_period_cons_mult(",
          "def test_period_cons_combined(",
          "def test_period_constructor_nanosecond(",
          "def test_period_large_ordinal(",
          "def test_round_trip(",
          "def test_hash(",
          "def test_to_timestamp_mult(",
          "def test_to_timestamp(",
          "def test_to_timestamp_business_end(",
          "def test_to_timestamp_microsecond(",
          "def test_repr(",
          "def test_repr_nat(",
          "def test_strftime(",
          "def test_is_leap_year(",
          "def test_quarterly_negative_ordinals(",
          "def test_freq_str(",
          "def test_period_deprecated_freq(",
          "def test_outer_bounds_start_and_end_time(",
          "def test_inner_bounds_start_and_end_time(",
          "def test_start_time(",
          "def test_end_time(",
          "def test_end_time_business_friday(",
          "def test_anchor_week_end_time(",
          "def test_properties_annually(",
          "def test_properties_quarterly(",
          "def test_properties_monthly(",
          "def test_properties_weekly(",
          "def test_properties_weekly_legacy(",
          "def test_properties_daily(",
          "def test_properties_hourly(",
          "def test_properties_minutely(",
          "def test_properties_secondly(",
          "def test_get_period_field_array_raises_on_out_of_range(",
          "def test_comparison_same_period_different_object(",
          "def test_comparison_same_freq(",
          "def test_comparison_mismatched_freq(",
          "def test_comparison_invalid_type(",
          "def test_sort_periods(",
          "def test_period_cmp_nat(",
          "def test_comparison_numpy_zerodim_arr(",
          "def test_add_sub_td64_nat(",
          "def test_sub_delta(",
          "def test_add_integer(",
          "def test_add_sub_nat(",
          "def test_add_invalid(",
          "def test_add_timestamp_raises(",
          "def test_sub(",
          "def test_sub_n_gt_1_ticks(",
          "def test_sub_n_gt_1_offsets(",
          "def test_add_offset(",
          "def test_sub_offset(",
          "def test_period_addsub_nat(",
          "def test_period_ops_offset(",
          "def test_period_immutable(",
          "def test_small_year_parsing(",
          "def test_negone_ordinals(",
          "def test_invalid_frequency_error_message("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_arithmetic.py": [
          "def test_td_add_sub_ten_seconds(",
          "def test_td_add_sub_one_day_ten_seconds(",
          "def test_td_add_datetimelike_scalar(",
          "def test_td_add_timestamp_overflow(",
          "def test_td_add_td(",
          "def test_td_add_pytimedelta(",
          "def test_td_add_timedelta64(",
          "def test_td_add_offset(",
          "def test_td_sub_td(",
          "def test_td_sub_pytimedelta(",
          "def test_td_sub_timedelta64(",
          "def test_td_sub_nat(",
          "def test_td_sub_td64_nat(",
          "def test_td_sub_offset(",
          "def test_td_add_sub_numeric_raises(",
          "def test_td_add_sub_int_ndarray(",
          "def test_td_rsub_nat(",
          "def test_td_rsub_offset(",
          "def test_td_sub_timedeltalike_object_dtype_array(",
          "def test_td_sub_mixed_most_timedeltalike_object_dtype_array(",
          "def test_td_rsub_mixed_most_timedeltalike_object_dtype_array(",
          "def test_td_add_timedeltalike_object_dtype_array(",
          "def test_td_add_mixed_timedeltalike_object_dtype_array(",
          "def test_td_add_sub_td64_ndarray(",
          "def test_td_add_sub_dt64_ndarray(",
          "def test_td_add_sub_ndarray_0d(",
          "def test_td_mul_nat(",
          "def test_td_mul_nan(",
          "def test_td_mul_scalar(",
          "def test_td_mul_numeric_ndarray(",
          "def test_td_mul_numeric_ndarray_0d(",
          "def test_td_mul_td64_ndarray_invalid(",
          "def test_td_div_timedeltalike_scalar(",
          "def test_td_div_td64_non_nano(",
          "def test_td_div_numeric_scalar(",
          "def test_td_div_nan(",
          "def test_td_div_td64_ndarray(",
          "def test_td_div_ndarray_0d(",
          "def test_td_rdiv_timedeltalike_scalar(",
          "def test_td_rdiv_na_scalar(",
          "def test_td_rdiv_ndarray(",
          "def test_td_rdiv_ndarray_0d(",
          "def test_td_floordiv_timedeltalike_scalar(",
          "def test_td_floordiv_null_scalar(",
          "def test_td_floordiv_offsets(",
          "def test_td_floordiv_invalid_scalar(",
          "def test_td_floordiv_numeric_scalar(",
          "def test_td_floordiv_timedeltalike_array(",
          "def test_td_floordiv_numeric_series(",
          "def test_td_rfloordiv_timedeltalike_scalar(",
          "def test_td_rfloordiv_null_scalar(",
          "def test_td_rfloordiv_offsets(",
          "def test_td_rfloordiv_invalid_scalar(",
          "def test_td_rfloordiv_numeric_scalar(",
          "def test_td_rfloordiv_timedeltalike_array(",
          "def test_td_rfloordiv_intarray(",
          "def test_td_rfloordiv_numeric_series(",
          "def test_mod_timedeltalike(",
          "def test_mod_timedelta64_nat(",
          "def test_mod_timedelta64(",
          "def test_mod_offset(",
          "def test_mod_numeric(",
          "def test_mod_invalid(",
          "def test_rmod_pytimedelta(",
          "def test_rmod_timedelta64(",
          "def test_rmod_invalid(",
          "def test_divmod_numeric(",
          "def test_divmod(",
          "def test_divmod_offset(",
          "def test_divmod_invalid(",
          "def test_rdivmod_pytimedelta(",
          "def test_rdivmod_offset(",
          "def test_rdivmod_invalid(",
          "def test_td_op_timedelta_timedeltalike_array(",
          "def test_compare_pytimedelta_bounds(",
          "def test_compare_pytimedelta_bounds2(",
          "def test_compare_tick(",
          "def test_comparison_object_array(",
          "def test_compare_timedelta_ndarray(",
          "def test_compare_td64_ndarray(",
          "def test_compare_custom_object(",
          "def test_compare_unknown_type(",
          "def test_ops_notimplemented(",
          "def test_ops_error_str("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_constructors.py": [
          "def test_construct_with_weeks_unit_overflow(",
          "def test_construct_from_td64_with_unit(",
          "def test_from_td64_retain_resolution(",
          "def test_from_pytimedelta_us_reso(",
          "def test_from_tick_reso(",
          "def test_construction(",
          "def test_td_construction_with_np_dtypes(",
          "def test_td_from_repr_roundtrip(",
          "def test_overflow_on_construction(",
          "def test_construction_out_of_bounds_td64ns(",
          "def test_construction_out_of_bounds_td64s(",
          "def test_iso_constructor(",
          "def test_iso_constructor_raises(",
          "def test_td_constructor_on_nanoseconds(",
          "def test_td_constructor_value_error(",
          "def test_timedelta_constructor_identity(",
          "def test_timedelta_pass_td_and_kwargs_raises(",
          "def test_string_with_unit(",
          "def test_string_without_numbers(",
          "def test_timedelta_new_npnat(",
          "def test_subclass_respected(",
          "def test_non_nano_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_formats.py": [
          "def test_repr(",
          "def test_isoformat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_timedelta.py": [
          "def test_as_unit(",
          "def test_as_unit_overflows(",
          "def test_as_unit_rounding(",
          "def test_as_unit_non_nano(",
          "def test_from_value_and_reso(",
          "def test_unary_non_nano(",
          "def test_sub_preserves_reso(",
          "def test_mul_preserves_reso(",
          "def test_cmp_cross_reso(",
          "def test_to_pytimedelta(",
          "def test_to_timedelta64(",
          "def test_truediv_timedeltalike(",
          "def test_truediv_numeric(",
          "def test_floordiv_timedeltalike(",
          "def test_floordiv_numeric(",
          "def test_addsub_mismatched_reso(",
          "def test_min(",
          "def test_max(",
          "def test_resolution(",
          "def test_hash(",
          "def test_timedelta_class_min_max_resolution(",
          "def test_invert(",
          "def test_unary_ops(",
          "def test_rounding_on_int_unit_construction(",
          "def test_total_seconds_scalar(",
          "def test_conversion(",
          "def test_fields(",
          "def test_iso_conversion(",
          "def test_nat_converters(",
          "def test_unit_parser(",
          "def test_unit_m_y_raises(",
          "def test_numeric_conversions(",
          "def test_timedelta_conversions(",
          "def test_to_numpy_alias(",
          "def test_round(",
          "def test_round_invalid(",
          "def test_round_implementation_bounds(",
          "def test_round_sanity(",
          "def test_round_non_nano(",
          "def test_identity(",
          "def test_short_format_converters(",
          "def test_full_format_converters(",
          "def test_pickle(",
          "def test_timedelta_hash_equality(",
          "def test_hash_equality_invariance(",
          "def test_implementation_limits(",
          "def test_total_seconds_precision(",
          "def test_resolution_string(",
          "def test_resolution_deprecated(",
          "def test_truthiness(",
          "def test_timedelta_attribute_precision("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_arithmetic.py": [
          "def test_overflow_offset(",
          "def test_overflow_offset_raises(",
          "def test_overflow_timestamp_raises(",
          "def test_delta_preserve_nanos(",
          "def test_rsub_dtscalars(",
          "def test_timestamp_sub_datetime(",
          "def test_subtract_tzaware_datetime(",
          "def test_subtract_timestamp_from_different_timezone(",
          "def test_subtracting_involving_datetime_with_different_tz(",
          "def test_subtracting_different_timezones(",
          "def test_addition_subtraction_types(",
          "def test_radd_tdscalar(",
          "def test_timestamp_add_timedelta64_unit(",
          "def test_add_int_with_freq(",
          "def test_addsub_m8ndarray(",
          "def test_addsub_m8ndarray_tzaware(",
          "def test_subtract_different_utc_objects("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_comparisons.py": [
          "def test_compare_non_nano_dt64(",
          "def test_comparison_dt64_ndarray(",
          "def test_comparison_dt64_ndarray_tzaware(",
          "def test_comparison_object_array(",
          "def test_comparison(",
          "def test_compare_invalid(",
          "def test_compare_date(",
          "def test_cant_compare_tz_naive_w_aware(",
          "def test_timestamp_compare_scalars(",
          "def test_timestamp_compare_with_early_datetime(",
          "def test_timestamp_compare_oob_dt64(",
          "def test_compare_zerodim_array(",
          "def test_rich_comparison_with_unsupported_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_constructors.py": [
          "def test_construct_from_time_unit(",
          "def test_weekday_but_no_day_raises(",
          "def test_construct_from_string_invalid_raises(",
          "def test_constructor_str_infer_reso(",
          "def test_constructor_from_iso8601_str_with_offset_reso(",
          "def test_constructor_from_date_second_reso(",
          "def test_construct_from_int_float_with_unit_out_of_bound_raises(",
          "def test_constructor_int_float_with_YM_unit(",
          "def test_constructor_float_not_round_with_YM_unit_deprecated(",
          "def test_constructor_datetime64_with_tz(",
          "def test_constructor(",
          "def test_constructor_with_stringoffset(",
          "def test_constructor_invalid(",
          "def test_constructor_invalid_tz(",
          "def test_constructor_strptime(",
          "def test_constructor_tz_or_tzinfo(",
          "def test_constructor_positional_with_tzinfo(",
          "def test_constructor_positional_keyword_mixed_with_tzinfo(",
          "def test_constructor_positional(",
          "def test_constructor_keyword(",
          "def test_constructor_fromordinal(",
          "def test_constructor_nanosecond(",
          "def test_constructor_invalid_Z0_isostring(",
          "def test_invalid_date_kwarg_with_string_input(",
          "def test_out_of_bounds_integer_value(",
          "def test_out_of_bounds_value(",
          "def test_out_of_bounds_string(",
          "def test_barely_out_of_bounds(",
          "def test_bounds_with_different_units(",
          "def test_out_of_bounds_string_consistency(",
          "def test_min_valid(",
          "def test_max_valid(",
          "def test_now(",
          "def test_today(",
          "def test_disallow_setting_tz(",
          "def test_construct_timestamp_near_dst(",
          "def test_construct_with_different_string_format(",
          "def test_raise_tz_and_tzinfo_in_datetime_input(",
          "def test_dont_convert_dateutil_utc_to_pytz_utc(",
          "def test_constructor_subclassed_datetime(",
          "def test_constructor_fromisocalendar(",
          "def test_constructor_ambiguous_dst(",
          "def test_constructor_before_dst_switch(",
          "def test_timestamp_constructor_identity(",
          "def test_constructor_missing_keyword(",
          "def test_timestamp_nano_range(",
          "def test_non_nano_value(",
          "def test_timestamp_constructor_invalid_fold_raise(",
          "def test_timestamp_constructor_pytz_fold_raise(",
          "def test_timestamp_constructor_fold_conflict(",
          "def test_timestamp_constructor_retain_fold(",
          "def test_timestamp_constructor_infer_fold_from_value(",
          "def test_timestamp_constructor_adjust_value_for_fold(",
          "def test_timestamp_constructor_na_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_formats.py": [
          "def test_isoformat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_rendering.py": [
          "def test_repr(",
          "def test_repr_utcoffset(",
          "def test_timestamp_repr_pre1900(",
          "def test_pprint(",
          "def test_to_timestamp_repr_is_code("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timestamp.py": [
          "def test_properties_business(",
          "def test_fields(",
          "def test_millisecond_raises(",
          "def test_is_start(",
          "def test_is_end(",
          "def test_names(",
          "def test_is_leap_year(",
          "def test_woy_boundary(",
          "def test_resolution(",
          "def test_dow_historic(",
          "def test_dow_parametric(",
          "def test_default_to_stdlib_utc(",
          "def test_tz(",
          "def test_utc_z_designator(",
          "def test_asm8(",
          "def test_class_ops_pytz(",
          "def test_class_ops_dateutil(",
          "def test_basics_nanos(",
          "def test_unit(",
          "def test_roundtrip(",
          "def test_hash_equivalent(",
          "def test_hash_timestamp_with_fold(",
          "def test_nanosecond_string_parsing(",
          "def test_nanosecond_timestamp(",
          "def test_compare_1700(",
          "def test_compare_2000(",
          "def test_compare_2100(",
          "def test_compare_hour01(",
          "def test_compare_hour13(",
          "def test_conversion(",
          "def test_to_pydatetime_fold(",
          "def test_to_pydatetime_nonzero_nano(",
          "def test_timestamp_to_datetime(",
          "def test_timestamp_to_datetime_dateutil(",
          "def test_timestamp_to_datetime_explicit_pytz(",
          "def test_timestamp_to_datetime_explicit_dateutil(",
          "def test_to_datetime_bijective(",
          "def test_to_period_tz_warning(",
          "def test_to_numpy_alias(",
          "def test_dt_subclass_add_timedelta(",
          "def test_non_nano_construction(",
          "def test_non_nano_fields(",
          "def test_start_end_fields(",
          "def test_day_name(",
          "def test_month_name(",
          "def test_tz_convert(",
          "def test_repr(",
          "def test_comparison(",
          "def test_cmp_cross_reso(",
          "def test_cmp_cross_reso_reversed_dt64(",
          "def test_pickle(",
          "def test_normalize(",
          "def test_asm8(",
          "def test_to_numpy(",
          "def test_to_datetime64(",
          "def test_timestamp(",
          "def test_to_period(",
          "def test_addsub_timedeltalike_non_nano(",
          "def test_addsub_offset(",
          "def test_sub_datetimelike_mismatched_reso(",
          "def test_sub_timedeltalike_mismatched_reso(",
          "def test_addition_doesnt_downcast_reso(",
          "def test_sub_timedelta64_mismatched_reso(",
          "def test_min(",
          "def test_max(",
          "def test_resolution(",
          "def test_out_of_ns_bounds(",
          "def test_timestamp_class_min_max_resolution(",
          "def test_as_unit(",
          "def test_as_unit_overflows(",
          "def test_as_unit_rounding(",
          "def test_as_unit_non_nano(",
          "def test_delimited_date(",
          "def test_utctimetuple(",
          "def test_negative_dates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timezones.py": [
          "def test_tz_localize_pushes_out_of_bounds(",
          "def test_tz_localize_ambiguous_bool(",
          "def test_tz_localize_ambiguous(",
          "def test_tz_localize_nonexistent(",
          "def test_tz_localize_ambiguous_raise(",
          "def test_tz_localize_nonexistent_invalid_arg(",
          "def test_tz_localize_roundtrip(",
          "def test_tz_localize_ambiguous_compat(",
          "def test_timestamp_tz_localize(",
          "def test_timestamp_tz_localize_nonexistent_shift(",
          "def test_timestamp_tz_localize_nonexistent_shift_invalid(",
          "def test_timestamp_tz_localize_nonexistent_NaT(",
          "def test_timestamp_tz_localize_nonexistent_raise(",
          "def test_tz_convert_roundtrip(",
          "def test_astimezone(",
          "def test_tz_convert_utc_with_system_utc(",
          "def test_timestamp_constructor_tz_utc(",
          "def test_timestamp_to_datetime_tzoffset(",
          "def test_timestamp_constructor_near_dst_boundary(",
          "def test_timestamp_constructed_by_date_and_tz(",
          "def test_timestamp_add_timedelta_push_over_dst_boundary(",
          "def test_timestamp_timetz_equivalent_with_datetime_tz("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_unary_ops.py": [
          "def test_round_division_by_zero_raises(",
          "def test_round_frequencies(",
          "def test_round_tzaware(",
          "def test_round_30min(",
          "def test_round_subsecond(",
          "def test_round_nonstandard_freq(",
          "def test_round_invalid_arg(",
          "def test_ceil_floor_edge(",
          "def test_round_minute_freq(",
          "def test_ceil(",
          "def test_floor(",
          "def test_round_dst_border_ambiguous(",
          "def test_round_dst_border_nonexistent(",
          "def test_round_int64(",
          "def test_round_implementation_bounds(",
          "def test_round_sanity(",
          "def test_replace_out_of_pydatetime_bounds(",
          "def test_replace_non_nano(",
          "def test_replace_naive(",
          "def test_replace_aware(",
          "def test_replace_preserves_nanos(",
          "def test_replace_multiple(",
          "def test_replace_invalid_kwarg(",
          "def test_replace_integer_args(",
          "def test_replace_tzinfo_equiv_tz_localize_none(",
          "def test_replace_tzinfo(",
          "def test_replace_across_dst(",
          "def test_replace_dst_border(",
          "def test_replace_dst_fold(",
          "def test_normalize(",
          "def test_normalize_pre_epoch_dates(",
          "def test_timestamp(",
          "def test_replace_preserves_fold("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_api.py": [
          "def test_tab_completion(",
          "def test_tab_completion_dt(",
          "def test_tab_completion_cat(",
          "def test_tab_completion_cat_str(",
          "def test_tab_completion_with_categorical(",
          "def test_index_tab_completion(",
          "def test_not_hashable(",
          "def test_contains(",
          "def test_axis_alias(",
          "def test_class_axis(",
          "def test_ndarray_compat(",
          "def test_ndarray_compat_like_func(",
          "def test_ndarray_compat_ravel(",
          "def test_empty_method(",
          "def test_empty_method_full_series(",
          "def test_integer_series_size(",
          "def test_attrs(",
          "def test_inspect_getmembers(",
          "def test_unknown_attribute(",
          "def test_datetime_series_no_datelike_attrs(",
          "def test_series_datetimelike_attribute_access(",
          "def test_series_datetimelike_attribute_access_invalid(",
          "def test_numeric_only(",
          "def test_float_int_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_arithmetic.py": [
          "def test_flex_method_equivalence(",
          "def test_flex_method_subclass_metadata_preservation(",
          "def test_flex_add_scalar_fill_value(",
          "def test_operators_combine(",
          "def test_add_series_with_period_index(",
          "def test_string_addition(",
          "def test_divmod(",
          "def test_series_integer_mod(",
          "def test_add_with_duplicate_index(",
          "def test_add_na_handling(",
          "def test_add_corner_cases(",
          "def test_add_float_plus_int(",
          "def test_mul_empty_int_corner_case(",
          "def test_sub_datetimelike_align(",
          "def test_alignment_doesnt_change_tz(",
          "def test_alignment_categorical(",
          "def test_arithmetic_with_duplicate_index(",
          "def test_masked_and_non_masked_propagate_na(",
          "def test_mask_div_propagate_na_for_non_na_dtype(",
          "def test_add_list_to_masked_array(",
          "def test_add_list_to_masked_array_boolean(",
          "def test_comparison_flex_basic(",
          "def test_comparison_bad_axis(",
          "def test_comparison_flex_alignment(",
          "def test_comparison_flex_alignment_fill(",
          "def test_comparison_different_length(",
          "def test_ser_flex_cmp_return_dtypes(",
          "def test_ser_flex_cmp_return_dtypes_empty(",
          "def test_ser_cmp_result_names(",
          "def test_comparisons(",
          "def test_categorical_comparisons(",
          "def test_unequal_categorical_comparison_raises_type_error(",
          "def test_comparison_tuples(",
          "def test_comparison_frozenset(",
          "def test_comparison_operators_with_nas(",
          "def test_ne(",
          "def test_comp_ops_df_compat(",
          "def test_compare_series_interval_keyword(",
          "def test_series_add_tz_mismatch_converts_to_utc(",
          "def test_series_add_aware_naive_raises(",
          "def test_datetime_understood(",
          "def test_align_date_objects_with_datetimeindex(",
          "def test_series_ops_name_retention(",
          "def test_binop_maybe_preserve_name(",
          "def test_scalarop_preserve_name(",
          "def test_series_inplace_ops(",
          "def test_none_comparison(",
          "def test_series_varied_multiindex_alignment(",
          "def test_rmod_consistent_large_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_constructors.py": [
          "def test_from_ints_with_non_nano_dt64_dtype(",
          "def test_from_na_value_and_interval_of_datetime_dtype(",
          "def test_infer_with_date_and_datetime(",
          "def test_unparsable_strings_with_dt64_dtype(",
          "def test_empty_constructor(",
          "def test_invalid_dtype(",
          "def test_invalid_compound_dtype(",
          "def test_scalar_conversion(",
          "def test_scalar_extension_dtype(",
          "def test_constructor(",
          "def test_constructor_index_ndim_gt_1_raises(",
          "def test_constructor_empty(",
          "def test_constructor_nan(",
          "def test_constructor_dtype_only(",
          "def test_constructor_no_data_index_order(",
          "def test_constructor_no_data_string_type(",
          "def test_constructor_string_element_string_type(",
          "def test_constructor_dtype_str_na_values(",
          "def test_constructor_series(",
          "def test_constructor_iterable(",
          "def test_constructor_sequence(",
          "def test_constructor_single_str(",
          "def test_constructor_list_like(",
          "def test_constructor_boolean_index(",
          "def test_constructor_index_dtype(",
          "def test_constructor_list_str(",
          "def test_constructor_list_str_na(",
          "def test_constructor_generator(",
          "def test_constructor_map(",
          "def test_constructor_categorical(",
          "def test_construct_from_categorical_with_dtype(",
          "def test_construct_intlist_values_category_dtype(",
          "def test_constructor_categorical_with_coercion(",
          "def test_constructor_categorical_with_coercion2(",
          "def test_constructor_series_to_categorical(",
          "def test_constructor_categorical_dtype(",
          "def test_constructor_categorical_string(",
          "def test_categorical_sideeffects_free(",
          "def test_unordered_compare_equal(",
          "def test_constructor_maskedarray(",
          "def test_constructor_maskedarray_hardened(",
          "def test_series_ctor_plus_datetimeindex(",
          "def test_constructor_default_index(",
          "def test_constructor_index_mismatch(",
          "def test_constructor_numpy_scalar(",
          "def test_constructor_broadcast_list(",
          "def test_constructor_corner(",
          "def test_constructor_sanitize(",
          "def test_constructor_copy(",
          "def test_constructor_limit_copies(",
          "def test_constructor_shallow_copy(",
          "def test_constructor_pass_none(",
          "def test_constructor_pass_nan_nat(",
          "def test_constructor_cast(",
          "def test_constructor_signed_int_overflow_raises(",
          "def test_constructor_numpy_uints(",
          "def test_constructor_unsigned_dtype_overflow(",
          "def test_constructor_floating_data_int_dtype(",
          "def test_constructor_coerce_float_fail(",
          "def test_constructor_coerce_float_valid(",
          "def test_constructor_invalid_coerce_ints_with_float_nan(",
          "def test_constructor_dtype_no_cast(",
          "def test_constructor_datelike_coercion(",
          "def test_constructor_datelike_coercion2(",
          "def test_constructor_mixed_int_and_timestamp(",
          "def test_constructor_datetimes_with_nulls(",
          "def test_constructor_dtype_datetime64(",
          "def test_constructor_dtype_datetime64_10(",
          "def test_constructor_dtype_datetime64_11(",
          "def test_constructor_dtype_datetime64_9(",
          "def test_constructor_dtype_datetime64_8(",
          "def test_constructor_dtype_datetime64_7(",
          "def test_constructor_dtype_datetime64_6(",
          "def test_constructor_dtype_datetime64_5(",
          "def test_constructor_dtype_datetime64_4(",
          "def test_constructor_dtype_datetime64_3(",
          "def test_constructor_dtype_datetime64_2(",
          "def test_constructor_with_datetime_tz(",
          "def test_constructor_with_datetime_tz4(",
          "def test_constructor_with_datetime_tz3(",
          "def test_constructor_with_datetime_tz2(",
          "def test_constructor_no_partial_datetime_casting(",
          "def test_construction_to_datetimelike_unit(",
          "def test_constructor_with_naive_string_and_datetimetz_dtype(",
          "def test_constructor_datetime64_bigendian(",
          "def test_construction_interval(",
          "def test_constructor_infer_interval(",
          "def test_constructor_interval_mixed_closed(",
          "def test_construction_consistency(",
          "def test_constructor_infer_period(",
          "def test_construct_from_ints_including_iNaT_scalar_period_dtype(",
          "def test_constructor_period_incompatible_frequency(",
          "def test_constructor_periodindex(",
          "def test_constructor_dict(",
          "def test_constructor_dict_list_value_explicit_dtype(",
          "def test_constructor_dict_order(",
          "def test_constructor_dict_extension(",
          "def test_constructor_dict_nan_key(",
          "def test_constructor_dict_datetime64_index(",
          "def test_constructor_dict_tuple_indexer(",
          "def test_constructor_mapping(",
          "def test_constructor_list_of_tuples(",
          "def test_constructor_tuple_of_tuples(",
          "def test_constructor_dict_of_tuples(",
          "def test_fromDict(",
          "def test_fromValue(",
          "def test_constructor_dtype_timedelta64(",
          "def test_constructor_mixed_tz(",
          "def test_NaT_scalar(",
          "def test_NaT_cast(",
          "def test_constructor_name_hashable(",
          "def test_constructor_name_unhashable(",
          "def test_auto_conversion(",
          "def test_convert_non_ns(",
          "def test_constructor_cant_cast_datetimelike(",
          "def test_constructor_cast_object(",
          "def test_constructor_generic_timestamp_no_frequency(",
          "def test_constructor_generic_timestamp_bad_frequency(",
          "def test_constructor_range_dtype(",
          "def test_constructor_range_overflows(",
          "def test_constructor_tz_mixed_data(",
          "def test_constructor_data_aware_dtype_naive(",
          "def test_constructor_datetime64(",
          "def test_constructor_datetimelike_scalar_to_string_dtype(",
          "def test_constructor_sparse_datetime64(",
          "def test_construction_from_ordered_collection(",
          "def test_construction_from_large_int_scalar_no_overflow(",
          "def test_constructor_list_of_periods_infers_period_dtype(",
          "def test_constructor_subclass_dict(",
          "def test_constructor_ordereddict(",
          "def test_constructor_dict_multiindex(",
          "def test_constructor_dict_multiindex_reindex_flat(",
          "def test_constructor_dict_timedelta_index(",
          "def test_constructor_infer_index_tz(",
          "def test_constructor_with_pandas_dtype(",
          "def test_constructor_int_dtype_missing_values(",
          "def test_constructor_bool_dtype_missing_values(",
          "def test_constructor_int64_dtype(",
          "def test_constructor_raise_on_lossy_conversion_of_strings(",
          "def test_constructor_dtype_timedelta_alternative_construct(",
          "def test_constructor_dtype_timedelta_ns_s(",
          "def test_constructor_dtype_timedelta_ns_s_astype_int64(",
          "def test_constructor_mismatched_null_nullable_dtype(",
          "def test_series_constructor_ea_int_from_bool(",
          "def test_series_constructor_ea_int_from_string_bool(",
          "def test_series_constructor_overflow_uint_ea(",
          "def test_series_constructor_overflow_uint_ea_with_na(",
          "def test_series_constructor_overflow_uint_with_nan(",
          "def test_series_constructor_ea_all_na(",
          "def test_series_from_index_dtype_equal_does_not_copy(",
          "def test_series_string_inference(",
          "def test_series_string_with_na_inference(",
          "def test_series_string_inference_scalar(",
          "def test_series_string_inference_array_string_dtype(",
          "def test_series_string_inference_storage_definition(",
          "def test_series_constructor_datetimelike_index_coercion(",
          "def test_series_constructor_infer_multiindex(",
          "def test_constructor_no_pandas_array(",
          "def test_from_array(",
          "def test_from_list_dtype(",
          "def test_constructor(",
          "def test_numpy_array(",
          "def test_index_ordered_dict_keys(",
          "def test_series_with_complex_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_cumulative.py": [
          "def test_datetime_series(",
          "def test_cummin_cummax(",
          "def test_cummin_cummax_datetimelike(",
          "def test_cummin_cummax_period(",
          "def test_cummethods_bool(",
          "def test_cummethods_bool_in_object_dtype(",
          "def test_cumprod_timedelta("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_iteration.py": [
          "def test_keys(",
          "def test_iter_datetimes(",
          "def test_iter_strings(",
          "def test_iteritems_datetimes(",
          "def test_iteritems_strings(",
          "def test_items_datetimes(",
          "def test_items_strings("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_logical_ops.py": [
          "def test_bool_operators_with_nas(",
          "def test_logical_operators_bool_dtype_with_empty(",
          "def test_logical_operators_int_dtype_with_int_dtype(",
          "def test_logical_operators_int_dtype_with_int_scalar(",
          "def test_logical_operators_int_dtype_with_float(",
          "def test_logical_operators_int_dtype_with_str(",
          "def test_logical_operators_int_dtype_with_bool(",
          "def test_logical_operators_int_dtype_with_object(",
          "def test_logical_operators_bool_dtype_with_int(",
          "def test_logical_ops_bool_dtype_with_ndarray(",
          "def test_logical_operators_int_dtype_with_bool_dtype_and_reindex(",
          "def test_scalar_na_logical_ops_corners(",
          "def test_scalar_na_logical_ops_corners_aligns(",
          "def test_logical_ops_with_index(",
          "def test_reversed_xor_with_index_returns_series(",
          "def test_reversed_logical_op_with_index_returns_series(",
          "def test_reverse_ops_with_index(",
          "def test_logical_ops_label_based(",
          "def test_logical_ops_df_compat(",
          "def test_int_dtype_different_index_not_bool("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_missing.py": [
          "def test_categorical_nan_handling(",
          "def test_isna_for_inf(",
          "def test_timedelta64_nan(",
          "def test_logical_range_select(",
          "def test_valid(",
          "def test_hasnans_uncached_for_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_npfuncs.py": [
          "def test_ptp(",
          "def test_numpy_unique(",
          "def test_numpy_argwhere("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_reductions.py": [
          "def test_reductions_series_strings(",
          "def test_mode_extension_dtype(",
          "def test_reductions_td64_with_nat(",
          "def test_td64_sum_empty(",
          "def test_td64_summation_overflow(",
          "def test_prod_numpy16_bug(",
          "def test_validate_any_all_out_keepdims_raises(",
          "def test_validate_sum_initial(",
          "def test_validate_median_initial(",
          "def test_validate_stat_keepdims(",
          "def test_mean_with_convertible_string_raises(",
          "def test_mean_dont_convert_j_to_complex(",
          "def test_median_with_convertible_string_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_repr.py": [
          "def test_multilevel_name_print(",
          "def test_small_name_printing(",
          "def test_big_name_printing(",
          "def test_empty_name_printing(",
          "def test_float_range(",
          "def test_empty_object(",
          "def test_string(",
          "def test_object(",
          "def test_datetime(",
          "def test_various_names(",
          "def test_tuple_name(",
          "def test_tidy_repr_name_0(",
          "def test_newline(",
          "def test_empty_int64(",
          "def test_tidy_repr(",
          "def test_repr_bool_fails(",
          "def test_repr_name_iterable_indexable(",
          "def test_repr_should_return_str(",
          "def test_repr_max_rows(",
          "def test_unicode_string_with_unicode(",
          "def test_str_to_bytes_raises(",
          "def test_timeseries_repr_object_dtype(",
          "def test_latex_repr(",
          "def test_index_repr_in_frame_with_nan(",
          "def test_format_pre_1900_dates(",
          "def test_series_repr_nat(",
          "def test_float_repr(",
          "def test_different_null_objects(",
          "def test_categorical_repr_unicode(",
          "def test_categorical_repr(",
          "def test_categorical_series_repr(",
          "def test_categorical_series_repr_ordered(",
          "def test_categorical_series_repr_datetime(",
          "def test_categorical_series_repr_datetime_ordered(",
          "def test_categorical_series_repr_period(",
          "def test_categorical_series_repr_period_ordered(",
          "def test_categorical_series_repr_timedelta(",
          "def test_categorical_series_repr_timedelta_ordered("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_subclass.py": [
          "def test_indexing_sliced(",
          "def test_to_frame(",
          "def test_subclass_unstack(",
          "def test_subclass_empty_repr(",
          "def test_asof(",
          "def test_explode(",
          "def test_equals(",
          "def test_constructor_from_dict("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_ufunc.py": [
          "def test_unary_ufunc(",
          "def test_binary_ufunc_with_array(",
          "def test_binary_ufunc_with_index(",
          "def test_binary_ufunc_with_series(",
          "def test_binary_ufunc_scalar(",
          "def test_multiple_output_binary_ufuncs(",
          "def test_multiple_output_ufunc(",
          "def test_binary_ufunc_drops_series_name(",
          "def test_object_series_ok(",
          "def test_multiply(",
          "def test_add(",
          "def test_max(",
          "def test_min(",
          "def test_binary_ufunc_other_types(",
          "def test_object_dtype_ok(",
          "def test_outer(",
          "def test_np_matmul(",
          "def test_array_ufuncs_for_many_arguments(",
          "def test_np_fix("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_unary.py": [
          "def test_neg(",
          "def test_invert(",
          "def test_all_numeric_unary_operators(",
          "def test_unary_float_op_mask("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_validate.py": [
          "def test_validate_bool_args("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_cat_accessor.py": [
          "def test_getname_categorical_accessor(",
          "def test_cat_accessor(",
          "def test_cat_accessor_api(",
          "def test_cat_accessor_no_new_attributes(",
          "def test_categorical_delegations(",
          "def test_dt_accessor_api_for_categorical(",
          "def test_dt_accessor_api_for_categorical_invalid(",
          "def test_set_categories_setitem(",
          "def test_categorical_of_booleans_is_boolean("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_dt_accessor.py": [
          "def test_dt_namespace_accessor_datetime64(",
          "def test_dt_namespace_accessor_datetime64tz(",
          "def test_dt_namespace_accessor_timedelta(",
          "def test_dt_namespace_accessor_period(",
          "def test_dt_namespace_accessor_index_and_values(",
          "def test_dt_accessor_limited_display_api(",
          "def test_dt_accessor_ambiguous_freq_conversions(",
          "def test_dt_accessor_not_writeable(",
          "def test_dt_round(",
          "def test_dt_round_tz(",
          "def test_dt_round_tz_ambiguous(",
          "def test_dt_round_tz_nonexistent(",
          "def test_dt_round_nonnano_higher_resolution_no_op(",
          "def test_dt_namespace_accessor_categorical(",
          "def test_dt_tz_localize_categorical(",
          "def test_dt_tz_convert_categorical(",
          "def test_dt_other_accessors_categorical(",
          "def test_dt_accessor_no_new_attributes(",
          "def test_dt_accessor_datetime_name_accessors(",
          "def test_strftime(",
          "def test_strftime_dt64_days(",
          "def test_strftime_period_days(",
          "def test_strftime_dt64_microsecond_resolution(",
          "def test_strftime_period_hours(",
          "def test_strftime_period_minutes(",
          "def test_strftime_nat(",
          "def test_strftime_all_nat(",
          "def test_valid_dt_with_missing_values(",
          "def test_dt_accessor_api(",
          "def test_dt_accessor_invalid(",
          "def test_dt_accessor_updates_on_inplace(",
          "def test_date_tz(",
          "def test_dt_timetz_accessor(",
          "def test_isocalendar(",
          "def test_hour_index(",
          "def test_end_time_timevalues(",
          "def test_to_period(",
          "def test_normalize_pre_epoch_dates(",
          "def test_day_attribute_non_nano_beyond_int32("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_sparse_accessor.py": [
          "def test_sparse_accessor_updates_on_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_str_accessor.py": [
          "def test_str_attribute(",
          "def test_str_accessor_updates_on_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_datetime.py": [
          "def test_fancy_getitem(",
          "def test_fancy_setitem(",
          "def test_getitem_setitem_datetime_tz(",
          "def test_getitem_setitem_datetimeindex(",
          "def test_getitem_setitem_periodindex(",
          "def test_datetime_indexing(",
          "def test_indexing_with_duplicate_datetimeindex(",
          "def test_loc_getitem_over_size_cutoff(",
          "def test_indexing_over_size_cutoff_period_index(",
          "def test_indexing_unordered(",
          "def test_indexing_unordered2(",
          "def test_indexing(",
          "def test_getitem_str_month_with_datetimeindex(",
          "def test_getitem_str_year_with_datetimeindex(",
          "def test_getitem_str_second_with_datetimeindex(",
          "def test_compare_datetime_with_all_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_delitem.py": [
          "def test_delitem(",
          "def test_delitem_object_index(",
          "def test_delitem_missing_key(",
          "def test_delitem_extension_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_get.py": [
          "def test_get(",
          "def test_get_nan(",
          "def test_get_nan_multiple(",
          "def test_get_with_default(",
          "def test_get_with_ea(",
          "def test_getitem_get(",
          "def test_get_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_getitem.py": [
          "def test_getitem_object_index_float_string(",
          "def test_getitem_float_keys_tuple_values(",
          "def test_getitem_unrecognized_scalar(",
          "def test_getitem_negative_out_of_bounds(",
          "def test_getitem_out_of_bounds_indexerror(",
          "def test_getitem_out_of_bounds_empty_rangeindex_keyerror(",
          "def test_getitem_keyerror_with_integer_index(",
          "def test_getitem_int64(",
          "def test_getitem_full_range(",
          "def test_getitem_pydatetime_tz(",
          "def test_string_index_alias_tz_aware(",
          "def test_getitem_time_object(",
          "def test_getitem_scalar_categorical_index(",
          "def test_getitem_numeric_categorical_listlike_matches_scalar(",
          "def test_getitem_integer_categorical_not_positional(",
          "def test_getitem_str_with_timedeltaindex(",
          "def test_getitem_bool_index_positional(",
          "def test_getitem_partial_str_slice_with_datetimeindex(",
          "def test_getitem_slice_strings_with_datetimeindex(",
          "def test_getitem_partial_str_slice_with_timedeltaindex(",
          "def test_getitem_partial_str_slice_high_reso_with_timedeltaindex(",
          "def test_getitem_slice_2d(",
          "def test_getitem_median_slice_bug(",
          "def test_getitem_slice_date(",
          "def test_getitem_slice_float_raises(",
          "def test_getitem_slice_bug(",
          "def test_getitem_slice_integers(",
          "def test_getitem_no_matches(",
          "def test_getitem_intlist_intindex_periodvalues(",
          "def test_getitem_intlist_intervalindex_non_int(",
          "def test_getitem_intlist_multiindex_numeric_level(",
          "def test_getitem_uint_array_key(",
          "def test_getitem_boolean(",
          "def test_getitem_boolean_empty(",
          "def test_getitem_boolean_object(",
          "def test_getitem_boolean_dt64_copies(",
          "def test_getitem_boolean_corner(",
          "def test_getitem_boolean_different_order(",
          "def test_getitem_boolean_contiguous_preserve_freq(",
          "def test_getitem_callable(",
          "def test_getitem_generator(",
          "def test_getitem_ndim_deprecated(",
          "def test_getitem_multilevel_scalar_slice_not_implemented(",
          "def test_getitem_dataframe_raises(",
          "def test_getitem_assignment_series_alignment(",
          "def test_getitem_duplicate_index_mistyped_key_raises_keyerror(",
          "def test_getitem_1tuple_slice_without_multiindex(",
          "def test_getitem_preserve_name(",
          "def test_getitem_with_integer_labels(",
          "def test_getitem_missing(",
          "def test_getitem_fancy(",
          "def test_getitem_box_float64(",
          "def test_getitem_unordered_dup(",
          "def test_getitem_dups(",
          "def test_getitem_categorical_str(",
          "def test_slice_can_reorder_not_uniquely_indexed(",
          "def test_duplicated_index_getitem_positional_indexer(",
          "def test_getitem_dict_and_set_deprecated(",
          "def test_setitem_dict_and_set_disallowed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_indexing.py": [
          "def test_basic_indexing(",
          "def test_getitem_numeric_should_not_fallback_to_positional(",
          "def test_setitem_numeric_should_not_fallback_to_positional(",
          "def test_basic_getitem_with_labels(",
          "def test_basic_getitem_dt64tz_values(",
          "def test_getitem_setitem_ellipsis(",
          "def test_getitem_with_duplicates_indices(",
          "def test_getitem_setitem_integers(",
          "def test_series_box_timestamp(",
          "def test_series_box_timedelta(",
          "def test_getitem_ambiguous_keyerror(",
          "def test_getitem_dups_with_missing(",
          "def test_setitem_ambiguous_keyerror(",
          "def test_setitem(",
          "def test_setslice(",
          "def test_basic_getitem_setitem_corner(",
          "def test_slice(",
          "def test_timedelta_assignment(",
          "def test_underlying_data_conversion(",
          "def test_preserve_refs(",
          "def test_multilevel_preserve_name(",
          "def test_slice_with_negative_step(",
          "def test_tuple_index(",
          "def test_frozenset_index(",
          "def test_loc_setitem_all_false_indexer(",
          "def test_loc_boolean_indexer_non_matching_index(",
          "def test_loc_boolean_indexer_miss_matching_index(",
          "def test_loc_setitem_nested_data_enlargement(",
          "def test_loc_ea_numeric_index_oob_slice_end(",
          "def test_getitem_bool_int_key(",
          "def test_setitem_empty_indexer(",
          "def test_getitem_dict_and_set_deprecated(",
          "def test_getitem_dict_and_set_deprecated_multiindex(",
          "def test_setitem_dict_and_set_disallowed(",
          "def test_setitem_dict_and_set_disallowed_multiindex(",
          "def test_setitem_validation_scalar_bool(",
          "def test_setitem_validation_scalar_int(",
          "def test_setitem_validation_scalar_float("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_mask.py": [
          "def test_mask(",
          "def test_mask_casts(",
          "def test_mask_casts2(",
          "def test_mask_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_setitem.py": [
          "def test_setitem_none_nan(",
          "def test_setitem_multiindex_empty_slice(",
          "def test_setitem_with_string_index(",
          "def test_setitem_tuple_with_datetimetz_values(",
          "def test_setitem_with_tz(",
          "def test_setitem_with_tz_dst(",
          "def test_object_series_setitem_dt64array_exact_match(",
          "def test_setitem_negative_out_of_bounds(",
          "def test_setitem_series_object_dtype(",
          "def test_setitem_series(",
          "def test_setitem_slice_float_raises(",
          "def test_setitem_slice(",
          "def test_setitem_slice_integers(",
          "def test_setitem_slicestep(",
          "def test_setitem_multiindex_slice(",
          "def test_setitem_mask_cast(",
          "def test_setitem_mask_align_and_promote(",
          "def test_setitem_mask_promote_strs(",
          "def test_setitem_mask_promote(",
          "def test_setitem_boolean(",
          "def test_setitem_boolean_corner(",
          "def test_setitem_boolean_different_order(",
          "def test_setitem_boolean_python_list(",
          "def test_setitem_boolean_nullable_int_types(",
          "def test_setitem_with_bool_mask_and_values_matching_n_trues_in_length(",
          "def test_setitem_nan_with_bool(",
          "def test_setitem_mask_smallint_upcast(",
          "def test_setitem_mask_smallint_no_upcast(",
          "def test_setitem_invalidates_datetime_index_freq(",
          "def test_dt64tz_setitem_does_not_mutate_dti(",
          "def test_setitem_callable_key(",
          "def test_setitem_callable_other(",
          "def test_setitem_empty_series(",
          "def test_setitem_empty_series_datetimeindex_preserves_freq(",
          "def test_setitem_empty_series_timestamp_preserves_dtype(",
          "def test_append_timedelta_does_not_cast(",
          "def test_setitem_with_expansion_type_promotion(",
          "def test_setitem_not_contained(",
          "def test_setitem_keep_precision(",
          "def test_setitem_enlarge_with_na(",
          "def test_setitem_enlargement_object_none(",
          "def test_setitem_scalar_into_readonly_backing_data(",
          "def test_setitem_slice_into_readonly_backing_data(",
          "def test_setitem_categorical_assigning_ops(",
          "def test_setitem_nan_into_categorical(",
          "def test_setitem_non_bool_into_bool(",
          "def test_setitem_boolean_array_into_npbool(",
          "def test_int_key(",
          "def test_slice_key(",
          "def test_mask_key(",
          "def test_series_where(",
          "def test_index_where(",
          "def test_index_putmask(",
          "def test_setitem_example(",
          "def test_slice_key(",
          "def test_20643(",
          "def test_20643_comment(",
          "def test_15413(",
          "def test_32878_int_itemsize(",
          "def test_32878_complex_itemsize(",
          "def test_37692(",
          "def test_setitem_bool_int_float_consistency(",
          "def test_setitem_positional_with_casting(",
          "def test_setitem_positional_float_into_int_coerces(",
          "def test_setitem_int_not_positional(",
          "def test_setitem_with_bool_indexer(",
          "def test_setitem_bool_indexer_dont_broadcast_length1_values(",
          "def test_setitem_empty_mask_dont_upcast_dt64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_set_value.py": [
          "def test_series_set_value(",
          "def test_set_value_dt64(",
          "def test_set_value_str_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_take.py": [
          "def test_take_validate_axis(",
          "def test_take(",
          "def test_take_categorical(",
          "def test_take_slice_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_where.py": [
          "def test_where_unsafe_int(",
          "def test_where_unsafe_float(",
          "def test_where_unsafe_upcast(",
          "def test_where_unsafe(",
          "def test_where(",
          "def test_where_error(",
          "def test_where_array_like(",
          "def test_where_invalid_input(",
          "def test_where_ndframe_align(",
          "def test_where_setitem_invalid(",
          "def test_broadcast(",
          "def test_where_inplace(",
          "def test_where_dups(",
          "def test_where_numeric_with_string(",
          "def test_where_datetimelike_coerce(",
          "def test_where_datetimetz(",
          "def test_where_sparse(",
          "def test_where_empty_series_and_empty_cond_having_non_bool_dtypes(",
          "def test_where_categorical(",
          "def test_where_datetimelike_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_xs.py": [
          "def test_xs_datetimelike_wrapping(",
          "def test_xs_level_series(",
          "def test_series_getitem_multiindex_xs_by_label(",
          "def test_series_getitem_multiindex_xs(",
          "def test_series_xs_droplevel_false(",
          "def test_xs_key_as_list("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_add_prefix_suffix.py": [
          "def test_add_prefix_suffix(",
          "def test_add_prefix_suffix_axis(",
          "def test_add_prefix_suffix_invalid_axis("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_align.py": [
          "def test_align(",
          "def test_align_fill_method(",
          "def test_align_nocopy(",
          "def test_align_same_index(",
          "def test_align_multiindex(",
          "def test_align_with_dataframe_method(",
          "def test_align_dt64tzindex_mismatched_tzs(",
          "def test_align_periodindex(",
          "def test_align_left_fewer_levels(",
          "def test_align_left_different_named_levels("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_argsort.py": [
          "def test_argsort_axis(",
          "def test_argsort_numpy(",
          "def test_argsort(",
          "def test_argsort_stable(",
          "def test_argsort_preserve_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_asof.py": [
          "def test_asof_nanosecond_index_access(",
          "def test_basic(",
          "def test_scalar(",
          "def test_with_nan(",
          "def test_periodindex(",
          "def test_errors(",
          "def test_all_nans("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_astype.py": [
          "def test_astype_unitless_dt64_raises(",
          "def test_arg_for_errors_in_astype(",
          "def test_astype_dict_like(",
          "def test_astype_mixed_object_to_dt64tz(",
          "def test_astype_empty_constructor_equality(",
          "def test_astype_str_map(",
          "def test_astype_float_to_period(",
          "def test_astype_no_pandas_dtype(",
          "def test_astype_generic_timestamp_no_frequency(",
          "def test_astype_dt64_to_str(",
          "def test_astype_dt64tz_to_str(",
          "def test_astype_datetime(",
          "def test_astype_datetime64tz(",
          "def test_astype_str_cast_dt64(",
          "def test_astype_str_cast_td64(",
          "def test_dt64_series_astype_object(",
          "def test_td64_series_astype_object(",
          "def test_astype_ignores_errors_for_extension_dtypes(",
          "def test_astype_from_float_to_str(",
          "def test_astype_to_str_preserves_na(",
          "def test_astype(",
          "def test_astype_cast_nan_inf_int(",
          "def test_astype_cast_object_int_fail(",
          "def test_astype_float_to_uint_negatives_raise(",
          "def test_astype_cast_object_int(",
          "def test_astype_unicode(",
          "def test_astype_bytes(",
          "def test_astype_nan_to_bool(",
          "def test_astype_ea_to_datetimetzdtype(",
          "def test_astype_retain_attrs(",
          "def test_astype_string_to_extension_dtype_roundtrip(",
          "def test_astype_categorical_to_other(",
          "def test_astype_categorical_invalid_conversions(",
          "def test_astype_categoricaldtype(",
          "def test_astype_categorical_to_categorical(",
          "def test_astype_bool_missing_to_categorical(",
          "def test_astype_categories_raises(",
          "def test_astype_from_categorical(",
          "def test_astype_from_categorical_with_keywords(",
          "def test_astype_timedelta64_with_np_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_autocorr.py": [
          "def test_autocorr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_between.py": [
          "def test_between(",
          "def test_between_datetime_object_dtype(",
          "def test_between_period_values(",
          "def test_between_inclusive_string(",
          "def test_between_error_args("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_clip.py": [
          "def test_clip(",
          "def test_clip_types_and_nulls(",
          "def test_series_clipping_with_na_values(",
          "def test_clip_with_na_args(",
          "def test_clip_against_series(",
          "def test_clip_against_list_like(",
          "def test_clip_with_datetimes(",
          "def test_clip_with_timestamps_and_oob_datetimes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_combine.py": [
          "def test_combine_scalar("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_combine_first.py": [
          "def test_combine_first_period_datetime(",
          "def test_combine_first_name(",
          "def test_combine_first(",
          "def test_combine_first_dt64(",
          "def test_combine_first_dt_tz_values(",
          "def test_combine_first_timezone_series_with_empty_series(",
          "def test_combine_first_preserves_dtype(",
          "def test_combine_mixed_timezone("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_compare.py": [
          "def test_compare_axis(",
          "def test_compare_various_formats(",
          "def test_compare_with_equal_nulls(",
          "def test_compare_with_non_equal_nulls(",
          "def test_compare_multi_index(",
          "def test_compare_unaligned_objects(",
          "def test_compare_datetime64_and_string("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_convert_dtypes.py": [
          "def test_cases(",
          "def test_convert_dtypes(",
          "def test_convert_string_dtype(",
          "def test_convert_bool_dtype(",
          "def test_convert_byte_string_dtype(",
          "def test_convert_dtype_object_with_na(",
          "def test_convert_dtype_object_with_na_float(",
          "def test_convert_dtypes_pyarrow_to_np_nullable("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_copy.py": [
          "def test_copy(",
          "def test_copy_tzaware(",
          "def test_copy_name(",
          "def test_copy_index_name_checking("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_count.py": [
          "def test_count(",
          "def test_count_inf_as_na(",
          "def test_count_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_cov_corr.py": [
          "def test_cov(",
          "def test_cov_ddof(",
          "def test_corr(",
          "def test_corr_rank(",
          "def test_corr_invalid_method(",
          "def test_corr_callable_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_describe.py": [
          "def test_describe_ints(",
          "def test_describe_bools(",
          "def test_describe_strs(",
          "def test_describe_timedelta64(",
          "def test_describe_period(",
          "def test_describe_empty_object(",
          "def test_describe_with_tz(",
          "def test_describe_with_tz_numeric(",
          "def test_datetime_is_numeric_includes_datetime(",
          "def test_numeric_result_dtype(",
          "def test_describe_one_element_ea("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_diff.py": [
          "def test_diff_np(",
          "def test_diff_int(",
          "def test_diff_tz(",
          "def test_diff_dt64(",
          "def test_diff_dt64tz(",
          "def test_diff_bool(",
          "def test_diff_object_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_drop.py": [
          "def test_drop_unique_and_non_unique_index(",
          "def test_drop_exception_raised(",
          "def test_drop_with_ignore_errors(",
          "def test_drop_empty_list(",
          "def test_drop_non_empty_list(",
          "def test_drop_index_ea_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_dropna.py": [
          "def test_dropna_empty(",
          "def test_dropna_preserve_name(",
          "def test_dropna_no_nan(",
          "def test_dropna_intervals(",
          "def test_dropna_period_dtype(",
          "def test_datetime64_tz_dropna(",
          "def test_dropna_ignore_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_drop_duplicates.py": [
          "def test_drop_duplicates(",
          "def test_drop_duplicates_bool(",
          "def test_drop_duplicates_no_duplicates(",
          "def test_drop_duplicates_categorical_non_bool(",
          "def test_drop_duplicates_categorical_non_bool_keeplast(",
          "def test_drop_duplicates_categorical_non_bool_keepfalse(",
          "def test_drop_duplicates_categorical_non_bool2(",
          "def test_drop_duplicates_categorical_non_bool2_keeplast(",
          "def test_drop_duplicates_categorical_non_bool2_keepfalse(",
          "def test_drop_duplicates_categorical_bool(",
          "def test_drop_duplicates_categorical_bool_na(",
          "def test_drop_duplicates_ignore_index(",
          "def test_duplicated_arrow_dtype(",
          "def test_drop_duplicates_arrow_strings("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_dtypes.py": [
          "def test_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_duplicated.py": [
          "def test_duplicated_keep(",
          "def test_duplicated_nan_none(",
          "def test_duplicated_categorical_bool_na(",
          "def test_duplicated_mask(",
          "def test_duplicated_mask_no_duplicated_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_equals.py": [
          "def test_equals(",
          "def test_equals_list_array(",
          "def test_equals_false_negative(",
          "def test_equals_matching_nas(",
          "def test_equals_mismatched_nas(",
          "def test_equals_none_vs_nan(",
          "def test_equals_None_vs_float("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_explode.py": [
          "def test_basic(",
          "def test_mixed_type(",
          "def test_empty(",
          "def test_nested_lists(",
          "def test_multi_index(",
          "def test_large(",
          "def test_invert_array(",
          "def test_non_object_dtype(",
          "def test_typical_usecase(",
          "def test_nested_EA(",
          "def test_duplicate_index(",
          "def test_ignore_index(",
          "def test_explode_sets(",
          "def test_explode_scalars_can_ignore_index(",
          "def test_explode_pyarrow_list_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_fillna.py": [
          "def test_fillna_nat(",
          "def test_fillna_value_or_method(",
          "def test_fillna(",
          "def test_fillna_nonscalar(",
          "def test_fillna_aligns(",
          "def test_fillna_limit(",
          "def test_fillna_dont_cast_strings(",
          "def test_fillna_consistency(",
          "def test_fillna_downcast(",
          "def test_fillna_downcast_infer_objects_to_numeric(",
          "def test_timedelta_fillna(",
          "def test_datetime64_fillna(",
          "def test_datetime64_fillna_backfill(",
          "def test_datetime64_tz_fillna(",
          "def test_fillna_dt64tz_with_method(",
          "def test_fillna_pytimedelta(",
          "def test_fillna_period(",
          "def test_fillna_dt64_timestamp(",
          "def test_fillna_dt64_non_nao(",
          "def test_fillna_numeric_inplace(",
          "def test_fillna_categorical(",
          "def test_fillna_categorical_with_new_categories(",
          "def test_fillna_categorical_raises(",
          "def test_fillna_float_casting(",
          "def test_fillna_f32_upcast_with_dict(",
          "def test_fillna_invalid_method(",
          "def test_fillna_listlike_invalid(",
          "def test_fillna_method_and_limit_invalid(",
          "def test_fillna_datetime64_with_timezone_tzinfo(",
          "def test_fillna_categorical_accept_same_type(",
          "def test_fillna_bug(",
          "def test_ffill(",
          "def test_ffill_mixed_dtypes_without_missing_data(",
          "def test_bfill(",
          "def test_pad_nan(",
          "def test_series_fillna_limit(",
          "def test_series_pad_backfill_limit(",
          "def test_fillna_int(",
          "def test_datetime64tz_fillna_round_issue(",
          "def test_fillna_parr(",
          "def test_pad_backfill_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_get_numeric_data.py": [
          "def test_get_numeric_data_preserve_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_head_tail.py": [
          "def test_head_tail("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_infer_objects.py": [
          "def test_copy(",
          "def test_infer_objects_series(",
          "def test_infer_objects_interval(",
          "def test_infer_objects_bytes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_interpolate.py": [
          "def test_interpolate_period_values(",
          "def test_interpolate(",
          "def test_interpolate_time_raises_for_non_timeseries(",
          "def test_interpolate_cubicspline(",
          "def test_interpolate_pchip(",
          "def test_interpolate_akima(",
          "def test_interpolate_piecewise_polynomial(",
          "def test_interpolate_from_derivatives(",
          "def test_interpolate_corners(",
          "def test_interpolate_index_values(",
          "def test_interpolate_non_ts(",
          "def test_nan_interpolate(",
          "def test_nan_irregular_index(",
          "def test_nan_str_index(",
          "def test_interp_quad(",
          "def test_interp_scipy_basic(",
          "def test_interp_limit(",
          "def test_interpolate_invalid_nonpositive_limit(",
          "def test_interpolate_invalid_float_limit(",
          "def test_interp_invalid_method(",
          "def test_interp_invalid_method_and_value(",
          "def test_interp_limit_forward(",
          "def test_interp_unlimited(",
          "def test_interp_limit_bad_direction(",
          "def test_interp_limit_area(",
          "def test_interp_limit_direction_raises(",
          "def test_interp_limit_area_with_pad(",
          "def test_interp_limit_area_with_backfill(",
          "def test_interp_limit_direction(",
          "def test_interp_limit_to_ends(",
          "def test_interp_limit_before_ends(",
          "def test_interp_all_good(",
          "def test_interp_multiIndex(",
          "def test_interp_nonmono_raise(",
          "def test_interp_datetime64(",
          "def test_interp_pad_datetime64tz_values(",
          "def test_interp_limit_no_nans(",
          "def test_no_order(",
          "def test_interpolate_spline_invalid_order(",
          "def test_spline(",
          "def test_spline_extrapolate(",
          "def test_spline_smooth(",
          "def test_spline_interpolation(",
          "def test_interp_timedelta64(",
          "def test_series_interpolate_method_values(",
          "def test_series_interpolate_intraday(",
          "def test_interp_non_timedelta_index(",
          "def test_interpolate_timedelta_index(",
          "def test_interpolate_unsorted_index(",
          "def test_interpolate_asfreq_raises(",
          "def test_interpolate_fill_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isin.py": [
          "def test_isin(",
          "def test_isin_with_string_scalar(",
          "def test_isin_datetimelike_mismatched_reso(",
          "def test_isin_datetimelike_mismatched_reso_list(",
          "def test_isin_with_i8(",
          "def test_isin_empty(",
          "def test_isin_read_only(",
          "def test_isin_dt64_values_vs_ints(",
          "def test_isin_tzawareness_mismatch(",
          "def test_isin_period_freq_mismatch(",
          "def test_isin_float_in_int_series(",
          "def test_isin_masked_types(",
          "def test_isin_large_series_mixed_dtypes_and_nan(",
          "def test_isin_complex_numbers(",
          "def test_isin_filtering_with_mixed_object_types(",
          "def test_isin_filtering_on_iterable("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isna.py": [
          "def test_isna_period_dtype(",
          "def test_isna("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_is_monotonic.py": [
          "def test_is_monotonic_numeric(",
          "def test_is_monotonic_dt64("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_is_unique.py": [
          "def test_is_unique(",
          "def test_is_unique_class_ne("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_item.py": [
          "def test_item("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_map.py": [
          "def test_series_map_box_timedelta(",
          "def test_map_callable(",
          "def test_map_same_length_inference_bug(",
          "def test_series_map_box_timestamps(",
          "def test_map_series_stringdtype(",
          "def test_map_categorical_with_nan_values(",
          "def test_map_empty_integer_series(",
          "def test_map_empty_integer_series_with_datetime_index(",
          "def test_map_simple_str_callables_same_as_astype(",
          "def test_list_raises(",
          "def test_map(",
          "def test_map_empty(",
          "def test_map_compat(",
          "def test_map_int(",
          "def test_map_type_inference(",
          "def test_map_decimal(",
          "def test_map_na_exclusion(",
          "def test_map_dict_with_tuple_keys(",
          "def test_map_counter(",
          "def test_map_defaultdict(",
          "def test_map_dict_na_key(",
          "def test_map_defaultdict_na_key(",
          "def test_map_defaultdict_missing_key(",
          "def test_map_defaultdict_unmutated(",
          "def test_map_dict_ignore_na(",
          "def test_map_defaultdict_ignore_na(",
          "def test_map_categorical_na_ignore(",
          "def test_map_dict_subclass_with_missing(",
          "def test_map_dict_subclass_without_missing(",
          "def test_map_abc_mapping(",
          "def test_map_abc_mapping_with_missing(",
          "def test_map_box(",
          "def test_map_categorical(",
          "def test_map_categorical_na_action(",
          "def test_map_datetimetz(",
          "def test_map_missing_mixed(",
          "def test_map_scalar_on_date_time_index_aware_series(",
          "def test_map_float_to_string_precision(",
          "def test_map_to_timedelta(",
          "def test_map_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_matmul.py": [
          "def test_matmul("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nlargest.py": [
          "def test_nlargest_error(",
          "def test_nsmallest_nlargest(",
          "def test_nlargest_misc(",
          "def test_nlargest_n(",
          "def test_nlargest_boundary_integer(",
          "def test_nlargest_boundary_float(",
          "def test_nlargest_boundary_datetimelike(",
          "def test_nlargest_duplicate_keep_all_ties(",
          "def test_nlargest_boolean(",
          "def test_nlargest_nullable(",
          "def test_nsmallest_nan_when_keep_is_all("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nunique.py": [
          "def test_nunique(",
          "def test_nunique_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_pct_change.py": [
          "def test_pct_change(",
          "def test_pct_change_with_duplicate_axis(",
          "def test_pct_change_shift_over_nas(",
          "def test_pct_change_periods_freq(",
          "def test_pct_change_with_duplicated_indices(",
          "def test_pct_change_no_warning_na_beginning("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_pop.py": [
          "def test_pop("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_quantile.py": [
          "def test_quantile(",
          "def test_quantile_multi(",
          "def test_quantile_interpolation(",
          "def test_quantile_interpolation_dtype(",
          "def test_quantile_nan(",
          "def test_quantile_box(",
          "def test_datetime_timedelta_quantiles(",
          "def test_quantile_nat(",
          "def test_quantile_sparse(",
          "def test_quantile_empty(",
          "def test_quantile_dtypes(",
          "def test_quantile_all_na(",
          "def test_quantile_dtype_size("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rank.py": [
          "def test_rank(",
          "def test_rank_categorical(",
          "def test_rank_signature(",
          "def test_rank_tie_methods(",
          "def test_rank_tie_methods_on_infs_nans(",
          "def test_rank_desc_mix_nans_infs(",
          "def test_rank_methods_series(",
          "def test_rank_dense_method(",
          "def test_rank_descending(",
          "def test_rank_int(",
          "def test_rank_object_bug(",
          "def test_rank_modify_inplace(",
          "def test_rank_ea_small_values(",
          "def test_rank_dense_pct(",
          "def test_rank_min_pct(",
          "def test_rank_max_pct(",
          "def test_rank_average_pct(",
          "def test_rank_first_pct(",
          "def test_pct_max_many_rows("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex.py": [
          "def test_reindex(",
          "def test_reindex_nan(",
          "def test_reindex_series_add_nat(",
          "def test_reindex_with_datetimes(",
          "def test_reindex_corner(",
          "def test_reindex_pad(",
          "def test_reindex_pad2(",
          "def test_reindex_inference(",
          "def test_reindex_downcasting(",
          "def test_reindex_nearest(",
          "def test_reindex_int(",
          "def test_reindex_bool(",
          "def test_reindex_bool_pad(",
          "def test_reindex_categorical(",
          "def test_reindex_astype_order_consistency(",
          "def test_reindex_fill_value(",
          "def test_reindex_fill_value_datetimelike_upcast(",
          "def test_reindex_datetimeindexes_tz_naive_and_aware(",
          "def test_reindex_empty_series_tz_dtype(",
          "def test_reindex_periodindex_with_object(",
          "def test_reindex_too_many_args(",
          "def test_reindex_double_index(",
          "def test_reindex_no_posargs(",
          "def test_reindex_empty_with_level(",
          "def test_reindex_missing_category(",
          "def test_reindexing_with_float64_NA_log(",
          "def test_reindex_expand_nonnano_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex_like.py": [
          "def test_reindex_like(",
          "def test_reindex_like_nearest("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rename.py": [
          "def test_rename(",
          "def test_rename_partial_dict(",
          "def test_rename_retain_index_name(",
          "def test_rename_by_series(",
          "def test_rename_set_name(",
          "def test_rename_set_name_inplace(",
          "def test_rename_axis_supported(",
          "def test_rename_inplace(",
          "def test_rename_with_custom_indexer(",
          "def test_rename_with_custom_indexer_inplace(",
          "def test_rename_callable(",
          "def test_rename_none(",
          "def test_rename_series_with_multiindex(",
          "def test_rename_series_with_multiindex_keeps_ea_dtypes(",
          "def test_rename_error_arg(",
          "def test_rename_copy_false("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rename_axis.py": [
          "def test_rename_axis_mapper(",
          "def test_rename_axis_inplace(",
          "def test_rename_axis_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_repeat.py": [
          "def test_repeat(",
          "def test_numpy_repeat(",
          "def test_repeat_with_multiindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_replace.py": [
          "def test_replace_explicit_none(",
          "def test_replace_noop_doesnt_downcast(",
          "def test_replace(",
          "def test_replace_nan_with_inf(",
          "def test_replace_listlike_value_listlike_target(",
          "def test_replace_gh5319(",
          "def test_replace_datetime64(",
          "def test_replace_nat_with_tz(",
          "def test_replace_timedelta_td64(",
          "def test_replace_with_single_list(",
          "def test_replace_mixed_types(",
          "def test_replace_bool_with_string_no_op(",
          "def test_replace_bool_with_string(",
          "def test_replace_bool_with_bool(",
          "def test_replace_with_dict_with_bool_keys(",
          "def test_replace_Int_with_na(",
          "def test_replace2(",
          "def test_replace_cascade(",
          "def test_replace_with_dictlike_and_string_dtype(",
          "def test_replace_with_empty_dictlike(",
          "def test_replace_string_with_number(",
          "def test_replace_replacer_equals_replacement(",
          "def test_replace_unicode_with_number(",
          "def test_replace_mixed_types_with_string(",
          "def test_replace_categorical(",
          "def test_replace_categorical_inplace(",
          "def test_replace_categorical_single(",
          "def test_replace_with_no_overflowerror(",
          "def test_replace_commutative(",
          "def test_replace_no_cast(",
          "def test_replace_invalid_to_replace(",
          "def test_replace_nonbool_regex(",
          "def test_replace_empty_copy(",
          "def test_replace_only_one_dictlike_arg(",
          "def test_replace_extension_other(",
          "def test_replace_ea_dtype_with_method(",
          "def test_replace_interval_with_method(",
          "def test_replace_datetimelike_with_method(",
          "def test_replace_with_compiled_regex(",
          "def test_pandas_replace_na(",
          "def test_replace_dtype(",
          "def test_replace_string_dtype(",
          "def test_replace_string_dtype_list_to_replace(",
          "def test_replace_string_dtype_regex(",
          "def test_replace_nullable_numeric(",
          "def test_replace_regex_dtype_series(",
          "def test_replace_different_int_types(",
          "def test_replace_value_none_dtype_numeric(",
          "def test_replace_change_dtype_series(",
          "def test_replace_na_in_obj_column(",
          "def test_replace_numeric_column_with_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reset_index.py": [
          "def test_reset_index_dti_round_trip(",
          "def test_reset_index(",
          "def test_reset_index_name(",
          "def test_reset_index_level(",
          "def test_reset_index_range(",
          "def test_reset_index_drop_errors(",
          "def test_reset_index_with_drop(",
          "def test_reset_index_inplace_and_drop_ignore_name(",
          "def test_reset_index_dtypes_on_empty_series_with_multiindex(",
          "def test_column_name_duplicates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_round.py": [
          "def test_round(",
          "def test_round_numpy(",
          "def test_round_numpy_with_nan(",
          "def test_round_builtin(",
          "def test_round_nat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_searchsorted.py": [
          "def test_searchsorted(",
          "def test_searchsorted_numeric_dtypes_scalar(",
          "def test_searchsorted_numeric_dtypes_vector(",
          "def test_searchsorted_datetime64_scalar(",
          "def test_searchsorted_datetime64_scalar_mixed_timezones(",
          "def test_searchsorted_datetime64_list(",
          "def test_searchsorted_sorter(",
          "def test_searchsorted_dataframe_fail("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_set_name.py": [
          "def test_set_name(",
          "def test_set_name_attribute("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_size.py": [
          "def test_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_sort_index.py": [
          "def test_sort_index_name(",
          "def test_sort_index(",
          "def test_sort_index_inplace(",
          "def test_sort_index_level(",
          "def test_sort_index_multiindex(",
          "def test_sort_index_kind(",
          "def test_sort_index_na_position(",
          "def test_sort_index_intervals(",
          "def test_sort_index_ignore_index(",
          "def test_sort_index_ascending_list(",
          "def test_sort_index_ascending_bad_value_raises(",
          "def test_sort_index_multiindex_key(",
          "def test_sort_index_multiindex_key_multi_level(",
          "def test_sort_index_key(",
          "def test_sort_index_key_int(",
          "def test_sort_index_kind_key(",
          "def test_sort_index_kind_neg_key(",
          "def test_sort_index_na_position_key(",
          "def test_changes_length_raises(",
          "def test_sort_values_key_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_sort_values.py": [
          "def test_sort_values(",
          "def test_sort_values_categorical(",
          "def test_sort_values_ignore_index(",
          "def test_mergesort_descending_stability(",
          "def test_sort_values_validate_ascending_for_value_error(",
          "def test_sort_values_validate_ascending_functional(",
          "def test_sort_values_key(",
          "def test_sort_values_key_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_tolist.py": [
          "def test_tolist_scalar_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_csv.py": [
          "def test_from_csv(",
          "def test_to_csv(",
          "def test_to_csv_unicode_index(",
          "def test_to_csv_float_format(",
          "def test_to_csv_list_entries(",
          "def test_to_csv_path_is_none(",
          "def test_to_csv_compression(",
          "def test_to_csv_interval_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_dict.py": [
          "def test_to_dict(",
          "def test_to_dict_return_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_frame.py": [
          "def test_to_frame_respects_name_none(",
          "def test_to_frame(",
          "def test_to_frame_expanddim("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_numpy.py": [
          "def test_to_numpy_na_value(",
          "def test_to_numpy_cast_before_setting_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_truncate.py": [
          "def test_truncate_datetimeindex_tz(",
          "def test_truncate_periodindex(",
          "def test_truncate_one_element_series(",
          "def test_truncate_index_only_one_unique_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_tz_localize.py": [
          "def test_series_tz_localize_ambiguous_bool(",
          "def test_series_tz_localize_matching_index(",
          "def test_tz_localize_nonexistent(",
          "def test_series_tz_localize_empty("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_unique.py": [
          "def test_unique_uint64(",
          "def test_unique_data_ownership(",
          "def test_unique(",
          "def test_unique_nan_object_dtype(",
          "def test_unique_none(",
          "def test_unique_categorical(",
          "def test_tz_unique("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_unstack.py": [
          "def test_unstack_preserves_object(",
          "def test_unstack(",
          "def test_unstack_tuplename_in_multiindex(",
          "def test_unstack_mixed_type_name_in_multiindex(",
          "def test_unstack_multi_index_categorical_values(",
          "def test_unstack_mixed_level_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_update.py": [
          "def test_update(",
          "def test_update_dtypes(",
          "def test_update_from_non_series(",
          "def test_update_extension_array_series(",
          "def test_update_with_categorical_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_values.py": [
          "def test_values_object_extension_dtypes(",
          "def test_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_value_counts.py": [
          "def test_value_counts_datetime(",
          "def test_value_counts_datetime_tz(",
          "def test_value_counts_period(",
          "def test_value_counts_categorical_ordered(",
          "def test_value_counts_categorical_not_ordered(",
          "def test_value_counts_categorical(",
          "def test_value_counts_categorical_with_nan(",
          "def test_value_counts_bool_with_nan(",
          "def test_value_counts_complex_numbers("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_view.py": [
          "def test_view_i8_to_datetimelike(",
          "def test_view_tz(",
          "def test_view_between_datetimelike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\conftest.py": [
          "def test_something(",
          "def test_something("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_api.py": [
          "def test_api(",
          "def test_api_mi_raises(",
          "def test_api_per_dtype(",
          "def test_api_per_method(",
          "def test_api_for_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_case_justify.py": [
          "def test_title(",
          "def test_title_mixed_object(",
          "def test_lower_upper(",
          "def test_lower_upper_mixed_object(",
          "def test_capitalize(",
          "def test_capitalize_mixed_object(",
          "def test_swapcase(",
          "def test_swapcase_mixed_object(",
          "def test_casefold(",
          "def test_casemethods(",
          "def test_pad(",
          "def test_pad_mixed_object(",
          "def test_pad_fillchar(",
          "def test_pad_fillchar_bad_arg_raises(",
          "def test_pad_width_bad_arg_raises(",
          "def test_center_ljust_rjust(",
          "def test_center_ljust_rjust_mixed_object(",
          "def test_center_ljust_rjust_fillchar(",
          "def test_center_ljust_rjust_fillchar_bad_arg_raises(",
          "def test_zfill(",
          "def test_wrap(",
          "def test_wrap_unicode("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_cat.py": [
          "def test_str_cat_name(",
          "def test_str_cat(",
          "def test_str_cat_raises_intuitive_error(",
          "def test_str_cat_categorical(",
          "def test_str_cat_wrong_dtype_raises(",
          "def test_str_cat_mixed_inputs(",
          "def test_str_cat_align_indexed(",
          "def test_str_cat_align_mixed_inputs(",
          "def test_str_cat_all_na(",
          "def test_str_cat_special_cases(",
          "def test_cat_on_filtered_index(",
          "def test_cat_different_classes(",
          "def test_cat_on_series_dot_str("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_extract.py": [
          "def test_extract_expand_kwarg_wrong_type_raises(",
          "def test_extract_expand_kwarg(",
          "def test_extract_expand_False_mixed_object(",
          "def test_extract_expand_index_raises(",
          "def test_extract_expand_no_capture_groups_raises(",
          "def test_extract_expand_single_capture_group(",
          "def test_extract_expand_capture_groups(",
          "def test_extract_expand_capture_groups_index(",
          "def test_extract_single_series_name_is_preserved(",
          "def test_extract_expand_True(",
          "def test_extract_expand_True_mixed_object(",
          "def test_extract_expand_True_single_capture_group_raises(",
          "def test_extract_expand_True_single_capture_group(",
          "def test_extract_series(",
          "def test_extract_optional_groups(",
          "def test_extract_dataframe_capture_groups_index(",
          "def test_extract_single_group_returns_frame(",
          "def test_extractall(",
          "def test_extractall_column_names(",
          "def test_extractall_single_group(",
          "def test_extractall_single_group_with_quantifier(",
          "def test_extractall_no_matches(",
          "def test_extractall_stringindex(",
          "def test_extractall_no_capture_groups_raises(",
          "def test_extract_index_one_two_groups(",
          "def test_extractall_same_as_extract(",
          "def test_extractall_same_as_extract_subject_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_find_replace.py": [
          "def test_contains(",
          "def test_contains_object_mixed(",
          "def test_contains_na_kwarg_for_object_category(",
          "def test_contains_na_kwarg_for_nullable_string_dtype(",
          "def test_contains_moar(",
          "def test_contains_nan(",
          "def test_startswith(",
          "def test_startswith_nullable_string_dtype(",
          "def test_endswith(",
          "def test_endswith_nullable_string_dtype(",
          "def test_replace(",
          "def test_replace_max_replacements(",
          "def test_replace_mixed_object(",
          "def test_replace_unicode(",
          "def test_replace_wrong_repl_type_raises(",
          "def test_replace_callable(",
          "def test_replace_callable_raises(",
          "def test_replace_callable_named_groups(",
          "def test_replace_compiled_regex(",
          "def test_replace_compiled_regex_mixed_object(",
          "def test_replace_compiled_regex_unicode(",
          "def test_replace_compiled_regex_raises(",
          "def test_replace_compiled_regex_callable(",
          "def test_replace_literal(",
          "def test_replace_literal_callable_raises(",
          "def test_replace_literal_compiled_raises(",
          "def test_replace_moar(",
          "def test_replace_not_case_sensitive_not_regex(",
          "def test_replace_regex(",
          "def test_replace_regex_single_character(",
          "def test_match(",
          "def test_match_mixed_object(",
          "def test_match_na_kwarg(",
          "def test_match_case_kwarg(",
          "def test_fullmatch(",
          "def test_fullmatch_na_kwarg(",
          "def test_fullmatch_case_kwarg(",
          "def test_findall(",
          "def test_findall_mixed_object(",
          "def test_find(",
          "def test_find_bad_arg_raises(",
          "def test_find_nan(",
          "def test_translate(",
          "def test_translate_mixed_object(",
          "def test_flags_kwarg("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_get_dummies.py": [
          "def test_get_dummies(",
          "def test_get_dummies_index(",
          "def test_get_dummies_with_name_dummy(",
          "def test_get_dummies_with_name_dummy_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_split_partition.py": [
          "def test_split(",
          "def test_split_more_than_one_char(",
          "def test_split_more_regex_split(",
          "def test_split_regex(",
          "def test_split_regex_explicit(",
          "def test_split_object_mixed(",
          "def test_split_n(",
          "def test_rsplit(",
          "def test_rsplit_max_number(",
          "def test_split_blank_string(",
          "def test_split_blank_string_with_non_empty(",
          "def test_split_noargs(",
          "def test_split_maxsplit(",
          "def test_split_no_pat_with_nonzero_n(",
          "def test_split_to_dataframe_no_splits(",
          "def test_split_to_dataframe(",
          "def test_split_to_dataframe_unequal_splits(",
          "def test_split_to_dataframe_with_index(",
          "def test_split_to_multiindex_expand_no_splits(",
          "def test_split_to_multiindex_expand(",
          "def test_split_to_multiindex_expand_unequal_splits(",
          "def test_rsplit_to_dataframe_expand_no_splits(",
          "def test_rsplit_to_dataframe_expand(",
          "def test_rsplit_to_dataframe_expand_with_index(",
          "def test_rsplit_to_multiindex_expand_no_split(",
          "def test_rsplit_to_multiindex_expand(",
          "def test_rsplit_to_multiindex_expand_n(",
          "def test_split_nan_expand(",
          "def test_split_with_name_series(",
          "def test_split_with_name_index(",
          "def test_partition_series_more_than_one_char(",
          "def test_partition_series_none(",
          "def test_partition_series_not_split(",
          "def test_partition_series_unicode(",
          "def test_partition_series_stdlib(",
          "def test_partition_index(",
          "def test_partition_to_dataframe(",
          "def test_partition_to_dataframe_from_series(",
          "def test_partition_with_name(",
          "def test_partition_with_name_expand(",
          "def test_partition_index_with_name(",
          "def test_partition_index_with_name_expand_false(",
          "def test_partition_sep_kwarg(",
          "def test_get(",
          "def test_get_mixed_object(",
          "def test_get_bounds(",
          "def test_get_complex(",
          "def test_get_complex_nested(",
          "def test_get_strings("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_strings.py": [
          "def test_startswith_endswith_non_str_patterns(",
          "def test_iter_raises(",
          "def test_count(",
          "def test_count_mixed_object(",
          "def test_repeat(",
          "def test_repeat_mixed_object(",
          "def test_repeat_with_null(",
          "def test_empty_str_methods(",
          "def test_ismethods(",
          "def test_isnumeric_unicode(",
          "def test_isnumeric_unicode_missing(",
          "def test_spilt_join_roundtrip(",
          "def test_spilt_join_roundtrip_mixed_object(",
          "def test_len(",
          "def test_len_mixed(",
          "def test_index(",
          "def test_index_not_found_raises(",
          "def test_index_wrong_type_raises(",
          "def test_index_missing(",
          "def test_pipe_failures(",
          "def test_slice(",
          "def test_slice_mixed_object(",
          "def test_slice_replace(",
          "def test_strip_lstrip_rstrip(",
          "def test_strip_lstrip_rstrip_mixed_object(",
          "def test_strip_lstrip_rstrip_args(",
          "def test_removeprefix(",
          "def test_removesuffix(",
          "def test_string_slice_get_syntax(",
          "def test_string_slice_out_of_bounds_nested(",
          "def test_string_slice_out_of_bounds(",
          "def test_encode_decode(",
          "def test_encode_errors_kwarg(",
          "def test_decode_errors_kwarg(",
          "def test_normalize(",
          "def test_normalize_bad_arg_raises(",
          "def test_normalize_index(",
          "def test_index_str_accessor_visibility(",
          "def test_index_str_accessor_non_string_values_raises(",
          "def test_index_str_accessor_multiindex_raises(",
          "def test_str_accessor_no_new_attributes(",
          "def test_cat_on_bytes_raises(",
          "def test_str_accessor_in_apply_func(",
          "def test_zfill(",
          "def test_zfill_with_non_integer_argument(",
          "def test_zfill_with_leading_sign(",
          "def test_get_with_dict_label(",
          "def test_series_str_decode("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_string_array.py": [
          "def test_string_array(",
          "def test_string_array_numeric_integer_array(",
          "def test_string_array_boolean_array(",
          "def test_string_array_extract("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_datetime.py": [
          "def test_to_datetime_readonly(",
          "def test_to_datetime_format(",
          "def test_to_datetime_format_scalar(",
          "def test_to_datetime_format_YYYYMMDD(",
          "def test_to_datetime_format_YYYYMMDD_with_nat(",
          "def test_to_datetime_format_YYYYMM_with_nat(",
          "def test_to_datetime_format_YYYYMMDD_ignore(",
          "def test_to_datetime_format_YYYYMMDD_ignore_with_outofbounds(",
          "def test_to_datetime_format_YYYYMMDD_coercion(",
          "def test_to_datetime_format_YYYYMMDD_with_none(",
          "def test_to_datetime_format_YYYYMMDD_overflow(",
          "def test_to_datetime_with_NA(",
          "def test_to_datetime_with_NA_with_warning(",
          "def test_to_datetime_format_integer(",
          "def test_int_to_datetime_format_YYYYMMDD_typeerror(",
          "def test_to_datetime_format_microsecond(",
          "def test_to_datetime_format_time(",
          "def test_to_datetime_with_non_exact(",
          "def test_non_exact_doesnt_parse_whole_string(",
          "def test_parse_nanoseconds_with_formula(",
          "def test_to_datetime_format_weeks(",
          "def test_to_datetime_parse_tzname_or_tzoffset(",
          "def test_to_datetime_parse_tzname_or_tzoffset_utc_false_deprecated(",
          "def test_to_datetime_parse_tzname_or_tzoffset_different_tz_to_utc(",
          "def test_to_datetime_parse_timezone_malformed(",
          "def test_to_datetime_parse_timezone_keeps_name(",
          "def test_to_datetime_overflow(",
          "def test_to_datetime_mixed_datetime_and_string(",
          "def test_to_datetime_mixed_date_and_string(",
          "def test_to_datetime_mixed_datetime_and_string_with_format(",
          "def test_to_datetime_mixed_datetime_and_string_with_format_mixed_offsets_utc_false(",
          "def test_to_datetime_mixed_offsets_with_none_tz(",
          "def test_to_datetime_mixed_offsets_with_none(",
          "def test_to_datetime_mixed_datetime_and_string_with_format_raises(",
          "def test_to_datetime_np_str(",
          "def test_to_datetime_iso_week_year_format(",
          "def test_error_iso_week_year(",
          "def test_to_datetime_dtarr(",
          "def test_to_datetime_arrow(",
          "def test_to_datetime_pydatetime(",
          "def test_to_datetime_YYYYMMDD(",
          "def test_to_datetime_unparsable_ignore(",
          "def test_to_datetime_now(",
          "def test_to_datetime_today(",
          "def test_to_datetime_today_now_unicode_bytes(",
          "def test_to_datetime_now_with_format(",
          "def test_to_datetime_dt64s(",
          "def test_to_datetime_dt64s_and_str(",
          "def test_to_datetime_dt64s_out_of_ns_bounds(",
          "def test_to_datetime_dt64d_out_of_bounds(",
          "def test_to_datetime_array_of_dt64s(",
          "def test_out_of_bounds_errors_ignore(",
          "def test_to_datetime_tz(",
          "def test_to_datetime_tz_mixed(",
          "def test_to_datetime_different_offsets(",
          "def test_to_datetime_tz_pytz(",
          "def test_to_datetime_utc_true(",
          "def test_to_datetime_utc_true_scalar(",
          "def test_to_datetime_utc_true_with_series_single_value(",
          "def test_to_datetime_utc_true_with_series_tzaware_string(",
          "def test_to_datetime_utc_true_with_series_datetime_ns(",
          "def test_to_datetime_tz_psycopg2(",
          "def test_datetime_bool(",
          "def test_datetime_bool_arrays_mixed(",
          "def test_datetime_invalid_datatype(",
          "def test_invalid_format_raises(",
          "def test_datetime_invalid_scalar(",
          "def test_datetime_outofbounds_scalar(",
          "def test_datetime_invalid_index(",
          "def test_to_datetime_cache(",
          "def test_to_datetime_from_deque(",
          "def test_to_datetime_cache_series(",
          "def test_to_datetime_cache_scalar(",
          "def test_convert_object_to_datetime_with_cache(",
          "def test_to_datetime_converts_null_like_to_nat(",
          "def test_week_without_day_and_calendar_year(",
          "def test_to_datetime_coerce(",
          "def test_to_datetime_coerce_oob(",
          "def test_to_datetime_malformed_no_raise(",
          "def test_to_datetime_malformed_raise(",
          "def test_iso_8601_strings_with_same_offset(",
          "def test_iso_8601_strings_with_different_offsets(",
          "def test_iso_8601_strings_with_different_offsets_utc(",
          "def test_mixed_offsets_with_native_datetime_raises(",
          "def test_non_iso_strings_with_tz_offset(",
          "def test_timestamp_utc_true(",
          "def test_to_datetime_with_format_out_of_bounds(",
          "def test_to_datetime_utc(",
          "def test_to_datetime_fixed_offset(",
          "def test_to_datetime_mixed_offsets_with_utc_false_deprecated(",
          "def test_to_datetime_month_or_year_unit_int(",
          "def test_to_datetime_month_or_year_unit_non_round_float(",
          "def test_unit(",
          "def test_unit_array_mixed_nans(",
          "def test_unit_array_mixed_nans_large_int(",
          "def test_to_datetime_invalid_str_not_out_of_bounds_valuerror(",
          "def test_unit_consistency(",
          "def test_unit_with_numeric(",
          "def test_unit_with_numeric_coerce(",
          "def test_unit_mixed(",
          "def test_unit_rounding(",
          "def test_unit_ignore_keeps_name(",
          "def test_to_datetime_errors_ignore_utc_true(",
          "def test_to_datetime_unit(",
          "def test_to_datetime_unit_with_nulls(",
          "def test_to_datetime_unit_fractional_seconds(",
          "def test_to_datetime_unit_na_values(",
          "def test_to_datetime_unit_invalid(",
          "def test_to_timestamp_unit_coerce(",
          "def test_float_to_datetime_raise_near_bounds(",
          "def test_dataframe(",
          "def test_dataframe_dict_with_constructable(",
          "def test_dataframe_field_aliases_column_subset(",
          "def test_dataframe_field_aliases(",
          "def test_dataframe_str_dtype(",
          "def test_dataframe_coerce(",
          "def test_dataframe_extra_keys_raisesm(",
          "def test_dataframe_missing_keys_raises(",
          "def test_dataframe_duplicate_columns_raises(",
          "def test_dataframe_int16(",
          "def test_dataframe_mixed(",
          "def test_dataframe_float(",
          "def test_dataframe_utc_true(",
          "def test_to_datetime_barely_out_of_bounds(",
          "def test_to_datetime_iso8601(",
          "def test_to_datetime_iso8601_fails(",
          "def test_to_datetime_iso8601_exact_fails(",
          "def test_to_datetime_iso8601_non_exact(",
          "def test_to_datetime_iso8601_separator(",
          "def test_to_datetime_iso8601_valid(",
          "def test_to_datetime_iso8601_non_padded(",
          "def test_to_datetime_iso8601_with_timezone_valid(",
          "def test_to_datetime_default(",
          "def test_to_datetime_respects_dayfirst(",
          "def test_to_datetime_on_datetime64_series(",
          "def test_to_datetime_with_space_in_series(",
          "def test_to_datetime_with_apply(",
          "def test_to_datetime_timezone_name(",
          "def test_to_datetime_with_apply_with_empty_str(",
          "def test_to_datetime_empty_stt(",
          "def test_to_datetime_empty_str_list(",
          "def test_to_datetime_zero(",
          "def test_to_datetime_strings(",
          "def test_to_datetime_strings_variation(",
          "def test_to_datetime_strings_vs_constructor(",
          "def test_to_datetime_unprocessable_input(",
          "def test_to_datetime_unhashable_input(",
          "def test_to_datetime_other_datetime64_units(",
          "def test_to_datetime_list_of_integers(",
          "def test_to_datetime_overflow(",
          "def test_string_invalid_operation(",
          "def test_string_na_nat_conversion(",
          "def test_string_na_nat_conversion_malformed(",
          "def test_string_na_nat_conversion_with_name(",
          "def test_dti_constructor_numpy_timeunits(",
          "def test_dayfirst(",
          "def test_dayfirst_warnings_valid_input(",
          "def test_dayfirst_warnings_invalid_input(",
          "def test_to_datetime_dta_tz(",
          "def test_guess_datetime_format_for_array(",
          "def test_guess_datetime_format_for_array_all_nans(",
          "def test_to_datetime_infer_datetime_format_consistent_format(",
          "def test_to_datetime_inconsistent_format(",
          "def test_to_datetime_consistent_format(",
          "def test_to_datetime_series_with_nans(",
          "def test_to_datetime_series_start_with_nans(",
          "def test_infer_datetime_format_tz_name(",
          "def test_infer_datetime_format_zero_tz(",
          "def test_to_datetime_iso8601_noleading_0s(",
          "def test_parse_dates_infer_datetime_format_warning(",
          "def test_day_not_in_month_coerce(",
          "def test_day_not_in_month_raise(",
          "def test_day_not_in_month_raise_value(",
          "def test_day_not_in_month_ignore(",
          "def test_parsers(",
          "def test_na_values_with_cache(",
          "def test_parsers_nat(",
          "def test_parsers_dayfirst_yearfirst(",
          "def test_parsers_timestring(",
          "def test_parsers_timezone_minute_offsets_roundtrip(",
          "def test_origin_and_unit(",
          "def test_julian(",
          "def test_unix(",
          "def test_julian_round_trip(",
          "def test_invalid_unit(",
          "def test_invalid_origin(",
          "def test_epoch(",
          "def test_invalid_origins(",
          "def test_invalid_origins_tzinfo(",
          "def test_incorrect_value_exception(",
          "def test_to_datetime_out_of_bounds_with_format_arg(",
          "def test_processing_order(",
          "def test_arg_tz_ns_unit(",
          "def test_should_cache(",
          "def test_should_cache_errors(",
          "def test_no_slicing_errors_in_should_cache(",
          "def test_nullable_integer_to_datetime(",
          "def test_na_to_datetime(",
          "def test_empty_string_datetime(",
          "def test_empty_string_datetime_coerce__unit(",
          "def test_to_datetime_monotonic_increasing_index(",
          "def test_to_datetime_cache_coerce_50_lines_outofbounds(",
          "def test_to_datetime_format_f_parse_nanos(",
          "def test_to_datetime_mixed_iso8601(",
          "def test_to_datetime_mixed_other(",
          "def test_to_datetime_mixed_or_iso_exact(",
          "def test_to_datetime_mixed_not_necessarily_iso8601_raise(",
          "def test_to_datetime_mixed_not_necessarily_iso8601_coerce(",
          "def test_ignoring_unknown_tz_deprecated(",
          "def test_from_numeric_arrow_dtype(",
          "def test_to_datetime_with_empty_str_utc_false_format_mixed(",
          "def test_to_datetime_with_empty_str_utc_false_offsets_and_format_mixed("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_numeric.py": [
          "def test_empty(",
          "def test_series(",
          "def test_series_numeric(",
          "def test_error(",
          "def test_ignore_error(",
          "def test_bool_handling(",
          "def test_list(",
          "def test_list_numeric(",
          "def test_numeric(",
          "def test_numeric_df_columns(",
          "def test_numeric_embedded_arr_likes(",
          "def test_all_nan(",
          "def test_type_check(",
          "def test_scalar(",
          "def test_really_large_scalar(",
          "def test_really_large_in_arr(",
          "def test_really_large_in_arr_consistent(",
          "def test_scalar_fail(",
          "def test_numeric_dtypes(",
          "def test_str(",
          "def test_datetime_like(",
          "def test_timedelta(",
          "def test_period(",
          "def test_non_hashable(",
          "def test_downcast_invalid_cast(",
          "def test_errors_invalid_value(",
          "def test_downcast_basic(",
          "def test_signed_downcast(",
          "def test_ignore_downcast_invalid_data(",
          "def test_ignore_downcast_neg_to_unsigned(",
          "def test_ignore_downcast_cannot_convert_float(",
          "def test_downcast_not8bit(",
          "def test_downcast_limits(",
          "def test_downcast_float64_to_float32(",
          "def test_downcast_uint64(",
          "def test_coerce_uint64_conflict(",
          "def test_non_coerce_uint64_conflict(",
          "def test_downcast_empty(",
          "def test_failure_to_convert_uint64_string_to_NaN(",
          "def test_precision_float_conversion(",
          "def test_to_numeric_from_nullable_string(",
          "def test_to_numeric_from_nullable_string_coerce(",
          "def test_to_numeric_from_nullable_string_ignore(",
          "def test_downcast_nullable_numeric(",
          "def test_downcast_nullable_mask_is_copied(",
          "def test_to_numeric_scientific_notation(",
          "def test_to_numeric_large_float_not_downcast_to_float_32(",
          "def test_to_numeric_dtype_backend(",
          "def test_to_numeric_dtype_backend_na(",
          "def test_to_numeric_dtype_backend_downcasting(",
          "def test_to_numeric_dtype_backend_downcasting_uint(",
          "def test_to_numeric_dtype_backend_already_nullable(",
          "def test_to_numeric_dtype_backend_error(",
          "def test_invalid_dtype_backend(",
          "def test_coerce_pyarrow_backend("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_time.py": [
          "def test_parsers_time(",
          "def test_odd_format(",
          "def test_arraylike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_timedelta.py": [
          "def test_to_timedelta_readonly(",
          "def test_to_timedelta_null(",
          "def test_to_timedelta_same_np_timedelta64(",
          "def test_to_timedelta_series(",
          "def test_to_timedelta_units(",
          "def test_to_timedelta_units_dtypes(",
          "def test_to_timedelta_oob_non_nano(",
          "def test_to_timedelta_dataframe(",
          "def test_to_timedelta_invalid_errors(",
          "def test_to_timedelta_invalid_unit(",
          "def test_to_timedelta_time(",
          "def test_to_timedelta_bad_value(",
          "def test_to_timedelta_bad_value_coerce(",
          "def test_to_timedelta_invalid_errors_ignore(",
          "def test_unambiguous_timedelta_values(",
          "def test_to_timedelta_via_apply(",
          "def test_to_timedelta_inference_without_warning(",
          "def test_to_timedelta_on_missing_values(",
          "def test_to_timedelta_on_missing_values_scalar(",
          "def test_to_timedelta_on_missing_values_list(",
          "def test_to_timedelta_float(",
          "def test_to_timedelta_coerce_strings_unit(",
          "def test_to_timedelta_ignore_strings_unit(",
          "def test_to_timedelta_nullable_int64_dtype(",
          "def test_to_timedelta_precision_over_nanos(",
          "def test_to_timedelta_zerodim(",
          "def test_to_timedelta_numeric_ea(",
          "def test_to_timedelta_fraction(",
          "def test_from_numeric_arrow_dtype(",
          "def test_from_timedelta_arrow_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_frequencies.py": [
          "def test_super_sub_symmetry("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_freq_code.py": [
          "def test_get_to_timestamp_base(",
          "def test_get_attrname_from_abbrev(",
          "def test_get_freq_roundtrip2(",
          "def test_resolution_bumping(",
          "def test_cat(",
          "def test_compatibility("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_inference.py": [
          "def test_infer_freq_range(",
          "def test_raise_if_period_index(",
          "def test_raise_if_too_few(",
          "def test_business_daily(",
          "def test_business_daily_look_alike(",
          "def test_day_corner(",
          "def test_non_datetime_index(",
          "def test_fifth_week_of_month_infer(",
          "def test_week_of_month_fake(",
          "def test_fifth_week_of_month(",
          "def test_monthly_ambiguous(",
          "def test_annual_ambiguous(",
          "def test_infer_freq_delta(",
          "def test_infer_freq_custom(",
          "def test_infer_freq_index(",
          "def test_infer_freq_tz(",
          "def test_infer_freq_tz_series(",
          "def test_infer_freq_tz_transition(",
          "def test_infer_freq_tz_transition_custom(",
          "def test_infer_freq_business_hour(",
          "def test_not_monotonic(",
          "def test_non_datetime_index2(",
          "def test_invalid_index_types(",
          "def test_invalid_index_types_unicode(",
          "def test_string_datetime_like_compat(",
          "def test_series(",
          "def test_series_invalid_type(",
          "def test_series_inconvertible_string(",
          "def test_series_period_index(",
          "def test_series_datetime_index(",
          "def test_legacy_offset_warnings(",
          "def test_ms_vs_capital_ms(",
          "def test_infer_freq_non_nano(",
          "def test_infer_freq_non_nano_tzaware("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_calendar.py": [
          "def test_calendar(",
          "def test_calendar_caching(",
          "def test_calendar_observance_dates(",
          "def test_rule_from_name(",
          "def test_calendar_2031(",
          "def test_no_holidays_calendar("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_federal.py": [
          "def test_no_mlk_before_1986(",
          "def test_memorial_day(",
          "def test_federal_holiday_inconsistent_returntype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_holiday.py": [
          "def test_holiday_dates(",
          "def test_holidays_within_dates(",
          "def test_argument_types(",
          "def test_special_holidays(",
          "def test_get_calendar(",
          "def test_factory(",
          "def test_both_offset_observance_raises(",
          "def test_half_open_interval_with_observance("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_observance.py": [
          "def test_next_monday(",
          "def test_next_monday_or_tuesday(",
          "def test_previous_friday(",
          "def test_sunday_to_monday(",
          "def test_nearest_workday(",
          "def test_weekend_to_monday(",
          "def test_next_workday(",
          "def test_previous_workday(",
          "def test_before_nearest_workday(",
          "def test_after_nearest_workday("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_day.py": [
          "def test_different_normalize_equals(",
          "def test_repr(",
          "def test_with_offset(",
          "def test_with_offset_index(",
          "def test_eq(",
          "def test_hash(",
          "def test_add_datetime(",
          "def testRollback1(",
          "def testRollback2(",
          "def testRollforward1(",
          "def testRollforward2(",
          "def test_roll_date_object(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_apply_large_n(",
          "def test_apply_corner("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_hour.py": [
          "def test_constructor_errors(",
          "def test_different_normalize_equals(",
          "def test_repr(",
          "def test_with_offset(",
          "def test_eq_attribute(",
          "def test_eq(",
          "def test_neq(",
          "def test_hash(",
          "def test_add_datetime(",
          "def test_sub(",
          "def test_multiply_by_zero(",
          "def testRollback1(",
          "def testRollback2(",
          "def testRollforward1(",
          "def testRollforward2(",
          "def test_roll_date_object(",
          "def test_normalize(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_apply_large_n(",
          "def test_apply_nanoseconds(",
          "def test_datetimeindex(",
          "def test_short_datetimeindex_creation(",
          "def test_bday_ignores_timedeltas(",
          "def test_opening_time("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_month.py": [
          "def test_apply_index(",
          "def test_offsets_compare_equal(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_normalize(",
          "def test_offsets_compare_equal(",
          "def test_offset(",
          "def test_is_on_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_quarter.py": [
          "def test_quarterly_dont_normalize(",
          "def test_on_offset(",
          "def test_repr(",
          "def test_is_anchored(",
          "def test_offset_corner_case(",
          "def test_offset(",
          "def test_repr(",
          "def test_is_anchored(",
          "def test_offset_corner_case(",
          "def test_offset(",
          "def test_is_on_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_year.py": [
          "def test_misspecified(",
          "def test_offset(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_bad_month_fail(",
          "def test_offset(",
          "def test_roll(",
          "def test_is_on_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_common.py": [
          "def test_apply_out_of_range(",
          "def test_offsets_compare_equal(",
          "def test_rsub(",
          "def test_radd(",
          "def test_sub(",
          "def test_Mult1(",
          "def test_compare_str("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_day.py": [
          "def test_repr(",
          "def test_holidays(",
          "def test_weekmask(",
          "def test_weekmask_and_holidays(",
          "def test_calendar(",
          "def test_roundtrip_pickle(",
          "def test_pickle_compat_0_14_1("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_hour.py": [
          "def test_constructor_errors(",
          "def test_different_normalize_equals(",
          "def test_repr(",
          "def test_with_offset(",
          "def test_eq(",
          "def test_hash(",
          "def test_add_dateime(",
          "def testRollback1(",
          "def testRollback2(",
          "def testRollforward1(",
          "def testRollforward2(",
          "def test_roll_date_object(",
          "def test_normalize(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_apply_nanoseconds(",
          "def test_us_federal_holiday_with_datetime(",
          "def test_custom_businesshour_weekmask_and_holidays("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_month.py": [
          "def test_eq(",
          "def test_hash(",
          "def test_roundtrip_pickle(",
          "def test_copy(",
          "def test_different_normalize_equals(",
          "def test_repr(",
          "def test_add_datetime(",
          "def testRollback1(",
          "def testRollback2(",
          "def testRollforward1(",
          "def test_roll_date_object(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_apply_large_n(",
          "def test_holidays(",
          "def test_datetimeindex(",
          "def test_apply_with_extra_offset(",
          "def test_different_normalize_equals(",
          "def test_repr(",
          "def test_add_datetime(",
          "def testRollback1(",
          "def testRollback2(",
          "def testRollforward1(",
          "def test_roll_date_object(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_apply_large_n(",
          "def test_holidays(",
          "def test_datetimeindex(",
          "def test_apply_with_extra_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_dst.py": [
          "def _test_all_offsets(",
          "def _test_offset(",
          "def test_springforward_plural(",
          "def test_fallback_singular(",
          "def test_springforward_singular(",
          "def test_all_offset_classes(",
          "def test_nontick_offset_with_ambiguous_time_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_easter.py": [
          "def test_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_fiscal.py": [
          "def test_get_offset_name(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_get_year_end(",
          "def test_is_on_offset(",
          "def test_apply(",
          "def test_is_anchored(",
          "def test_equality(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_year_has_extra_week(",
          "def test_get_weeks(",
          "def test_is_on_offset(",
          "def test_offset(",
          "def test_bunched_yearends(",
          "def test_fy5253_last_onoffset(",
          "def test_fy5253_nearest_onoffset(",
          "def test_fy5253qtr_onoffset_nearest(",
          "def test_fy5253qtr_onoffset_last("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_index.py": [
          "def test_apply_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_month.py": [
          "def test_offset_whole_year(",
          "def test_offset(",
          "def test_apply_index(",
          "def test_is_on_offset(",
          "def test_vectorized_offset_addition(",
          "def test_offset_whole_year(",
          "def test_offset(",
          "def test_apply_index(",
          "def test_is_on_offset(",
          "def test_vectorized_offset_addition(",
          "def test_offset(",
          "def test_day_of_month(",
          "def test_normalize(",
          "def test_offset(",
          "def test_is_on_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py": [
          "def test_immutable(",
          "def test_return_type(",
          "def test_offset_n(",
          "def test_offset_timedelta64_arg(",
          "def test_offset_mul_ndarray(",
          "def test_offset_freqstr(",
          "def test_apply(",
          "def test_rollforward(",
          "def test_rollback(",
          "def test_is_on_offset(",
          "def test_add(",
          "def test_add_empty_datetimeindex(",
          "def test_pickle_roundtrip(",
          "def test_pickle_dateoffset_odd_inputs(",
          "def test_offsets_hashable(",
          "def test_add_dt64_ndarray_non_nano(",
          "def test_repr(",
          "def test_mul(",
          "def test_constructor(",
          "def test_default_constructor(",
          "def test_is_anchored(",
          "def test_copy(",
          "def test_add(",
          "def test_sub(",
          "def test_mul_add(",
          "def test_mul_sub(",
          "def test_leap_year(",
          "def test_eq(",
          "def test_milliseconds_combination(",
          "def test_offset_invalid_arguments(",
          "def test_get_offset_name(",
          "def test_get_offset(",
          "def test_get_offset_legacy(",
          "def test_alias_equality(",
          "def test_rule_code(",
          "def test_freq_offsets(",
          "def test_str_for_named_is_name(",
          "def test_valid_default_arguments(",
          "def test_valid_month_attributes(",
          "def test_month_offset_name(",
          "def test_valid_relativedelta_kwargs(",
          "def test_valid_tick_attributes(",
          "def test_validate_n_error(",
          "def test_require_integers(",
          "def test_tick_normalize_raises(",
          "def test_dateoffset_add_sub(",
          "def test_dateoffset_add_sub_timestamp_with_nano(",
          "def test_dateoffset_immutable(",
          "def test_dateoffset_misc(",
          "def test_construct_int_arg_no_kwargs_assumed_days(",
          "def test_dateoffset_add_sub_timestamp_series_with_nano(",
          "def test_offset_multiplication(",
          "def test_dateoffset_operations_on_dataframes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets_properties.py": [
          "def test_on_offset_implementations(",
          "def test_shift_across_dst("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_quarter.py": [
          "def test_quarterly_dont_normalize(",
          "def test_on_offset(",
          "def test_repr(",
          "def test_is_anchored(",
          "def test_offset_corner_case(",
          "def test_offset(",
          "def test_repr(",
          "def test_is_anchored(",
          "def test_offset_corner_case(",
          "def test_offset(",
          "def test_is_on_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_ticks.py": [
          "def test_apply_ticks(",
          "def test_delta_to_tick(",
          "def test_tick_add_sub(",
          "def test_tick_equality(",
          "def test_Hour(",
          "def test_Minute(",
          "def test_Second(",
          "def test_Millisecond(",
          "def test_MillisecondTimestampArithmetic(",
          "def test_Microsecond(",
          "def test_NanosecondGeneric(",
          "def test_Nanosecond(",
          "def test_tick_addition(",
          "def test_tick_division(",
          "def test_tick_mul_float(",
          "def test_tick_rdiv(",
          "def test_tick_zero(",
          "def test_tick_equalities(",
          "def test_tick_offset(",
          "def test_compare_ticks(",
          "def test_compare_ticks_to_strs(",
          "def test_compare_ticks_to_timedeltalike("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_week.py": [
          "def test_repr(",
          "def test_corner(",
          "def test_is_anchored(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_is_on_offset_weekday_none(",
          "def test_week_add_invalid(",
          "def test_constructor(",
          "def test_repr(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_is_on_offset_nanoseconds(",
          "def test_constructor(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_last_week_of_month_on_offset(",
          "def test_repr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_year.py": [
          "def test_misspecified(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_misspecified(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_offset(",
          "def test_is_on_offset(",
          "def test_add_out_of_pydatetime_range("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_api.py": [
          "def test_namespace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_array_to_datetime.py": [
          "def test_parsing_valid_dates(",
          "def test_parsing_timezone_offsets(",
          "def test_parsing_non_iso_timezone_offset(",
          "def test_parsing_different_timezone_offsets(",
          "def test_number_looking_strings_not_into_datetime(",
          "def test_coerce_outside_ns_bounds(",
          "def test_coerce_outside_ns_bounds_one_valid(",
          "def test_coerce_of_invalid_datetimes(",
          "def test_to_datetime_barely_out_of_bounds(",
          "def test_datetime_subclass("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_ccalendar.py": [
          "def test_get_day_of_year_numeric(",
          "def test_get_day_of_year_dt(",
          "def test_dt_correct_iso_8601_year_week_and_day(",
          "def test_isocalendar("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_conversion.py": [
          "def test_tz_localize_to_utc_copies(",
          "def test_tz_convert_single_matches_tz_convert_hourly(",
          "def test_tz_convert_single_matches_tz_convert(",
          "def test_tz_convert_corner(",
          "def test_tz_convert_readonly(",
          "def test_length_zero_copy(",
          "def test_ensure_datetime64ns_bigendian(",
          "def test_ensure_timedelta64ns_overflows(",
          "def test_localize_pydatetime_dt_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_fields.py": [
          "def test_get_date_name_field_readonly(",
          "def test_get_date_field_readonly(",
          "def test_get_start_end_field_readonly(",
          "def test_get_timedelta_field_readonly("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_libfrequencies.py": [
          "def test_get_rule_month("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_liboffsets.py": [
          "def test_get_last_bday(",
          "def test_get_first_bday(",
          "def test_shift_month_dt(",
          "def test_shift_month_ts(",
          "def test_shift_month_error(",
          "def test_roll_qtrday_year(",
          "def test_roll_qtrday_year2(",
          "def test_get_day_of_month_error(",
          "def test_roll_qtr_day_not_mod_unequal(",
          "def test_roll_qtr_day_mod_equal(",
          "def test_roll_convention("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_np_datetime.py": [
          "def test_is_unitless(",
          "def test_get_unit_from_dtype(",
          "def test_td64_to_tdstruct(",
          "def test_pass_non_dt64_array(",
          "def test_pass_non_dt64_dtype(",
          "def test_astype_overflowsafe_dt64(",
          "def test_astype_overflowsafe_td64(",
          "def test_astype_overflowsafe_disallow_rounding("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parse_iso8601.py": [
          "def test_parsers_iso8601(",
          "def test_parsers_iso8601_invalid(",
          "def test_parsers_iso8601_invalid_offset_invalid(",
          "def test_parsers_iso8601_leading_space(",
          "def test_iso8601_formatter("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parsing.py": [
          "def test_parsing_tzlocal_deprecated(",
          "def test_parse_datetime_string_with_reso(",
          "def test_parse_datetime_string_with_reso_nanosecond_reso(",
          "def test_parse_datetime_string_with_reso_invalid_type(",
          "def test_parse_time_quarter_with_dash(",
          "def test_parse_time_quarter_with_dash_error(",
          "def test_does_not_convert_mixed_integer(",
          "def test_parsers_quarterly_with_freq_error(",
          "def test_parsers_quarterly_with_freq(",
          "def test_parsers_quarter_invalid(",
          "def test_parsers_month_freq(",
          "def test_guess_datetime_format_with_parseable_formats(",
          "def test_guess_datetime_format_with_dayfirst(",
          "def test_guess_datetime_format_with_locale_specific_formats(",
          "def test_guess_datetime_format_invalid_inputs(",
          "def test_guess_datetime_format_wrong_type_inputs(",
          "def test_guess_datetime_format_no_padding(",
          "def test_try_parse_dates(",
          "def test_parse_datetime_string_with_reso_check_instance_type_raise_exception(",
          "def test_is_iso_format(",
          "def test_guess_datetime_format_f("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_period_asfreq.py": [
          "def test_intra_day_conversion_factors(",
          "def test_period_ordinal_start_values(",
          "def test_period_ordinal_week(",
          "def test_period_ordinal_business_day(",
          "def test_extract_ordinals_raises(",
          "def test_extract_ordinals_2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_resolution.py": [
          "def test_get_resolution_nano(",
          "def test_get_resolution_non_nano_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_timedeltas.py": [
          "def test_delta_to_nanoseconds(",
          "def test_delta_to_nanoseconds_error(",
          "def test_delta_to_nanoseconds_td64_MY_raises(",
          "def test_unsupported_td64_unit_raises(",
          "def test_huge_nanoseconds_overflow(",
          "def test_kwarg_assertion(",
          "def test_array_to_timedelta64_string_with_unit_2d_raises(",
          "def test_array_to_timedelta64_non_object_raises(",
          "def test_ints_to_pytimedelta(",
          "def test_ints_to_pytimedelta_unsupported("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_timezones.py": [
          "def test_is_utc(",
          "def test_cache_keys_are_distinct_for_pytz_vs_dateutil(",
          "def test_tzlocal_repr(",
          "def test_tzlocal_maybe_get_tz(",
          "def test_tzlocal_offset(",
          "def test_tzlocal_is_not_utc(",
          "def test_tz_compare_utc(",
          "def test_infer_tz_compat(",
          "def test_infer_tz_utc_localize(",
          "def test_infer_tz_mismatch(",
          "def test_maybe_get_tz_invalid_types(",
          "def test_maybe_get_tz_offset_only("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_to_offset.py": [
          "def test_to_offset(",
          "def test_to_offset_negative(",
          "def test_to_offset_invalid(",
          "def test_to_offset_no_evaluate(",
          "def test_to_offset_tuple_unsupported(",
          "def test_to_offset_whitespace(",
          "def test_to_offset_leading_zero(",
          "def test_to_offset_leading_plus(",
          "def test_to_offset_pd_timedelta(",
          "def test_anchored_shortcuts("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_tzconversion.py": [
          "def test_tz_localize_to_utc_ambiguous_infer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_almost_equal.py": [
          "def test_assert_almost_equal_numbers(",
          "def test_assert_not_almost_equal_numbers(",
          "def test_assert_almost_equal_numbers_atol(",
          "def test_assert_not_almost_equal_numbers_atol(",
          "def test_assert_almost_equal_numbers_rtol(",
          "def test_assert_not_almost_equal_numbers_rtol(",
          "def test_assert_almost_equal_complex_numbers(",
          "def test_assert_not_almost_equal_complex_numbers(",
          "def test_assert_almost_equal_numbers_with_zeros(",
          "def test_assert_not_almost_equal_numbers_with_zeros(",
          "def test_assert_not_almost_equal_numbers_with_mixed(",
          "def test_assert_almost_equal_edge_case_ndarrays(",
          "def test_assert_almost_equal_sets(",
          "def test_assert_almost_not_equal_sets(",
          "def test_assert_almost_equal_dicts(",
          "def test_assert_not_almost_equal_dicts(",
          "def test_assert_almost_equal_dict_like_object(",
          "def test_assert_almost_equal_strings(",
          "def test_assert_not_almost_equal_strings(",
          "def test_assert_almost_equal_iterables(",
          "def test_assert_not_almost_equal_iterables(",
          "def test_assert_almost_equal_null(",
          "def test_assert_not_almost_equal_null(",
          "def test_assert_almost_equal_inf(",
          "def test_mismatched_na_assert_almost_equal_deprecation(",
          "def test_assert_not_almost_equal_inf(",
          "def test_assert_almost_equal_pandas(",
          "def test_assert_almost_equal_object(",
          "def test_assert_almost_equal_value_mismatch(",
          "def test_assert_almost_equal_class_mismatch(",
          "def test_assert_almost_equal_value_mismatch1(",
          "def test_assert_almost_equal_value_mismatch2(",
          "def test_assert_almost_equal_value_mismatch3(",
          "def test_assert_almost_equal_value_mismatch4(",
          "def test_assert_almost_equal_shape_mismatch_override(",
          "def test_assert_almost_equal_unicode(",
          "def test_assert_almost_equal_timestamp(",
          "def test_assert_almost_equal_iterable_length_mismatch(",
          "def test_assert_almost_equal_iterable_values_mismatch(",
          "def test_assert_almost_equal_array_nested("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_attr_equal.py": [
          "def test_assert_attr_equal(",
          "def test_assert_attr_equal_different_nulls("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_categorical_equal.py": [
          "def test_categorical_equal(",
          "def test_categorical_equal_order_mismatch(",
          "def test_categorical_equal_categories_mismatch(",
          "def test_categorical_equal_codes_mismatch(",
          "def test_categorical_equal_ordered_mismatch(",
          "def test_categorical_equal_object_override("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_extension_array_equal.py": [
          "def test_assert_extension_array_equal_not_exact(",
          "def test_assert_extension_array_equal_less_precise(",
          "def test_assert_extension_array_equal_dtype_mismatch(",
          "def test_assert_extension_array_equal_missing_values(",
          "def test_assert_extension_array_equal_non_extension_array(",
          "def test_assert_extension_array_equal_ignore_dtype_mismatch("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_frame_equal.py": [
          "def test_frame_equal_row_order_mismatch(",
          "def test_frame_equal_shape_mismatch(",
          "def test_frame_equal_index_dtype_mismatch(",
          "def test_empty_dtypes(",
          "def test_frame_equal_index_mismatch(",
          "def test_frame_equal_columns_mismatch(",
          "def test_frame_equal_block_mismatch(",
          "def test_frame_equal_unicode(",
          "def test_assert_frame_equal_extension_dtype_mismatch(",
          "def test_assert_frame_equal_interval_dtype_mismatch(",
          "def test_assert_frame_equal_ignore_extension_dtype_mismatch(",
          "def test_assert_frame_equal_datetime_like_dtype_mismatch(",
          "def test_allows_duplicate_labels(",
          "def test_assert_frame_equal_columns_mixed_dtype(",
          "def test_frame_equal_extension_dtype(",
          "def test_frame_equal_mixed_dtypes(",
          "def test_assert_frame_equal_check_like_different_indexes(",
          "def test_assert_frame_equal_checking_allow_dups_flag(",
          "def test_assert_frame_equal_check_like_categorical_midx(",
          "def test_assert_frame_equal_ea_column_definition_in_exception_mask(",
          "def test_assert_frame_equal_ea_column_definition_in_exception(",
          "def test_assert_frame_equal_ts_column(",
          "def test_assert_frame_equal_set(",
          "def test_assert_frame_equal_set_mismatch("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_index_equal.py": [
          "def test_index_equal_levels_mismatch(",
          "def test_index_equal_values_mismatch(",
          "def test_index_equal_length_mismatch(",
          "def test_index_equal_class(",
          "def test_int_float_index_equal_class_mismatch(",
          "def test_range_index_equal_class_mismatch(",
          "def test_index_equal_values_close(",
          "def test_index_equal_values_less_close(",
          "def test_index_equal_values_too_far(",
          "def test_index_equal_value_order_mismatch(",
          "def test_index_equal_level_values_mismatch(",
          "def test_index_equal_names(",
          "def test_index_equal_category_mismatch(",
          "def test_index_equal_range_categories(",
          "def test_assert_index_equal_different_inferred_types(",
          "def test_assert_index_equal_different_names_check_order_false(",
          "def test_assert_index_equal_mixed_dtype(",
          "def test_assert_index_equal_ea_dtype_order_false(",
          "def test_assert_index_equal_object_ints_order_false(",
          "def test_assert_ea_index_equal_non_matching_na(",
          "def test_assert_multi_index_dtype_check_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_interval_array_equal.py": [
          "def test_interval_array_equal(",
          "def test_interval_array_equal_closed_mismatch(",
          "def test_interval_array_equal_periods_mismatch(",
          "def test_interval_array_equal_end_mismatch(",
          "def test_interval_array_equal_start_mismatch("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_numpy_array_equal.py": [
          "def test_assert_numpy_array_equal_shape_mismatch(",
          "def test_assert_numpy_array_equal_bad_type(",
          "def test_assert_numpy_array_equal_class_mismatch(",
          "def test_assert_numpy_array_equal_value_mismatch1(",
          "def test_assert_numpy_array_equal_value_mismatch2(",
          "def test_assert_numpy_array_equal_value_mismatch3(",
          "def test_assert_numpy_array_equal_value_mismatch4(",
          "def test_assert_numpy_array_equal_value_mismatch5(",
          "def test_assert_numpy_array_equal_value_mismatch6(",
          "def test_assert_numpy_array_equal_shape_mismatch_override(",
          "def test_numpy_array_equal_unicode(",
          "def test_numpy_array_equal_object(",
          "def test_numpy_array_equal_copy_flag(",
          "def test_numpy_array_equal_contains_na(",
          "def test_numpy_array_equal_identical_na(",
          "def test_numpy_array_equal_different_na("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_produces_warning.py": [
          "def test_assert_produces_warning_honors_filter(",
          "def test_catch_warning_category_and_match(",
          "def test_fail_to_match_runtime_warning(",
          "def test_fail_to_match_future_warning(",
          "def test_fail_to_match_resource_warning(",
          "def test_fail_to_catch_actual_warning(",
          "def test_ignore_extra_warning(",
          "def test_raise_on_extra_warning(",
          "def test_same_category_different_messages_first_match(",
          "def test_same_category_different_messages_last_match(",
          "def test_match_multiple_warnings(",
          "def test_right_category_wrong_match_raises(",
          "def test_raise_on_warning(",
          "def test_no_raise_without_warning(",
          "def test_no_raise_with_false_raise_on_extra(",
          "def test_raises_during_exception(",
          "def test_passes_during_exception("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_series_equal.py": [
          "def test_series_equal(",
          "def test_series_not_equal_value_mismatch(",
          "def test_series_not_equal_metadata_mismatch(",
          "def test_less_precise(",
          "def test_series_equal_index_dtype(",
          "def test_series_equal_order_mismatch(",
          "def test_series_equal_index_mismatch(",
          "def test_series_invalid_param_combination(",
          "def test_series_equal_length_mismatch(",
          "def test_series_equal_numeric_values_mismatch(",
          "def test_series_equal_categorical_values_mismatch(",
          "def test_series_equal_datetime_values_mismatch(",
          "def test_series_equal_categorical_mismatch(",
          "def test_assert_series_equal_extension_dtype_mismatch(",
          "def test_assert_series_equal_interval_dtype_mismatch(",
          "def test_series_equal_series_type(",
          "def test_series_equal_exact_for_nonnumeric(",
          "def test_assert_series_equal_ignore_extension_dtype_mismatch(",
          "def test_allows_duplicate_labels(",
          "def test_assert_series_equal_identical_na(",
          "def test_identical_nested_series_is_equal(",
          "def test_check_dtype_false_different_reso("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate.py": [
          "def test_deprecate_ok(",
          "def test_deprecate_no_docstring(",
          "def test_deprecate_wrong_docstring("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate_kwarg.py": [
          "def test_deprecate_kwarg(",
          "def test_dict_deprecate_kwarg(",
          "def test_missing_deprecate_kwarg(",
          "def test_callable_deprecate_kwarg(",
          "def test_callable_deprecate_kwarg_fail(",
          "def test_bad_deprecate_kwarg(",
          "def test_deprecate_keyword("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate_nonkeyword_arguments.py": [
          "def test_f_signature(",
          "def test_one_argument(",
          "def test_one_and_one_arguments(",
          "def test_two_arguments(",
          "def test_two_and_two_arguments(",
          "def test_three_arguments(",
          "def test_four_arguments(",
          "def test_three_arguments_with_name_in_warning(",
          "def test_g_signature(",
          "def test_one_and_three_arguments_default_allowed_args(",
          "def test_three_arguments_default_allowed_args(",
          "def test_three_positional_argument_with_warning_message_analysis(",
          "def test_h_signature(",
          "def test_all_keyword_arguments(",
          "def test_one_positional_argument(",
          "def test_one_positional_argument_with_warning_message_analysis(",
          "def test_i_signature(",
          "def test_foo_signature(",
          "def test_class("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_doc.py": [
          "def test_docstring_formatting(",
          "def test_docstring_appending(",
          "def test_doc_template_from_func(",
          "def test_inherit_doc_template("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_hashing.py": [
          "def test_consistency(",
          "def test_hash_array(",
          "def test_hash_array_mixed(",
          "def test_hash_array_errors(",
          "def test_hash_array_index_exception(",
          "def test_hash_tuples(",
          "def test_hash_tuples_err(",
          "def test_multiindex_unique(",
          "def test_multiindex_objects(",
          "def test_hash_pandas_object(",
          "def test_hash_pandas_object_diff_index_non_empty(",
          "def test_hash_pandas_index(",
          "def test_hash_pandas_series(",
          "def test_hash_pandas_series_diff_index(",
          "def test_hash_pandas_empty_object(",
          "def test_categorical_consistency(",
          "def test_categorical_with_nan_consistency(",
          "def test_pandas_errors(",
          "def test_hash_keys(",
          "def test_df_hash_keys(",
          "def test_df_encoding(",
          "def test_invalid_key(",
          "def test_already_encoded(",
          "def test_alternate_encoding(",
          "def test_same_len_hash_collisions(",
          "def test_hash_collisions(",
          "def test_hash_with_tuple(",
          "def test_hashable_tuple_args(",
          "def test_hash_object_none_key("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_make_objects.py": [
          "def test_make_multiindex_respects_k("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_numba.py": [
          "def test_numba_not_installed_option_context("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_rewrite_warning.py": [
          "def test_rewrite_warning("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_safe_import.py": [
          "def test_safe_import_non_existent(",
          "def test_safe_import_exists(",
          "def test_safe_import_versions(",
          "def test_safe_import_dummy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_shares_memory.py": [
          "def test_shares_memory_interval("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_show_versions.py": [
          "def test_show_versions(",
          "def test_show_versions_console_json(",
          "def test_show_versions_console(",
          "def test_json_output_match("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_util.py": [
          "def test_numpy_err_state_is_default(",
          "def test_convert_rows_list_to_csv_str(",
          "def test_datapath_missing(",
          "def test_datapath(",
          "def test_external_error_raised("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_args.py": [
          "def test_bad_min_fname_arg_count(",
          "def test_bad_arg_length_max_value_single(",
          "def test_bad_arg_length_max_value_multiple(",
          "def test_not_all_defaults(",
          "def test_validation("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_args_and_kwargs.py": [
          "def test_invalid_total_length_max_length_one(",
          "def test_invalid_total_length_max_length_multiple(",
          "def test_missing_args_or_kwargs(",
          "def test_duplicate_argument(",
          "def test_validation("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_inclusive.py": [
          "def test_invalid_inclusive(",
          "def test_valid_inclusive("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_kwargs.py": [
          "def test_bad_kwarg(",
          "def test_not_all_none(",
          "def test_validation(",
          "def test_validate_bool_kwarg_fail(",
          "def test_validate_bool_kwarg("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_api.py": [
          "def test_getitem(",
          "def test_select_bad_cols(",
          "def test_attribute_access(",
          "def tests_skip_nuisance(",
          "def test_sum_object_str_raises(",
          "def test_agg(",
          "def test_multi_axis_1_raises(",
          "def test_agg_apply(",
          "def test_agg_consistency(",
          "def test_agg_nested_dicts(",
          "def test_count_nonnumeric_types(",
          "def test_preserve_metadata(",
          "def test_multiple_agg_funcs(",
          "def test_dont_modify_attributes_after_methods(",
          "def test_centered_axis_validation(",
          "def test_rolling_min_min_periods(",
          "def test_rolling_max_min_periods("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_apply.py": [
          "def test_rolling_apply_invalid_raw(",
          "def test_rolling_apply_out_of_bounds(",
          "def test_rolling_apply_with_pandas_objects(",
          "def test_rolling_apply(",
          "def test_all_apply(",
          "def test_ragged_apply(",
          "def test_invalid_engine(",
          "def test_invalid_engine_kwargs_cython(",
          "def test_invalid_raw_numba(",
          "def test_rolling_apply_args_kwargs(",
          "def test_nans(",
          "def test_center(",
          "def test_series(",
          "def test_frame(",
          "def test_time_rule_series(",
          "def test_time_rule_frame(",
          "def test_min_periods(",
          "def test_center_reindex_series(",
          "def test_center_reindex_frame(",
          "def test_axis1("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_base_indexer.py": [
          "def test_bad_get_window_bounds_signature(",
          "def test_expanding_indexer(",
          "def test_indexer_constructor_arg(",
          "def test_indexer_accepts_rolling_args(",
          "def test_rolling_forward_window(",
          "def test_rolling_forward_skewness(",
          "def test_rolling_forward_cov_corr(",
          "def test_non_fixed_variable_window_indexer(",
          "def test_variableoffsetwindowindexer_not_dti(",
          "def test_variableoffsetwindowindexer_not_offset(",
          "def test_fixed_forward_indexer_count(",
          "def test_indexer_quantile_sum(",
          "def test_indexers_are_reusable_after_groupby_rolling(",
          "def test_fixed_forward_indexer_bounds(",
          "def test_rolling_groupby_with_fixed_forward_specific(",
          "def test_rolling_groupby_with_fixed_forward_many(",
          "def test_unequal_start_end_bounds(",
          "def test_unequal_bounds_to_object("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_cython_aggregations.py": [
          "def test_rolling_aggregation_boundary_consistency(",
          "def test_rolling_aggregation_with_unused_elements("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_dtypes.py": [
          "def test_series_dtypes(",
          "def test_series_nullable_int(",
          "def test_dataframe_dtypes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_ewm.py": [
          "def test_doc_string(",
          "def test_constructor(",
          "def test_ewma_times_not_datetime_type(",
          "def test_ewma_times_not_same_length(",
          "def test_ewma_halflife_not_correct_type(",
          "def test_ewma_halflife_without_times(",
          "def test_ewma_with_times_equal_spacing(",
          "def test_ewma_with_times_variable_spacing(",
          "def test_ewm_with_nat_raises(",
          "def test_ewm_with_times_getitem(",
          "def test_ewm_getitem_attributes_retained(",
          "def test_ewma_times_adjust_false_raises(",
          "def test_float_dtype_ewma(",
          "def test_times_string_col_raises(",
          "def test_ewm_sum_adjust_false_notimplemented(",
          "def test_ewm_sum(",
          "def test_ewma_adjust(",
          "def test_ewma_cases(",
          "def test_ewma_nan_handling(",
          "def test_ewma_nan_handling_cases(",
          "def test_ewm_alpha(",
          "def test_ewm_domain_checks(",
          "def test_ew_empty_series(",
          "def test_ew_min_periods(",
          "def test_ewm_corr_cov(",
          "def test_ewm_corr_cov_min_periods(",
          "def test_different_input_array_raise_exception(",
          "def test_ewma_series(",
          "def test_ewma_frame(",
          "def test_ewma_span_com_args(",
          "def test_ewma_halflife_arg(",
          "def test_ewm_alpha_arg(",
          "def test_ewm_pairwise_cov_corr(",
          "def test_numeric_only_frame(",
          "def test_numeric_only_corr_cov_frame(",
          "def test_numeric_only_series(",
          "def test_numeric_only_corr_cov_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_expanding.py": [
          "def test_doc_string(",
          "def test_constructor(",
          "def test_constructor_invalid(",
          "def test_empty_df_expanding(",
          "def test_missing_minp_zero(",
          "def test_expanding_axis(",
          "def test_expanding_count_with_min_periods(",
          "def test_expanding_count_default_min_periods_with_null_values(",
          "def test_expanding_count_with_min_periods_exceeding_series_length(",
          "def test_iter_expanding_dataframe(",
          "def test_iter_expanding_series(",
          "def test_center_invalid(",
          "def test_expanding_sem(",
          "def test_expanding_skew_kurt_numerical_stability(",
          "def test_rank(",
          "def test_expanding_corr(",
          "def test_expanding_count(",
          "def test_expanding_quantile(",
          "def test_expanding_cov(",
          "def test_expanding_cov_pairwise(",
          "def test_expanding_corr_pairwise(",
          "def test_expanding_func(",
          "def test_expanding_min_periods(",
          "def test_expanding_apply(",
          "def test_expanding_min_periods_apply(",
          "def test_moment_functions_zero_length_pairwise(",
          "def test_moment_functions_zero_length(",
          "def test_expanding_apply_empty_series(",
          "def test_expanding_apply_min_periods_0(",
          "def test_expanding_cov_diff_index(",
          "def test_expanding_corr_diff_index(",
          "def test_expanding_cov_pairwise_diff_length(",
          "def test_expanding_corr_pairwise_diff_length(",
          "def test_expanding_apply_args_kwargs(",
          "def test_numeric_only_frame(",
          "def test_numeric_only_corr_cov_frame(",
          "def test_numeric_only_series(",
          "def test_numeric_only_corr_cov_series(",
          "def test_keyword_quantile_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_groupby.py": [
          "def test_groupby_unsupported_argument(",
          "def test_getitem(",
          "def test_getitem_multiple(",
          "def test_rolling(",
          "def test_rolling_ddof(",
          "def test_rolling_quantile(",
          "def test_rolling_corr_cov_other_same_size_as_groups(",
          "def test_rolling_corr_cov_other_diff_size_as_groups(",
          "def test_rolling_corr_cov_pairwise(",
          "def test_rolling_corr_cov_unordered(",
          "def test_rolling_apply(",
          "def test_rolling_apply_mutability(",
          "def test_groupby_rolling(",
          "def test_groupby_rolling_center_center(",
          "def test_groupby_rolling_center_on(",
          "def test_groupby_rolling_center_min_periods(",
          "def test_groupby_subselect_rolling(",
          "def test_groupby_rolling_custom_indexer(",
          "def test_groupby_rolling_subset_with_closed(",
          "def test_groupby_subset_rolling_subset_with_closed(",
          "def test_groupby_rolling_index_changed(",
          "def test_groupby_rolling_empty_frame(",
          "def test_groupby_rolling_string_index(",
          "def test_groupby_rolling_no_sort(",
          "def test_groupby_rolling_count_closed_on(",
          "def test_groupby_rolling_sem(",
          "def test_groupby_rolling_nans_in_index(",
          "def test_groupby_rolling_group_keys(",
          "def test_groupby_rolling_index_level_and_column_label(",
          "def test_groupby_rolling_resulting_multiindex(",
          "def test_groupby_rolling_resulting_multiindex2(",
          "def test_groupby_rolling_resulting_multiindex3(",
          "def test_groupby_rolling_object_doesnt_affect_groupby_apply(",
          "def test_groupby_rolling_var(",
          "def test_by_column_not_in_values(",
          "def test_groupby_level(",
          "def test_as_index_false(",
          "def test_nan_and_zero_endpoints(",
          "def test_groupby_rolling_non_monotonic(",
          "def test_groupby_monotonic(",
          "def test_datelike_on_monotonic_within_each_group(",
          "def test_datelike_on_not_monotonic_within_each_group(",
          "def test_expanding(",
          "def test_expanding_ddof(",
          "def test_expanding_quantile(",
          "def test_expanding_corr_cov(",
          "def test_expanding_apply(",
          "def test_methods(",
          "def test_pairwise_methods(",
          "def test_times(",
          "def test_times_array(",
          "def test_dont_mutate_obj_after_slicing(",
          "def test_rolling_corr_with_single_integer_in_index(",
          "def test_rolling_corr_with_tuples_in_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_numba.py": [
          "def test_numba_vs_cython_apply(",
          "def test_numba_vs_cython_rolling_methods(",
          "def test_numba_vs_cython_expanding_methods(",
          "def test_cache_apply(",
          "def test_dont_cache_args(",
          "def test_dont_cache_engine_kwargs(",
          "def test_invalid_engine(",
          "def test_invalid_engine_kwargs(",
          "def test_cython_vs_numba(",
          "def test_cython_vs_numba_times(",
          "def test_use_global_config(",
          "def test_invalid_kwargs_nopython(",
          "def test_table_series_valueerror(",
          "def test_table_method_rolling_methods(",
          "def test_table_method_rolling_apply(",
          "def test_table_method_rolling_weighted_mean(",
          "def test_table_method_expanding_apply(",
          "def test_table_method_expanding_methods(",
          "def test_table_method_ewm("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_online.py": [
          "def test_invalid_update(",
          "def test_online_vs_non_online_mean(",
          "def test_update_times_mean(",
          "def test_ewm_notimplementederror_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_pairwise.py": [
          "def test_rolling_cov(",
          "def test_rolling_corr(",
          "def test_rolling_pairwise_cov_corr(",
          "def test_flex_binary_frame(",
          "def test_rolling_corr_with_zero_variance(",
          "def test_corr_sanity(",
          "def test_rolling_cov_diff_length(",
          "def test_rolling_corr_diff_length(",
          "def test_rolling_functions_window_non_shrinkage_binary(",
          "def test_moment_functions_zero_length_pairwise(",
          "def test_no_flex(",
          "def test_pairwise_with_self(",
          "def test_no_pairwise_with_self(",
          "def test_pairwise_with_other(",
          "def test_no_pairwise_with_other(",
          "def test_pairwise_with_series(",
          "def test_corr_freq_memory_error(",
          "def test_cov_mulittindex(",
          "def test_multindex_columns_pairwise_func("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling.py": [
          "def test_doc_string(",
          "def test_constructor(",
          "def test_invalid_constructor(",
          "def test_freq_window_not_implemented(",
          "def test_step_not_implemented_for_cov_corr(",
          "def test_constructor_with_timedelta_window(",
          "def test_constructor_timedelta_window_and_minperiods(",
          "def test_closed_fixed(",
          "def test_datetimelike_centered_selections(",
          "def test_datetimelike_centered_offset_covers_all(",
          "def test_datetimelike_nonunique_index_centering(",
          "def test_even_number_window_alignment(",
          "def test_closed_fixed_binary_col(",
          "def test_closed_empty(",
          "def test_closed_one_entry(",
          "def test_closed_one_entry_groupby(",
          "def test_closed_min_max_datetime(",
          "def test_closed_uneven(",
          "def test_closed_min_max_minp(",
          "def test_closed_median_quantile(",
          "def tests_empty_df_rolling(",
          "def test_empty_window_median_quantile(",
          "def test_missing_minp_zero(",
          "def test_missing_minp_zero_variable(",
          "def test_multi_index_names(",
          "def test_rolling_axis_sum(",
          "def test_rolling_axis_count(",
          "def test_readonly_array(",
          "def test_rolling_datetime(",
          "def test_rolling_window_as_string(",
          "def test_min_periods1(",
          "def test_rolling_count_with_min_periods(",
          "def test_rolling_count_default_min_periods_with_null_values(",
          "def test_iter_rolling_dataframe(",
          "def test_iter_rolling_on_dataframe(",
          "def test_iter_rolling_on_dataframe_unordered(",
          "def test_iter_rolling_series(",
          "def test_iter_rolling_datetime(",
          "def test_rolling_positional_argument(",
          "def test_rolling_numerical_accuracy_kahan_mean(",
          "def test_rolling_numerical_accuracy_kahan_sum(",
          "def test_rolling_numerical_accuracy_jump(",
          "def test_rolling_numerical_accuracy_small_values(",
          "def test_rolling_numerical_too_large_numbers(",
          "def test_rolling_mixed_dtypes_axis_1(",
          "def test_rolling_axis_one_with_nan(",
          "def test_rolling_axis_1_non_numeric_dtypes(",
          "def test_rolling_on_df_transposed(",
          "def test_rolling_period_index(",
          "def test_rolling_sem(",
          "def test_rolling_var_numerical_issues(",
          "def test_timeoffset_as_window_parameter_for_corr(",
          "def test_rolling_decreasing_indices(",
          "def test_rolling_decreasing_indices_centered(",
          "def test_rolling_center_nanosecond_resolution(",
          "def test_rolling_non_monotonic(",
          "def test_rolling_corr_timedelta_index(",
          "def test_groupby_rolling_nan_included(",
          "def test_rolling_skew_kurt_numerical_stability(",
          "def test_rolling_skew_kurt_large_value_range(",
          "def test_invalid_method(",
          "def test_rolling_descending_date_order_with_offset(",
          "def test_rolling_var_floating_artifact_precision(",
          "def test_rolling_std_small_values(",
          "def test_rolling_mean_all_nan_window_floating_artifacts(",
          "def test_rolling_sum_all_nan_window_floating_artifacts(",
          "def test_rolling_zero_window(",
          "def test_rolling_float_dtype(",
          "def test_rolling_numeric_dtypes(",
          "def test_rank(",
          "def test_rolling_quantile_np_percentile(",
          "def test_rolling_quantile_interpolation_options(",
          "def test_invalid_quantile_value(",
          "def test_rolling_quantile_param(",
          "def test_rolling_std_1obs(",
          "def test_rolling_std_neg_sqrt(",
          "def test_step_not_integer_raises(",
          "def test_step_not_positive_raises(",
          "def test_rolling_var_same_value_count_logic(",
          "def test_rolling_mean_sum_floating_artifacts(",
          "def test_rolling_skew_kurt_floating_artifacts(",
          "def test_numeric_only_frame(",
          "def test_numeric_only_corr_cov_frame(",
          "def test_numeric_only_series(",
          "def test_numeric_only_corr_cov_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_functions.py": [
          "def test_series(",
          "def test_frame(",
          "def test_time_rule_series(",
          "def test_time_rule_frame(",
          "def test_nans(",
          "def test_nans_count(",
          "def test_min_periods(",
          "def test_min_periods_count(",
          "def test_center(",
          "def test_center_reindex_series(",
          "def test_center_reindex_frame(",
          "def test_rolling_functions_window_non_shrinkage(",
          "def test_rolling_max_gh6297(",
          "def test_rolling_max_resample(",
          "def test_rolling_min_resample(",
          "def test_rolling_median_resample(",
          "def test_rolling_median_memory_error(",
          "def test_rolling_min_max_numeric_types(",
          "def test_moment_functions_zero_length("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_quantile.py": [
          "def test_series(",
          "def test_frame(",
          "def test_time_rule_series(",
          "def test_time_rule_frame(",
          "def test_nans(",
          "def test_min_periods(",
          "def test_center(",
          "def test_center_reindex_series(",
          "def test_center_reindex_frame(",
          "def test_keyword_quantile_deprecated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_skew_kurt.py": [
          "def test_series(",
          "def test_frame(",
          "def test_time_rule_series(",
          "def test_time_rule_frame(",
          "def test_nans(",
          "def test_min_periods(",
          "def test_center(",
          "def test_center_reindex_series(",
          "def test_center_reindex_frame(",
          "def test_rolling_skew_edge_cases(",
          "def test_rolling_kurt_edge_cases(",
          "def test_rolling_skew_eq_value_fperr(",
          "def test_rolling_kurt_eq_value_fperr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_timeseries_window.py": [
          "def test_doc_string(",
          "def test_invalid_window_non_int(",
          "def test_invalid_window_nonfixed(",
          "def test_valid_window(",
          "def test_invalid_minp(",
          "def test_on(",
          "def test_monotonic_on(",
          "def test_non_monotonic_on(",
          "def test_frame_on(",
          "def test_frame_on2(",
          "def test_basic_regular(",
          "def test_min_periods(",
          "def test_closed(",
          "def test_ragged_sum(",
          "def test_ragged_mean(",
          "def test_ragged_median(",
          "def test_ragged_quantile(",
          "def test_ragged_std(",
          "def test_ragged_var(",
          "def test_ragged_skew(",
          "def test_ragged_kurt(",
          "def test_ragged_count(",
          "def test_regular_min(",
          "def test_ragged_min(",
          "def test_perf_min(",
          "def test_ragged_max(",
          "def test_freqs_ops(",
          "def test_all(",
          "def test_all2(",
          "def test_rolling_cov_offset(",
          "def test_rolling_on_decreasing_index(",
          "def test_rolling_on_empty(",
          "def test_rolling_on_multi_index_level(",
          "def test_nat_axis_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_win_type.py": [
          "def test_constructor(",
          "def test_invalid_constructor(",
          "def test_invalid_constructor_wintype(",
          "def test_constructor_with_win_type(",
          "def test_agg_function_support(",
          "def test_invalid_scipy_arg(",
          "def test_constructor_with_win_type_invalid(",
          "def test_window_with_args(",
          "def test_win_type_with_method_invalid(",
          "def test_consistent_win_type_freq(",
          "def test_win_type_freq_return_none(",
          "def test_win_type_not_implemented(",
          "def test_cmov_mean(",
          "def test_cmov_window(",
          "def test_cmov_window_corner(",
          "def test_cmov_window_frame(",
          "def test_cmov_window_na_min_periods(",
          "def test_cmov_window_regular(",
          "def test_cmov_window_regular_linear_range(",
          "def test_cmov_window_regular_missing_data(",
          "def test_cmov_window_special(",
          "def test_cmov_window_special_linear_range(",
          "def test_weighted_var_big_window_no_segfault(",
          "def test_rolling_center_axis_1("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_ewm.py": [
          "def test_ewm_consistency_mean(",
          "def test_ewm_consistency_consistent(",
          "def test_ewm_consistency_var_debiasing_factors(",
          "def test_moments_consistency_var(",
          "def test_moments_consistency_var_constant(",
          "def test_ewm_consistency_std(",
          "def test_ewm_consistency_series_cov_corr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_expanding.py": [
          "def test_expanding_apply_consistency_sum_nans(",
          "def test_moments_consistency_var(",
          "def test_moments_consistency_var_constant(",
          "def test_expanding_consistency_var_std_cov(",
          "def test_expanding_consistency_series_cov_corr(",
          "def test_expanding_consistency_mean(",
          "def test_expanding_consistency_constant(",
          "def test_expanding_consistency_var_debiasing_factors("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_rolling.py": [
          "def test_rolling_apply_consistency_sum(",
          "def test_moments_consistency_var(",
          "def test_moments_consistency_var_constant(",
          "def test_rolling_consistency_var_std_cov(",
          "def test_rolling_consistency_series_cov_corr(",
          "def test_rolling_consistency_mean(",
          "def test_rolling_consistency_constant(",
          "def test_rolling_consistency_var_debiasing_factors("
        ],
        ".venv\\Lib\\site-packages\\pandas\\util\\_tester.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pandas\\util\\_test_decorators.py": [
          "def test_foo("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\list.py": [
          "def iter_packages_latest_infos(",
          "def latest_info("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\filesystem.py": [
          "def test_writable_dir(",
          "def _test_writable_dir_win("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py": [
          "def test_requires("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\scanner.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\scope.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\__main__.py": [
          "def make_test_card("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\low_level.py": [
          "Default, bytestring, len("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\more_itertools\\more.py": [
          "def boolean_test("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\core.py": [
          "def run_tests("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\results.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\testing.py": [
          "def assertRunTestResults("
        ],
        ".venv\\Lib\\site-packages\\psycopg\\types\\datetime.py": [
          "def _get_datestyle("
        ],
        ".venv\\Lib\\site-packages\\pygments\\scanner.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pygments\\formatters\\other.py": [
          "def testNeedsName("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\robotframework.py": [
          "def set_test_template("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\webmisc.py": [
          "def popstate_kindtest_callback(",
          "def pushstate_kindtest_callback(",
          "def pushstate_operator_kindtestforpi_callback(",
          "def pushstate_operator_kindtest_callback(",
          "def pushstate_occurrenceindicator_kindtest_callback("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\core.py": [
          "def run_tests("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\results.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\testing.py": [
          "def assertRunTestResults("
        ],
        ".venv\\Lib\\site-packages\\pytz\\__init__.py": [
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\renderbase.py": [
          "def testStateTracker("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\renderPDF.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\renderPM.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\renderPS.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\renderSVG.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\shapes.py": [
          "def test(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\testdrawings.py": [
          "defines and tests a simple UserNode0 ("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\testshapes.py": [
          "def getAllTestDrawings(",
          "def testAllDrawings("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\widgetbase.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\eanbc.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\lto.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\qr.py": [
          "def test(",
          "def _test(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\test.py": [
          "def fullTest("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\usps4s.py": [
          "def _test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\charts\\axes.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\widgets\\eventcal.py": [
          "def computeStartAndEndTimes(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\widgets\\flags.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\widgets\\markers.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\widgets\\signsandsymbols.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\codecharts.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\corp.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\fontfinder.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\pdfencrypt.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\PyFontify.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\rparsexml.py": [
          "def testparse(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\sequencer.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\styles.py": [
          "def testStyles("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\testutils.py": [
          "def runTest("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\utils.py": [
          "def bytestr("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\validators.py": [
          "def normalizeTest(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def _test_patterns(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\cidfonts.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\pdfdoc.py": [
          "def teststream(",
          "def testpage("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\pdfmetrics.py": [
          "def test3widths(",
          "def testStringWidthAlgorithms(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\platypus\\figures.py": [
          "def test1("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\platypus\\para.py": [
          "def test2(",
          "def test("
        ],
        ".venv\\Lib\\site-packages\\rich\\scope.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\rich\\style.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\rich\\__main__.py": [
          "def make_test_card("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\dist.py": [
          "def check_test_suite("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\msvc.py": [
          "def _find_latest_available_vs_ver("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\test.py": [
          "def loadTestsFromModule(",
          "def test_args(",
          "def _test_args(",
          "def run_tests("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\config\\_validate_pyproject\\fastjsonschema_validations.py": [
          "def validate_https___packaging_python_org_en_latest_specifications_declaring_build_dependencies(",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "definition={'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "def validate_https___setuptools_pypa_io_en_latest_references_keywords_html(",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition\" + (\" (\" + str(data__packages_one_of_count1) + \" matches found)\"), value=data__packages, name=\"\" + (name_prefix or \"data\") + \".packages\", definition={'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_file_directive(",
          "def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_attr_directive(",
          "def validate_https___setuptools_pypa_io_en_latest_references_keywords_html__definitions_find_directive(",
          "definition={'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata(",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'gui-scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'gui-scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'gui-scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_dependency(",
          "def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_entry_point_group(",
          "def validate_https___packaging_python_org_en_latest_specifications_declaring_project_metadata___definitions_author("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\cmd.py": [
          "def _ensure_tested_string("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\more_itertools\\more.py": [
          "def boolean_test("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\core.py": [
          "def run_tests("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\results.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\testing.py": [
          "def assertRunTestResults("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py": [
          "def _ora_stop_test_class_outside_fixtures("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\named_types.py": [
          "def __test_init__(",
          "def __test_init__("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\provision.py": [
          "def stop_test_class_outside_fixtures("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlite.py": [
          "def _test_sql(",
          "def _test_sql("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\compiler.py": [
          "def default_greatest(",
          "def case_greatest("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\config.py": [
          "def skip_test_exception(",
          "def mark_base_test_class(",
          "def get_current_test_name(",
          "def async_test(",
          "def test_operator(",
          "def test_thing(",
          "def get_current_test_name(",
          "def mark_base_test_class(",
          "def skip_test(",
          "def skip_test(",
          "def async_test("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\engines.py": [
          "def _drop_testing_engines(",
          "def after_test(",
          "def after_test_outside_fixtures(",
          "def stop_test_class_inside_fixtures(",
          "def stop_test_class_outside_fixtures(",
          "def testing_engine(",
          "def testing_engine(",
          "def testing_engine("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\profiling.py": [
          "def _start_current_test("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\provision.py": [
          "def stop_test_class_outside_fixtures("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\util.py": [
          "def test_fn(",
          "def test_fn("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\warnings.py": [
          "def warn_test_suite("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\base.py": [
          "def testing_engine(",
          "def gen_testing_engine(",
          "def async_testing_engine(",
          "def run_test("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\orm.py": [
          "def _setup_tables_test_class(",
          "def _setup_tables_test_instance(",
          "def stop_test_class_inside_fixtures(",
          "def after_test("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\sql.py": [
          "def _setup_tables_test_class(",
          "def _setup_tables_test_instance(",
          "def tables_test_metadata("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\plugin_base.py": [
          "def _prep_testing_database(",
          "def generate_sub_tests(",
          "def start_test_class_outside_fixtures(",
          "def stop_test_class(",
          "def stop_test_class_outside_fixtures(",
          "def before_test(",
          "def after_test(",
          "def after_test_fixtures(",
          "def skip_test_exception(",
          "def get_current_test_name(",
          "def mark_base_test_class("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\pytestplugin.py": [
          "def pytest_addoption(",
          "def pytest_configure(",
          "def pytest_sessionstart(",
          "def pytest_sessionfinish(",
          "def pytest_unconfigure(",
          "def pytest_collection_finish(",
          "def pytest_configure_node(",
          "def pytest_testnodedown(",
          "def pytest_collection_modifyitems(",
          "def setup_test_classes(",
          "def pytest_pycollect_makeitem(",
          "def pytest_runtest_setup(",
          "def pytest_runtest_teardown(",
          "def pytest_runtest_call(",
          "def pytest_runtest_logreport(",
          "def setup_test_methods(",
          "def _pytest_fn_decorator(",
          "def skip_test_exception(",
          "def mark_base_test_class(",
          "def get_current_test_name(",
          "def async_test("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py": [
          "def test_select_nonrecursive_round_trip(",
          "def test_select_recursive_round_trip(",
          "def test_insert_from_select_round_trip(",
          "def test_update_from_round_trip(",
          "def test_delete_from_round_trip(",
          "def test_delete_scalar_subq_round_trip("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_ddl.py": [
          "def test_create_table(",
          "def test_create_table_schema(",
          "def test_drop_table(",
          "def test_underscore_names(",
          "def test_add_table_comment(",
          "def test_drop_table_comment(",
          "def test_create_table_if_not_exists(",
          "def test_create_index_if_not_exists(",
          "def test_drop_table_if_exists(",
          "def test_drop_index_if_exists(",
          "def test_long_convention_name("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_deprecations.py": [
          "def test_plain_union(",
          "def _dont_test_select_from_plain_union(",
          "def test_limit_offset_selectable_in_unions(",
          "def test_order_by_selectable_in_unions(",
          "def test_distinct_selectable_in_unions(",
          "def test_limit_offset_aliased_selectable_in_unions("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py": [
          "def test_do_ping(",
          "def test_all_visit_methods_accept_kw(",
          "def test_integrity_error(",
          "def test_exception_with_non_ascii(",
          "def test_default_isolation_level(",
          "def test_non_default_isolation_level(",
          "def test_all_levels(",
          "def test_invalid_level_execution_option(",
          "def test_invalid_level_engine_param(",
          "def test_dialect_user_setting_is_restored(",
          "def _test_conn_autocommits(",
          "def test_autocommit_on(",
          "def test_autocommit_off(",
          "def test_turn_autocommit_off_via_default_iso_level(",
          "def test_dialect_autocommit_is_restored(",
          "def test_percent_sign_round_trip(",
          "DefaultSchemaWEventsTest(",
          "def test_control_case(",
          "def test_wont_work_wo_insert(",
          "def test_schema_change_on_connect(",
          "def test_schema_change_works_w_transactions(",
          "DefaultSchemaWEventsTest(",
          "def test_round_trip_same_named_column(",
          "def test_standalone_bindparam_escape(",
          "def test_standalone_bindparam_escape_expanding(",
          "def test_insert_single(",
          "def test_insert_many(",
          "def test_update_single(",
          "def test_update_many(",
          "def test_delete_single(",
          "def test_delete_many("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_insert.py": [
          "def test_autoincrement_on_insert(",
          "def test_last_inserted_id(",
          "def test_native_lastrowid_autoinc(",
          "def test_no_results_for_non_returning_insert(",
          "def test_autoclose_on_insert(",
          "def test_autoclose_on_insert_implicit_returning(",
          "def test_empty_insert(",
          "def test_empty_insert_multiple(",
          "def test_insert_from_select_autoinc(",
          "def test_insert_from_select_autoinc_no_rows(",
          "def test_insert_from_select(",
          "def test_insert_from_select_with_defaults(",
          "def test_explicit_returning_pk_autocommit(",
          "def test_explicit_returning_pk_no_autocommit(",
          "def test_autoincrement_on_insert_implicit_returning(",
          "def test_last_inserted_id_implicit_returning(",
          "def test_insertmanyvalues_returning(",
          "def test_insert_w_floats(",
          "def test_imv_returning_datatypes("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_reflection.py": [
          "def test_has_table(",
          "def test_has_table_cache(",
          "def test_has_table_schema(",
          "def test_has_table_nonexistent_schema(",
          "def test_has_table_view(",
          "def test_has_table_temp_table(",
          "def test_has_table_temp_view(",
          "def test_has_table_view_schema(",
          "def test_has_index(",
          "def test_has_index_schema(",
          "def test_fk_ref(",
          "def test_get_table_options(",
          "def test_get_view_definition(",
          "def test_get_columns(",
          "def test_get_pk_constraint(",
          "def test_get_foreign_keys(",
          "def test_get_indexes(",
          "def test_get_unique_constraints(",
          "def test_get_table_comment(",
          "def test_get_check_constraints(",
          "def test_get_schema_names(",
          "def test_has_schema(",
          "def test_get_schema_names_w_translate_map(",
          "def test_has_schema_w_translate_map(",
          "def test_schema_cache(",
          "def test_dialect_initialize(",
          "def test_get_default_schema_name(",
          "def test_get_table_names(",
          "def test_get_view_names(",
          "def test_get_temp_table_names(",
          "def test_get_temp_view_names(",
          "def test_get_comments(",
          "def test_get_comments_with_schema(",
          "def _test_get_comments(",
          "def test_get_columns(",
          "def test_reflect_table_temp_table(",
          "def test_get_temp_table_columns(",
          "def test_get_temp_view_columns(",
          "def test_get_pk_constraint(",
          "def test_get_foreign_keys(",
          "def test_get_inter_schema_foreign_keys(",
          "def test_get_indexes(",
          "def test_get_noncol_index(",
          "def test_get_temp_table_unique_constraints(",
          "def test_get_temp_table_indexes(",
          "def test_get_unique_constraints(",
          "def test_get_view_definition(",
          "def test_get_view_definition_does_not_exist(",
          "def test_autoincrement_col(",
          "def test_get_table_options(",
          "def test_multi_get_table_options(",
          "def test_multi_get_table_options_tables(",
          "def test_get_multi_table_comment(",
          "def test_get_multi_columns(",
          "def test_get_multi_pk_constraint(",
          "def test_get_multi_foreign_keys(",
          "def test_get_multi_indexes(",
          "def test_get_multi_unique_constraints(",
          "def test_get_multi_check_constraints(",
          "def test_not_existing_table(",
          "def test_unreflectable(",
          "def test_metadata(",
          "def test_comments_unicode(",
          "def test_comments_unicode_full(",
          "def test_reflect_table_no_columns(",
          "def test_get_columns_table_no_columns(",
          "def test_reflect_incl_table_no_columns(",
          "def test_reflect_view_no_columns(",
          "def test_get_columns_view_no_columns(",
          "def test_check_constraint_no_constraint(",
          "def test_check_constraint_inline(",
          "def test_check_constraint_standalone(",
          "def test_check_constraint_mixed(",
          "def test_reflect_expression_based_indexes(",
          "def test_reflect_covering_index(",
          "def test_numeric_reflection(",
          "def test_varchar_reflection(",
          "def test_nullable_reflection(",
          "def test_get_foreign_key_options(",
          "def test_server_defaults(",
          "def test_reflect_lowercase_forced_tables(",
          "def test_get_table_names(",
          "def test_computed_col_default_not_set(",
          "def test_get_column_returns_computed(",
          "def test_get_column_returns_persisted(",
          "def test_get_column_returns_persisted_with_schema(",
          "def test_reflect_identity(",
          "def test_reflect_identity_schema(",
          "def test_pk_column_order(",
          "def test_fk_column_order("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_results.py": [
          "def test_via_attr(",
          "def test_via_string(",
          "def test_via_int(",
          "def test_via_col_object(",
          "def test_row_with_dupe_names(",
          "def test_row_w_scalar_select(",
          "def test_single_roundtrip(",
          "def test_executemany_roundtrip(",
          "def test_executemany_returning_roundtrip(",
          "def test_ss_cursor_status(",
          "def test_conn_option(",
          "def test_stmt_enabled_conn_option_disabled(",
          "def test_aliases_and_ss(",
          "def test_roundtrip_fetchall(",
          "def test_roundtrip_fetchmany("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py": [
          "def test_basic(",
          "def test_non_rowcount_scenarios_no_raise(",
          "def test_update_rowcount1(",
          "def test_update_rowcount2(",
          "def test_update_delete_rowcount_return_defaults(",
          "def test_raw_sql_rowcount(",
          "def test_text_rowcount(",
          "def test_delete_rowcount(",
          "def test_multi_update_rowcount(",
          "def test_multi_delete_rowcount("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_select.py": [
          "def test_collate_order_by(",
          "def test_plain(",
          "def test_composed_int(",
          "def test_composed_multiple(",
          "def test_plain_desc(",
          "def test_composed_int_desc(",
          "def test_group_by_composed(",
          "def test_tuples(",
          "def test_simple_limit(",
          "def test_limit_render_multiple_times(",
          "def test_simple_fetch(",
          "def test_simple_offset(",
          "def test_simple_limit_offset(",
          "def test_simple_fetch_offset(",
          "def test_fetch_offset_no_order(",
          "def test_simple_offset_zero(",
          "def test_limit_offset_nobinds(",
          "def test_fetch_offset_nobinds(",
          "def test_bound_limit(",
          "def test_bound_offset(",
          "def test_bound_limit_offset(",
          "def test_bound_fetch_offset(",
          "def test_expr_offset(",
          "def test_expr_limit(",
          "def test_expr_limit_offset(",
          "def test_expr_fetch_offset(",
          "def test_simple_limit_expr_offset(",
          "def test_expr_limit_simple_offset(",
          "def test_simple_fetch_ties(",
          "def test_fetch_offset_ties(",
          "def test_fetch_offset_ties_exact_number(",
          "def test_simple_fetch_percent(",
          "def test_fetch_offset_percent(",
          "def test_simple_fetch_percent_ties(",
          "def test_fetch_offset_percent_ties(",
          "def test_simple_join_both_tables(",
          "def test_simple_join_whereclause_only(",
          "def test_subquery(",
          "def test_inner_join_fk(",
          "def test_inner_join_true(",
          "def test_inner_join_false(",
          "def test_outer_join_false(",
          "def test_outer_join_fk(",
          "def test_plain_union(",
          "def test_select_from_plain_union(",
          "def test_limit_offset_selectable_in_unions(",
          "def test_order_by_selectable_in_unions(",
          "def test_distinct_selectable_in_unions(",
          "def test_limit_offset_in_unions_from_alias(",
          "def test_limit_offset_aliased_selectable_in_unions(",
          "def test_compile(",
          "def test_compile_literal_binds(",
          "def test_execute(",
          "def test_execute_expanding_plus_literal_execute(",
          "def test_execute_tuple_expanding_plus_literal_execute(",
          "def test_execute_tuple_expanding_plus_literal_heterogeneous_execute(",
          "def test_multiple_empty_sets_bindparam(",
          "def test_multiple_empty_sets_direct(",
          "def test_empty_heterogeneous_tuples_bindparam(",
          "def test_empty_heterogeneous_tuples_direct(",
          "def test_empty_homogeneous_tuples_bindparam(",
          "def test_empty_homogeneous_tuples_direct(",
          "def test_bound_in_scalar_bindparam(",
          "def test_bound_in_scalar_direct(",
          "def test_nonempty_in_plus_empty_notin(",
          "def test_empty_in_plus_notempty_notin(",
          "def test_typed_str_in(",
          "def test_untyped_str_in(",
          "def test_bound_in_two_tuple_bindparam(",
          "def test_bound_in_two_tuple_direct(",
          "def test_bound_in_heterogeneous_two_tuple_bindparam(",
          "def test_bound_in_heterogeneous_two_tuple_direct(",
          "def test_bound_in_heterogeneous_two_tuple_text_bindparam(",
          "def test_bound_in_heterogeneous_two_tuple_typed_bindparam_non_tuple(",
          "def test_bound_in_heterogeneous_two_tuple_text_bindparam_non_tuple(",
          "def test_empty_set_against_integer_bindparam(",
          "def test_empty_set_against_integer_direct(",
          "def test_empty_set_against_integer_negation_bindparam(",
          "def test_empty_set_against_integer_negation_direct(",
          "def test_empty_set_against_string_bindparam(",
          "def test_empty_set_against_string_direct(",
          "def test_empty_set_against_string_negation_bindparam(",
          "def test_empty_set_against_string_negation_direct(",
          "def test_null_in_empty_set_is_false_bindparam(",
          "def test_null_in_empty_set_is_false_direct(",
          "def _test(",
          "def test_startswith_unescaped(",
          "def test_startswith_autoescape(",
          "def test_startswith_sqlexpr(",
          "def test_startswith_escape(",
          "def test_startswith_autoescape_escape(",
          "def test_endswith_unescaped(",
          "def test_endswith_sqlexpr(",
          "def test_endswith_autoescape(",
          "def test_endswith_escape(",
          "def test_endswith_autoescape_escape(",
          "def test_contains_unescaped(",
          "def test_contains_autoescape(",
          "def test_contains_escape(",
          "def test_contains_autoescape_escape(",
          "def test_not_regexp_match(",
          "def test_regexp_replace(",
          "def test_regexp_match(",
          "def test_select_all(",
          "def test_select_columns(",
          "def test_select_all(",
          "def test_select_columns(",
          "def test_insert_always_error(",
          "def test_autoincrement_with_identity(",
          "def test_select_exists(",
          "def test_select_exists_false(",
          "def test_distinct_on(",
          "def test_is_or_is_not_distinct_from(",
          "def test_window(",
          "def test_window_rows_between(",
          "def test_bitwise("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_sequence.py": [
          "def test_insert_roundtrip(",
          "def test_insert_lastrowid(",
          "def test_nextval_direct(",
          "def test_optional_seq(",
          "def test_insert_roundtrip_no_implicit_returning(",
          "def test_insert_roundtrip_translate(",
          "def test_nextval_direct_schema_translate(",
          "def test_literal_binds_inline_compile(",
          "def test_has_sequence(",
          "def test_has_sequence_cache(",
          "def test_has_sequence_other_object(",
          "def test_has_sequence_schema(",
          "def test_has_sequence_neg(",
          "def test_has_sequence_schemas_neg(",
          "def test_has_sequence_default_not_in_remote(",
          "def test_has_sequence_remote_not_in_default(",
          "def test_get_sequence_names(",
          "def test_get_sequence_names_no_sequence_schema(",
          "def test_get_sequence_names_sequences_schema(",
          "def test_get_sequence_names_no_sequence("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_types.py": [
          "def test_round_trip(",
          "def test_round_trip_executemany(",
          "def _test_null_strings(",
          "def _test_empty_strings(",
          "def test_literal(",
          "def test_literal_non_ascii(",
          "def test_empty_strings_varchar(",
          "def test_null_strings_varchar(",
          "def test_empty_strings_text(",
          "def test_null_strings_text(",
          "def test_array_roundtrip(",
          "def test_literal_simple(",
          "def test_literal_complex(",
          "def test_binary_roundtrip(",
          "def test_pickle_roundtrip(",
          "def test_text_roundtrip(",
          "def test_text_empty_strings(",
          "def test_text_null_strings(",
          "def test_literal(",
          "def test_literal_non_ascii(",
          "def test_literal_quoting(",
          "def test_literal_backslashes(",
          "def test_literal_percentsigns(",
          "def test_nolength_string(",
          "def test_literal(",
          "def test_literal_non_ascii(",
          "def test_dont_truncate_rightside(",
          "def test_literal_quoting(",
          "def test_literal_backslashes(",
          "def test_concatenate_binary(",
          "def test_concatenate_clauselist(",
          "def test_literal(",
          "def test_select_direct_literal_interval(",
          "def test_arithmetic_operation_literal_interval(",
          "def test_arithmetic_operation_table_interval_and_literal_interval(",
          "def test_arithmetic_operation_table_date_and_literal_interval(",
          "def test_round_trip(",
          "def test_round_trip_decorated(",
          "def test_null(",
          "def test_literal(",
          "def test_null_bound_comparison(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_select_direct(",
          "def test_literal(",
          "def test_huge_int_auto_accommodation(",
          "def test_huge_int(",
          "def test_special_type(",
          "def test_truediv_integer(",
          "def test_floordiv_integer(",
          "def test_truediv_numeric(",
          "def test_truediv_float(",
          "def test_floordiv_numeric(",
          "def test_truediv_integer_bound(",
          "def test_floordiv_integer_bound(",
          "def do_numeric_test(",
          "def test_render_literal_numeric(",
          "def test_render_literal_numeric_asfloat(",
          "def test_render_literal_float(",
          "def test_float_custom_scale(",
          "def test_numeric_as_decimal(",
          "def test_numeric_as_float(",
          "def test_infinity_floats(",
          "def test_numeric_null_as_decimal(",
          "def test_numeric_null_as_float(",
          "def test_float_as_decimal(",
          "def test_float_as_float(",
          "def test_float_coerce_round_trip(",
          "def test_decimal_coerce_round_trip(",
          "def test_decimal_coerce_round_trip_w_cast(",
          "def test_precision_decimal(",
          "def test_enotation_decimal(",
          "def test_enotation_decimal_large(",
          "def test_many_significant_digits(",
          "def test_numeric_no_decimal(",
          "def test_float_is_not_numeric(",
          "def test_render_literal_bool(",
          "def test_round_trip(",
          "def test_null(",
          "def test_whereclause(",
          "def test_round_trip_data1(",
          "def test_round_trip_pretty_large_data(",
          "def _test_round_trip(",
          "def test_index_typed_access(",
          "def test_index_typed_comparison(",
          "def test_path_typed_comparison(",
          "def test_single_element_round_trip(",
          "def test_round_trip_custom_json(",
          "def test_round_trip_none_as_sql_null(",
          "def test_round_trip_json_null_as_json_null(",
          "def test_round_trip_none_as_json_null(",
          "def test_unicode_round_trip(",
          "def test_eval_none_flag_orm(",
          "def _test_index_criteria(",
          "def test_string_cast_crit_spaces_in_key(",
          "def test_string_cast_crit_simple_int(",
          "def test_string_cast_crit_mixed_path(",
          "def test_string_cast_crit_string_path(",
          "def test_string_cast_crit_against_string_basic(",
          "def test_round_trip(",
          "def test_round_trip_executemany(",
          "def test_round_trip_executemany_returning(",
          "def test_uuid_round_trip(",
          "def test_uuid_text_round_trip(",
          "def test_literal_uuid(",
          "def test_literal_text(",
          "def test_literal_nonnative_uuid(",
          "def test_literal_nonnative_text(",
          "def test_uuid_returning("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_unicode_ddl.py": [
          "def test_insert(",
          "def test_col_targeting(",
          "def test_reflect(",
          "def test_repr("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py": [
          "def test_update(",
          "def test_delete(",
          "def test_update_returning(",
          "def test_delete_returning("
        ],
        ".venv\\Lib\\site-packages\\stone\\cli_helpers.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\lexer.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\parser.py": [
          "def test_lexing("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\testapp.py": [
          "def test_app("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\routing\\map.py": [
          "def test("
        ],
        ".venv\\Lib\\site-packages\\_distutils_hack\\__init__.py": [
          "def spec_for_sensitive_tests("
        ],
        "app\\attestation_upload_service.py": [
          "def save_and_upload_attestation(",
          "def delete_attestation_file(",
          "def get_attestation_file_path(",
          "def list_user_attestations(",
          "def upload_attestation_file(",
          "def get_users_with_attestations("
        ],
        "app\\cli.py": [
          "def test_email("
        ],
        "app\\debug_blueprint.py": [
          "def test_error("
        ],
        "app\\debug_blueprint_fixed.py": [
          "def test_error("
        ],
        "app\\local_attestation_service.py": [
          "def upload_attestation(",
          "def delete_attestation(",
          "def get_attestation_path(",
          "def list_user_attestations(",
          "def get_attestation_stats(",
          "def migrate_old_attestations(",
          "def _is_attestation_file(",
          "def get_local_attestation_service("
        ],
        "app\\local_backup.py": [
          "def save_attestation(",
          "def delete_attestation(",
          "def get_attestation_path("
        ],
        "app\\local_storage_manager.py": [
          "def _migrate_attestation_files("
        ],
        "app\\local_upload_service.py": [
          "def upload_attestation(",
          "def delete_attestation(",
          "def get_attestation_path(",
          "def list_user_attestations("
        ],
        "app\\models.py": [
          "def medical_attestations("
        ],
        "app\\admin\\routes.py": [
          "def atestados(",
          "def atestado_detalhes(",
          "def aprovar_atestado(",
          "def rejeitar_atestado(",
          "def criar_registros_atestado(",
          "def attestation_management(",
          "def sync_local_attestations(",
          "def user_attestation_files(",
          "def test_local_connection("
        ],
        "app\\admin\\backup\\error_log.py": [
          "def test_imports(",
          "def test_directory_structure(",
          "def test_storage_manager(",
          "def test_blueprint_registration(",
          "def test_templates(",
          "def test_permissions("
        ],
        "app\\admin\\backup\\routes.py": [
          "def test_no_auth(",
          "def test_simple("
        ],
        "app\\main\\routes.py": [
          "def atestados(",
          "def upload_atestado(",
          "def download_atestado(",
          "def cancelar_atestado("
        ],
        "backup_security_20250728_134443\\app_code\\attestation_upload_service.py": [
          "def save_and_upload_attestation(",
          "def delete_attestation_file(",
          "def get_attestation_file_path(",
          "def list_user_attestations(",
          "def upload_attestation_file(",
          "def get_users_with_attestations("
        ],
        "backup_security_20250728_134443\\app_code\\cli.py": [
          "def test_email("
        ],
        "backup_security_20250728_134443\\app_code\\local_attestation_service.py": [
          "def upload_attestation(",
          "def delete_attestation(",
          "def get_attestation_path(",
          "def list_user_attestations(",
          "def get_attestation_stats(",
          "def migrate_old_attestations(",
          "def _is_attestation_file(",
          "def get_local_attestation_service("
        ],
        "backup_security_20250728_134443\\app_code\\local_backup.py": [
          "def save_attestation(",
          "def delete_attestation(",
          "def get_attestation_path("
        ],
        "backup_security_20250728_134443\\app_code\\local_storage_manager.py": [
          "def _migrate_attestation_files("
        ],
        "backup_security_20250728_134443\\app_code\\local_upload_service.py": [
          "def upload_attestation(",
          "def delete_attestation(",
          "def get_attestation_path(",
          "def list_user_attestations("
        ],
        "backup_security_20250728_134443\\app_code\\models.py": [
          "def medical_attestations("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\routes.py": [
          "def atestados(",
          "def atestado_detalhes(",
          "def aprovar_atestado(",
          "def rejeitar_atestado(",
          "def criar_registros_atestado(",
          "def attestation_management(",
          "def sync_local_attestations(",
          "def user_attestation_files(",
          "def test_local_connection("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py": [
          "def test_imports(",
          "def test_directory_structure(",
          "def test_storage_manager(",
          "def test_blueprint_registration(",
          "def test_templates(",
          "def test_permissions("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py": [
          "def test_no_auth(",
          "def test_simple("
        ],
        "backup_security_20250728_134443\\app_code\\main\\routes.py": [
          "def atestados(",
          "def upload_atestado(",
          "def download_atestado(",
          "def cancelar_atestado("
        ],
        "backup_security_20250728_134443\\test_logs\\test_production_deployment.py": [
          "def test_deployment(",
          "def test_database_health("
        ]
      },
      "check_functions": {
        "analyze_page_errors.py": [
          "def comprehensive_check("
        ],
        "analyze_system_duplicates.py": [
          "def.*check.*\\(",
          "def check_file_sizes_and_dates("
        ],
        "app.py": [
          "def check_database_connection("
        ],
        "check_admin_user.py": [
          "def check_admin_user("
        ],
        "debug_500_error.py": [
          "def check_500_error("
        ],
        "verify_render_deployment.py": [
          "def check_system_health("
        ],
        ".venv\\Lib\\site-packages\\typing_extensions.py": [
          "def __instancecheck__(",
          "def _allow_reckless_class_checks(",
          "def _type_check_issubclass_arg_1(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def runtime_checkable(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def _check_generic(",
          "def _check_generic(",
          "def _check_single_param(",
          "def _check_parameters("
        ],
        ".venv\\Lib\\site-packages\\alembic\\command.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\alembic\\autogenerate\\render.py": [
          "def _add_check_constraint(",
          "def _render_check_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\ddl\\impl.py": [
          "def check_dicts("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\base.py": [
          "def create_check_constraint(",
          "def create_check_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\ops.py": [
          "def create_check_constraint(",
          "def batch_create_check_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\schemaobj.py": [
          "def check_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\requirements.py": [
          "def doesnt_have_check_uq_constraints(",
          "def check_constraints_w_enforcement("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_identity.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\bcrypt\\__init__.py": [
          "def checkpw("
        ],
        ".venv\\Lib\\site-packages\\click\\core.py": [
          "def _check_nested_chain(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def _check_iter(",
          "default = next(_check_iter(",
          "def check_iter("
        ],
        ".venv\\Lib\\site-packages\\click\\shell_completion.py": [
          "def _check_version("
        ],
        ".venv\\Lib\\site-packages\\contourpy\\typecheck.py": [
          "def check_code_array(",
          "def check_offset_array(",
          "def check_point_array(",
          "def _check_tuple_of_lists_with_same_length(",
          "def check_filled(",
          "def check_lines("
        ],
        ".venv\\Lib\\site-packages\\coverage\\control.py": [
          "def _check_include_omit_etc("
        ],
        ".venv\\Lib\\site-packages\\coverage\\html.py": [
          "def check_global_data("
        ],
        ".venv\\Lib\\site-packages\\coverage\\inorout.py": [
          "def check_include_omit_etc("
        ],
        ".venv\\Lib\\site-packages\\coverage\\tomlconfig.py": [
          "def _check_type("
        ],
        ".venv\\Lib\\site-packages\\dns\\enum.py": [
          "def _check_value("
        ],
        ".venv\\Lib\\site-packages\\dns\\exception.py": [
          "def _check_params(",
          "def _check_kwargs("
        ],
        ".venv\\Lib\\site-packages\\dns\\query.py": [
          "def _check_status("
        ],
        ".venv\\Lib\\site-packages\\dns\\resolver.py": [
          "def _check_kwargs("
        ],
        ".venv\\Lib\\site-packages\\dns\\transaction.py": [
          "def _check_read_only(",
          "def check_put_rdataset(",
          "def check_delete_rdataset(",
          "def check_delete_name(",
          "def _check_ended(",
          "def _checked_put_rdataset(",
          "def _checked_delete_rdataset(",
          "def _checked_delete_name("
        ],
        ".venv\\Lib\\site-packages\\dns\\zone.py": [
          "def check_origin("
        ],
        ".venv\\Lib\\site-packages\\dns\\zonefile.py": [
          "def _check_cname_and_other_data("
        ],
        ".venv\\Lib\\site-packages\\dns\\_ddr.py": [
          "def ddr_check_certificate(",
          "def ddr_tls_check_sync(",
          "def ddr_tls_check_async("
        ],
        ".venv\\Lib\\site-packages\\dns\\_features.py": [
          "def _version_check("
        ],
        ".venv\\Lib\\site-packages\\dns\\rdtypes\\util.py": [
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\dns\\rdtypes\\ANY\\LOC.py": [
          "def _check_coordinate_list("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base.py": [
          "def check_app(",
          "def check_user(",
          "def files_copy_batch_check_v2(",
          "def files_copy_batch_check(",
          "def files_create_folder_batch_check(",
          "def files_delete_batch_check(",
          "def files_move_batch_check_v2(",
          "def files_move_batch_check(",
          "def files_save_url_check_job_status(",
          "def files_upload_session_finish_batch_check(",
          "def sharing_check_job_status(",
          "def sharing_check_remove_member_job_status(",
          "def sharing_check_share_job_status("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base_team.py": [
          "def team_members_move_former_member_files_job_status_check(",
          "def team_team_folder_archive_check("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def external_drive_backup_eligibility_status_checked_details(",
          "def is_external_drive_backup_eligibility_status_checked_details(",
          "def get_external_drive_backup_eligibility_status_checked_details(",
          "def external_drive_backup_eligibility_status_checked(",
          "def is_external_drive_backup_eligibility_status_checked(",
          "def get_external_drive_backup_eligibility_status_checked(",
          "def is_external_drive_backup_eligibility_status_checked("
        ],
        ".venv\\Lib\\site-packages\\email_validator\\syntax.py": [
          "def check_unsafe_chars(",
          "def check_dot_atom("
        ],
        ".venv\\Lib\\site-packages\\flask\\app.py": [
          "def _check_setup_finished("
        ],
        ".venv\\Lib\\site-packages\\flask\\blueprints.py": [
          "def _check_setup_finished("
        ],
        ".venv\\Lib\\site-packages\\flask\\scaffold.py": [
          "def _check_setup_finished("
        ],
        ".venv\\Lib\\site-packages\\flask\\json\\tag.py": [
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\flask_limiter\\extension.py": [
          "def __should_check_backend(",
          "def check(",
          "def __check_conditional_deductions(",
          "def __check_all_limits_exempt(",
          "def _check_request_limit("
        ],
        ".venv\\Lib\\site-packages\\flask_migrate\\cli.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\flask_migrate\\__init__.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\feaLib\\builder.py": [
          "def checkattr("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\feaLib\\parser.py": [
          "def check_glyph_name_in_glyph_set("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\pens\\cu2quPen.py": [
          "def _check_contour_is_open(",
          "def _check_contour_is_closed("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\sfnt.py": [
          "def _calcMasterChecksum(",
          "def writeMasterChecksum(",
          "def calcChecksum("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\woff2.py": [
          "def _calcSFNTChecksumsLengthsAndOffsets(",
          "def _calcMasterChecksum(",
          "def writeMasterChecksum("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\featureVars.py": [
          "def _checkSubstitutionGlyphsExist("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\merger.py": [
          "def checkFormatEnum("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\instancer\\names.py": [
          "def checkAxisValuesExist("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\instancer\\__init__.py": [
          "def sanityCheckVariableTables("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\leakcheck.py": [
          "def ignores_leakcheck(",
          "def fails_leakcheck(",
          "def fails_strict_leakcheck(",
          "def _check_deltas("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py": [
          "def check(",
          "def _check_current_is_main("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet_trash.py": [
          "def check_it("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_leaks.py": [
          "def _check_issue251(",
          "def _check_untracked_memory_thread("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_tracing.py": [
          "def _check_trace_events_func_already_set(",
          "def _check_trace_events_from_greenlet_sets_profiler("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\util.py": [
          "def check_is_writable("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\http\\message.py": [
          "def proxy_protocol_access_check("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\workers\\gthread.py": [
          "def check_config("
        ],
        ".venv\\Lib\\site-packages\\idna\\core.py": [
          "def check_bidi(",
          "def check_initial_combiner(",
          "def check_hyphen_ok(",
          "def check_nfc(",
          "def check_label("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\bccache.py": [
          "def get_source_checksum("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\environment.py": [
          "def _environment_config_check("
        ],
        ".venv\\Lib\\site-packages\\limits\\limits.py": [
          "def check_granularity_string("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\base.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\memory.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\mongodb.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\memcached\\bridge.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\memcached\\emcache.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\memcached\\memcachio.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\memcached\\__init__.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\redis\\bridge.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\redis\\coredis.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\redis\\redispy.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\redis\\__init__.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\storage\\base.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\storage\\memcached.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\storage\\memory.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\storage\\mongodb.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\limits\\storage\\redis.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\mako\\codegen.py": [
          "def check_declared(",
          "def _check_name_exists("
        ],
        ".venv\\Lib\\site-packages\\mako\\lookup.py": [
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\bezier.py": [
          "def check_if_parallel("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\colors.py": [
          "def _check_color_like("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\contour.py": [
          "def _check_xyz("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\figure.py": [
          "def _check_layout_engines_compat("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\gridspec.py": [
          "def _check_gridspec_exists("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\image.py": [
          "def _check_unsampled_image(",
          "def _check_unsampled_image(",
          "def _check_unsampled_image(",
          "def _check_unsampled_image("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\offsetbox.py": [
          "def _check_still_parented("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\patches.py": [
          "def _check_xy("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\quiver.py": [
          "def _check_consistent_shapes("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\texmanager.py": [
          "def _run_checked_subprocess("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\text.py": [
          "def _check_xy("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\transforms.py": [
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\widgets.py": [
          "default('facecolor', check_props.pop(",
          "def set_check_props("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\_constrained_layout.py": [
          "def check_no_collapsed_axes("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\__init__.py": [
          "def _check_versions(",
          "def checkdep_usetex("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\axes\\_axes.py": [
          "def _check_no_units("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\axes\\__init__.py": [
          "def __instancecheck__("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_pdf.py": [
          "def check_trapped(",
          "def check_gc("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_qt.py": [
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_svg.py": [
          "def _check_is_str(",
          "def _check_is_iterable_of_str("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_wx.py": [
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_gtk.py": [
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py": [
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\cbook\\__init__.py": [
          "def _check_1d(",
          "def _check_and_log_subprocess("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\decorators.py": [
          "def check_freetype_version(",
          "def _check_freetype_version(",
          "def _checked_on_freetype_version(",
          "def check_figures_equal(*, extensions=("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\_markers.py": [
          "def _checkdep_usetex("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\__init__.py": [
          "def _check_for_pgf("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\jpl_units\\Duration.py": [
          "def checkSameFrame("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\jpl_units\\UnitDbl.py": [
          "def checkSameUnits("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_api.py": [
          "def test_check_shape(",
          "def test_empty_check_in_list("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backends_interactive.py": [
          "def check_alt_backend("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_bases.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pgf.py": [
          "def test_pdf_pages_metadata_check("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tk.py": [
          "def check_focus("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cbook.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_collections.py": [
          "def check_segments(",
          "def test_check_masked_offsets(",
          "def test_check_offsets_dtype("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_determinism.py": [
          "def test_determinism_check("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_legend.py": [
          "def test_legend_repeatcheckok("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mlab.py": [
          "def check_freqs(",
          "def check_maxfreq("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_preprocess_data.py": [
          "def test_compiletime_checks("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_subplots.py": [
          "def check_shared(",
          "def check_visible("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_testing.py": [
          "def test_parametrize_with_check_figure_equal(",
          "def test_check_figures_equal_extra_fig(",
          "def test_check_figures_equal_closed_fig("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_triangulation.py": [
          "def check_continuity("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_widgets.py": [
          "default_cb = CheckButtons(",
          "def test_CheckButtons(",
          "def test_check_radio_buttons_image(",
          "def test_check_buttons(",
          "def test_check_button_props(",
          "def test_check_buttons_rectangles(",
          "def test_check_buttons_lines(",
          "def check_polygon_selector("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\_api\\__init__.py": [
          "def check_isinstance(",
          "def check_in_list(",
          "def check_shape(",
          "def check_getitem("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_axes3d.py": [
          "def test_axes3d_focal_length_checks("
        ],
        ".venv\\Lib\\site-packages\\numpy\\conftest.py": [
          "def check_fpu_mode("
        ],
        ".venv\\Lib\\site-packages\\numpy\\__config__.py": [
          "def _check_pyyaml("
        ],
        ".venv\\Lib\\site-packages\\numpy\\__init__.py": [
          "def _sanity_check(",
          "def _mac_os_check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ctypeslib\\_ctypeslib.py": [
          "def _check_retval_("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\ccompiler_opt.py": [
          "def feature_extra_checks(",
          "defs += self.feature_extra_checks("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\core.py": [
          "def _check_append_library(",
          "def _check_append_ext_library("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\mingw32ccompiler.py": [
          "def _check_for_import_lib(",
          "def check_embedded_msvcr_match_linked("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\system_info.py": [
          "def check_libs(",
          "def check_libs2(",
          "def _check_libs(",
          "def _check_info(",
          "def check_msvc_gfortran_libs(",
          "def check_symbols(",
          "def check_embedded_lapack("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\command\\autodist.py": [
          "def check_inline(",
          "def check_restrict(",
          "def check_compiler_gcc(",
          "def check_gcc_version_at_least(",
          "def check_gcc_function_attribute(",
          "def check_gcc_function_attribute_with_intrinsics(",
          "def check_gcc_variable_attribute("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\command\\config.py": [
          "def _check_compiler (",
          "def check_header(",
          "def check_decl(",
          "def check_macro_true(",
          "def check_type(",
          "def check_type_size(",
          "def check_func(",
          "def check_funcs_once(",
          "def check_inline(",
          "def check_restrict(",
          "def check_compiler_gcc(",
          "def check_gcc_function_attribute(",
          "def check_gcc_function_attribute_with_intrinsics(",
          "def check_gcc_variable_attribute(",
          "def check_gcc_version_at_least("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt_conf.py": [
          "def test_extra_checks("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_exec_command.py": [
          "def check_nt(",
          "def check_posix(",
          "def check_basic(",
          "def check_execute_in("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_system_info.py": [
          "def _check_libs("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\cfuncs.py": [
          "define CHECKGENERIC(",
          "define CHECKARRAY(",
          "define CHECKSTRING(",
          "define CHECKSCALAR(",
          "define CHECKDIMS("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\crackfortran.py": [
          "def = f\"{vardef}{c}check({','.join("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_callback.py": [
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2py2e.py": [
          "def compiler_check_f2pycli("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_character.py": [
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_complex.py": [
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_integer.py": [
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_logical.py": [
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_real.py": [
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\util.py": [
          "def check_language(",
          "def check_compilers("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_datasource.py": [
          "def _check_mode("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_format_impl.py": [
          "def _check_version("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py": [
          "def _quantile_unchecked(",
          "def _check_interpolation_as_method("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_histograms_impl.py": [
          "def _ravel_and_check_weights("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_nanfunctions_impl.py": [
          "def _nanquantile_unchecked("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_npyio_impl.py": [
          "def _ensure_ndmin_ndarray_check_param(",
          "def _check_nonneg_int("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_utils_impl.py": [
          "def _median_nancheck("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraypad.py": [
          "def test_check_mean_stat_length(",
          "def test_check_maximum_1(",
          "def test_check_maximum_2(",
          "def test_check_maximum_stat_length(",
          "def test_check_minimum_1(",
          "def test_check_minimum_2(",
          "def test_check_minimum_stat_length(",
          "def test_check_median(",
          "def test_check_median_01(",
          "def test_check_median_02(",
          "def test_check_median_stat_length(",
          "def test_check_mean_shape_one(",
          "def test_check_mean_2(",
          "def test_check_negative_stat_length(",
          "def test_check_constant(",
          "def test_check_constant_zeros(",
          "def test_check_constant_float(",
          "def test_check_constant_float2(",
          "def test_check_constant_float3(",
          "def test_check_constant_odd_pad_amount(",
          "def test_check_constant_pad_2d(",
          "def test_check_large_integers(",
          "def test_check_object_array(",
          "def test_check_simple(",
          "def test_check_2d(",
          "def test_check_simple(",
          "def test_check_odd_method(",
          "def test_check_large_pad(",
          "def test_check_shape(",
          "def test_check_01(",
          "def test_check_02(",
          "def test_check_03(",
          "def test_check_04(",
          "def test_check_05(",
          "def test_check_06(",
          "def test_check_07(",
          "def test_check_simple(",
          "def test_check_odd_method(",
          "def test_check_large_pad(",
          "def test_check_large_pad_odd(",
          "def test_check_shape(",
          "def test_check_01(",
          "def test_check_02(",
          "def test_check_03(",
          "def test_check_simple(",
          "def test_check_large_pad(",
          "def test_check_01(",
          "def test_check_02(",
          "def test_check_simple(",
          "def test_check_width_shape_1_2("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraysetops.py": [
          "def check_all("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_function_base.py": [
          "def _check_inverse_of_slicing("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_histograms.py": [
          "def test_unsigned_monotonicity_check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_io.py": [
          "def check_roundtrips(",
          "def check_large_zip(",
          "def check_compressed("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_mixins.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_recfunctions.py": [
          "def test_checktitles("
        ],
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_linalg.py": [
          "def check(",
          "def check_cases(self, require=set(), exclude=set(",
          "def check_dtype(",
          "def check_qr(",
          "def check_qr_stacked(",
          "def test_byteorder_check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\core.py": [
          "def _check_fill_value(",
          "def _check_mask_axis("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\mrecords.py": [
          "def _checknames("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_core.py": [
          "def test_check_on_scalar(",
          "def test_check_on_fields("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_extras.py": [
          "def check_clump("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937.py": [
          "def test_bounds_checking(",
          "def test_bounds_checking_array(",
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_random.py": [
          "def test_bounds_checking(",
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate.py": [
          "def test_bounds_checking(",
          "def check_function("
        ],
        ".venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py": [
          "def check_support_sve(",
          "def check_free_memory("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_configtool.py": [
          "def check_numpyconfig("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_ctypeslib.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_public_api.py": [
          "def check_dir(",
          "def check_importable(",
          "def _check_correct_qualname_and_module("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\shape_base.py": [
          "def _block_check_depths_match("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\_internal.py": [
          "def npy_ctypes_check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_api.py": [
          "def check_copy_result(",
          "def check_contig("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_floatingpoint_errors.py": [
          "def check_operations("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_conversion_utils.py": [
          "def _check_value_error(",
          "def _check_conv_assert_warn(",
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_datetime.py": [
          "def check(",
          "def test_string_parser_error_check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_deprecations.py": [
          "def _check_for_warning("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py": [
          "def check_canonical(",
          "def check_pickling(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_einsum.py": [
          "def check_einsum_sums("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexing.py": [
          "def _check_multi_index(",
          "def _check_single_index("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_overlap.py": [
          "def _check_assignment(",
          "def check_may_share_memory_exact(",
          "def check_may_share_memory_easy_fuzz(",
          "def check(",
          "def check_internal_overlap(",
          "def check_unary_fuzz(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py": [
          "def check_count_nonzero(",
          "def check_round(",
          "def check(",
          "def _check_range(",
          "def _check_from(",
          "def test_check_reference(",
          "def test_check_weakref(",
          "def _check(",
          "def _check_roundtrip(",
          "def check_array(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numeric.py": [
          "def check_promotion_cases(",
          "def check_function(",
          "def check_like_function(",
          "def set_and_check_flag("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarmath.py": [
          "def check_ufunc_scalar_equivalence("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarprint.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd.py": [
          "def check_floatstatus("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_strings.py": [
          "def check_itemsize("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_ufunc.py": [
          "def test_logical_ufuncs_out_cast_check(",
          "def _check_neg_zero("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath.py": [
          "def _check_ldexp(",
          "def check(",
          "def check(",
          "def _check_branch_cut("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_complex.py": [
          "def _check_ninf_inf(",
          "def _check_inf_inf(",
          "def _check_ninf_nan(",
          "def _check_inf_nan(",
          "def _check_ninf_nan(",
          "def check_real_value(",
          "def check_complex_value("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_unicode.py": [
          "def content_check(",
          "def content_check(",
          "def content_check("
        ],
        ".venv\\Lib\\site-packages\\packaging\\_tokenizer.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\algorithms.py": [
          "def _check_object_for_strings(",
          "def checked_add_with_arr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\frame.py": [
          "def check_int_infer_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\generic.py": [
          "def _set_axis_nocheck(",
          "def _check_label_or_level_ambiguity(",
          "def _check_is_chained_assignment_possible(",
          "def _check_setitem_copy(",
          "def _check_inplace_and_allows_duplicate_labels("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexing.py": [
          "def check_bool_indexer(",
          "def check_dict_or_set_indexers("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\missing.py": [
          "def check_value_size("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\nanops.py": [
          "def check(",
          "def check_below_min_count("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\series.py": [
          "def _check_is_chained_assignment_possible("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py": [
          "def check_for_ordered("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\datetimelike.py": [
          "def _check_compatible_with("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\datetimes.py": [
          "def _check_compatible_with("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\period.py": [
          "def _check_compatible_with(",
          "def _check_timedeltalike_freq_compat("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\timedeltas.py": [
          "def _check_compatible_with("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\sparse\\scipy_sparse.py": [
          "def _check_is_partition("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\array_algos\\replace.py": [
          "def _check_comparison_types("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\engines.py": [
          "def _check_ne_builtin_clash("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\eval.py": [
          "def _check_engine(",
          "def _check_parser(",
          "def _check_resolvers(",
          "def _check_expression(",
          "def _check_for_locals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py": [
          "def _check_fill_value("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\dtypes\\generic.py": [
          "def _check(",
          "def _instancecheck(",
          "def _subclasscheck("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py": [
          "def check_result_array("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py": [
          "def check_setitem_lengths(",
          "def check_key_length(",
          "def check_array_indexer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py": [
          "def _sanitize_and_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py": [
          "def _maybe_check_unique(",
          "def _check_indexing_method(",
          "def _check_indexing_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\datetimes.py": [
          "def check_str_or_none("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py": [
          "def _check_indexing_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py": [
          "def check_ndim("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py": [
          "def _check_values_indices_shape_match("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py": [
          "def _consolidate_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py": [
          "def _bool_arith_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py": [
          "def _maybe_check_integrity("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\reshape\\encoding.py": [
          "def check_len("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\reshape\\merge.py": [
          "def _check_dtype_match("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\window\\ewm.py": [
          "def _check_window_bounds("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\window\\rolling.py": [
          "def _check_window_bounds("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\common.py": [
          "def check_parent_directory("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\pytables.py": [
          "def _check_if_open("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\sql.py": [
          "def check_case_sensitive("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\stata.py": [
          "def _check_column_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py": [
          "def _check_skiprows_func(",
          "def check_extension("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\formats\\console.py": [
          "def check_main("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\formats\\style_render.py": [
          "def _check_trim("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\json\\_json.py": [
          "def check_keys_split("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py": [
          "def _check_data_length("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\parsers\\python_parser.py": [
          "def _check_for_bom(",
          "def _check_comments(",
          "def _check_thousands(",
          "def _check_decimal("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py": [
          "def _check_file_or_buffer("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_nanops.py": [
          "def check_results(",
          "def check_fun_data(",
          "def check_fun(",
          "def check_funs(",
          "def check_nancorr_nancov_2d(",
          "def check_nancorr_nancov_1d(",
          "def test_check_below_min_count_negative_or_zero_min_count(",
          "def test_check_below_min_count_positive_min_count(",
          "def test_check_below_min_count_large_shape(",
          "def test_check_bottleneck_disallow("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_sorting.py": [
          "def test_int64_overflow_check_sum_col("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_take.py": [
          "def test_bounds_check_large(",
          "def test_bounds_check_small("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_api.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_period.py": [
          "def _check(",
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_timedelta64.py": [
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_array.py": [
          "def test_bounds_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimelike.py": [
          "def test_check_compatible_with("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arithmetic.py": [
          "def check_skip("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_indexing.py": [
          "def _check_setitem_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_arithmetics.py": [
          "def _check_numeric_ops(",
          "def _check_bool_result(",
          "def _check_comparison_ops(",
          "def _check_logical_ops("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_libsparse.py": [
          "def test_check_integrity(",
          "def test_check_integrity("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_eval.py": [
          "def test_check_single_invert_op(",
          "def test_check_many_exprs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_generic.py": [
          "def test_abc_pairs_instance_check(",
          "def test_abc_pairs_subclass_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_missing.py": [
          "def test_null_check_is_series(",
          "def _check_behavior(",
          "def test_checknull_na_vals(",
          "def test_checknull_inf_vals(",
          "def test_checknull_intna_vals(",
          "def test_checknull_never_na_vals(",
          "def test_checknull_old_na_vals(",
          "def test_checknull_old_inf_vals(",
          "def test_checknull_old_intna_vals(",
          "def test_checknull_old_never_na_vals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_promote.py": [
          "def _check_promote("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_arrow.py": [
          "def check_accumulate(",
          "def check_reduce("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_masked.py": [
          "def check_reduce(",
          "def check_accumulate("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_numpy.py": [
          "def test_check_dtype(",
          "def check_reduce("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_sparse.py": [
          "def _check_unsupported("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\accumulate.py": [
          "def check_accumulate("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\dtype.py": [
          "def test_check_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\ops.py": [
          "def check_opname(",
          "def _check_op(",
          "def _check_divmod_op("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\reduce.py": [
          "def check_reduce(",
          "def check_reduce_frame("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\decimal\\test_decimal.py": [
          "def check_reduce("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\common.py": [
          "def _check_mixed_float(",
          "def _check_mixed_int("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_api.py": [
          "def _check_f("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_constructors.py": [
          "def _check_basic_constructor(",
          "def test_check_dtype_empty_numeric_column(",
          "def test_check_dtype_empty_string_column(",
          "def check_views("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_logical_ops.py": [
          "def _check_bin_op(",
          "def _check_unary_op("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_nonunique_indexes.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_query_eval.py": [
          "def test_check_tz_aware_index_query("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_subclass.py": [
          "def check_row_subclass("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_indexing.py": [
          "def _check_setitem_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_where.py": [
          "def _check_get(",
          "def _check_align(",
          "def _check_set(",
          "def _check_where_equivalences("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_align.py": [
          "def _check_align(",
          "def _check_align_fill(",
          "def test_align_series_check_copy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_astype.py": [
          "def _check_cast("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_copy.py": [
          "def test_copy_index_name_checking("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_join.py": [
          "def test_join_on_multi_col_check_dup("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rank.py": [
          "def _check2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reset_index.py": [
          "def test_reset_index_allow_duplicates_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_shift.py": [
          "def test_shift_with_iterable_check_other_arguments("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_label_or_level_utils.py": [
          "def test_check_label_or_level_ambiguity_df(",
          "def test_check_label_or_level_ambiguity_series(",
          "def test_check_label_or_level_ambiguity_series_axis1_error("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_function.py": [
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby.py": [
          "def _check_groupby(df, result, keys, field, f=lambda x: x.sum("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_grouping.py": [
          "def test_groupby_grouper_f_sanity_checked("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_libgroupby.py": [
          "def _check_cython_group_transform_cumulative("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_raises.py": [
          "def _call_and_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_numba.py": [
          "def test_check_nopython_kwargs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_numba.py": [
          "def test_check_nopython_kwargs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_frozen.py": [
          "def check_mutable_error(",
          "def check_result("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_sort_values.py": [
          "def check_freq_ascending(",
          "def check_freq_nonmonotonic(",
          "def check_sort_values_with_freq(",
          "def check_sort_values_without_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_value_counts.py": [
          "def _check_value_counts_with_repeats(",
          "def _check_value_counts_dropna("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_astype.py": [
          "def _check_rng(",
          "def _check_rng(",
          "def _check_rng("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_names.py": [
          "def check_level_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_numeric.py": [
          "def check_coerce("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\common.py": [
          "def check_indexing_smoketest_or_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_coercion.py": [
          "def check_comprehensiveness("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_floats.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iloc.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_setitem.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py": [
          "def check_can_hold_element(",
          "def check_series_setitem("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_clipboard.py": [
          "def test_checked_call_with_bad_call(",
          "def test_checked_call_with_valid_call(",
          "def check_round_trip_frame("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_feather.py": [
          "def check_error_on_write(",
          "def check_external_error_on_write(",
          "def check_round_trip("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_html.py": [
          "def test_importcheck_thread_safety("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_parquet.py": [
          "def check_round_trip(",
          "def check_partition_names(",
          "def check_error_on_write(",
          "def check_external_error_on_write("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py": [
          "def check_iris_frame(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_info.py": [
          "def test_info_verbose_check_header_separator_body("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\conftest.py": [
          "def read_csv_check_warnings(",
          "def read_table_check_warnings("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_header.py": [
          "def test_read_csv_multi_header_length_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_dtypes_basic.py": [
          "def decimal_number_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_append.py": [
          "def check_col(",
          "def check_col("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_round_trip.py": [
          "def _check_roundtrip(",
          "def _check_roundtrip_table("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_store.py": [
          "def checksum(",
          "def create_h5_and_return_checksum("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\common.py": [
          "def _check_legend_labels(",
          "def _check_legend_marker(",
          "def _check_data(",
          "def _check_visible(",
          "def _check_patches_all_filled(",
          "def _check_colors(",
          "def _check_text_labels(",
          "def _check_ticks_props(",
          "def _check_ax_scales(",
          "def _check_axes_shape(",
          "def _check_has_errorbars(",
          "def _check_box_return_type(",
          "def _check_grid_settings(",
          "def _check_plot_works("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_boxplot_method.py": [
          "def _check_ax_limits("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_common.py": [
          "def test__check_ticks_props("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_datetimelike.py": [
          "def check_format_of_first_point(",
          "def test_check_xticks_rot(",
          "def test_check_xticks_rot_irregular(",
          "def test_check_xticks_rot_use_idx(",
          "def test_check_xticks_rot_sharex(",
          "def _check_plot_works("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_series.py": [
          "def test_kde_kwargs_check_axes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame.py": [
          "def _check_box_coord(",
          "def _check_errorbar_color(",
          "def _check(",
          "def _check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_color.py": [
          "def _check_colors_box("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_subplots.py": [
          "def _check_bar_alignment("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_reductions.py": [
          "def check_missing("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_stat_reductions.py": [
          "def _check_stat_op("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot.py": [
          "def _check_output("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_join.py": [
          "def _check_diff_index(",
          "def _check_join("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge.py": [
          "def check1(",
          "def check2(",
          "def check1(",
          "def check2(",
          "def _check_merge("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_timedelta.py": [
          "def check(",
          "def checker("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timestamp.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_unary_ops.py": [
          "def checker("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_arithmetic.py": [
          "def _check_fill("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_indexing.py": [
          "def _check_setitem_invalid("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_setitem.py": [
          "def check_indexer(",
          "def _check_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_copy.py": [
          "def test_copy_index_name_checking("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nlargest.py": [
          "def assert_check_nselect_boundary("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_replace.py": [
          "def check_replace(",
          "def _check_replace_with_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_numeric.py": [
          "def test_type_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_day.py": [
          "def _check_roundtrip("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_month.py": [
          "def _check_roundtrip("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py": [
          "def _check_offsetfunc_works("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parsing.py": [
          "def test_parse_datetime_string_with_reso_check_instance_type_raise_exception("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\conftest.py": [
          "def check_dtype(",
          "def check_exact(",
          "def check_index_type(",
          "def check_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_frame_equal.py": [
          "def test_assert_frame_equal_check_like_different_indexes(",
          "def test_assert_frame_equal_checking_allow_dups_flag(",
          "def test_assert_frame_equal_check_like_categorical_midx("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_index_equal.py": [
          "def test_assert_index_equal_different_names_check_order_false(",
          "def test_assert_multi_index_dtype_check_categorical("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_series_equal.py": [
          "def test_check_dtype_false_different_reso("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_ewm.py": [
          "def test_ewm_domain_checks("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tseries\\frequencies.py": [
          "def month_position_check("
        ],
        ".venv\\Lib\\site-packages\\pandas\\util\\_validators.py": [
          "def _check_arg_length(",
          "def _check_for_default_values(",
          "def _check_for_invalid_keys(",
          "def check_dtype_backend("
        ],
        ".venv\\Lib\\site-packages\\pandas\\_testing\\asserters.py": [
          "def _check_isinstance(",
          "def _check_types("
        ],
        ".venv\\Lib\\site-packages\\PIL\\EpsImagePlugin.py": [
          "def check_required_header_comments("
        ],
        ".venv\\Lib\\site-packages\\PIL\\features.py": [
          "def check_module(",
          "def check_codec(",
          "def check_feature(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\PIL\\Image.py": [
          "def _check_size(",
          "def _decompression_bomb_check("
        ],
        ".venv\\Lib\\site-packages\\PIL\\ImageDraw.py": [
          "def _multiline_check("
        ],
        ".venv\\Lib\\site-packages\\PIL\\ImageFile.py": [
          "def _seek_check("
        ],
        ".venv\\Lib\\site-packages\\PIL\\ImageFilter.py": [
          "def _check_size("
        ],
        ".venv\\Lib\\site-packages\\PIL\\ImageFont.py": [
          "def _string_length_check("
        ],
        ".venv\\Lib\\site-packages\\PIL\\ImageTk.py": [
          "def _pilbitmap_check("
        ],
        ".venv\\Lib\\site-packages\\PIL\\PdfParser.py": [
          "def check_format_condition("
        ],
        ".venv\\Lib\\site-packages\\PIL\\PngImagePlugin.py": [
          "def check_text_memory("
        ],
        ".venv\\Lib\\site-packages\\PIL\\PyAccess.py": [
          "def check_xy("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\build_env.py": [
          "def check_requirements("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\self_outdated_check.py": [
          "def _self_version_check_logic(",
          "def pip_self_version_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\base_command.py": [
          "def handle_pip_version_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\cmdoptions.py": [
          "def check_dist_restriction(",
          "def _path_option_check(",
          "def _package_name_option_check(",
          "def check_list_path_option("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\index_command.py": [
          "def _pip_self_version_check(",
          "def handle_pip_version_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\parser.py": [
          "def check_default(",
          "defaults[option.dest] = option.check_value("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\list.py": [
          "def handle_pip_version_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py": [
          "def _check_link_requires_python("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\network\\lazy_wheel.py": [
          "def _check_zip("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\check.py": [
          "def check_package_set(",
          "def check_install_conflicts(",
          "def check_unsupported("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\prepare.py": [
          "def _check_download_dir("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\req\\constructors.py": [
          "def check_first_requirement_in_file("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py": [
          "def check_if_exists(",
          "def isolated_editable_sanity_check(",
          "def ensure_pristine_source_checkout(",
          "def check_invalid_constraint_type(",
          "def check_legacy_setup_py_options("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\legacy\\resolver.py": [
          "def _check_dist_requires_python(",
          "def _check_skip_installed("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py": [
          "def _check_metadata_consistency("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\filesystem.py": [
          "def check_path_owner("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\hashes.py": [
          "def check_against_chunks(",
          "def check_against_file(",
          "def check_against_path("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py": [
          "def _check_no_input(",
          "def check_externally_managed("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\packaging.py": [
          "def check_requires_python("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\wheel.py": [
          "def check_compatibility("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py": [
          "def is_immutable_rev_checkout("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py": [
          "def is_immutable_rev_checkout("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py": [
          "def __instancecheck__(",
          "def _allow_reckless_class_checks(",
          "def _type_check_issubclass_arg_1(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def runtime_checkable(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def _check_generic(",
          "def _check_generic(",
          "def _check_single_param(",
          "def _check_parameters(",
          "def _lax_type_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\compat.py": [
          "def _access_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py": [
          "def check_installed_files(",
          "def check_installed_files("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\index.py": [
          "def check_credentials("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py": [
          "def check_path("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py": [
          "def _check_compatible(",
          "def _check_compatible("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\idna\\core.py": [
          "def check_bidi(",
          "def check_initial_combiner(",
          "def check_hyphen_ok(",
          "def check_nfc(",
          "def check_label("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\fallback.py": [
          "def _check_type_strict("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_tokenizer.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py": [
          "def check_version_conflict("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\scanner.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_impl.py": [
          "def norm_and_check("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py": [
          "def check_header_validity("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__init__.py": [
          "def check_compatibility(",
          "def _check_cryptography("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py": [
          "def check_text(",
          "def _check_buffer("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\pretty.py": [
          "def check_length(",
          "def check_length("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py": [
          "def check_choice("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py": [
          "def check_hostname(",
          "def check_hostname(",
          "def hostname_checks_common_name(",
          "def hostname_checks_common_name("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py": [
          "def check_hostname(",
          "def check_hostname("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_.py": [
          "def disable_check_hostname("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\__init__.py": [
          "def check_version_conflict("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\importlib_resources\\_compat.py": [
          "def runtime_checkable("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\core.py": [
          "def _checkRecursion(",
          "def _checkRecursion(",
          "def _checkRecursion("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\helpers.py": [
          "def checkPeerIndent(",
          "def checkSubIndent(",
          "def checkUnindent("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\testing.py": [
          "def assertParseAndCheckList(",
          "def assertParseAndCheckDict("
        ],
        ".venv\\Lib\\site-packages\\psycopg\\_connection_base.py": [
          "def _check_intrans_gen(",
          "def _check_connection_ok(",
          "def _check_tpc("
        ],
        ".venv\\Lib\\site-packages\\psycopg\\_cursor_base.py": [
          "def _check_results(",
          "def _check_result_for_fetch(",
          "def _check_copy_result("
        ],
        ".venv\\Lib\\site-packages\\psycopg\\_preparing.py": [
          "def _check_results("
        ],
        ".venv\\Lib\\site-packages\\psycopg\\crdb\\connection.py": [
          "def _check_tpc("
        ],
        ".venv\\Lib\\site-packages\\psycopg\\types\\multirange.py": [
          "def _check_type("
        ],
        ".venv\\Lib\\site-packages\\pygments\\scanner.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\scripting.py": [
          "DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE|SET_MODE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[A-D]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\core.py": [
          "def _checkRecursion(",
          "def _checkRecursion(",
          "def _checkRecursion("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\helpers.py": [
          "def checkPeerIndent(",
          "def checkSubIndent(",
          "def checkUnindent("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\testing.py": [
          "def assertParseAndCheckList(",
          "def assertParseAndCheckDict("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\widgetbase.py": [
          "def checkAttr("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\common.py": [
          "def _checkVal("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\dmtx.py": [
          "def pylibdmtx_check("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\eanbc.py": [
          "def _checkdigit(",
          "def _checkdigit("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\charts\\piecharts.py": [
          "def _checkDXY(",
          "def _checkDXY("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\normalDate.py": [
          "def _checkDOW("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\pdfencrypt.py": [
          "def checkRevision(",
          "def checkU(",
          "def equalityCheck("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\rl_accel.py": [
          "def calcChecksum("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\rl_safe_eval.py": [
          "def check_function_argument_names(",
          "def check_import_names(",
          "def gen_attr_check(",
          "def __rl_check__("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\testutils.py": [
          "def eqCheck("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\utils.py": [
          "def check_pil_image_size("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\acroform.py": [
          "def checkboxAP(",
          "def checkForceBorder(",
          "def checkbox(",
          "def checkboxRelative("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\pdfdoc.py": [
          "def _checkPdfdoc(",
          "def checkPDFBoolean(",
          "def check_format(",
          "def check_format(",
          "def check_format(",
          "def _checkTransparency("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\pdfmetrics.py": [
          "def _pfbCheck("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\pdfpattern.py": [
          "def _patternSequenceCheck("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\ttfonts.py": [
          "def checksumTables(",
          "def checksumFile("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfgen\\textobject.py": [
          "def _checkSeparation("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\platypus\\doctemplate.py": [
          "def checkPageSize("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\platypus\\flowables.py": [
          "def checkBlock("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\platypus\\paraparser.py": [
          "def check_text("
        ],
        ".venv\\Lib\\site-packages\\requests\\utils.py": [
          "def check_header_validity("
        ],
        ".venv\\Lib\\site-packages\\requests\\__init__.py": [
          "def check_compatibility(",
          "def _check_cryptography("
        ],
        ".venv\\Lib\\site-packages\\rich\\console.py": [
          "def check_text(",
          "def _check_buffer("
        ],
        ".venv\\Lib\\site-packages\\rich\\pretty.py": [
          "def check_length(",
          "def check_length("
        ],
        ".venv\\Lib\\site-packages\\rich\\prompt.py": [
          "def check_choice("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\utils.py": [
          "def _check_argument("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_oldcore.py": [
          "def _check_list_length("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_core\\properties.py": [
          "def _check_dict_entries(",
          "def _check_list_length("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_core\\subplots.py": [
          "def _check_dimension_uniqueness("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_stats\\base.py": [
          "def _check_param_one_of(",
          "def _check_grouping_vars("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_stats\\density.py": [
          "def _check_var_list_or_boolean("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\dist.py": [
          "def check_importable(",
          "def check_nsp(",
          "def check_extras(",
          "def _check_extra(",
          "def check_requirements(",
          "def check_specifier(",
          "def check_entry_points(",
          "def check_test_suite(",
          "def check_package_data(",
          "def check_packages("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\package_index.py": [
          "def check_hash("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\build_py.py": [
          "def check_package("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\easy_install.py": [
          "def check_site_dir(self):  # noqa: C901  # is too complex (",
          "def check_pth_processing(",
          "def check_editable("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\egg_info.py": [
          "def check_broken_egg_info("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\sdist.py": [
          "def check_readme("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\config\\_validate_pyproject\\fastjsonschema_validations.py": [
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "definition={'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}]}, 'classifiers': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'description': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'dependencies': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'entry-points': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}}}, 'readme': {'anyOf': [{'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards ("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\archive_util.py": [
          "def check_archive_formats("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\ccompiler.py": [
          "def _check_macro_definitions("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\cygwinccompiler.py": [
          "def check_config_h("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\fancy_getopt.py": [
          "def _check_alias_dict("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\util.py": [
          "def check_environ("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\build_clib.py": [
          "def check_library_list("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\build_ext.py": [
          "def check_extensions_list("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\build_py.py": [
          "def check_package(",
          "def check_module("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\check.py": [
          "def check_metadata(",
          "def check_restructuredtext(",
          "def _check_rst_data("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\config.py": [
          "def _check_compiler(",
          "def check_func(",
          "def check_lib(",
          "def check_header("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\register.py": [
          "def check_metadata("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\sdist.py": [
          "def checking_metadata(",
          "def check_metadata("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\typing_extensions.py": [
          "def _check_generic(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def runtime_checkable(",
          "def _check_fails(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__(",
          "def __instancecheck__(",
          "def __subclasscheck__("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\importlib_resources\\_compat.py": [
          "def runtime_checkable("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\core.py": [
          "def _checkRecursion(",
          "def _checkRecursion(",
          "def _checkRecursion("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\helpers.py": [
          "def checkPeerIndent(",
          "def checkSubIndent(",
          "def checkUnindent("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\testing.py": [
          "def assertParseAndCheckList(",
          "def assertParseAndCheckDict("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\connectors\\pyodbc.py": [
          "def check_quote("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.py": [
          "def _check_can_use_fetch_limit("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\base.py": [
          "def get_check_constraints(",
          "Defaults.check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py": [
          "def _check_unicode_returns("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\reflection.py": [
          "def _check_view("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\base.py": [
          "def _check_max_identifier_length(",
          "def get_check_constraints(",
          "def get_multi_check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\oracledb.py": [
          "def _check_max_identifier_length("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py": [
          "def checkout(",
          "def checkin("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\asyncpg.py": [
          "def _check_type_cache_invalidation("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py": [
          "def visit_check_constraint(",
          "def get_check_constraints(",
          "def _check_constraint_query(",
          "def get_multi_check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\named_types.py": [
          "def _check_for_name_in_memos("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py": [
          "def visit_check_constraint(",
          "def visit_column_check_constraint(",
          "def get_check_constraints(",
          "Defaults.check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py": [
          "def _check_max_identifier_length(",
          "def get_multi_check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\interfaces.py": [
          "def get_check_constraints(",
          "def get_multi_check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\reflection.py": [
          "def get_check_constraints(",
          "def get_multi_check_constraints(",
          "def _reflect_check_constraints(",
          "def check_constraints("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\util.py": [
          "def _trans_ctx_check("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\instrumentation.py": [
          "def _check_conflicts("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\util.py": [
          "def flatten_typechecking("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\collections.py": [
          "def _set_binops_check_strict(",
          "def _set_binops_check_loose("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\context.py": [
          "def adapt_check_present(",
          "def adapt_check_present(",
          "def adapt_check_present(",
          "def _join_check_and_adapt_right_side("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_api.py": [
          "def _check_not_declarative("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_base.py": [
          "def _check_declared_props_nocascade(",
          "def _cls_attr_override_checker("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\identity.py": [
          "def check_modified("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\instrumentation.py": [
          "def _check_conflicts("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapper.py": [
          "def _check_configure("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\relationships.py": [
          "def _check_sync_backref(",
          "def _check_conflicts(",
          "def _check_cascade_settings(",
          "def check_fk(",
          "def _check_remote_side(",
          "def _check_foreign_cols("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategies.py": [
          "def _do_check("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py": [
          "def checkout(",
          "def _checkin_failed(",
          "def checkin(",
          "def _checkout(",
          "def _checkout_existing(",
          "def _checkin("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\pool\\events.py": [
          "def my_on_checkout(",
          "def checkout(",
          "def checkin("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py": [
          "def checkedin(",
          "def checkedout("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\base.py": [
          "def check("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py": [
          "def visit_table_or_column_check_constraint(",
          "def visit_check_constraint(",
          "def visit_column_check_constraint("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py": [
          "def _check_attach("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\type_api.py": [
          "def _copy_with_check("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\util.py": [
          "def adapt_check_present("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\engines.py": [
          "def checkin_all("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\requirements.py": [
          "def inline_check_constraint_reflection(",
          "def check_constraint_reflection(",
          "def check(",
          "def check(",
          "def check(",
          "def check(",
          "def check_lib("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\fixtures\\mypy.py": [
          "def mypy_typecheck_file(",
          "def _check_output("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\pytestplugin.py": [
          "def check_exclusions("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_reflection.py": [
          "def test_get_check_constraints(",
          "def _check_expressions(",
          "def _check_list(",
          "def _check_table_dict(",
          "def test_get_multi_check_constraints(",
          "def test_check_constraint_no_constraint(",
          "def test_check_constraint_inline(",
          "def test_check_constraint_standalone(",
          "def test_check_constraint_mixed(",
          "def check_column(",
          "def check("
        ],
        ".venv\\Lib\\site-packages\\stone\\backends\\js_helpers.py": [
          "def check_route_name_conflict("
        ],
        ".venv\\Lib\\site-packages\\stone\\backends\\obj_c_types.py": [
          "def _generate_hash_check(",
          "def _generate_equality_check("
        ],
        ".venv\\Lib\\site-packages\\stone\\backends\\python_helpers.py": [
          "def check_route_name_conflict("
        ],
        ".venv\\Lib\\site-packages\\stone\\backends\\swift_helpers.py": [
          "def check_route_name_conflict("
        ],
        ".venv\\Lib\\site-packages\\stone\\backends\\tsd_helpers.py": [
          "def check_route_name_conflict("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\ir_generator.py": [
          "def _check_canonical_name_available(",
          "def _check_patch_type_mismatch(",
          "def _check_field_names_unique(",
          "def check_value("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\lexer.py": [
          "def _check_for_indent("
        ],
        ".venv\\Lib\\site-packages\\stone\\ir\\data_types.py": [
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def check(",
          "def check_example(",
          "def check(",
          "def check_example(",
          "def check(",
          "def check_example(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def _check_list_container(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def required_check(",
          "def optional_check(",
          "def check(",
          "def check_example(",
          "def check_attr_repr(",
          "def check(",
          "def check_example(",
          "def check_attr_repr("
        ],
        ".venv\\Lib\\site-packages\\urllib3\\util\\ssl_.py": [
          "def _is_has_never_check_common_name_reliable("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\security.py": [
          "def check_password_hash("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\_internal.py": [
          "def _check_str_tuple("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\debug\\__init__.py": [
          "def check_pin_trust("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\middleware\\lint.py": [
          "def check_type(",
          "def check_environ(",
          "def check_start_response(",
          "def check_headers(",
          "def check_iterator(",
          "def checking_start_response("
        ],
        ".venv\\Lib\\site-packages\\wrapt\\wrappers.py": [
          "def __instancecheck__(",
          "def __subclasscheck__("
        ],
        ".venv\\Lib\\site-packages\\wtforms\\validators.py": [
          "def check_ipv4(",
          "def check_ipv6("
        ],
        ".venv\\Lib\\site-packages\\wtforms\\fields\\core.py": [
          "def check_validators("
        ],
        ".venv\\Lib\\site-packages\\xlsxwriter\\workbook.py": [
          "def _check_sheetname("
        ],
        ".venv\\Lib\\site-packages\\xlsxwriter\\worksheet.py": [
          "def _check_dimensions("
        ],
        "app\\models.py": [
          "def check_password("
        ],
        "app\\overtime_controller.py": [
          "def _check_overtime_limits("
        ],
        "app\\main\\routes.py": [
          "def health_check("
        ],
        "backup_security_20250728_134443\\app_code\\models.py": [
          "def check_password("
        ],
        "backup_security_20250728_134443\\app_code\\overtime_controller.py": [
          "def _check_overtime_limits("
        ],
        "backup_security_20250728_134443\\app_code\\main\\routes.py": [
          "def health_check("
        ],
        "scripts\\backup_scheduler.py": [
          "def _check_and_run_backup("
        ]
      },
      "create_functions": {
        "analyze_system_duplicates.py": [
          "def.*create.*\\("
        ],
        "create_security_backup.py": [
          "def create_backup("
        ],
        "final_summary.py": [
          "def create_final_summary("
        ],
        ".venv\\Lib\\site-packages\\six.py": [
          "def create_module(",
          "def create_unbound_method(",
          "def create_bound_method(",
          "def create_unbound_method("
        ],
        ".venv\\Lib\\site-packages\\typing_extensions.py": [
          "def _create_typeddict(",
          "def _create_concatenate_alias(",
          "def create_model("
        ],
        ".venv\\Lib\\site-packages\\alembic\\autogenerate\\render.py": [
          "def _render_create_table_comment("
        ],
        ".venv\\Lib\\site-packages\\alembic\\ddl\\impl.py": [
          "def requires_recreate_in_batch(",
          "def create_table(",
          "def create_index(",
          "def create_table_comment(",
          "def create_column_comment(",
          "def _create_metadata_constraint_sig(",
          "def _create_reflected_constraint_sig("
        ],
        ".venv\\Lib\\site-packages\\alembic\\ddl\\mssql.py": [
          "def create_index("
        ],
        ".venv\\Lib\\site-packages\\alembic\\ddl\\postgresql.py": [
          "def create_index(",
          "def create_exclude_constraint(",
          "def batch_create_exclude_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\ddl\\sqlite.py": [
          "def requires_recreate_in_batch("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\base.py": [
          "def create_check_constraint(",
          "def create_exclude_constraint(",
          "def create_foreign_key(",
          "def create_index(",
          "def create_primary_key(",
          "def create_table(",
          "def create_table_comment(",
          "def create_unique_constraint(",
          "def create_check_constraint(",
          "def create_exclude_constraint(",
          "def create_foreign_key(",
          "def create_index(",
          "def create_primary_key(",
          "def create_table_comment(",
          "def create_unique_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\batch.py": [
          "def _should_recreate(",
          "def create_index(",
          "def create_table_comment(",
          "def create_table(",
          "def create_column_comment(",
          "def _create(",
          "def create_column_comment(",
          "def create_table_comment(",
          "def create_index("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\ops.py": [
          "def create_primary_key(",
          "def batch_create_primary_key(",
          "def create_unique_constraint(",
          "def batch_create_unique_constraint(",
          "def create_foreign_key(",
          "def batch_create_foreign_key(",
          "def create_check_constraint(",
          "def batch_create_check_constraint(",
          "def create_index(",
          "def batch_create_index(",
          "def create_table(",
          "def create_table_comment(",
          "def batch_create_table_comment("
        ],
        ".venv\\Lib\\site-packages\\alembic\\operations\\toimpl.py": [
          "def create_index(",
          "def create_table(",
          "def create_table_comment(",
          "def create_constraint("
        ],
        ".venv\\Lib\\site-packages\\alembic\\runtime\\migration.py": [
          "def should_create_branch(",
          "def should_create_branch("
        ],
        ".venv\\Lib\\site-packages\\alembic\\script\\base.py": [
          "def _generate_create_date("
        ],
        ".venv\\Lib\\site-packages\\alembic\\util\\langhelpers.py": [
          "def create_module_class_proxy(",
          "def _create_method_proxy("
        ],
        ".venv\\Lib\\site-packages\\bs4\\builder\\_html5lib.py": [
          "def create_treebuilder("
        ],
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_soup.py": [
          "def test_new_string_creates_navigablestring(",
          "def test_new_string_can_create_navigablestring_subclass("
        ],
        ".venv\\Lib\\site-packages\\dns\\dnssec.py": [
          "def ok_to_create_ds(",
          "def ok_to_create_ds("
        ],
        ".venv\\Lib\\site-packages\\dns\\query.py": [
          "def create_default_context("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base.py": [
          "def file_requests_create(",
          "def files_create_folder_v2(",
          "def files_create_folder(",
          "def files_create_folder_batch(",
          "def files_create_folder_batch_check(",
          "def files_paper_create(",
          "def paper_docs_create(",
          "def paper_folders_create(",
          "def sharing_create_shared_link(",
          "def sharing_create_shared_link_with_settings("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base_team.py": [
          "def team_groups_create(",
          "def team_legal_holds_create_policy(",
          "def team_team_folder_create("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\paper.py": [
          "def is_docs_created(",
          "def is_created("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\sharing.py": [
          "def is_create_link(",
          "def is_create_view_link(",
          "def is_create_edit_link(",
          "def is_create_link(",
          "def is_delete_and_recreate("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def governance_policy_create_details(",
          "def governance_policy_export_created_details(",
          "def governance_policy_report_created_details(",
          "def create_folder_details(",
          "def file_request_create_details(",
          "def group_create_details(",
          "def create_team_invite_link_details(",
          "def paper_content_create_details(",
          "def paper_published_link_create_details(",
          "def classification_create_report_details(",
          "def classification_create_report_fail_details(",
          "def emm_create_exceptions_report_details(",
          "def emm_create_usage_report_details(",
          "def external_sharing_create_report_details(",
          "def no_expiration_link_gen_create_report_details(",
          "def no_password_link_gen_create_report_details(",
          "def no_password_link_view_create_report_details(",
          "def outdated_link_view_create_report_details(",
          "def smart_sync_create_admin_privilege_report_details(",
          "def team_activity_create_report_details(",
          "def team_activity_create_report_fail_details(",
          "def shared_folder_create_details(",
          "def shared_link_create_details(",
          "def showcase_created_details(",
          "def team_folder_create_details(",
          "def is_governance_policy_create_details(",
          "def is_governance_policy_export_created_details(",
          "def is_governance_policy_report_created_details(",
          "def is_create_folder_details(",
          "def is_file_request_create_details(",
          "def is_group_create_details(",
          "def is_create_team_invite_link_details(",
          "def is_paper_content_create_details(",
          "def is_paper_published_link_create_details(",
          "def is_classification_create_report_details(",
          "def is_classification_create_report_fail_details(",
          "def is_emm_create_exceptions_report_details(",
          "def is_emm_create_usage_report_details(",
          "def is_external_sharing_create_report_details(",
          "def is_no_expiration_link_gen_create_report_details(",
          "def is_no_password_link_gen_create_report_details(",
          "def is_no_password_link_view_create_report_details(",
          "def is_outdated_link_view_create_report_details(",
          "def is_smart_sync_create_admin_privilege_report_details(",
          "def is_team_activity_create_report_details(",
          "def is_team_activity_create_report_fail_details(",
          "def is_shared_folder_create_details(",
          "def is_shared_link_create_details(",
          "def is_showcase_created_details(",
          "def is_team_folder_create_details(",
          "def get_governance_policy_create_details(",
          "def get_governance_policy_export_created_details(",
          "def get_governance_policy_report_created_details(",
          "def get_create_folder_details(",
          "def get_file_request_create_details(",
          "def get_group_create_details(",
          "def get_create_team_invite_link_details(",
          "def get_paper_content_create_details(",
          "def get_paper_published_link_create_details(",
          "def get_classification_create_report_details(",
          "def get_classification_create_report_fail_details(",
          "def get_emm_create_exceptions_report_details(",
          "def get_emm_create_usage_report_details(",
          "def get_external_sharing_create_report_details(",
          "def get_no_expiration_link_gen_create_report_details(",
          "def get_no_password_link_gen_create_report_details(",
          "def get_no_password_link_view_create_report_details(",
          "def get_outdated_link_view_create_report_details(",
          "def get_smart_sync_create_admin_privilege_report_details(",
          "def get_team_activity_create_report_details(",
          "def get_team_activity_create_report_fail_details(",
          "def get_shared_folder_create_details(",
          "def get_shared_link_create_details(",
          "def get_showcase_created_details(",
          "def get_team_folder_create_details(",
          "def governance_policy_create(",
          "def governance_policy_export_created(",
          "def governance_policy_report_created(",
          "def create_folder(",
          "def file_request_create(",
          "def group_create(",
          "def create_team_invite_link(",
          "def paper_content_create(",
          "def paper_published_link_create(",
          "def classification_create_report(",
          "def classification_create_report_fail(",
          "def emm_create_exceptions_report(",
          "def emm_create_usage_report(",
          "def external_sharing_create_report(",
          "def no_expiration_link_gen_create_report(",
          "def no_password_link_gen_create_report(",
          "def no_password_link_view_create_report(",
          "def outdated_link_view_create_report(",
          "def smart_sync_create_admin_privilege_report(",
          "def team_activity_create_report(",
          "def team_activity_create_report_fail(",
          "def shared_folder_create(",
          "def shared_link_create(",
          "def showcase_created(",
          "def team_folder_create(",
          "def is_governance_policy_create(",
          "def is_governance_policy_export_created(",
          "def is_governance_policy_report_created(",
          "def is_create_folder(",
          "def is_file_request_create(",
          "def is_group_create(",
          "def is_create_team_invite_link(",
          "def is_paper_content_create(",
          "def is_paper_published_link_create(",
          "def is_classification_create_report(",
          "def is_classification_create_report_fail(",
          "def is_emm_create_exceptions_report(",
          "def is_emm_create_usage_report(",
          "def is_external_sharing_create_report(",
          "def is_no_expiration_link_gen_create_report(",
          "def is_no_password_link_gen_create_report(",
          "def is_no_password_link_view_create_report(",
          "def is_outdated_link_view_create_report(",
          "def is_smart_sync_create_admin_privilege_report(",
          "def is_team_activity_create_report(",
          "def is_team_activity_create_report_fail(",
          "def is_shared_folder_create(",
          "def is_shared_link_create(",
          "def is_showcase_created(",
          "def is_team_folder_create(",
          "def get_governance_policy_create(",
          "def get_governance_policy_export_created(",
          "def get_governance_policy_report_created(",
          "def get_create_folder(",
          "def get_file_request_create(",
          "def get_group_create(",
          "def get_create_team_invite_link(",
          "def get_paper_content_create(",
          "def get_paper_published_link_create(",
          "def get_classification_create_report(",
          "def get_classification_create_report_fail(",
          "def get_emm_create_exceptions_report(",
          "def get_emm_create_usage_report(",
          "def get_external_sharing_create_report(",
          "def get_no_expiration_link_gen_create_report(",
          "def get_no_password_link_gen_create_report(",
          "def get_no_password_link_view_create_report(",
          "def get_outdated_link_view_create_report(",
          "def get_smart_sync_create_admin_privilege_report(",
          "def get_team_activity_create_report(",
          "def get_team_activity_create_report_fail(",
          "def get_shared_folder_create(",
          "def get_shared_link_create(",
          "def get_showcase_created(",
          "def get_team_folder_create(",
          "def is_governance_policy_create(",
          "def is_governance_policy_export_created(",
          "def is_governance_policy_report_created(",
          "def is_create_folder(",
          "def is_file_request_create(",
          "def is_group_create(",
          "def is_create_team_invite_link(",
          "def is_paper_content_create(",
          "def is_paper_published_link_create(",
          "def is_classification_create_report(",
          "def is_classification_create_report_fail(",
          "def is_emm_create_exceptions_report(",
          "def is_emm_create_usage_report(",
          "def is_external_sharing_create_report(",
          "def is_no_expiration_link_gen_create_report(",
          "def is_no_password_link_gen_create_report(",
          "def is_no_password_link_view_create_report(",
          "def is_outdated_link_view_create_report(",
          "def is_smart_sync_create_admin_privilege_report(",
          "def is_team_activity_create_report(",
          "def is_team_activity_create_report_fail(",
          "def is_shared_folder_create(",
          "def is_shared_link_create(",
          "def is_showcase_created(",
          "def is_team_folder_create(",
          "def is_created(",
          "def is_created_or_broken("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_policies.py": [
          "default_public = SharedLinkCreatePolicy(",
          "default_team_only = SharedLinkCreatePolicy(",
          "default_no_one = SharedLinkCreatePolicy("
        ],
        ".venv\\Lib\\site-packages\\flask\\app.py": [
          "def create_jinja_environment(",
          "def create_global_jinja_loader(",
          "def create_url_adapter("
        ],
        ".venv\\Lib\\site-packages\\flask\\logging.py": [
          "def create_logger("
        ],
        ".venv\\Lib\\site-packages\\flask_login\\utils.py": [
          "def _create_identifier("
        ],
        ".venv\\Lib\\site-packages\\flask_sqlalchemy\\extension.py": [
          "def create_all("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\pens\\wxPen.py": [
          "DefaultRenderer().CreatePath("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\t1Lib\\__init__.py": [
          "def createData("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\tables\\E_B_D_T_.py": [
          "def _createBitmapPlusMetricsMixin("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\tables\\E_B_L_C_.py": [
          "def _createOffsetArrayIndexSubTableMixin("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ufoLib\\validators.py": [
          "def fontInfoOpenTypeHeadCreatedValidator("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\pidfile.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\sock.py": [
          "def create_sockets("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\http\\wsgi.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\environment.py": [
          "def create_cache("
        ],
        ".venv\\Lib\\site-packages\\limits\\aio\\storage\\mongodb.py": [
          "def create_indices("
        ],
        ".venv\\Lib\\site-packages\\mako\\cache.py": [
          "def get_or_create(",
          "def _ctx_get_or_create(",
          "def get_or_create("
        ],
        ".venv\\Lib\\site-packages\\mako\\codegen.py": [
          "def create_filter_callable("
        ],
        ".venv\\Lib\\site-packages\\mako\\ext\\beaker_cache.py": [
          "def get_or_create("
        ],
        ".venv\\Lib\\site-packages\\mako\\testing\\fixtures.py": [
          "def get_or_create("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backend_bases.py": [
          "def create_with_canvas("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\colors.py": [
          "def _create_lookup_table(",
          "def _create_empty_object_of_class("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\dates.py": [
          "def _create_rrule(",
          "def _create_rrule("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\legend_handler.py": [
          "def create_artists(",
          "def create_artists(",
          "def create_artists(",
          "def create_artists(",
          "def _create_patch(",
          "def create_artists(",
          "def _create_patch(",
          "def _create_line(",
          "def create_artists(",
          "def create_artists(",
          "def create_collection(",
          "def create_artists(",
          "def create_collection(",
          "def create_collection(",
          "def create_artists(",
          "def create_artists(",
          "def create_artists(",
          "def create_artists("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\path.py": [
          "def _create_closed("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\ticker.py": [
          "def create_dummy_axis("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_nbagg.py": [
          "def create_with_canvas(",
          "def _create_comm("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_pdf.py": [
          "def _create_pdf_info_dict(",
          "def createType1Descriptor("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_ps.py": [
          "def create_hatch("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_qt.py": [
          "def _create_qApp("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_wx.py": [
          "def _create_wxapp(",
          "def create_with_canvas("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_gtk.py": [
          "def _create_application("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py": [
          "def create_with_canvas(",
          "def createToolTip("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\qt_editor\\_formlayout.py": [
          "def create_datalist_example(",
          "def create_datagroup_example("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pgf.py": [
          "def create_figure("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colors.py": [
          "def test_create_lookup_table("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dates.py": [
          "def _create_auto_date_locator(",
          "def _create_auto_date_locator(",
          "def _create_auto_date_locator(",
          "def _create_auto_date_locator(",
          "def _create_auto_date_locator(",
          "def _create_auto_date_locator(",
          "def _create_auto_date_locator(",
          "def _create_year_locator("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\unixccompiler.py": [
          "def UnixCCompiler_create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\func2subr.py": [
          "def createfuncwrapper(",
          "def createsubrwrapper("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py": [
          "def _create_arrays("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_regression.py": [
          "def test_masked_array_create("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\records.py": [
          "def _createdtype("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_deprecations.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py": [
          "def test_create_string_dtypes_directly(",
          "def test_create_invalid_string_errors(",
          "def test_structured_object_create_delete("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py": [
          "def test_create("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nep50_promotions.py": [
          "def create_with_scalar(",
          "def create_with_array("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarmath.py": [
          "def test_type_create("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_stringdtype.py": [
          "def test_create_with_na(",
          "def test_create_with_copy_none("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\_natype.py": [
          "def _create_binary_propagating_op(",
          "def _create_unary_propagating_op("
        ],
        ".venv\\Lib\\site-packages\\pandas\\conftest.py": [
          "def _create_multiindex(",
          "def _create_mi_with_dt64tz_level(",
          "def _create_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\accessor.py": [
          "def _create_delegator_property(",
          "def _create_delegator_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\frame.py": [
          "def create_index(",
          "def _create_data_for_split_and_tight_to_dict("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\base.py": [
          "def _create_arithmetic_method(",
          "def _create_comparison_method(",
          "def _create_logical_method(",
          "def _create_method(",
          "def _create_arithmetic_method(",
          "def _create_comparison_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\parsing.py": [
          "def create_valid_python_identifier("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\dtypes\\generic.py": [
          "def create_pandas_abc_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py": [
          "def create_block_manager_from_blocks(",
          "def create_block_manager_from_column_arrays("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\reshape\\merge.py": [
          "def _create_join_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\window\\doc.py": [
          "def create_section_header("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\window\\rolling.py": [
          "def _create_data(",
          "def _create_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\pytables.py": [
          "def create_table_index(",
          "def _create_storer(",
          "def _create_nodes_and_group(",
          "def create_index(",
          "def _create_axes(",
          "def create_description("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\sql.py": [
          "def _execute_create(",
          "def create(",
          "def _create_table_setup(",
          "def _create_sql_schema(",
          "def _create_sql_schema(",
          "def _execute_create(",
          "def _create_table_setup(",
          "def _create_sql_schema("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\excel\\_odswriter.py": [
          "def _create_freeze_panes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\formats\\info.py": [
          "def _create_table_builder(",
          "def _create_table_builder(",
          "def _create_table_builder("
        ],
        ".venv\\Lib\\site-packages\\pandas\\plotting\\_matplotlib\\groupby.py": [
          "def create_iter_data_given_by("
        ],
        ".venv\\Lib\\site-packages\\pandas\\plotting\\_matplotlib\\tools.py": [
          "def create_subplots("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_interval.py": [
          "def create_categorical_intervals(",
          "def create_series_intervals(",
          "def create_series_categorical_intervals("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_methods.py": [
          "def test_interpolate_creates_copy("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\decimal\\test_decimal.py": [
          "def _create_arithmetic_method("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_constructors.py": [
          "def create_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_records.py": [
          "def create_dict("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_where.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_csv.py": [
          "def create_cols("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_update.py": [
          "def test_update_dt_column_with_NaT_create_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_old_base.py": [
          "def test_create_index_existing_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_constructors.py": [
          "def test_from_freq_recreate_from_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval.py": [
          "def create_index(",
          "def create_index_with_nan("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_constructors.py": [
          "def test_create_index_existing_name("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_constructors.py": [
          "def test_recreate_from_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py": [
          "def create_block(",
          "def create_single_mgr(",
          "def create_mgr("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\generate_legacy_storage_files.py": [
          "def _create_sp_series(",
          "def _create_sp_tsseries(",
          "def _create_sp_frame(",
          "def create_data(",
          "def create_pickle_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py": [
          "def create_and_load_iris_sqlite3(",
          "def create_and_load_iris(",
          "def create_and_load_iris_view(",
          "def create_and_load_types_sqlite3(",
          "def create_and_load_types(",
          "def test_create_table(",
          "def test_get_schema_create_table(",
          "def test_create_and_drop_table("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_css.py": [
          "def create_border_dict("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_store.py": [
          "def create_h5_and_return_checksum(",
          "def test_create_table_index(",
          "def test_create_table_index_data_columns_argument("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_timezones.py": [
          "def test_py2_created_with_datetimez("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_base.py": [
          "def create_index(",
          "def _create_index("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_datetime_index.py": [
          "def _create_series("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_constructors.py": [
          "def create_data("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py": [
          "def _create_offset("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\conftest.py": [
          "def create_series(",
          "def create_dataframes("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_ewm.py": [
          "def create_mock_weights(",
          "def create_mock_series_weights("
        ],
        ".venv\\Lib\\site-packages\\PIL\\ImageCms.py": [
          "def createProfile("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\index_command.py": [
          "def _create_truststore_ssl_context("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\main_parser.py": [
          "def create_main_parser("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\debug.py": [
          "def create_vendor_txt_map("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\install.py": [
          "def create_os_error_message("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\__init__.py": [
          "def create_command("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py": [
          "def create(",
          "def create("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\models\\search_scope.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\check.py": [
          "def create_package_set_from_installed(",
          "def _create_whitelist("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py": [
          "def _create(",
          "def _create("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py": [
          "def _create_concatenate_alias(",
          "def create_model("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\__init__.py": [
          "def createLock("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py": [
          "def _optionally_create_directory("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\cookies.py": [
          "def create_cookie("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\_parser.py": [
          "def get_or_create_nest(",
          "def create_dict_rule(",
          "def create_list_rule("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\low_level.py": [
          "def _create_cfstring_array("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py": [
          "def create_module(",
          "def create_unbound_method(",
          "def create_bound_method(",
          "def create_unbound_method("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\connection.py": [
          "def create_connection("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\proxy.py": [
          "def create_proxy_ssl_context("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_.py": [
          "def create_urllib3_context("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\extern\\__init__.py": [
          "def create_module("
        ],
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\core.py": [
          "def create_diagram("
        ],
        ".venv\\Lib\\site-packages\\pygments\\formatters\\html.py": [
          "def _create_stylesheet("
        ],
        ".venv\\Lib\\site-packages\\pygments\\formatters\\img.py": [
          "def _create_nix(",
          "def _create_mac(",
          "def _create_win(",
          "def _create_drawables("
        ],
        ".venv\\Lib\\site-packages\\pygments\\formatters\\latex.py": [
          "def _create_stylesheet("
        ],
        ".venv\\Lib\\site-packages\\pygments\\formatters\\rtf.py": [
          "def _create_color_mapping("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\scripting.py": [
          "DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE|SET_MODE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[A-D]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\wowtoc.py": [
          "def _create_tag_line_pattern(",
          "def _create_tag_line_token("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\_mysql_builtins.py": [
          "def parse_item_create_functions("
        ],
        ".venv\\Lib\\site-packages\\pyparsing\\core.py": [
          "def create_diagram("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\ecc200datamatrix.py": [
          "def _create_matrix(",
          "def _create_data_regions(",
          "def _create_empty_matrix("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\qrencoder.py": [
          "def createData(",
          "def createBytes("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\test.py": [
          "def createSample("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\__init__.py": [
          "def createBarcodeDrawing(",
          "def createBarcodeImageInMemory("
        ],
        ".venv\\Lib\\site-packages\\requests\\cookies.py": [
          "def create_cookie("
        ],
        ".venv\\Lib\\site-packages\\rich\\markdown.py": [
          "def create(",
          "def create(",
          "def create(",
          "def create(",
          "def create(",
          "def create(",
          "def create(",
          "def create("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\easy_install.py": [
          "def create_home_path("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\upload_docs.py": [
          "def create_zipfile("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\config\\_validate_pyproject\\fastjsonschema_validations.py": [
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (",
          "definition={'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-build-dependencies/', 'title': 'Data structure for ``pyproject.toml`` files', '$$description': ['File format containing build-time configurations for the Python ecosystem. ', ':pep:`517` initially defined a build-system independent format for source trees', 'which was complemented by :pep:`518` to provide a way of specifying dependencies ', 'for building Python projects.', 'Please notice the ``project`` table (as initially defined in  :pep:`621`) is not included', 'in this schema and should be considered separately.'], 'type': 'object', 'additionalProperties': False, 'properties': {'build-system': {'type': 'object', 'description': 'Table used to store build-related data', 'additionalProperties': False, 'properties': {'requires': {'type': 'array', '$$description': ['List of dependencies in the :pep:`508` format required to execute the build', 'system. Please notice that the resulting dependency graph', '**MUST NOT contain cycles**'], 'items': {'type': 'string'}}, 'build-backend': {'type': 'string', 'description': 'Python object that will be used to perform the build according to :pep:`517`', 'format': 'pep517-backend-reference'}, 'backend-path': {'type': 'array', '$$description': ['List of directories to be prepended to ``sys.path`` when loading the', 'back-end, and running its hooks'], 'items': {'type': 'string', '$comment': 'Should be a path (TODO: enforce it with format?)'}}}, 'required': ['requires']}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$ref': '#/definitions/dependency'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$ref': '#/definitions/dependency'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}, 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://www.python.org/dev/peps/pep-0621/#authors-maintainers', 'type': 'object', 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, 'tool': {'type': 'object', 'properties': {'distutils': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://docs.python.org/3/install/', 'title': '``tool.distutils`` table', '$$description': ['Originally, ``distutils`` allowed developers to configure arguments for', '``setup.py`` scripts via `distutils configuration files', '<https://docs.python.org/3/install/#distutils-configuration-files>`_.', '``tool.distutils`` subtables could be used with the same purpose', '(NOT CURRENTLY IMPLEMENTED).'], 'type': 'object', 'properties': {'global': {'type': 'object', 'description': 'Global options applied to all ``distutils`` commands'}}, 'patternProperties': {'.+': {'type': 'object'}}, '$comment': 'TODO: Is there a practical way of making this schema more specific?'}, 'setuptools': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://setuptools.pypa.io/en/latest/references/keywords.html', 'title': '``tool.setuptools`` table', '$$description': ['Please notice for the time being the ``setuptools`` project does not specify', 'a way of configuring builds via ``pyproject.toml``.', 'Therefore this schema should be taken just as a *\"thought experiment\"* on how', 'this *might be done*, by following the principles established in', '`ini2toml <https://ini2toml.readthedocs.io/en/latest/setuptools_pep621.html>`_.', 'It considers only ``setuptools`` `parameters', '<https://setuptools.pypa.io/en/latest/userguide/declarative_config.html>`_', 'that can currently be configured via ``setup.cfg`` and are not covered by :pep:`621`', 'but intentionally excludes ``dependency_links`` and ``setup_requires``.', 'NOTE: ``scripts`` was renamed to ``script-files`` to avoid confusion with', 'entry-point based scripts (defined in :pep:`621`).'], 'type': 'object', 'additionalProperties': False, 'properties': {'platforms': {'type': 'array', 'items': {'type': 'string'}}, 'provides': {'$$description': ['Package and virtual package names contained within this package', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'obsoletes': {'$$description': ['Packages which this package renders obsolete', '**(not supported by pip)**'], 'type': 'array', 'items': {'type': 'string', 'format': 'pep508-identifier'}}, 'zip-safe': {'description': 'Whether the project can be safely installed and run from a zip file.', 'type': 'boolean'}, 'script-files': {'description': 'Legacy way of defining scripts (entry-points are preferred).', 'type': 'array', 'items': {'type': 'string'}, '$comment': 'TODO: is this field deprecated/should be removed?'}, 'eager-resources': {'$$description': ['Resources that should be extracted together, if any of them is needed,', 'or if any C extensions included in the project are imported.'], 'type': 'array', 'items': {'type': 'string'}}, 'packages': {'$$description': ['Packages that should be included in the distribution.', 'It can be given either as a list of package identifiers', 'or as a ``dict``-like structure with a single key ``find``', 'which corresponds to a dynamic call to', '``setuptools.config.expand.find_packages`` function.', 'The ``find`` key is associated with a nested ``dict``-like structure that can', 'contain ``where``, ``include``, ``exclude`` and ``namespaces`` keys,', 'mimicking the keyword arguments of the associated function.'], 'oneOf': [{'title': 'Array of Python package identifiers', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}}, {'$ref': '#/definitions/find-directive'}]}, 'package-dir': {'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': ''}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, 'package-data': {'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'include-package-data': {'$$description': ['Automatically include any data files inside the package directories', 'that are specified by ``MANIFEST.in``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'boolean'}, 'exclude-package-data': {'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'oneOf': [{'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'namespace-packages': {'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'https://setuptools.pypa.io/en/latest/userguide/package_discovery.html'}, 'py-modules': {'description': 'Modules that setuptools will manipulate', 'type': 'array', 'items': {'type': 'string', 'format': 'python-module-name'}, '$comment': 'TODO: clarify the relationship with ``packages``'}, 'data-files': {'$$description': ['**DEPRECATED**: dict-like structure where each key represents a directory and', 'the value is a list of glob patterns that should be installed in them.', \"Please notice this don't work with wheels. See `data files support\", '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, 'cmdclass': {'$$description': ['Mapping of distutils-style command names to ``setuptools.Command`` subclasses', 'which in turn should be represented by strings with a qualified class name', '(i.e., \"dotted\" form with module), e.g.::\\n\\n', '    cmdclass = {mycmd = \"pkg.subpkg.module.CommandClass\"}\\n\\n', 'The command class should be a directly defined at the top-level of the', 'containing module (no class nesting).'], 'type': 'object', 'patternProperties': {'^.*$': {'type': 'string', 'format': 'python-qualified-identifier'}}}, 'license-files': {'type': 'array', 'items': {'type': 'string'}, '$$description': ['PROVISIONAL: List of glob patterns for all license files being distributed.', '(might become standard with PEP 639).'], 'default': ['LICEN[CS]E*', ' COPYING*', ' NOTICE*', 'AUTHORS*'], '$comment': 'TODO: revise if PEP 639 is accepted. Probably ``project.license-files``?'}, 'dynamic': {'type': 'object', 'description': 'Instructions for loading :pep:`621`-related metadata dynamically', 'additionalProperties': False, 'properties': {'version': {'$$description': ['A version dynamically loaded via either the ``attr:`` or ``file:``', 'directives. Please make sure the given file or attribute respects :pep:`440`.'], 'oneOf': [{'$ref': '#/definitions/attr-directive'}, {'$ref': '#/definitions/file-directive'}]}, 'classifiers': {'$ref': '#/definitions/file-directive'}, 'description': {'$ref': '#/definitions/file-directive'}, 'dependencies': {'$ref': '#/definitions/file-directive'}, 'entry-points': {'$ref': '#/definitions/file-directive'}, 'optional-dependencies': {'type': 'object', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'.+': {'$ref': '#/definitions/file-directive'}}}, 'readme': {'anyOf': [{'$ref': '#/definitions/file-directive'}, {'properties': {'content-type': {'type': 'string'}}}], 'required': ['file']}}}}, 'definitions': {'file-directive': {'$id': '#/definitions/file-directive', 'title': \"'file:' directive\", 'description': 'Value is read from a file (or list of files and then concatenated)', 'type': 'object', 'additionalProperties': False, 'properties': {'file': {'oneOf': [{'type': 'string'}, {'type': 'array', 'items': {'type': 'string'}}]}}, 'required': ['file']}, 'attr-directive': {'title': \"'attr:' directive\", '$id': '#/definitions/attr-directive', '$$description': ['Value is read from a module attribute. Supports callables and iterables;', 'unsupported types are cast via ``str()``'], 'type': 'object', 'additionalProperties': False, 'properties': {'attr': {'type': 'string'}}, 'required': ['attr']}, 'find-directive': {'$id': '#/definitions/find-directive', 'title': \"'find:' directive\", 'type': 'object', 'additionalProperties': False, 'properties': {'find': {'type': 'object', '$$description': ['Dynamic `package discovery', '<https://setuptools.pypa.io/en/latest/userguide/package_discovery.html>`_.'], 'additionalProperties': False, 'properties': {'where': {'description': 'Directories to be searched for packages (Unix-style relative path)', 'type': 'array', 'items': {'type': 'string'}}, 'exclude': {'type': 'array', '$$description': ['Exclude packages that match the values listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'include': {'type': 'array', '$$description': ['Restrict the found packages to just the ones listed in this field.', \"Can container shell-style wildcards (e.g. ``'pkg.*'``)\"], 'items': {'type': 'string'}}, 'namespaces': {'type': 'boolean', '$$description': ['When ``True``, directories without a ``__init__.py`` file will also', 'be scanned for :pep:`420`-style implicit namespaces']}}}}}}}}}}, 'project': {'$schema': 'http://json-schema.org/draft-07/schema', '$id': 'https://packaging.python.org/en/latest/specifications/declaring-project-metadata/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://www.python.org/dev/peps/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://www.python.org/dev/peps/pep-0621/#license>`_.', 'oneOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'authors': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$ref': '#/definitions/author'}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create command-line wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.']}, 'gui-scripts': {'$ref': '#/definitions/entry-point-group', '$$description': ['Instruct the installer to create GUI wrappers for the given', '`entry points <https://packaging.python.org/specifications/entry-points/>`_.', 'The difference between ``scripts`` and ``gui-scripts`` is only relevant in', 'Windows.']}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$ref': '#/definitions/entry-point-group'}}}, 'dependencies': {'type': 'array', 'description': 'Project ("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\extern\\__init__.py": [
          "def create_module("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\bcppcompiler.py": [
          "def create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\ccompiler.py": [
          "def create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\dir_util.py": [
          "def create_tree("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\msvc9compiler.py": [
          "def create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\msvccompiler.py": [
          "def create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\unixccompiler.py": [
          "def create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\_msvccompiler.py": [
          "def create_static_lib("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\bdist_wininst.py": [
          "def create_exe("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\install.py": [
          "def create_home_path(",
          "def create_path_file("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\core.py": [
          "def create_diagram("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\tomli\\_parser.py": [
          "def get_or_create_nest(",
          "def create_dict_rule(",
          "def create_list_rule("
        ],
        ".venv\\Lib\\site-packages\\soupsieve\\css_match.py": [
          "def create_fake_parent("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\connectors\\aioodbc.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\connectors\\pyodbc.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\aioodbc.py": [
          "def create_server_side_cursor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.py": [
          "def visit_create_index(",
          "def visit_create_sequence("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\provision.py": [
          "def _mssql_create_db("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\pymssql.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\aiomysql.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\asyncmy.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\base.py": [
          "def create_server_side_cursor(",
          "def post_create_table(",
          "def visit_create_index(",
          "def _parsed_state_or_create(",
          "def _show_create_table("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mariadbconnector.py": [
          "def create_server_side_cursor(",
          "def create_default_cursor(",
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqlconnector.py": [
          "def create_server_side_cursor(",
          "def create_default_cursor(",
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\provision.py": [
          "def _mysql_create_db("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\pymysql.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\reflection.py": [
          "def _describe_to_create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\base.py": [
          "def visit_create_index(",
          "def post_create_table("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\cx_oracle.py": [
          "def create_cursor(",
          "def create_connect_args(",
          "def create_xid("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\oracledb.py": [
          "def create_default_cursor(",
          "def create_server_side_cursor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py": [
          "def _oracle_create_db("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\asyncpg.py": [
          "def create_server_side_cursor(",
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py": [
          "def visit_create_enum_type(",
          "def visit_create_domain_type(",
          "def visit_create_index(",
          "def post_create_table(",
          "def visit_create_sequence("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\named_types.py": [
          "def create(",
          "def _on_table_create(",
          "def _on_metadata_create(",
          "def _can_create_type(",
          "def create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\pg8000.py": [
          "def create_server_side_cursor(",
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\provision.py": [
          "def _pg_create_db(",
          "def _create_citext_extension("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\_psycopg_common.py": [
          "def create_server_side_cursor(",
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\aiosqlite.py": [
          "def create_function(",
          "def create_server_side_cursor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py": [
          "def visit_create_index(",
          "def post_create_table("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\provision.py": [
          "def _sqlite_create_db("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlcipher.py": [
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\pysqlite.py": [
          "def create_connect_args(",
          "def create_connect_args("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py": [
          "def create_engine(",
          "def create_engine(",
          "def create_engine(",
          "def create_pool_from_url(",
          "def create_pool_from_url(",
          "def create_pool_from_url("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\cursor.py": [
          "def _create_description_match_map(",
          "def create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py": [
          "def create_connect_args(",
          "def create_xid(",
          "def create_cursor(",
          "def create_default_cursor(",
          "def create_server_side_cursor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\interfaces.py": [
          "def create_connect_args(",
          "def create_connect_args(",
          "def create_xid(",
          "def engine_created(",
          "def engine_created(",
          "def engine_created(",
          "def create_cursor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\mock.py": [
          "def create_mock_engine("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\url.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\event\\base.py": [
          "def _create_dispatcher_class("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\associationproxy.py": [
          "def _create(",
          "def _create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\engine.py": [
          "def create_async_engine(",
          "def create_async_pool_from_url("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\declarative\\extensions.py": [
          "def _create_polymorphic_union("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\attributes.py": [
          "def create_proxied_attribute("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\bulk_persistence.py": [
          "def create_for_statement(",
          "def create_for_statement(",
          "def create_for_statement("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\context.py": [
          "def create_for_statement(",
          "def create_for_statement(",
          "def _create_orm_context(",
          "def _create_with_polymorphic_adapter(",
          "def _create_entities_collection(",
          "def _create_orm_context(",
          "def _create_orm_context(",
          "def _create_entities_collection("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\descriptor_props.py": [
          "def _create_descriptor(",
          "def create_row_processor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\events.py": [
          "def after_transaction_create(",
          "def after_transaction_create(",
          "def after_transaction_create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\instrumentation.py": [
          "def create_manager_for_cls("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\interfaces.py": [
          "def create_row_processor(",
          "def create_row_processor(",
          "def create_row_processor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\relationships.py": [
          "def _create_joins(",
          "def create_lazy_clause("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategies.py": [
          "def create_row_processor(",
          "def create_row_processor(",
          "def create_row_processor(",
          "def create_row_processor(",
          "def _immediateload_create_row_processor(",
          "def create_row_processor(",
          "def create_row_processor(",
          "def create_row_processor(",
          "def create_row_processor(",
          "def _create_collection_loader(",
          "def _create_scalar_loader(",
          "def _create_eager_join(",
          "def _create_eager_adapter(",
          "def create_row_processor(",
          "def _create_collection_loader(",
          "def _create_scalar_loader(",
          "def create_row_processor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategy_options.py": [
          "def create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\util.py": [
          "def create_row_processor(",
          "def create_row_processor("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\_orm_constructors.py": [
          "def create_session(",
          "defaults of create_session("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py": [
          "def _create_connection(",
          "def recreate("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py": [
          "def recreate(",
          "def recreate(",
          "def recreate(",
          "def recreate(",
          "def _create_connection(",
          "def recreate("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\base.py": [
          "def _create_singleton(",
          "def create_for_statement("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py": [
          "def _create_result_map(",
          "def visit_create_schema(",
          "def visit_create_table(",
          "def visit_create_column(",
          "def create_table_constraints(",
          "def visit_create_index(",
          "def visit_create_sequence(",
          "def create_table_suffix(",
          "def post_create_table("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\crud.py": [
          "def _create_bind_param(",
          "def _create_bind_param(",
          "def _create_bind_param(",
          "def _create_insert_prefetch_bind_param(",
          "def _create_insert_prefetch_bind_param(",
          "def _create_insert_prefetch_bind_param(",
          "def _create_update_prefetch_bind_param(",
          "def _create_update_prefetch_bind_param(",
          "def _create_update_prefetch_bind_param("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py": [
          "def _create_rule_disable(",
          "def _can_create_table(",
          "def _can_create_index(",
          "def _can_create_sequence("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py": [
          "def _create_nulls_first(",
          "def _create_nulls_last(",
          "def _create_desc(",
          "def _create_asc(",
          "def _create_distinct(",
          "def _create_bitwise_not(",
          "def _create_any(",
          "def _create_all(",
          "def _create_collation_expression("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\events.py": [
          "def after_create(",
          "def before_create(",
          "def after_create("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py": [
          "def create(",
          "def create(",
          "def _should_create_for_compiler(",
          "def create(",
          "def create_all("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\selectable.py": [
          "def _create_union(",
          "def _create_union_all(",
          "def _create_except(",
          "def _create_except_all(",
          "def _create_intersect(",
          "def _create_intersect_all(",
          "def _create_raw_select("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\sqltypes.py": [
          "def create(",
          "def _on_table_create(",
          "def _on_metadata_create(",
          "def _should_create_constraint(",
          "def _should_create_constraint("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\type_api.py": [
          "def _create_td_comparator_type("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\provision.py": [
          "def create_follower_db(",
          "def create_db("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\requirements.py": [
          "def create_table(",
          "def schema_create_delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\util.py": [
          "def create_fixture("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_ddl.py": [
          "def test_create_table(",
          "def test_create_table_schema(",
          "def test_create_table_if_not_exists(",
          "def test_create_index_if_not_exists("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py": [
          "def create_proxy_methods("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\util\\_collections.py": [
          "default(key, self.createfunc("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\ir_generator.py": [
          "def _create_alias(",
          "def _create_annotation(",
          "def _create_annotation_type(",
          "def _create_type(",
          "def _create_struct_field(",
          "def _create_union_field(",
          "def _create_route(",
          "def _get_or_create_env("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\lexer.py": [
          "def _create_tokens_for_next_line_dent(",
          "def _create_token("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\parser.py": [
          "def p_pos_args_list_create(",
          "def p_enumerated_subtypes_list_create(",
          "def p_field_list_create(",
          "def p_annotation_ref_list_create(",
          "def p_attr_fields_create(",
          "def p_examples_create(",
          "def p_example_fields_create(",
          "def p_ex_list_items_create(",
          "def p_ex_map_pairs_create("
        ],
        ".venv\\Lib\\site-packages\\urllib3\\util\\connection.py": [
          "def create_connection("
        ],
        ".venv\\Lib\\site-packages\\urllib3\\util\\ssl_.py": [
          "def create_urllib3_context("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\test.py": [
          "def create_environ("
        ],
        ".venv\\Lib\\site-packages\\wrapt\\importer.py": [
          "def _create_import_hook_from_string(",
          "def _create_import_hook_from_entrypoint(",
          "def _self_create_module("
        ],
        ".venv\\Lib\\site-packages\\xlsxwriter\\core.py": [
          "def _write_dcterms_created("
        ],
        ".venv\\Lib\\site-packages\\xlsxwriter\\packager.py": [
          "def _create_package("
        ],
        ".venv\\Lib\\site-packages\\_distutils_hack\\__init__.py": [
          "def create_module("
        ],
        "app\\cli.py": [
          "def create_admin("
        ],
        "app\\local_backup.py": [
          "def create_backup(",
          "def _create_backup_zip("
        ],
        "app\\local_storage_manager.py": [
          "def create_storage_report("
        ],
        "app\\models.py": [
          "def created_at_formatted("
        ],
        "app\\pdf_utils.py": [
          "def create_pdf_styles(",
          "def create_table_with_wrapping("
        ],
        "app\\shared_folder_manager.py": [
          "def create_folder_structure(",
          "def _create_config_file(",
          "def _create_readme_file(",
          "def create_backup_instructions("
        ],
        "app\\utils.py": [
          "def create_notification(",
          "def create_admin_notification(",
          "def create_thumbnail(image_path, thumbnail_path, size=("
        ],
        "app\\__init__.py": [
          "def create_directories(",
          "def create_app("
        ],
        "app\\admin\\backup\\routes.py": [
          "def create_backup(",
          "def should_create_backup(",
          "def create_scheduled_backup(",
          "def create_backup("
        ],
        "app\\files\\routes.py": [
          "def create_folder(",
          "def create_zip("
        ],
        "backup_security_20250728_134443\\app_code\\cli.py": [
          "def create_admin("
        ],
        "backup_security_20250728_134443\\app_code\\local_backup.py": [
          "def create_backup(",
          "def _create_backup_zip("
        ],
        "backup_security_20250728_134443\\app_code\\local_storage_manager.py": [
          "def create_storage_report("
        ],
        "backup_security_20250728_134443\\app_code\\models.py": [
          "def created_at_formatted("
        ],
        "backup_security_20250728_134443\\app_code\\pdf_utils.py": [
          "def create_pdf_styles(",
          "def create_table_with_wrapping("
        ],
        "backup_security_20250728_134443\\app_code\\shared_folder_manager.py": [
          "def create_folder_structure(",
          "def _create_config_file(",
          "def _create_readme_file(",
          "def create_backup_instructions("
        ],
        "backup_security_20250728_134443\\app_code\\utils.py": [
          "def create_notification(",
          "def create_admin_notification(",
          "def create_thumbnail(image_path, thumbnail_path, size=("
        ],
        "backup_security_20250728_134443\\app_code\\__init__.py": [
          "def create_directories(",
          "def create_app("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py": [
          "def create_backup(",
          "def should_create_backup(",
          "def create_scheduled_backup(",
          "def create_backup("
        ],
        "backup_security_20250728_134443\\app_code\\files\\routes.py": [
          "def create_folder(",
          "def create_zip("
        ]
      },
      "update_functions": {
        "analyze_system_duplicates.py": [
          "def.*update.*\\("
        ],
        ".venv\\Lib\\site-packages\\six.py": [
          "def _update_wrapper("
        ],
        ".venv\\Lib\\site-packages\\alembic\\ddl\\mysql.py": [
          "default = onupdate_ins.group(",
          "default = onupdate_met.group("
        ],
        ".venv\\Lib\\site-packages\\alembic\\runtime\\migration.py": [
          "def _update_version(",
          "def update_to_step(",
          "def update_version_num(",
          "def update_version_num("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\requirements.py": [
          "def fk_onupdate_is_reflected(",
          "def fk_onupdate(",
          "def fk_onupdate_restrict("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_fks.py": [
          "def test_add_onupdate(",
          "def test_remove_onupdate(",
          "def test_nochange_onupdate(",
          "def test_nochange_onupdate_restrict(",
          "def test_nochange_onupdate_noaction(",
          "def test_change_onupdate_from_restrict(",
          "def test_ondelete_onupdate_combo("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\_autogen_fixtures.py": [
          "def _update_context("
        ],
        ".venv\\Lib\\site-packages\\alembic\\util\\langhelpers.py": [
          "def _update_module_proxies("
        ],
        ".venv\\Lib\\site-packages\\click\\_termui_impl.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\coverage\\misc.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\coverage\\sqldata.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\dns\\message.py": [
          "def _maybe_import_update("
        ],
        ".venv\\Lib\\site-packages\\dns\\namedict.py": [
          "def __update_max_depth("
        ],
        ".venv\\Lib\\site-packages\\dns\\opcode.py": [
          "def is_update("
        ],
        ".venv\\Lib\\site-packages\\dns\\rdataset.py": [
          "def update_ttl(",
          "def union_update(",
          "def intersection_update(",
          "def update(",
          "def update_ttl(",
          "def union_update(",
          "def intersection_update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\dns\\set.py": [
          "def union_update(",
          "def intersection_update(",
          "def difference_update(",
          "def symmetric_difference_update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\dns\\transaction.py": [
          "def update_serial("
        ],
        ".venv\\Lib\\site-packages\\dns\\tsig.py": [
          "def update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\dns\\update.py": [
          "def update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base.py": [
          "def file_properties_properties_update(",
          "def file_properties_templates_update_for_user(",
          "def file_requests_update(",
          "def files_paper_update(",
          "def files_properties_update(",
          "def paper_docs_update(",
          "def sharing_update_file_member(",
          "def sharing_update_folder_member(",
          "def sharing_update_folder_policy("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base_team.py": [
          "def file_properties_templates_update_for_team(",
          "def team_groups_update(",
          "def team_legal_holds_update_policy(",
          "def team_properties_template_update(",
          "def team_team_folder_update_sync_settings("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\files.py": [
          "def is_update(",
          "def update(",
          "def is_update(",
          "def get_update("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\file_requests.py": [
          "def update(",
          "def is_no_update(",
          "def is_update(",
          "def get_update("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team.py": [
          "def too_many_updates(",
          "def is_too_many_updates(",
          "def get_too_many_updates("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def object_label_updated_value_details(",
          "def group_description_updated_details(",
          "def group_join_policy_updated_details(",
          "def is_object_label_updated_value_details(",
          "def is_group_description_updated_details(",
          "def is_group_join_policy_updated_details(",
          "def get_object_label_updated_value_details(",
          "def get_group_description_updated_details(",
          "def get_group_join_policy_updated_details(",
          "def object_label_updated_value(",
          "def group_description_updated(",
          "def group_join_policy_updated(",
          "def is_object_label_updated_value(",
          "def is_group_description_updated(",
          "def is_group_join_policy_updated(",
          "def get_object_label_updated_value(",
          "def get_group_description_updated(",
          "def get_group_join_policy_updated(",
          "def is_object_label_updated_value(",
          "def is_group_description_updated(",
          "def is_group_join_policy_updated("
        ],
        ".venv\\Lib\\site-packages\\flask\\app.py": [
          "def update_template_context("
        ],
        ".venv\\Lib\\site-packages\\flask\\blueprints.py": [
          "defaults.update(self.options.get(\"url_defaults\", ("
        ],
        ".venv\\Lib\\site-packages\\flask\\sessions.py": [
          "def on_update("
        ],
        ".venv\\Lib\\site-packages\\flask_login\\login_manager.py": [
          "def _update_request_context_with_user(",
          "def _update_remember_cookie("
        ],
        ".venv\\Lib\\site-packages\\flask_sqlalchemy\\extension.py": [
          "default(None, {}).update("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\fontBuilder.py": [
          "def _updateTableWithValues(",
          "def updateHead("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\designspaceLib\\__init__.py": [
          "def updatePaths(",
          "def updateFilenameFromPath("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\feaLib\\builder.py": [
          "default(glyph, set()).update("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\arrayTools.py": [
          "def updateBounds("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\classifyTools.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\misc\\dictTools.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\pens\\statisticsPen.py": [
          "def _update(",
          "def _update(",
          "def _update("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\subset\\svg.py": [
          "def update_glyph_href_links("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ttLib\\tables\\O_S_2f_2.py": [
          "def updateFirstAndLastCharIndex("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\instancer\\names.py": [
          "def updateNameTable(",
          "def _updateNameRecords(",
          "def _updateNameTableStyleRecords(",
          "def _updatePSNameRecord(",
          "def _updateUniqueIdNameRecord("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py": [
          "def test_threaded_updatecurrent("
        ],
        ".venv\\Lib\\site-packages\\gunicorn\\workers\\workertmp.py": [
          "def last_update("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\idtracking.py": [
          "def branch_update("
        ],
        ".venv\\Lib\\site-packages\\mako\\pygen.py": [
          "def _update_lineno("
        ],
        ".venv\\Lib\\site-packages\\mako\\util.py": [
          "def update_wrapper("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\artist.py": [
          "def _update_set_signature_and_docstring(",
          "def update_from(",
          "def _update_props(",
          "def update(",
          "def _internal_update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\axis.py": [
          "def update_position(",
          "def update_position(",
          "def update_position(",
          "def _update_ticks(",
          "def update_units(",
          "def _update_axisinfo(",
          "def _update_label_position(",
          "def _update_offset_text_position(",
          "def _update_label_position(",
          "def _update_offset_text_position(",
          "def _update_label_position(",
          "def _update_offset_text_position("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backend_bases.py": [
          "def _update_cursor(",
          "def _update_view(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backend_managers.py": [
          "def update_keymap("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backend_tools.py": [
          "def update_view(",
          "def update_home_views("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\category.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\collections.py": [
          "def update_scalarmappable(",
          "def update_from("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\colorbar.py": [
          "def update_normal(",
          "def _update_dividers(",
          "def update_ticks("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\dates.py": [
          "def _update_rrule("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\figure.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\gridspec.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\legend.py": [
          "def _update_loc(",
          "def _update_bbox_to_anchor(",
          "def update_default_handler_map(",
          "default_handler_map.update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\legend_handler.py": [
          "def update_from_first_child(",
          "def _update_prop(",
          "default_update_prop(",
          "def _default_update_prop(",
          "def update_prop(",
          "def _default_update_prop(",
          "def update_prop(",
          "def _update_prop("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\lines.py": [
          "def update_from("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\mathtext.py": [
          "def _update_bbox("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\offsetbox.py": [
          "def update_frame(",
          "def update_frame(",
          "def update_positions(",
          "def update_offset(",
          "def update_offset(",
          "def update_offset(",
          "def update_offset("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\patches.py": [
          "def update_from(",
          "def _update_transform(",
          "def _update_path(",
          "def _update_path("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\path.py": [
          "def _update_values("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\patheffects.py": [
          "def _update_gc("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\streamplot.py": [
          "def update_trajectory(",
          "def _update_trajectory("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\table.py": [
          "def _update_positions("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\text.py": [
          "def update(",
          "def update_from(",
          "def update_bbox_position_size(",
          "def _update_clip_properties(",
          "def update_positions("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\transforms.py": [
          "def update_from_path(",
          "def update_from_data_x(",
          "def update_from_data_y(",
          "def update_from_data_xy("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\widgets.py": [
          "def _update(",
          "def _update_selection_poly(",
          "def _update_val_from_pos(",
          "def _update(",
          "def _update(",
          "def _update(",
          "def update_background(",
          "def update(",
          "def _clear_without_update(",
          "def _update_box("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\_docstring.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\_layoutgrid.py": [
          "def update_variables("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\_mathtext.py": [
          "def _update_metrics(",
          "def _update_metrics("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\axes\\_base.py": [
          "def _update_transScale(",
          "def _update_image_limits(",
          "def _update_line_limits(",
          "def _update_patch_limits(",
          "def update_datalim(",
          "def _update_title_position("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_agg.py": [
          "def _update_methods("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_gtk3.py": [
          "def _update_device_pixel_ratio("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_gtk4.py": [
          "def _update_device_pixel_ratio("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_qt.py": [
          "def _update_pixel_ratio(",
          "def _update_screen(",
          "def _update_buttons_checked(",
          "def update_from_current_subplotpars("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_svg.py": [
          "def _update_glyph_map_defs("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\backend_wx.py": [
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_gtk.py": [
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py": [
          "def _update_device_pixel_ratio(",
          "def _update_window_dpi(",
          "def _update_buttons_checked("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\qt_editor\\_formlayout.py": [
          "def update_color(",
          "def update_text(",
          "def update_buttons("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\projections\\polar.py": [
          "def _update_padding(",
          "def update_position(",
          "def update_position("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\style\\core.py": [
          "def update_user_library(",
          "def update_nested_dict(",
          "default(name, {}).update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\compare.py": [
          "def _update_converter("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_animation.py": [
          "def update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_axes.py": [
          "def test_stairs_update(",
          "def test_stairs_invalid_update(",
          "def test_stairs_invalid_update2(",
          "def test_tick_label_update(",
          "def test_set_margin_updates_limits("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_bases.py": [
          "def test_toolmanager_update_keymap("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pgf.py": [
          "def test_rcupdate("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tk.py": [
          "def test_never_update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_category.py": [
          "def test_update(",
          "def test_non_string_update_fails(",
          "def test_update_plot(",
          "def test_mixed_type_update_exception("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colors.py": [
          "def test_scalarmappable_norm_update(",
          "def test_norm_update_figs("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_rcparams.py": [
          "def test_rcparams_update("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_text.py": [
          "def test_annotation_update(",
          "def test_update_mutate_input("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\axislines.py": [
          "def update_lim(",
          "def update_lim(",
          "def _update_grid("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\axis_artist.py": [
          "def _update_ticks(",
          "def _update_offsetText(",
          "def _update_label("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\floating_axes.py": [
          "def update_lim(",
          "def _update_grid("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\grid_finder.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\grid_helper_curvelinear.py": [
          "def update_lim(",
          "def update_lim(",
          "def update_grid_finder(",
          "def _update_grid("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\axes3d.py": [
          "def update_datalim("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\axis3d.py": [
          "def tick_update_position(",
          "def _tick_update_position("
        ],
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_axes3d.py": [
          "def test_scalarmap_update("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\exec_command.py": [
          "def _update_environment("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\fcompiler\\absoft.py": [
          "def update_executables("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\fcompiler\\intel.py": [
          "def update_executables(",
          "def update_executables("
        ],
        ".venv\\Lib\\site-packages\\numpy\\distutils\\fcompiler\\__init__.py": [
          "def update_executables("
        ],
        ".venv\\Lib\\site-packages\\numpy\\f2py\\crackfortran.py": [
          "def updatevars("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py": [
          "def _update_dim_sizes("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_iotools.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\numpy\\ma\\core.py": [
          "def _update_from("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\einsumfunc.py": [
          "def _update_other_results("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py": [
          "def test_elide_updateifcopy("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_regression.py": [
          "def test_alignment_update("
        ],
        ".venv\\Lib\\site-packages\\ordered_set\\__init__.py": [
          "def update(",
          "def _update_items(",
          "def difference_update(",
          "def intersection_update(",
          "def symmetric_difference_update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\frame.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\generic.py": [
          "def insert_on_conflict_update(",
          "def _maybe_update_cacher(",
          "def _update_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\series.py": [
          "def _maybe_update_cacher(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\ops.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\computation\\scope.py": [
          "def _update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py": [
          "def update_dtype(",
          "def update_dtype("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py": [
          "def _insert_update_mgr_locs(",
          "def _insert_update_blklocs_and_blknos("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\pytables.py": [
          "def update_info("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\stata.py": [
          "def _update_strl_names(",
          "def _update_map(",
          "def _update_strl_names("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\formats\\css.py": [
          "def _update_initial(",
          "def _update_font_size(",
          "def _update_other_units("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\formats\\style.py": [
          "def _update_ctx(",
          "def _update_ctx_header("
        ],
        ".venv\\Lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py": [
          "def _update_stacker("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_array.py": [
          "def test_setting_fill_value_updates("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_dtype.py": [
          "def test_update_dtype(",
          "def test_update_dtype_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_astype.py": [
          "def test_astype_string_and_object_update_original("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_methods.py": [
          "def test_update_frame(",
          "def test_update_series(",
          "def test_update_chained_assignment("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_index.py": [
          "def test_set_index_update_column(",
          "def test_set_index_drop_update_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_dtypes.py": [
          "def test_update_dtype(",
          "def test_update_dtype(",
          "def test_update_dtype_string(",
          "def test_update_dtype_errors("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_arithmetic.py": [
          "def test_inplace_arithmetic_series_update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_block_internals.py": [
          "def test_update_inplace_sets_valid_block_values("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_indexing.py": [
          "def test_loc_internals_not_updated_correctly("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_setitem.py": [
          "def test_setitem_column_update_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine_first.py": [
          "def test_combine_first_same_as_in_update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_fillna.py": [
          "def test_inplace_dict_update_view("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_update.py": [
          "def test_update_nan(",
          "def test_update(",
          "def test_update_dtypes(",
          "def test_update_nooverwrite(",
          "def test_update_filtered(",
          "def test_update_raise_bad_parameter(",
          "def test_update_raise_on_overlap(",
          "def test_update_from_non_df(",
          "def test_update_datetime_tz(",
          "def test_update_with_different_dtype(",
          "def test_update_modify_view(",
          "def test_update_dt_column_with_NaT_create_column("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_bin_groupby.py": [
          "def test_mgr_locs_updated("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iloc.py": [
          "def test_iloc_setitem_categorical_updates_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py": [
          "def test_insertion_method_on_conflict_update("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_style.py": [
          "def test_update_ctx(",
          "def test_update_ctx_flatten_multi_and_trailing_semi("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\conftest.py": [
          "def update_kwargs("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_series.py": [
          "def test_plot_accessor_updates_on_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_dt_accessor.py": [
          "def test_dt_accessor_updates_on_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_sparse_accessor.py": [
          "def test_sparse_accessor_updates_on_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_str_accessor.py": [
          "def test_str_accessor_updates_on_inplace("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_update.py": [
          "def test_update(",
          "def test_update_dtypes(",
          "def test_update_from_non_series(",
          "def test_update_extension_array_series(",
          "def test_update_with_categorical_type("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_online.py": [
          "def test_invalid_update(",
          "def test_update_times_mean("
        ],
        ".venv\\Lib\\site-packages\\pandas\\util\\_decorators.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\parser.py": [
          "def _update_defaults(",
          "defaults = self._update_defaults(self.defaults.copy("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\spinners.py": [
          "def _update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py": [
          "def update_index_urls("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py": [
          "def update_env_context_manager("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py": [
          "def update_editable("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py": [
          "def update(",
          "def update_submodules("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\adapter.py": [
          "def _update_chunk_length("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py": [
          "def update_cached_response("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\heuristics.py": [
          "def update_headers(",
          "def update_headers(",
          "def update_headers(",
          "def update_headers("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\compat.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py": [
          "def _update_version_data("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py": [
          "def update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py": [
          "def update(",
          "def update_version("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\cookies.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\resolvers\\resolution.py": [
          "def _get_updated_criteria("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py": [
          "def update(",
          "def update_width(",
          "def update_height(",
          "def update_dimensions(",
          "def update(",
          "def update_screen(",
          "def update_screen_lines("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\layout.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\live.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress_bar.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\spinner.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\status.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py": [
          "def update_link("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py": [
          "def _update_chunk_length("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py": [
          "def _update_wrapper("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\_mysql_builtins.py": [
          "def update_myself(",
          "def update_content("
        ],
        ".venv\\Lib\\site-packages\\pygments\\lexers\\_postgres_builtins.py": [
          "def update_myself(",
          "def update_consts("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\rl_config.py": [
          "DEFAULTS.update(",
          "DEFAULTS.update(",
          "DEFAULTS.update("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\lib\\utils.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\reportlab\\pdfbase\\pdfdoc.py": [
          "def updateSignature("
        ],
        ".venv\\Lib\\site-packages\\requests\\cookies.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\console.py": [
          "def update(",
          "def update_width(",
          "def update_height(",
          "def update_dimensions(",
          "def update(",
          "def update_screen(",
          "def update_screen_lines("
        ],
        ".venv\\Lib\\site-packages\\rich\\layout.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\live.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\progress.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\progress_bar.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\spinner.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\status.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\rich\\style.py": [
          "def update_link("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\axisgrid.py": [
          "def _update_legend_data("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\regression.py": [
          "def update_datalim("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\relational.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\widgets.py": [
          "def _update_lut("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_core\\plot.py": [
          "def _update_legend_contents("
        ],
        ".venv\\Lib\\site-packages\\seaborn\\_core\\scales.py": [
          "def update_units("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\depends.py": [
          "def _update_globals("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\easy_install.py": [
          "def update_pth(self, dist):  # noqa: C901  # is too complex (",
          "def update_dist_caches(",
          "def _update_zipimporter_cache("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\ordered_set.py": [
          "def update(",
          "def _update_items(",
          "def difference_update(",
          "def intersection_update(",
          "def symmetric_difference_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.py": [
          "def for_update_clause(",
          "def update_from_clause("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\base.py": [
          "def visit_on_duplicate_key_update(",
          "def for_update_clause(",
          "def update_limit_clause(",
          "def update_tables_clause(",
          "def update_from_clause("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\dml.py": [
          "def on_duplicate_key_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\base.py": [
          "def for_update_clause(",
          "def _supports_update_returning_computed_cols("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\oracle\\provision.py": [
          "def _update_db_opts("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py": [
          "def update(",
          "def for_update_clause(",
          "def visit_on_conflict_do_update(",
          "def update_from_clause("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\dml.py": [
          "def on_conflict_do_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py": [
          "def for_update_clause(",
          "def update_from_clause(",
          "def visit_on_conflict_do_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\dml.py": [
          "def on_conflict_do_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py": [
          "def update_execution_options(",
          "def update_execution_options(",
          "def update_execution_options("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\cursor.py": [
          "def last_updated_params("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py": [
          "def get_update_default("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\interfaces.py": [
          "def update_url(",
          "def update_url(",
          "def update_url(",
          "def update_url("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\reflection.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\engine\\url.py": [
          "def update_query_string(",
          "def update_query_pairs(",
          "def update_query_dict(",
          "def difference_update_query("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\event\\attr.py": [
          "def update_subclass(",
          "def _update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\event\\base.py": [
          "def _update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\associationproxy.py": [
          "def update(",
          "def update(",
          "def update(",
          "def update(",
          "def update(",
          "def difference_update(",
          "def intersection_update(",
          "def symmetric_difference_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\baked.py": [
          "def _update_cache_key(self, fn, args=("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\hybrid.py": [
          "def _length_update_expression(",
          "def update_expression(",
          "defaults.update(",
          "def update_expression(",
          "def update_expression(",
          "def _bulk_update_tuples("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\mutable.py": [
          "def update(",
          "def update(",
          "def intersection_update(",
          "def difference_update(",
          "def symmetric_difference_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\engine.py": [
          "def update_execution_options("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\mypy\\decl_class.py": [
          "def updated_at("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\attributes.py": [
          "def _bulk_update_tuples("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\bulk_persistence.py": [
          "def _bulk_update(",
          "def _bulk_update(",
          "def _bulk_update(",
          "default_update_options(",
          "default_update_options.from_execution_options(",
          "def _setup_for_orm_update(",
          "def _setup_for_bulk_update(",
          "def _apply_update_set_values_to_objects("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\collections.py": [
          "def update(",
          "def update(",
          "def update(",
          "def update(",
          "def difference_update(",
          "def difference_update(",
          "def intersection_update(",
          "def intersection_update(",
          "def symmetric_difference_update(",
          "def symmetric_difference_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_api.py": [
          "def update_type_annotation_map("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_base.py": [
          "def _update_annotations_for_non_mapped_class("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\dependency.py": [
          "def _post_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\descriptor_props.py": [
          "def insert_update_handler(",
          "def _bulk_update_tuples("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\events.py": [
          "def before_update(",
          "def after_update(",
          "def after_bulk_update(",
          "def before_compile_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\instrumentation.py": [
          "def _update_state("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\interfaces.py": [
          "def _bulk_update_tuples("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\mapper.py": [
          "def _server_onupdate_default_cols(",
          "def _server_onupdate_default_col_keys(",
          "def _server_default_plus_onupdate_propkeys("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py": [
          "def post_update(",
          "def _organize_states_for_post_update(",
          "def _collect_update_commands(",
          "def _collect_post_update_commands(",
          "def _emit_update_statements(",
          "def update_stmt(",
          "def _emit_post_update_statements(",
          "def update_stmt(",
          "def _finalize_insert_update_commands(",
          "def _postfetch_post_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py": [
          "def with_for_update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py": [
          "def bulk_update_mappings("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py": [
          "def is_update(",
          "def update_execution_options(",
          "def update_delete_options(",
          "def _save_or_update_state(",
          "def _update_impl(",
          "def _save_or_update_impl(",
          "def bulk_update_mappings("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\strategy_options.py": [
          "def _update_opts("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\sync.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py": [
          "def register_post_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\writeonly.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\base.py": [
          "defaults.update(",
          "defaults.update(",
          "defaults.update(",
          "def _update_compile_options(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py": [
          "def for_update_clause(",
          "def update_limit_clause(",
          "def update_tables_clause(",
          "def update_from_clause(",
          "def visit_update(",
          "def update_from_clause(",
          "define_constraint_onupdate_cascade(",
          "def define_constraint_onupdate_cascade("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\crud.py": [
          "def _append_param_update(",
          "def _create_update_prefetch_bind_param(",
          "def _create_update_prefetch_bind_param(",
          "def _create_update_prefetch_bind_param(",
          "def _onupdate_description_tuple(",
          "def _get_update_multitable_params("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\dml.py": [
          "def isupdate("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\lambdas.py": [
          "def is_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py": [
          "default = server_default._as_for_update(",
          "def _onupdate_description_tuple(",
          "def _as_for_update(",
          "DefaultClause(%r, for_update=%r)\" % (",
          "def _as_for_update(",
          "def _as_for_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\selectable.py": [
          "def update(",
          "def with_for_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\_dml_constructors.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\_typing.py": [
          "def is_insert_update("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\provision.py": [
          "def _adapt_update_db_opts(",
          "def update_db_opts("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\requirements.py": [
          "def on_update_cascade(",
          "def on_update_or_deferrable_fks(",
          "def ctes_with_update_delete(",
          "def update_returning(",
          "def foreign_key_constraint_option_reflection_onupdate(",
          "def fk_constraint_option_reflection_onupdate_restrict(",
          "def update_from(",
          "def update_where_target_in_subquery("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py": [
          "def test_update_from_round_trip("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py": [
          "def test_update_single(",
          "def test_update_many("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py": [
          "def test_update_rowcount1(",
          "def test_update_rowcount2(",
          "def test_update_delete_rowcount_return_defaults(",
          "def test_multi_update_rowcount("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py": [
          "def test_update(",
          "def test_update_returning("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\util\\_collections.py": [
          "def update(",
          "def update_copy("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\util\\_py_collections.py": [
          "def update(",
          "def update(",
          "def intersection_update(",
          "def symmetric_difference_update(",
          "def difference_update(",
          "def update(",
          "def difference_update(",
          "def intersection_update(",
          "def symmetric_difference_update("
        ],
        ".venv\\Lib\\site-packages\\stone\\frontend\\parser.py": [
          "def p_kw_args_update("
        ],
        ".venv\\Lib\\site-packages\\urllib3\\response.py": [
          "def _update_chunk_length("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\test.py": [
          "def on_update(",
          "def _update_cookies_from_response("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py": [
          "def _trigger_on_update(",
          "def on_update("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py": [
          "def update(",
          "def update(",
          "def _calls_update("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py": [
          "def update(",
          "def update(",
          "def update("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\routing\\map.py": [
          "def update("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\routing\\matcher.py": [
          "def update(",
          "def _update_state("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py": [
          "def on_update(",
          "def on_update(",
          "def on_update(",
          "def on_update(",
          "def on_update(",
          "def on_update(",
          "def on_update(",
          "def on_update("
        ],
        ".venv\\Lib\\site-packages\\wtforms\\meta.py": [
          "def update_values("
        ],
        "app\\admin\\overtime_admin.py": [
          "def update_user_hours("
        ],
        "app\\admin\\routes.py": [
          "def update_local_config(",
          "def update_shared_link("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py": [
          "def update_user_hours("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\routes.py": [
          "def update_local_config(",
          "def update_shared_link("
        ]
      },
      "delete_functions": {
        "analyze_system_duplicates.py": [
          "def.*delete.*\\("
        ],
        ".venv\\Lib\\site-packages\\alembic\\runtime\\migration.py": [
          "def _delete_version(",
          "def should_delete_branch(",
          "def delete_version_num(",
          "def delete_version_num(",
          "def should_delete_branch("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\requirements.py": [
          "def fk_ondelete_is_reflected(",
          "def fk_ondelete_restrict(",
          "def fk_ondelete_noaction("
        ],
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_fks.py": [
          "def test_add_ondelete(",
          "def test_remove_ondelete(",
          "def test_nochange_ondelete(",
          "def test_nochange_ondelete_restrict(",
          "def test_nochange_ondelete_noaction(",
          "def test_change_ondelete_from_restrict(",
          "def test_ondelete_onupdate_combo("
        ],
        ".venv\\Lib\\site-packages\\dns\\node.py": [
          "def delete_rdataset(",
          "def delete_rdataset("
        ],
        ".venv\\Lib\\site-packages\\dns\\transaction.py": [
          "def delete(",
          "def delete_exact(",
          "def check_delete_rdataset(",
          "def check_delete_name(",
          "def _delete(",
          "def _checked_delete_rdataset(",
          "def _checked_delete_name(",
          "def _delete_name(",
          "def _delete_rdataset("
        ],
        ".venv\\Lib\\site-packages\\dns\\update.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\dns\\versioned.py": [
          "def delete_node(",
          "def delete_rdataset("
        ],
        ".venv\\Lib\\site-packages\\dns\\zone.py": [
          "def delete_node(",
          "def delete_rdataset(",
          "def delete_rdataset(",
          "def delete_node(",
          "def delete_rdataset(",
          "def _delete_name(",
          "def _delete_rdataset("
        ],
        ".venv\\Lib\\site-packages\\dns\\zonefile.py": [
          "def _delete_name(",
          "def _delete_rdataset("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base.py": [
          "def contacts_delete_manual_contacts(",
          "def contacts_delete_manual_contacts_batch(",
          "def file_requests_delete(",
          "def file_requests_delete_all_closed(",
          "def files_delete_v2(",
          "def files_delete(",
          "def files_delete_batch(",
          "def files_delete_batch_check(",
          "def files_permanently_delete(",
          "def paper_docs_permanently_delete("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\base_team.py": [
          "def team_groups_delete(",
          "def team_members_delete_profile_photo_v2(",
          "def team_members_delete_profile_photo(",
          "def team_members_secondary_emails_delete(",
          "def team_team_folder_permanently_delete("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\files.py": [
          "def is_deleted(",
          "def is_doc_deleted(",
          "def is_deleted_filename("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\paper.py": [
          "def is_doc_deleted("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\sharing.py": [
          "def is_group_deleted(",
          "def is_delete_and_recreate("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team.py": [
          "def is_group_already_deleted(",
          "def is_cannot_keep_account_and_delete_data("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def is_automatic_delete(",
          "def is_automatic_permanently_delete(",
          "def file_delete_comment_details(",
          "def governance_policy_delete_details(",
          "def device_delete_on_unlink_fail_details(",
          "def device_delete_on_unlink_success_details(",
          "def file_delete_details(",
          "def file_permanently_delete_details(",
          "def file_request_delete_details(",
          "def group_delete_details(",
          "def delete_team_invite_link_details(",
          "def member_delete_manual_contacts_details(",
          "def member_delete_profile_photo_details(",
          "def member_permanently_delete_account_contents_details(",
          "def secondary_email_deleted_details(",
          "def paper_content_permanently_delete_details(",
          "def paper_doc_deleted_details(",
          "def paper_doc_delete_comment_details(",
          "def paper_folder_deleted_details(",
          "def file_transfers_transfer_delete_details(",
          "def showcase_delete_comment_details(",
          "def showcase_permanently_deleted_details(",
          "def team_folder_permanently_delete_details(",
          "def permanent_delete_change_policy_details(",
          "def is_file_delete_comment_details(",
          "def is_governance_policy_delete_details(",
          "def is_device_delete_on_unlink_fail_details(",
          "def is_device_delete_on_unlink_success_details(",
          "def is_file_delete_details(",
          "def is_file_permanently_delete_details(",
          "def is_file_request_delete_details(",
          "def is_group_delete_details(",
          "def is_delete_team_invite_link_details(",
          "def is_member_delete_manual_contacts_details(",
          "def is_member_delete_profile_photo_details(",
          "def is_member_permanently_delete_account_contents_details(",
          "def is_secondary_email_deleted_details(",
          "def is_paper_content_permanently_delete_details(",
          "def is_paper_doc_deleted_details(",
          "def is_paper_doc_delete_comment_details(",
          "def is_paper_folder_deleted_details(",
          "def is_file_transfers_transfer_delete_details(",
          "def is_showcase_delete_comment_details(",
          "def is_showcase_permanently_deleted_details(",
          "def is_team_folder_permanently_delete_details(",
          "def is_permanent_delete_change_policy_details(",
          "def get_file_delete_comment_details(",
          "def get_governance_policy_delete_details(",
          "def get_device_delete_on_unlink_fail_details(",
          "def get_device_delete_on_unlink_success_details(",
          "def get_file_delete_details(",
          "def get_file_permanently_delete_details(",
          "def get_file_request_delete_details(",
          "def get_group_delete_details(",
          "def get_delete_team_invite_link_details(",
          "def get_member_delete_manual_contacts_details(",
          "def get_member_delete_profile_photo_details(",
          "def get_member_permanently_delete_account_contents_details(",
          "def get_secondary_email_deleted_details(",
          "def get_paper_content_permanently_delete_details(",
          "def get_paper_doc_deleted_details(",
          "def get_paper_doc_delete_comment_details(",
          "def get_paper_folder_deleted_details(",
          "def get_file_transfers_transfer_delete_details(",
          "def get_showcase_delete_comment_details(",
          "def get_showcase_permanently_deleted_details(",
          "def get_team_folder_permanently_delete_details(",
          "def get_permanent_delete_change_policy_details(",
          "def file_delete_comment(",
          "def governance_policy_delete(",
          "def device_delete_on_unlink_fail(",
          "def device_delete_on_unlink_success(",
          "def file_delete(",
          "def file_permanently_delete(",
          "def file_request_delete(",
          "def group_delete(",
          "def delete_team_invite_link(",
          "def member_delete_manual_contacts(",
          "def member_delete_profile_photo(",
          "def member_permanently_delete_account_contents(",
          "def secondary_email_deleted(",
          "def paper_content_permanently_delete(",
          "def paper_doc_deleted(",
          "def paper_doc_delete_comment(",
          "def paper_folder_deleted(",
          "def file_transfers_transfer_delete(",
          "def showcase_delete_comment(",
          "def showcase_permanently_deleted(",
          "def team_folder_permanently_delete(",
          "def permanent_delete_change_policy(",
          "def is_file_delete_comment(",
          "def is_governance_policy_delete(",
          "def is_device_delete_on_unlink_fail(",
          "def is_device_delete_on_unlink_success(",
          "def is_file_delete(",
          "def is_file_permanently_delete(",
          "def is_file_request_delete(",
          "def is_group_delete(",
          "def is_delete_team_invite_link(",
          "def is_member_delete_manual_contacts(",
          "def is_member_delete_profile_photo(",
          "def is_member_permanently_delete_account_contents(",
          "def is_secondary_email_deleted(",
          "def is_paper_content_permanently_delete(",
          "def is_paper_doc_deleted(",
          "def is_paper_doc_delete_comment(",
          "def is_paper_folder_deleted(",
          "def is_file_transfers_transfer_delete(",
          "def is_showcase_delete_comment(",
          "def is_showcase_permanently_deleted(",
          "def is_team_folder_permanently_delete(",
          "def is_permanent_delete_change_policy(",
          "def get_file_delete_comment(",
          "def get_governance_policy_delete(",
          "def get_device_delete_on_unlink_fail(",
          "def get_device_delete_on_unlink_success(",
          "def get_file_delete(",
          "def get_file_permanently_delete(",
          "def get_file_request_delete(",
          "def get_group_delete(",
          "def get_delete_team_invite_link(",
          "def get_member_delete_manual_contacts(",
          "def get_member_delete_profile_photo(",
          "def get_member_permanently_delete_account_contents(",
          "def get_secondary_email_deleted(",
          "def get_paper_content_permanently_delete(",
          "def get_paper_doc_deleted(",
          "def get_paper_doc_delete_comment(",
          "def get_paper_folder_deleted(",
          "def get_file_transfers_transfer_delete(",
          "def get_showcase_delete_comment(",
          "def get_showcase_permanently_deleted(",
          "def get_team_folder_permanently_delete(",
          "def get_permanent_delete_change_policy(",
          "def is_file_delete_comment(",
          "def is_governance_policy_delete(",
          "def is_device_delete_on_unlink_fail(",
          "def is_device_delete_on_unlink_success(",
          "def is_file_delete(",
          "def is_file_permanently_delete(",
          "def is_file_request_delete(",
          "def is_group_delete(",
          "def is_delete_team_invite_link(",
          "def is_member_delete_manual_contacts(",
          "def is_member_delete_profile_photo(",
          "def is_member_permanently_delete_account_contents(",
          "def is_secondary_email_deleted(",
          "def is_paper_content_permanently_delete(",
          "def is_paper_doc_deleted(",
          "def is_paper_doc_delete_comment(",
          "def is_paper_folder_deleted(",
          "def is_file_transfers_transfer_delete(",
          "def is_showcase_delete_comment(",
          "def is_showcase_permanently_deleted(",
          "def is_team_folder_permanently_delete(",
          "def is_permanent_delete_change_policy(",
          "def is_deleted(",
          "def is_delete(",
          "def is_delete_shared_link("
        ],
        ".venv\\Lib\\site-packages\\flask\\helpers.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\flask\\scaffold.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\cffLib\\transforms.py": [
          "def _pd_delete_empty_subrs("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ufoLib\\glifLib.py": [
          "def deleteGlyph("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\ufoLib\\__init__.py": [
          "def deleteGlyphSet("
        ],
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\instancer\\__init__.py": [
          "defaultDeltas, deleteVariations=("
        ],
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py": [
          "def test_cannot_delete_parent(",
          "def test_cannot_delete_parent_of_main("
        ],
        ".venv\\Lib\\site-packages\\jinja2\\sandbox.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\limits\\typing.py": [
          "def delete(",
          "def delete(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\mako\\_ast_util.py": [
          "def visit_Delete("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\backends\\qt_compat.py": [
          "def _isdeleted(obj): return not shiboken6.isValid(",
          "def _isdeleted("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\cbook\\__init__.py": [
          "def delete_masked_points("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_animation.py": [
          "def test_animation_delete("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_api.py": [
          "def test_delete_parameter("
        ],
        ".venv\\Lib\\site-packages\\matplotlib\\_api\\deprecation.py": [
          "def __delete__(",
          "def delete_parameter("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py": [
          "def _delete_dispatcher(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\numpy\\lib\\_iotools.py": [
          "defaultdeletechars = frozenset(r\"\"\"~!@#$%^&*("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dlpack.py": [
          "def dlpack_deleter_exception("
        ],
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py": [
          "def test_structured_object_create_delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\base.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\interval.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\datetimelike.py": [
          "def _get_delete_freq(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\array_manager.py": [
          "def idelete(",
          "def idelete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py": [
          "def delete(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py": [
          "def idelete(",
          "def idelete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\io\\pytables.py": [
          "def delete(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_core_functionalities.py": [
          "def test_delete(",
          "def test_delete_reference("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\dim2.py": [
          "def test_delete_2d("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\base\\methods.py": [
          "def test_delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_old_base.py": [
          "def test_delete_base("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_reshape.py": [
          "def test_delete(",
          "def test_delete_raises("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_category.py": [
          "def test_delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_delete.py": [
          "def test_delete(",
          "def test_delete_slice("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval.py": [
          "def test_delete("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reshape.py": [
          "def test_delete_base("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_range.py": [
          "def test_delete(",
          "def test_delete_preserves_rangeindex(",
          "def test_delete_preserves_rangeindex_middle(",
          "def test_delete_preserves_rangeindex_list_at_end(",
          "def test_delete_preserves_rangeindex_list_middle(",
          "def test_delete_all_preserves_rangeindex(",
          "def test_delete_not_preserving_rangeindex("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_delete.py": [
          "def test_delete(",
          "def test_delete_slice(",
          "def test_delete_doesnt_infer_freq("
        ],
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py": [
          "def test_delete(",
          "def test_delete_datetimelike("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\network\\cache.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py": [
          "def set_delete(",
          "def get_delete("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\cache.py": [
          "def delete(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\file_cache.py": [
          "def _delete(",
          "def delete(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\redis_cache.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\api.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\sessions.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\requests\\api.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\requests\\sessions.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\easy_install.py": [
          "def delete_blockers(",
          "def _delete_path("
        ],
        ".venv\\Lib\\site-packages\\setuptools\\command\\egg_info.py": [
          "def write_or_delete_file(",
          "def delete_file("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.py": [
          "def delete_table_clause(",
          "def delete_extra_from_clause("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\mysql\\base.py": [
          "def delete_limit_clause(",
          "def delete_table_clause(",
          "def delete_extra_from_clause("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py": [
          "def delete_extra_from_clause(",
          "def _fk_ondelete_pattern(",
          "def define_constraint_ondelete_cascade("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\hstore.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\json.py": [
          "def delete_path("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\associationproxy.py": [
          "def __delete__(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\hybrid.py": [
          "def deleter(",
          "def __delete__(",
          "def deleter(",
          "def deleter("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\scoping.py": [
          "def delete(",
          "def deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\ext\\asyncio\\session.py": [
          "def delete(",
          "def deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\attributes.py": [
          "def __delete__(",
          "def delete(",
          "def delete(",
          "def delete(",
          "def delete(",
          "def non_deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\base.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\decl_api.py": [
          "def __delete__(",
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\dependency.py": [
          "def presort_deletes(",
          "def process_deletes(",
          "def presort_deletes(",
          "def process_deletes(",
          "def presort_deletes(",
          "def process_deletes(",
          "def presort_deletes(",
          "def process_deletes(",
          "def presort_deletes(",
          "def process_deletes("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\descriptor_props.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\events.py": [
          "def before_delete(",
          "def after_delete(",
          "def after_bulk_delete(",
          "def persistent_to_deleted(",
          "def deleted_to_persistent(",
          "def deleted_to_detached(",
          "def no_deleted(",
          "def no_deleted(",
          "def before_compile_delete(",
          "def no_deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py": [
          "def delete_obj(",
          "def _organize_states_for_delete(",
          "def _collect_delete_commands(",
          "def _emit_delete_statements(",
          "def delete_stmt("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py": [
          "def delete(",
          "def deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py": [
          "def is_delete(",
          "def update_delete_options(",
          "def _remove_newly_deleted(",
          "def delete(",
          "def _delete_impl(",
          "def deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\state.py": [
          "def deleted(",
          "def was_deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py": [
          "def was_already_deleted(",
          "def is_deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\util.py": [
          "def was_deleted("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\orm\\writeonly.py": [
          "def delete(",
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py": [
          "def delete_limit_clause(",
          "def delete_extra_from_clause(",
          "def delete_table_clause(",
          "def visit_delete(",
          "def delete_extra_from_clause(",
          "define_constraint_ondelete_cascade(",
          "def define_constraint_ondelete_cascade("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\crud.py": [
          "def _setup_delete_return_defaults("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\dml.py": [
          "def isdelete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\lambdas.py": [
          "def is_delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\selectable.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\sql\\_dml_constructors.py": [
          "def delete("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\requirements.py": [
          "def ctes_with_update_delete(",
          "def delete_returning(",
          "def schema_create_delete(",
          "def foreign_key_constraint_option_reflection_ondelete(",
          "def fk_constraint_option_reflection_ondelete_restrict(",
          "def fk_constraint_option_reflection_ondelete_noaction(",
          "def delete_from("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py": [
          "def test_delete_from_round_trip(",
          "def test_delete_scalar_subq_round_trip("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py": [
          "def test_delete_single(",
          "def test_delete_many("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py": [
          "def test_update_delete_rowcount_return_defaults(",
          "def test_delete_rowcount(",
          "def test_multi_delete_rowcount("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py": [
          "def test_delete(",
          "def test_delete_returning("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\sqlalchemy\\util\\typing.py": [
          "def __delete__(",
          "def __delete__(",
          "def __delete__(",
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\stone\\backends\\python_rsrc\\stone_base.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\test.py": [
          "def delete_cookie(",
          "def delete(",
          "def _should_delete("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\utils.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\_internal.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py": [
          "def delete_cookie("
        ],
        ".venv\\Lib\\site-packages\\wrapt\\patches.py": [
          "def __delete__("
        ],
        ".venv\\Lib\\site-packages\\xlsxwriter\\chart.py": [
          "def _write_c_auto_title_deleted(",
          "def _write_delete("
        ],
        "app\\attestation_upload_service.py": [
          "def delete_attestation_file("
        ],
        "app\\local_attestation_service.py": [
          "def delete_attestation("
        ],
        "app\\local_backup.py": [
          "def delete_attestation("
        ],
        "app\\local_upload_service.py": [
          "def delete_attestation("
        ],
        "app\\admin\\routes.py": [
          "def delete_local_file("
        ],
        "app\\admin\\backup\\routes.py": [
          "def delete_backup(",
          "def delete_multiple_backups(",
          "def delete_backup(",
          "def delete_multiple_backups("
        ],
        "app\\files\\routes.py": [
          "def delete_file("
        ],
        "backup_security_20250728_134443\\app_code\\attestation_upload_service.py": [
          "def delete_attestation_file("
        ],
        "backup_security_20250728_134443\\app_code\\local_attestation_service.py": [
          "def delete_attestation("
        ],
        "backup_security_20250728_134443\\app_code\\local_backup.py": [
          "def delete_attestation("
        ],
        "backup_security_20250728_134443\\app_code\\local_upload_service.py": [
          "def delete_attestation("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\routes.py": [
          "def delete_local_file("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py": [
          "def delete_backup(",
          "def delete_multiple_backups(",
          "def delete_backup(",
          "def delete_multiple_backups("
        ],
        "backup_security_20250728_134443\\app_code\\files\\routes.py": [
          "def delete_file("
        ]
      },
      "backup_functions": {
        "analyze_system_duplicates.py": [
          "def.*backup.*\\("
        ],
        "create_security_backup.py": [
          "def create_backup("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_log.py": [
          "def device_sync_backup_status_changed_details(",
          "def external_drive_backup_eligibility_status_checked_details(",
          "def external_drive_backup_status_changed_details(",
          "def computer_backup_policy_changed_details(",
          "def external_drive_backup_policy_changed_details(",
          "def tfa_add_backup_phone_details(",
          "def tfa_change_backup_phone_details(",
          "def tfa_remove_backup_phone_details(",
          "def is_device_sync_backup_status_changed_details(",
          "def is_external_drive_backup_eligibility_status_checked_details(",
          "def is_external_drive_backup_status_changed_details(",
          "def is_computer_backup_policy_changed_details(",
          "def is_external_drive_backup_policy_changed_details(",
          "def is_tfa_add_backup_phone_details(",
          "def is_tfa_change_backup_phone_details(",
          "def is_tfa_remove_backup_phone_details(",
          "def get_device_sync_backup_status_changed_details(",
          "def get_external_drive_backup_eligibility_status_checked_details(",
          "def get_external_drive_backup_status_changed_details(",
          "def get_computer_backup_policy_changed_details(",
          "def get_external_drive_backup_policy_changed_details(",
          "def get_tfa_add_backup_phone_details(",
          "def get_tfa_change_backup_phone_details(",
          "def get_tfa_remove_backup_phone_details(",
          "def device_sync_backup_status_changed(",
          "def external_drive_backup_eligibility_status_checked(",
          "def external_drive_backup_status_changed(",
          "def computer_backup_policy_changed(",
          "def external_drive_backup_policy_changed(",
          "def tfa_add_backup_phone(",
          "def tfa_change_backup_phone(",
          "def tfa_remove_backup_phone(",
          "def is_device_sync_backup_status_changed(",
          "def is_external_drive_backup_eligibility_status_checked(",
          "def is_external_drive_backup_status_changed(",
          "def is_computer_backup_policy_changed(",
          "def is_external_drive_backup_policy_changed(",
          "def is_tfa_add_backup_phone(",
          "def is_tfa_change_backup_phone(",
          "def is_tfa_remove_backup_phone(",
          "def get_device_sync_backup_status_changed(",
          "def get_external_drive_backup_eligibility_status_checked(",
          "def get_external_drive_backup_status_changed(",
          "def get_computer_backup_policy_changed(",
          "def get_external_drive_backup_policy_changed(",
          "def get_tfa_add_backup_phone(",
          "def get_tfa_change_backup_phone(",
          "def get_tfa_remove_backup_phone(",
          "def is_device_sync_backup_status_changed(",
          "def is_external_drive_backup_eligibility_status_checked(",
          "def is_external_drive_backup_status_changed(",
          "def is_computer_backup_policy_changed(",
          "def is_external_drive_backup_policy_changed(",
          "def is_tfa_add_backup_phone(",
          "def is_tfa_change_backup_phone(",
          "def is_tfa_remove_backup_phone(",
          "default = ComputerBackupPolicy(",
          "default = ExternalDriveBackupPolicy("
        ],
        ".venv\\Lib\\site-packages\\dropbox\\team_policies.py": [
          "default = ComputerBackupPolicyState(",
          "default = ExternalDriveBackupPolicyState("
        ],
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py": [
          "def backup_dir("
        ],
        "app\\cli.py": [
          "def backup("
        ],
        "app\\local_backup.py": [
          "def create_backup(",
          "def _create_backup_zip(",
          "def _cleanup_old_backups(",
          "def restore_backup(",
          "def list_backups(",
          "def get_local_backup_manager("
        ],
        "app\\local_storage_manager.py": [
          "def _migrate_backup_files("
        ],
        "app\\shared_folder_manager.py": [
          "def get_backups_path(",
          "def create_backup_instructions("
        ],
        "app\\utils.py": [
          "def backup_database(",
          "def backup_to_github(",
          "def setup_github_backup_schedule("
        ],
        "app\\admin\\routes.py": [
          "def backup(",
          "def backup_completo(",
          "def backup_config("
        ],
        "app\\admin\\backup\\error_log.py": [
          "def run_backup_diagnosis("
        ],
        "app\\admin\\backup\\routes.py": [
          "def ensure_backup_directory(",
          "def list_backups(",
          "def create_backup(",
          "def delete_backup(",
          "def cleanup_old_backups(",
          "def delete_multiple_backups(",
          "def should_create_backup(",
          "def create_scheduled_backup(",
          "def api_list_backups(",
          "def create_backup(",
          "def delete_backup(",
          "def download_backup(",
          "def delete_multiple_backups(",
          "def cleanup_backups(",
          "def auto_backup_config(",
          "def trigger_auto_backup(",
          "def backup_settings("
        ],
        "backup_security_20250728_134443\\app_code\\cli.py": [
          "def backup("
        ],
        "backup_security_20250728_134443\\app_code\\local_backup.py": [
          "def create_backup(",
          "def _create_backup_zip(",
          "def _cleanup_old_backups(",
          "def restore_backup(",
          "def list_backups(",
          "def get_local_backup_manager("
        ],
        "backup_security_20250728_134443\\app_code\\local_storage_manager.py": [
          "def _migrate_backup_files("
        ],
        "backup_security_20250728_134443\\app_code\\shared_folder_manager.py": [
          "def get_backups_path(",
          "def create_backup_instructions("
        ],
        "backup_security_20250728_134443\\app_code\\utils.py": [
          "def backup_database(",
          "def backup_to_github(",
          "def setup_github_backup_schedule("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\routes.py": [
          "def backup(",
          "def backup_completo(",
          "def backup_config("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py": [
          "def run_backup_diagnosis("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py": [
          "def ensure_backup_directory(",
          "def list_backups(",
          "def create_backup(",
          "def delete_backup(",
          "def cleanup_old_backups(",
          "def delete_multiple_backups(",
          "def should_create_backup(",
          "def create_scheduled_backup(",
          "def api_list_backups(",
          "def create_backup(",
          "def delete_backup(",
          "def download_backup(",
          "def delete_multiple_backups(",
          "def cleanup_backups(",
          "def auto_backup_config(",
          "def trigger_auto_backup(",
          "def backup_settings("
        ],
        "scripts\\backup_scheduler.py": [
          "def _backup_loop(",
          "def _check_and_run_backup(",
          "def _execute_automatic_backup(",
          "def run_manual_backup("
        ]
      },
      "overtime_functions": {
        "analyze_system_duplicates.py": [
          "def.*overtime.*\\("
        ],
        "app\\models.py": [
          "def calculate_overtime("
        ],
        "app\\overtime_controller.py": [
          "def _process_overtime_addition(",
          "def get_user_overtime_summary(",
          "def get_system_overtime_stats(",
          "def _check_overtime_limits(",
          "def init_overtime_controller(",
          "def track_overtime("
        ],
        "app\\admin\\hour_bank_routes.py": [
          "def overtime_requests(",
          "def approve_overtime_request("
        ],
        "app\\admin\\overtime_admin.py": [
          "def overtime_control(",
          "def overtime_batch_process(",
          "def overtime_analytics(",
          "def overtime_settings(",
          "def overtime_reports(",
          "def user_overtime_summary(",
          "def get_monthly_overtime_trend(",
          "def get_department_overtime_stats(",
          "def get_overtime_cost_analysis(",
          "def generate_overtime_report("
        ],
        "app\\main\\hour_bank_routes.py": [
          "def request_overtime(",
          "def my_overtime_requests(",
          "def cancel_overtime_request(",
          "def quick_overtime_request("
        ],
        "backup_security_20250728_134443\\app_code\\models.py": [
          "def calculate_overtime("
        ],
        "backup_security_20250728_134443\\app_code\\overtime_controller.py": [
          "def _process_overtime_addition(",
          "def get_user_overtime_summary(",
          "def get_system_overtime_stats(",
          "def _check_overtime_limits(",
          "def init_overtime_controller(",
          "def track_overtime("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py": [
          "def overtime_requests(",
          "def approve_overtime_request("
        ],
        "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py": [
          "def overtime_control(",
          "def overtime_batch_process(",
          "def overtime_analytics(",
          "def overtime_settings(",
          "def overtime_reports(",
          "def user_overtime_summary(",
          "def get_monthly_overtime_trend(",
          "def get_department_overtime_stats(",
          "def get_overtime_cost_analysis(",
          "def generate_overtime_report("
        ],
        "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py": [
          "def request_overtime(",
          "def my_overtime_requests(",
          "def cancel_overtime_request(",
          "def quick_overtime_request("
        ]
      }
    },
    "template_files": {
      "base.html": [
        "app\\templates\\base.html"
      ],
      "privacy-policy.html": [
        "app\\templates\\privacy-policy.html"
      ],
      "atestados.html": [
        "app\\templates\\admin\\atestados.html",
        "app\\templates\\main\\atestados.html"
      ],
      "atestado_detalhes.html": [
        "app\\templates\\admin\\atestado_detalhes.html"
      ],
      "atribuir_classe_trabalho.html": [
        "app\\templates\\admin\\atribuir_classe_trabalho.html"
      ],
      "backup_config.html": [
        "app\\templates\\admin\\backup_config.html"
      ],
      "classes_trabalho.html": [
        "app\\templates\\admin\\classes_trabalho.html"
      ],
      "criar_usuario.html": [
        "app\\templates\\admin\\criar_usuario.html"
      ],
      "dashboard.html": [
        "app\\templates\\admin\\dashboard.html",
        "app\\templates\\admin\\debug\\dashboard.html",
        "app\\templates\\main\\dashboard.html",
        "app\\templates\\main\\hour_bank\\dashboard.html"
      ],
      "editar_classe_trabalho.html": [
        "app\\templates\\admin\\editar_classe_trabalho.html"
      ],
      "editar_usuario.html": [
        "app\\templates\\admin\\editar_usuario.html"
      ],
      "edit_user_hours.html": [
        "app\\templates\\admin\\edit_user_hours.html"
      ],
      "error_dashboard.html": [
        "app\\templates\\admin\\error_dashboard.html"
      ],
      "logs.html": [
        "app\\templates\\admin\\logs.html",
        "app\\templates\\admin\\debug\\logs.html"
      ],
      "notificacoes.html": [
        "app\\templates\\admin\\notificacoes.html",
        "app\\templates\\main\\notificacoes.html"
      ],
      "nova_classe_trabalho.html": [
        "app\\templates\\admin\\nova_classe_trabalho.html"
      ],
      "overtime_control.html": [
        "app\\templates\\admin\\overtime_control.html"
      ],
      "overtime_control_backup.html": [
        "app\\templates\\admin\\overtime_control_backup.html"
      ],
      "overtime_control_fixed.html": [
        "app\\templates\\admin\\overtime_control_fixed.html"
      ],
      "overtime_error_debug.html": [
        "app\\templates\\admin\\overtime_error_debug.html"
      ],
      "registros_ponto.html": [
        "app\\templates\\admin\\registros_ponto.html"
      ],
      "relatorios.html": [
        "app\\templates\\admin\\relatorios.html"
      ],
      "user_approvals.html": [
        "app\\templates\\admin\\user_approvals.html"
      ],
      "user_approval_details.html": [
        "app\\templates\\admin\\user_approval_details.html"
      ],
      "user_approval_form.html": [
        "app\\templates\\admin\\user_approval_form.html"
      ],
      "usuarios.html": [
        "app\\templates\\admin\\usuarios.html"
      ],
      "usuarios_classe_trabalho.html": [
        "app\\templates\\admin\\usuarios_classe_trabalho.html"
      ],
      "usuario_detalhes.html": [
        "app\\templates\\admin\\usuario_detalhes.html"
      ],
      "dashboard_local.html": [
        "app\\templates\\admin\\backup\\dashboard_local.html"
      ],
      "realtime.html": [
        "app\\templates\\admin\\debug\\realtime.html"
      ],
      "forgot_password.html": [
        "app\\templates\\auth\\forgot_password.html"
      ],
      "login.html": [
        "app\\templates\\auth\\login.html"
      ],
      "register.html": [
        "app\\templates\\auth\\register.html"
      ],
      "reset_password.html": [
        "app\\templates\\auth\\reset_password.html"
      ],
      "form.html": [
        "app\\templates\\bootstrap5\\form.html"
      ],
      "pagination.html": [
        "app\\templates\\bootstrap5\\pagination.html"
      ],
      "403.html": [
        "app\\templates\\errors\\403.html"
      ],
      "404.html": [
        "app\\templates\\errors\\404.html"
      ],
      "413.html": [
        "app\\templates\\errors\\413.html"
      ],
      "500.html": [
        "app\\templates\\errors\\500.html"
      ],
      "error.html": [
        "app\\templates\\errors\\error.html"
      ],
      "manager.html": [
        "app\\templates\\files\\manager.html"
      ],
      "upload.html": [
        "app\\templates\\files\\upload.html"
      ],
      "editar_registro.html": [
        "app\\templates\\main\\editar_registro.html"
      ],
      "index.html": [
        "app\\templates\\main\\index.html"
      ],
      "meus_registros.html": [
        "app\\templates\\main\\meus_registros.html"
      ],
      "perfil.html": [
        "app\\templates\\main\\perfil.html"
      ],
      "ponto.html": [
        "app\\templates\\main\\ponto.html"
      ],
      "upload_atestado.html": [
        "app\\templates\\main\\upload_atestado.html"
      ],
      "history.html": [
        "app\\templates\\main\\hour_bank\\history.html"
      ],
      "my_overtime_requests.html": [
        "app\\templates\\main\\hour_bank\\my_overtime_requests.html"
      ],
      "request_overtime.html": [
        "app\\templates\\main\\hour_bank\\request_overtime.html"
      ]
    },
    "duplicate_templates": {
      "atestados.html": [
        "app\\templates\\admin\\atestados.html",
        "app\\templates\\main\\atestados.html"
      ],
      "dashboard.html": [
        "app\\templates\\admin\\dashboard.html",
        "app\\templates\\admin\\debug\\dashboard.html",
        "app\\templates\\main\\dashboard.html",
        "app\\templates\\main\\hour_bank\\dashboard.html"
      ],
      "logs.html": [
        "app\\templates\\admin\\logs.html",
        "app\\templates\\admin\\debug\\logs.html"
      ],
      "notificacoes.html": [
        "app\\templates\\admin\\notificacoes.html",
        "app\\templates\\main\\notificacoes.html"
      ]
    },
    "config_files": {
      "config.py": [
        "config.py",
        ".venv\\Lib\\site-packages\\alembic\\config.py",
        ".venv\\Lib\\site-packages\\coverage\\config.py",
        ".venv\\Lib\\site-packages\\flask\\config.py",
        ".venv\\Lib\\site-packages\\flask_login\\config.py",
        ".venv\\Lib\\site-packages\\gunicorn\\config.py",
        ".venv\\Lib\\site-packages\\mako\\testing\\config.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\command\\config.py",
        ".venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\config.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\command\\config.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\config.py",
        "backup_security_20250728_134443\\config\\config.py"
      ],
      "configuration.py": [
        ".venv\\Lib\\site-packages\\pip\\_internal\\configuration.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\configuration.py"
      ],
      ".env": [
        ".env"
      ],
      "requirements.txt": [
        "requirements.txt",
        "backup_security_20250728_134443\\config\\requirements.txt"
      ]
    },
    "test_groups": {
      "login_tests": [
        "test_login_csrf_correct.py",
        "test_login_detailed.py",
        "test_login_form_debug.py",
        "test_login_intelligent.py",
        "test_login_no_csrf.py",
        "test_login_simple.py"
      ],
      "user_tests": [],
      "overtime_tests": [],
      "general_tests": [
        "test_all_pages.py",
        "test_complete_system.py",
        "test_corrected_routes.py",
        "test_final_complete.py",
        "test_postgresql.py",
        "test_requirements.py",
        "test_system_complete.py"
      ],
      "debug_tests": [
        "test_debug_system.py"
      ]
    }
  },
  "recommendations": [
    {
      "type": "test_consolidation",
      "files": [
        "quick_debug_test.py",
        "test_all_pages.py",
        "test_complete_system.py",
        "test_corrected_routes.py",
        "test_debug_system.py",
        "test_final_complete.py",
        "test_login_csrf_correct.py",
        "test_login_detailed.py",
        "test_login_form_debug.py",
        "test_login_intelligent.py",
        "test_login_no_csrf.py",
        "test_login_simple.py",
        "test_postgresql.py",
        "test_requirements.py",
        "test_system_complete.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_comments.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_computed.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_diffs.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_fks.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_autogen_identity.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_environment.py",
        ".venv\\Lib\\site-packages\\alembic\\testing\\suite\\test_op.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_builder.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_builder_registry.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_css.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_dammit.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_element.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_filter.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_formatter.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_fuzz.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_html5lib.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_htmlparser.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_lxml.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_navigablestring.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_pageelement.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_soup.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_tag.py",
        ".venv\\Lib\\site-packages\\bs4\\tests\\test_tree.py",
        ".venv\\Lib\\site-packages\\click\\testing.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\ansitowin32_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\ansi_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\isatty_test.py",
        ".venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
        ".venv\\Lib\\site-packages\\flask\\testing.py",
        ".venv\\Lib\\site-packages\\flask_login\\test_client.py",
        ".venv\\Lib\\site-packages\\fontTools\\misc\\testTools.py",
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatableTestContourOrder.py",
        ".venv\\Lib\\site-packages\\fontTools\\varLib\\interpolatableTestStartingPoint.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_contextvars.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_cpp.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_extension_interface.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_gc.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_generator.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_generator_nested.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_greenlet_trash.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_leaks.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_stack_saved.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_throw.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_tracing.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_version.py",
        ".venv\\Lib\\site-packages\\greenlet\\tests\\test_weakref.py",
        ".venv\\Lib\\site-packages\\jinja2\\tests.py",
        ".venv\\Lib\\site-packages\\matplotlib\\testing\\conftest.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_afm.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_agg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_agg_filter.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_animation.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_api.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_arrow_patches.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_artist.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_axes.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backends_interactive.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_bases.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_cairo.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_gtk3.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_macosx.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_nbagg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pdf.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_pgf.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_ps.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_qt.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_svg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_template.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tk.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_tools.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_backend_webagg.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_basic.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_bbox_tight.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_category.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cbook.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_collections.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colorbar.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_colors.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_compare_images.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_constrainedlayout.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_container.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_contour.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_cycles.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dates.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_determinism.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_doc.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_dviread.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_figure.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_fontconfig_pattern.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_font_manager.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ft2font.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_getattr.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_gridspec.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_image.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_legend.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_lines.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_marker.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mathtext.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_matplotlib.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_mlab.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_offsetbox.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_patches.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_path.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_patheffects.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_pickle.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_png.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_polar.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_preprocess_data.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_pyplot.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_quiver.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_rcparams.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_sankey.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_scale.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_simplification.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_skew.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_sphinxext.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_spines.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_streamplot.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_style.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_subplots.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_table.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_testing.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_texmanager.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_text.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_textpath.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ticker.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_tightlayout.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_transforms.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_triangulation.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_ttconv.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_type1font.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_units.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_usetex.py",
        ".venv\\Lib\\site-packages\\matplotlib\\tests\\test_widgets.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\tests\\test_axes_grid1.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_angle_helper.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_axislines.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_axis_artist.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_floating_axes.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_grid_finder.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\tests\\test_grid_helper_curvelinear.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\conftest.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_art3d.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_axes3d.py",
        ".venv\\Lib\\site-packages\\mpl_toolkits\\mplot3d\\tests\\test_legend3d.py",
        ".venv\\Lib\\site-packages\\numpy\\conftest.py",
        ".venv\\Lib\\site-packages\\numpy\\_pytesttester.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_build_ext.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_ccompiler_opt_conf.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_exec_command.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_gnu.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_intel.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_fcompiler_nagfor.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_from_template.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_log.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_mingw32ccompiler.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_misc_util.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_npy_pkg_config.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_shell_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\distutils\\tests\\test_system_info.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_abstract_interface.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_array_from_pyobj.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_assumed_shape.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_block_docstring.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_callback.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_character.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_common.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_crackfortran.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_data.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_docs.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2cmap.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_f2py2e.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_isoc.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_kind.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_mixed.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_modules.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_parameter.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_pyf_src.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_quoted_character.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_character.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_complex.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_integer.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_logical.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_return_real.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_routines.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_semicolon_split.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_size.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_string.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_symbolic.py",
        ".venv\\Lib\\site-packages\\numpy\\f2py\\tests\\test_value_attrspec.py",
        ".venv\\Lib\\site-packages\\numpy\\fft\\tests\\test_helper.py",
        ".venv\\Lib\\site-packages\\numpy\\fft\\tests\\test_pocketfft.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraypad.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arraysetops.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_arrayterator.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_array_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_format.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_function_base.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_histograms.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_index_tricks.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_io.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_loadtxt.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_mixins.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_nanfunctions.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_packbits.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_polynomial.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_recfunctions.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_shape_base.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_stride_tricks.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_twodim_base.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_type_check.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_ufunclike.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__datasource.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__iotools.py",
        ".venv\\Lib\\site-packages\\numpy\\lib\\tests\\test__version.py",
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_linalg.py",
        ".venv\\Lib\\site-packages\\numpy\\linalg\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\testutils.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_arrayobject.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_core.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_extras.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_mrecords.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_old_ma.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\ma\\tests\\test_subclassing.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_defmatrix.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_interaction.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_masked_matrix.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_matrix_linalg.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_multiarray.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_numeric.py",
        ".venv\\Lib\\site-packages\\numpy\\matrixlib\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_chebyshev.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_classes.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_hermite.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_hermite_e.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_laguerre.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_legendre.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polynomial.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polyutils.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_printing.py",
        ".venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_symbol.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_direct.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_extending.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_generator_mt19937_regressions.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_random.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_randomstate_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_seed_sequence.py",
        ".venv\\Lib\\site-packages\\numpy\\random\\tests\\test_smoke.py",
        ".venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_configtool.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_ctypeslib.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_lazyloading.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_matlib.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_config.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_version.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_public_api.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_reloading.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_scripts.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test_warnings.py",
        ".venv\\Lib\\site-packages\\numpy\\tests\\test__all__.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_isfile.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_runtime.py",
        ".venv\\Lib\\site-packages\\numpy\\typing\\tests\\test_typing.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_abc.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_api.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_argparse.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arraymethod.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arrayobject.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_arrayprint.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_api_info.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_coercion.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_array_interface.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_floatingpoint_errors.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_casting_unittests.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_conversion_utils.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cpu_dispatcher.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cpu_features.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_custom_dtypes.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_cython.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_datetime.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_defchararray.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dlpack.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_dtype.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_einsum.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_errstate.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_extint128.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_function_base.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_getlimits.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_half.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_hashtable.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexerrors.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_indexing.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_item_selection.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_limited_api.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_longdouble.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_machar.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_memmap.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_overlap.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_mem_policy.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multiarray.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_multithreading.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nditer.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_nep50_promotions.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numeric.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_numerictypes.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_overrides.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_print.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_protocols.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_records.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_regression.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarbuffer.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarinherit.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarmath.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalarprint.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalar_ctors.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_scalar_methods.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_shape_base.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_simd_module.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_stringdtype.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_strings.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_ufunc.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_accuracy.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_umath_complex.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test_unicode.py",
        ".venv\\Lib\\site-packages\\numpy\\_core\\tests\\test__exceptions.py",
        ".venv\\Lib\\site-packages\\numpy\\_pyinstaller\\tests\\test_pyinstaller.py",
        ".venv\\Lib\\site-packages\\pandas\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\testing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_aggregation.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_algos.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_downstream.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_errors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_expressions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_flags.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_multilevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_nanops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_optional_dependency.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_register_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_sorting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\api\\test_types.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_apply_relabeling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_frame_transform.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_invalid_arg.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_apply_relabeling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_series_transform.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\apply\\test_str.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_array_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_datetime64.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_numeric.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_object.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arithmetic\\test_timedelta64.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_datetimes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_ndarray_backed.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\test_timedeltas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_comparison.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_construction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_logical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_reduction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\boolean\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_algos.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_analytics.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_operators.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_sorting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\categorical\\test_warnings.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\datetimes\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_comparison.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_construction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_contains.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\floating\\test_to_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_comparison.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_construction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_reduction.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\integer\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\interval\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_arrow_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\masked\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\numpy_\\test_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_arrow_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\period\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_arithmetics.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_combine_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_libsparse.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\sparse\\test_unary.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\string_\\test_string_arrow.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\arrays\\timedeltas\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_conversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_misc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_transpose.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\base\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\computation\\test_eval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_config.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\config\\test_localization.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\construction\\test_extract_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_clip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_core_functionalities.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_functions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_internals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_interp_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_methods.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\test_util.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_datetimeindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_periodindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\copy_view\\index\\test_timedeltaindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_generic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_inference.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_can_hold_element.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_from_scalar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_ndarray.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_construct_object_arr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_dict_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_downcast.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_find_common_type.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_infer_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_infer_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_maybe_box_native.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\dtypes\\cast\\test_promote.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_arrow.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_extension.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_masked.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_sparse.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\test_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\array_with_attr\\test_array_with_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\decimal\\test_decimal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\json\\test_json.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\extension\\list\\test_list.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_alter_axes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_block_internals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_iteration.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_logical_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_nonunique_indexes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_npfuncs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_query_eval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_repr_info.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_stack_unstack.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_ufunc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_unary.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\test_validate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_dict.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\constructors\\test_from_records.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_coercion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_delitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_get.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_getitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_get_value.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_mask.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_set_value.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_where.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\indexing\\test_xs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_add_prefix_suffix.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_align.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_assign.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_at_time.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_between_time.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_clip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_combine_first.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_compare.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_convert_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_copy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_count.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_cov_corr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_describe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_diff.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dot.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_droplevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dropna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_drop_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_duplicated.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_explode.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_filter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_first_and_last.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_first_valid_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_get_numeric_data.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_head_tail.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_infer_objects.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_interpolate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isetitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_isin.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_is_homogeneous_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_iterrows.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_matmul.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_nlargest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pct_change.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pipe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_pop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rank.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reindex_like.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_rename_axis.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reorder_levels.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_reset_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_round.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sample.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_select_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_set_axis.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_set_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_size.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_sort_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_swapaxes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_swaplevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_csv.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_dict.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_dict_of_blocks.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_records.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_to_timestamp.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_transpose.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_truncate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_tz_convert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_tz_localize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_update.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\frame\\methods\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_duplicate_labels.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_finalize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_generic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_label_or_level_utils.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\generic\\test_to_xarray.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_any_all.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_apply_mutate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_bin_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_counting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_filters.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_function.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_dropna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_shift_diff.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_groupby_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_grouping.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_index_as_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_libgroupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_min_max.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_nth.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_nunique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_pipe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_raises.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_rank.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_sample.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_size.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_skew.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_timegrouper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_aggregate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_cython.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\aggregate\\test_other.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\groupby\\transform\\test_transform.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_any_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_engines.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_frozen.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_index_new.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_numpy_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_old_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_reshape.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\base_class\\test_where.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_category.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\categorical\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_drop_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_is_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_nat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_sort_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimelike_\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_date_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_delete.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_freq_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_misc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_npfuncs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_partial_slicing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_scalar_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\test_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_factorize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_isocalendar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_snap.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\datetimes\\methods\\test_to_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_interval_tree.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\interval\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_analytics.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_conversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_copy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_drop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_equivalence.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_level_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_get_set.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_integrity.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_isin.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_lexsort.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_names.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_partial_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_reshape.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_sorting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\multi\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_numeric.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\numeric\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\object\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_freq_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_partial_slicing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_period_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_resolution.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_scalar_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_searchsorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\test_tools.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_factorize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_is_full.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\period\\methods\\test_to_timestamp.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\ranges\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_delete.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_freq_attr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_scalar_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_searchsorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_setops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\test_timedelta_range.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_factorize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_insert.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexes\\timedeltas\\methods\\test_shift.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_at.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_chaining_and_caching.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_check_indexer.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_coercion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_floats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_iloc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_loc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_na_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_partial.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\test_scalar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\interval\\test_interval_new.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_chaining_and_caching.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_getitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_iloc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_indexing_slow.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_loc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_multiindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_partial.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_slice.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\indexing\\multiindex\\test_sorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_impl.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_spec_conformance.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\interchange\\test_utils.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_internals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\internals\\test_managers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_clipboard.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_compression.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_feather.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_fsspec.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_gcs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_html.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_orc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_parquet.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_pickle.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_s3.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_spss.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_sql.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_stata.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\test_user_agent.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odf.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_odswriter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_openpyxl.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_readers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_style.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_writers.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_xlrd.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\excel\\test_xlsxwriter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_console.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_css.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_eng_formatting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_format.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_info.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_printing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_series_info.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_csv.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_excel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_html.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_latex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_markdown.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\test_to_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_bar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_exceptions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_format.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_highlight.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_html.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_matplotlib.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_non_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_style.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_tooltip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_to_latex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\formats\\style\\test_to_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_compression.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_deprecated_kwargs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_json_table_schema.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_json_table_schema_ext_dtype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_normalize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_pandas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_readlines.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\json\\test_ujson.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_comment.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_compression.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_concatenate_chunks.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_converters.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_c_parser_only.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_dialect.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_encoding.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_header.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_index_col.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_mangle_dupes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_multi_thread.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_na_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_network.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_parse_dates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_python_parser_only.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_quoting.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_read_fwf.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_skiprows.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_textreader.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_unsupported.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\test_upcast.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_chunksize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_common_basic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_data_list.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_decimal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_file_buffer_url.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_float.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_inf.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_ints.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_iterator.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_read_errors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\common\\test_verbose.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_dtypes_basic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\dtypes\\test_empty.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_parse_dates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_strings.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\parser\\usecols\\test_usecols_basic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_compat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_complex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_errors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_file_handling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_keys.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_put.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_pytables_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_read.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_retain_attributes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_round_trip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_select.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_store.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\pytables\\test_time_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_byteswap.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_sas7bdat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\sas\\test_xport.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_to_xml.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\io\\xml\\test_xml_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_hashtable.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\libs\\test_lib.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_backend.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_boxplot_method.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_converter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_datetimelike.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_hist_method.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_misc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\test_style.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_color.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_legend.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_frame_subplots.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\plotting\\frame\\test_hist_box_by.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reductions\\test_stat_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_base.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_datetime_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_period_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resampler_grouper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_resample_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\resample\\test_time_grouper.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_crosstab.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_cut.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_from_dummies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_get_dummies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_melt.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_pivot_multilevel.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_qcut.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_union_categoricals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\test_util.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_append_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_categorical.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_concat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_dataframe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_datetimes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_empty.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_invalid.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_series.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\concat\\test_sort.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_join.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_cross.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_index_as_string.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_merge_ordered.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\reshape\\merge\\test_multi.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_nat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\test_na_scalar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_interval.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\interval\\test_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\period\\test_period.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timedelta\\test_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_comparisons.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_formats.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_rendering.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timestamp.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\scalar\\timestamp\\test_unary_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_arithmetic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_constructors.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_cumulative.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_iteration.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_logical_ops.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_missing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_npfuncs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_reductions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_repr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_subclass.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_ufunc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_unary.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\test_validate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_cat_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_dt_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_sparse_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\accessors\\test_str_accessor.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_delitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_get.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_getitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_indexing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_mask.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_setitem.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_set_value.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_take.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_where.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\indexing\\test_xs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_add_prefix_suffix.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_align.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_argsort.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_asof.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_astype.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_autocorr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_between.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_clip.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_combine.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_combine_first.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_compare.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_convert_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_copy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_count.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_cov_corr.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_describe.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_diff.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_drop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_dropna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_drop_duplicates.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_duplicated.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_equals.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_explode.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_fillna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_get_numeric_data.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_head_tail.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_infer_objects.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_interpolate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isin.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_isna.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_is_monotonic.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_is_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_item.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_map.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_matmul.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nlargest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_nunique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_pct_change.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_pop.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rank.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reindex_like.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rename.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_rename_axis.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_repeat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_reset_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_round.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_searchsorted.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_set_name.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_size.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_sort_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_sort_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_tolist.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_csv.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_dict.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_frame.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_to_numpy.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_truncate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_tz_localize.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_unique.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_unstack.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_update.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_values.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_value_counts.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\series\\methods\\test_view.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_case_justify.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_cat.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_extract.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_find_replace.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_get_dummies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_split_partition.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_strings.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\strings\\test_string_array.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_numeric.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_time.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tools\\test_to_timedelta.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_frequencies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_freq_code.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\frequencies\\test_inference.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_calendar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_federal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_holiday.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\holiday\\test_observance.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_day.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_hour.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_month.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_quarter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_business_year.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_common.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_day.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_hour.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_custom_business_month.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_dst.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_easter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_fiscal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_index.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_month.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_offsets_properties.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_quarter.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_ticks.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_week.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tseries\\offsets\\test_year.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_array_to_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_ccalendar.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_conversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_fields.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_libfrequencies.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_liboffsets.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_np_datetime.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parse_iso8601.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_parsing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_period_asfreq.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_resolution.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_timedeltas.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_timezones.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_to_offset.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\tslibs\\test_tzconversion.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_almost_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_attr_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_categorical_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_extension_array_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_frame_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_index_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_interval_array_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_numpy_array_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_produces_warning.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_assert_series_equal.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate_kwarg.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_deprecate_nonkeyword_arguments.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_doc.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_hashing.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_make_objects.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_rewrite_warning.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_safe_import.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_shares_memory.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_show_versions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_util.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_args.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_args_and_kwargs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_inclusive.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\util\\test_validate_kwargs.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_api.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_apply.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_base_indexer.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_cython_aggregations.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_dtypes.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_ewm.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_expanding.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_groupby.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_numba.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_online.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_pairwise.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_functions.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_quantile.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_rolling_skew_kurt.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_timeseries_window.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\test_win_type.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\conftest.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_ewm.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_expanding.py",
        ".venv\\Lib\\site-packages\\pandas\\tests\\window\\moments\\test_moments_consistency_rolling.py",
        ".venv\\Lib\\site-packages\\pandas\\util\\_tester.py",
        ".venv\\Lib\\site-packages\\pandas\\util\\_test_decorators.py",
        ".venv\\Lib\\site-packages\\pkg_resources\\_vendor\\pyparsing\\testing.py",
        ".venv\\Lib\\site-packages\\pygments\\lexers\\testing.py",
        ".venv\\Lib\\site-packages\\pyparsing\\testing.py",
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\testdrawings.py",
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\testshapes.py",
        ".venv\\Lib\\site-packages\\reportlab\\graphics\\barcode\\test.py",
        ".venv\\Lib\\site-packages\\reportlab\\lib\\testutils.py",
        ".venv\\Lib\\site-packages\\seaborn\\_testing.py",
        ".venv\\Lib\\site-packages\\setuptools\\command\\test.py",
        ".venv\\Lib\\site-packages\\setuptools\\_vendor\\pyparsing\\testing.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\plugin\\pytestplugin.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_cte.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_ddl.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_deprecations.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_dialect.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_insert.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_reflection.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_results.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_rowcount.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_select.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_sequence.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_types.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_unicode_ddl.py",
        ".venv\\Lib\\site-packages\\sqlalchemy\\testing\\suite\\test_update_delete.py",
        ".venv\\Lib\\site-packages\\werkzeug\\test.py",
        ".venv\\Lib\\site-packages\\werkzeug\\testapp.py",
        "app\\attestation_upload_service.py",
        "app\\local_attestation_service.py",
        "backup_security_20250728_134443\\app_code\\attestation_upload_service.py",
        "backup_security_20250728_134443\\app_code\\local_attestation_service.py",
        "backup_security_20250728_134443\\test_logs\\test_production_deployment.py"
      ],
      "action": "consolidate"
    },
    {
      "type": "debug_consolidation",
      "files": [
        "debug_500_error.py",
        "debug_csrf_detailed.py",
        "quick_debug_test.py",
        "test_debug_system.py",
        "test_login_form_debug.py",
        "wsgi_debug.py",
        ".venv\\Lib\\site-packages\\coverage\\debug.py",
        ".venv\\Lib\\site-packages\\flask\\debughelpers.py",
        ".venv\\Lib\\site-packages\\fontTools\\feaLib\\lookupDebugInfo.py",
        ".venv\\Lib\\site-packages\\gunicorn\\debug.py",
        ".venv\\Lib\\site-packages\\jinja2\\debug.py",
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\debug.py",
        ".venv\\Lib\\site-packages\\psycopg\\pq\\_debug.py",
        ".venv\\Lib\\site-packages\\setuptools\\_distutils\\debug.py",
        "app\\debug_blueprint.py",
        "app\\debug_blueprint_fixed.py",
        "app\\debug_system.py"
      ],
      "action": "consolidate"
    },
    {
      "type": "route_unification",
      "routes": {
        "/": [
          ".venv\\Lib\\site-packages\\flask\\ctx.py",
          ".venv\\Lib\\site-packages\\flask\\ctx.py",
          ".venv\\Lib\\site-packages\\flask\\ctx.py",
          ".venv\\Lib\\site-packages\\flask\\ctx.py",
          ".venv\\Lib\\site-packages\\flask\\scaffold.py",
          ".venv\\Lib\\site-packages\\flask\\scaffold.py",
          ".venv\\Lib\\site-packages\\flask\\scaffold.py",
          ".venv\\Lib\\site-packages\\flask\\scaffold.py",
          ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
          ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py",
          "app\\error_dashboard.py",
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\error_dashboard.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/stream": [
          ".venv\\Lib\\site-packages\\flask\\helpers.py",
          ".venv\\Lib\\site-packages\\flask\\helpers.py",
          ".venv\\Lib\\site-packages\\flask\\helpers.py",
          ".venv\\Lib\\site-packages\\flask\\helpers.py"
        ],
        "/uploads/<path:name>": [
          ".venv\\Lib\\site-packages\\flask\\helpers.py",
          ".venv\\Lib\\site-packages\\flask\\helpers.py"
        ],
        "...": [
          ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
          ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
          ".venv\\Lib\\site-packages\\flask_limiter\\extension.py",
          ".venv\\Lib\\site-packages\\flask_limiter\\extension.py"
        ],
        "/post": [
          ".venv\\Lib\\site-packages\\flask_login\\utils.py",
          ".venv\\Lib\\site-packages\\flask_login\\utils.py"
        ],
        "/some-view": [
          ".venv\\Lib\\site-packages\\flask_wtf\\csrf.py",
          ".venv\\Lib\\site-packages\\flask_wtf\\csrf.py"
        ],
        "/api/errors": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py"
        ],
        "/api/errors/clear": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py"
        ],
        "/api/stats": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py",
          "app\\error_dashboard.py",
          "backup_security_20250728_134443\\app_code\\error_dashboard.py"
        ],
        "/api/test-error": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py"
        ],
        "/logs": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py",
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/api/logs": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py"
        ],
        "/realtime": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py"
        ],
        "/api/realtime": [
          "app\\debug_blueprint.py",
          "app\\debug_blueprint_fixed.py"
        ],
        "/api/recent/<int:hours>": [
          "app\\error_dashboard.py",
          "backup_security_20250728_134443\\app_code\\error_dashboard.py"
        ],
        "/api/clear-logs": [
          "app\\error_dashboard.py",
          "backup_security_20250728_134443\\app_code\\error_dashboard.py"
        ],
        "/hour-bank": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-bank/users": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-bank/user/<int:user_id>": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-bank/adjust/<int:user_id>": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-bank/transfer": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/overtime-requests": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/overtime-request/<int:request_id>/approve": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-compensations": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-compensation/<int:compensation_id>/approve": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-bank/settings": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/hour-bank/reports": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/api/hour-bank/stats": [
          "app\\admin\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\hour_bank_routes.py"
        ],
        "/overtime-control": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/adjust-user-hours": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/api/users-with-balances": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/api/refresh-users-list": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/overtime-batch-process": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/overtime-analytics": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/overtime-settings": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/overtime-reports": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/user-overtime-summary/<int:user_id>": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/user-hours-history/<int:user_id>": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/edit-user-hours/<int:user_id>": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/update-user-hours/<int:user_id>": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/get_all_users_data": [
          "app\\admin\\overtime_admin.py",
          "backup_security_20250728_134443\\app_code\\admin\\overtime_admin.py"
        ],
        "/dashboard": [
          "app\\admin\\routes.py",
          "app\\admin\\backup\\routes.py",
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/usuarios": [
          "app\\admin\\routes.py",
          "app\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py"
        ],
        "/usuario/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/editar_usuario/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/criar_usuario": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/desativar_usuario/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/ativar_usuario/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/deletar_usuario/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/atestados": [
          "app\\admin\\routes.py",
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/atestado/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/aprovar_atestado/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/rejeitar_atestado/<int:id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/notificacoes": [
          "app\\admin\\routes.py",
          "app\\api\\routes.py",
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/relatorios": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/backup": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/backup-completo": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/backup-config": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/classes-trabalho": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/classes-trabalho/nova": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/classes-trabalho/<int:id>/editar": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/classes-trabalho/<int:id>/toggle-status": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/classes-trabalho/<int:id>/atribuir": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/classes-trabalho/<int:id>/usuarios": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/migrar_classes_padrao": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/registros-ponto": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/user-approvals": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/approve-user/<int:request_id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/user-approval-details/<int:request_id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/bulk-approve-users": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/attestation-management": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/sync-local-attestations": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/cleanup-orphaned-files": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/user-attestation-files/<int:user_id>": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/get-local-download-link": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/delete-local-file": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/test-local-connection": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/update-local-config": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/generate-local-auth-url": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/exchange-local-auth-code": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/update-shared-link": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/system-config": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/security-logs": [
          "app\\admin\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\routes.py"
        ],
        "/error-log": [
          "app\\admin\\backup\\error_log.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py"
        ],
        "/api/diagnosis": [
          "app\\admin\\backup\\error_log.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\error_log.py"
        ],
        "/debug": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/test-no-auth": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/test-simple": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/api/storage-info": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/api/list-backups": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/create": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/delete/<backup_name>": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/download/<backup_name>": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/delete-multiple": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/cleanup": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/auto-backup-config": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/trigger-auto-backup": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/settings": [
          "app\\admin\\backup\\routes.py",
          "backup_security_20250728_134443\\app_code\\admin\\backup\\routes.py"
        ],
        "/status": [
          "app\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py"
        ],
        "/registro_ponto": [
          "app\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py"
        ],
        "/meus_registros": [
          "app\\api\\routes.py",
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/marcar_notificacao_lida/<int:id>": [
          "app\\api\\routes.py",
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/estatisticas": [
          "app\\api\\routes.py",
          "backup_security_20250728_134443\\app_code\\api\\routes.py"
        ],
        "/login": [
          "app\\auth\\routes.py",
          "backup_security_20250728_134443\\app_code\\auth\\routes.py"
        ],
        "/logout": [
          "app\\auth\\routes.py",
          "backup_security_20250728_134443\\app_code\\auth\\routes.py"
        ],
        "/register": [
          "app\\auth\\routes.py",
          "backup_security_20250728_134443\\app_code\\auth\\routes.py"
        ],
        "/forgot_password": [
          "app\\auth\\routes.py",
          "backup_security_20250728_134443\\app_code\\auth\\routes.py"
        ],
        "/reset_password/<int:user_id>": [
          "app\\auth\\routes.py",
          "backup_security_20250728_134443\\app_code\\auth\\routes.py"
        ],
        "/manager": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/upload": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/download/<path:filename>": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/create-folder": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/delete/<path:filename>": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/move": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/rename": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/create-zip": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/info/<path:filename>": [
          "app\\files\\routes.py",
          "backup_security_20250728_134443\\app_code\\files\\routes.py"
        ],
        "/my-hour-bank": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/my-hour-bank/history": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/overtime-request": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/my-overtime-requests": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/overtime-request/<int:request_id>/cancel": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/request-compensation": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/my-compensations": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/compensation/<int:compensation_id>/cancel": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/my-hour-bank/settings": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/api/my-hour-bank/chart-data": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/api/overtime-quick-request": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/api/compensation-quick-request": [
          "app\\main\\hour_bank_routes.py",
          "backup_security_20250728_134443\\app_code\\main\\hour_bank_routes.py"
        ],
        "/health": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/api/notifications/recent": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/index": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/ponto": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/editar_registro/<int:id>": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/perfil": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/upload_atestado": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/download_atestado/<int:id>": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/cancelar_atestado/<int:id>": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/deletar_notificacao/<int:id>": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/marcar_todas_lidas": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/api/registrar_ponto": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/api/notificacoes_nao_lidas": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/privacy-policy": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/terms-of-service": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ],
        "/uploads/<path:filename>": [
          "app\\main\\routes.py",
          "backup_security_20250728_134443\\app_code\\main\\routes.py"
        ]
      },
      "action": "unify"
    },
    {
      "type": "template_deduplication",
      "templates": {
        "atestados.html": [
          "app\\templates\\admin\\atestados.html",
          "app\\templates\\main\\atestados.html"
        ],
        "dashboard.html": [
          "app\\templates\\admin\\dashboard.html",
          "app\\templates\\admin\\debug\\dashboard.html",
          "app\\templates\\main\\dashboard.html",
          "app\\templates\\main\\hour_bank\\dashboard.html"
        ],
        "logs.html": [
          "app\\templates\\admin\\logs.html",
          "app\\templates\\admin\\debug\\logs.html"
        ],
        "notificacoes.html": [
          "app\\templates\\admin\\notificacoes.html",
          "app\\templates\\main\\notificacoes.html"
        ]
      },
      "action": "deduplicate"
    }
  ]
}