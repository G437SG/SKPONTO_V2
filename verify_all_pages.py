#!/usr/bin/env python3
"""
Script para verificar se todas as p√°ginas est√£o funcionando corretamente
Testa n√£o apenas o status HTTP, mas tamb√©m se os templates est√£o sendo renderizados
"""

import requests
import time
from urllib.parse import urljoin

# Configura√ß√£o do servidor
BASE_URL = "http://127.0.0.1:5000"
TIMEOUT = 15

def test_page_detailed(url, method='GET', data=None, description=""):
    """Testa uma p√°gina detalhadamente"""
    try:
        if method == 'GET':
            response = requests.get(url, timeout=TIMEOUT, allow_redirects=True)
        elif method == 'POST':
            response = requests.post(url, data=data, timeout=TIMEOUT, allow_redirects=True)
        
        status = response.status_code
        content = response.text
        content_length = len(content)
        
        # Verificar se √© uma resposta v√°lida
        if status == 200:
            # Verificar se tem conte√∫do HTML v√°lido ou JSON v√°lido
            if content_length < 50:
                return False, status, f"‚ùå Conte√∫do muito pequeno ({content_length} chars)"
            elif content.strip().startswith('{') and content.strip().endswith('}'):
                # √â JSON (como API status)
                return True, status, f"‚úÖ OK - JSON v√°lido ({content_length} chars)"
            elif "<!DOCTYPE html>" not in content and "<html" not in content:
                return False, status, f"‚ùå N√£o √© HTML v√°lido"
            elif "Internal Server Error" in content:
                return False, status, f"‚ùå Erro interno no conte√∫do"
            elif "Template n√£o encontrado" in content or "TemplateNotFound" in content:
                return False, status, f"‚ùå Template n√£o encontrado"
            else:
                return True, status, f"‚úÖ OK - HTML v√°lido ({content_length} chars)"
        
        elif status in [302, 301]:
            location = response.history[0].headers.get('Location', 'N/A') if response.history else 'N/A'
            return True, status, f"‚úÖ Redirecionamento para: {location}"
        
        elif status == 404:
            return False, status, "‚ùå P√°gina n√£o encontrada"
        elif status == 403:
            return False, status, "‚ùå Acesso negado"
        elif status == 500:
            return False, status, "‚ùå Erro interno do servidor"
        else:
            return False, status, f"‚ùå Status HTTP {status}"
            
    except requests.exceptions.ConnectionError:
        return False, 0, "‚ùå Servidor n√£o conectado"
    except requests.exceptions.Timeout:
        return False, 0, "‚ùå Timeout"
    except Exception as e:
        return False, 0, f"‚ùå Erro: {str(e)[:50]}"

def main():
    print("üîç VERIFICA√á√ÉO DETALHADA DE TODAS AS P√ÅGINAS")
    print("=" * 70)
    
    # Lista completa de p√°ginas para testar
    pages = [
        # P√°ginas p√∫blicas
        ("/", "GET", "P√°gina inicial"),
        ("/login", "GET", "Login"),
        ("/register", "GET", "Registro"),
        
        # P√°ginas que requerem autentica√ß√£o (v√£o redirecionar para login)
        ("/dashboard", "GET", "Dashboard principal"),
        ("/profile", "GET", "Perfil do usu√°rio"),
        ("/settings", "GET", "Configura√ß√µes"),
        ("/notifications", "GET", "Notifica√ß√µes"),
        ("/overtime", "GET", "Horas extras"),
        ("/attestations", "GET", "Atestados"),
        ("/upload-attestation", "GET", "Upload de atestado"),
        
        # Relat√≥rios
        ("/reports", "GET", "Relat√≥rios"),
        ("/reports/monthly", "GET", "Relat√≥rio mensal"),
        ("/reports/attendance", "GET", "Relat√≥rio de presen√ßa"),
        
        # Admin (v√£o redirecionar para login)
        ("/admin", "GET", "Painel admin"),
        ("/admin/users", "GET", "Usu√°rios admin"),
        ("/admin/system", "GET", "Sistema admin"),
        ("/admin/reports", "GET", "Relat√≥rios admin"),
        
        # API endpoints
        ("/api/status", "GET", "Status da API"),
        
        # P√°ginas de erro e recovery
        ("/forgot-password", "GET", "Esqueci a senha"),
        
        # Exports (v√£o redirecionar)
        ("/export/pdf", "GET", "Export PDF"),
        ("/export/excel", "GET", "Export Excel"),
    ]
    
    success_count = 0
    total_count = len(pages)
    results = []
    
    print(f"üß™ Testando {total_count} p√°ginas...\n")
    
    for route, method, description in pages:
        url = urljoin(BASE_URL, route)
        success, status, message = test_page_detailed(url, method, description=description)
        
        results.append({
            'route': route,
            'method': method,
            'description': description,
            'success': success,
            'status': status,
            'message': message
        })
        
        if success:
            success_count += 1
        
        print(f"{message} [{status}] {method} {route} - {description}")
        time.sleep(0.2)  # Pausa entre requests
    
    print("\n" + "=" * 70)
    print("üìä RESULTADO DA VERIFICA√á√ÉO:")
    print(f"‚úÖ P√°ginas funcionando: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
    print(f"‚ùå P√°ginas com problemas: {total_count - success_count}/{total_count}")
    
    # P√°ginas com problemas
    failed_pages = [r for r in results if not r['success']]
    if failed_pages:
        print(f"\nüö® P√ÅGINAS COM PROBLEMAS ({len(failed_pages)}):")
        for page in failed_pages:
            print(f"   {page['message']} [{page['status']}] {page['route']}")
    
    # P√°ginas funcionando
    working_pages = [r for r in results if r['success']]
    if working_pages:
        print(f"\n‚úÖ P√ÅGINAS FUNCIONANDO ({len(working_pages)}):")
        for page in working_pages:
            print(f"   ‚úÖ [{page['status']}] {page['route']} - {page['description']}")
    
    print("\nüéØ AVALIA√á√ÉO GERAL:")
    if success_count == total_count:
        print("   üöÄ PERFEITO! Todas as p√°ginas est√£o funcionando!")
        print("   üéâ Sistema 100% operacional!")
    elif success_count >= total_count * 0.9:
        print("   üëç EXCELENTE! Quase todas as p√°ginas funcionando!")
        print("   üîß Apenas pequenos ajustes necess√°rios")
    elif success_count >= total_count * 0.7:
        print("   ‚ö†Ô∏è BOM! Maioria das p√°ginas funcionando")
        print("   üõ†Ô∏è Algumas corre√ß√µes necess√°rias")
    else:
        print("   üö® ATEN√á√ÉO! Muitas p√°ginas com problemas")
        print("   üî® Revis√£o geral necess√°ria")
    
    # Teste adicional - verificar se templates base existem
    print(f"\nüîç VERIFICA√á√ÉO DE TEMPLATES BASE:")
    base_templates = [
        "app/templates/base.html",
        "app/templates/auth/login.html", 
        "app/templates/main/dashboard.html",
        "app/templates/admin/dashboard.html"
    ]
    
    import os
    for template in base_templates:
        if os.path.exists(template):
            print(f"   ‚úÖ {template}")
        else:
            print(f"   ‚ùå {template} - N√ÉO ENCONTRADO")

if __name__ == "__main__":
    main()
